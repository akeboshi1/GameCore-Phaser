import version from "./version";
export { version };
export declare class Launcher {
    get config(): {
        api_root: any;
        auth_token: any;
        token_expire: any;
        token_fingerprint: any;
        user_id: any;
        server_addr: any;
        game_id: any;
        virtual_world_id: any;
        world_id: any;
        width: number;
        height: number;
        keyboardHeight: number;
        screenWidth: number;
        screenHeight: number;
        baseWidth: number;
        baseHeight: number;
        ui_scale: any;
        hasConnectFail: boolean;
        hasCloseGame: boolean;
        hasGameCreated: boolean;
        hasGameLoaded: boolean;
        hasReload: boolean;
        closeGame: any;
        connectFail: any;
        gameLoaded: any;
        reload: any;
        game_created: any;
        platform: string;
    };
    static start(config?: any): Launcher;
    static DeserializeNode(buffer: any): void;
    static startElementEditor(config: any): void;
    readonly minWidth = 1280;
    readonly minHeight = 720;
    readonly maxWidth = 1920;
    readonly maxHeight = 1080;
    readonly keyboardHeight = 256;
    private world;
    private intervalId;
    private mReload;
    private mCompleteFunc;
    private mConfig;
    constructor(config?: any);
    pauseGame(): void;
    resumeGame(): void;
    keyboardDidShow(height: number): void;
    keyboardDidHide(height: number): void;
    hidden(): void;
    visibilitychange(state: string): void;
    enableClick(): void;
    disableClick(): void;
    startFullscreen(): void;
    stopFullscreen(): void;
    setGameConfig(config: any): void;
    updatePalette(palette: any): void;
    restart(config?: any, callBack?: Function): void;
    updateMoss(moss: any): void;
    registerReload(func: Function): void;
    registerComplete(func: Function): void;
    onResize(width: number, height: number, ui_scale?: number): void;
    onOrientationChange(orientation: number, width: number, height: number): void;
    destroy(): Promise<void>;
}
