import { AnimationQueue, Animator, AvatarSuit, IAvatar, ISprite, RunningAnimation } from "structure";
import { EventDispatcher, IPos, LogicPoint } from "utils";
import { op_def, op_gameconfig, op_client, op_gameconfig_01 } from "pixelpai_proto";
import { DragonbonesModel } from "./dragonbones.model";
import { FramesModel } from "./frames.model";
export declare class Sprite extends EventDispatcher implements ISprite {
    id: number;
    pos: IPos;
    titleMask: number;
    avatar: IAvatar;
    currentAnimationName: string;
    direction: number;
    bindID: number;
    sn: string;
    alpha: number;
    nickname: string;
    displayBadgeCards: op_def.IBadgeCard[];
    package: op_gameconfig.IPackage;
    sceneId: number;
    uuid: number;
    platformId: string;
    displayInfo: FramesModel | DragonbonesModel;
    nodeType: op_def.NodeType;
    currentAnimation: RunningAnimation;
    currentCollisionArea: number[][];
    currentWalkableArea: number[][];
    currentCollisionPoint: LogicPoint;
    version: string;
    isMoss: boolean;
    registerAnimation: Map<string, string>;
    originWalkPoint: LogicPoint;
    originCollisionPoint: LogicPoint;
    attrs: op_def.IStrPair[];
    suits: AvatarSuit[];
    animationQueue: AnimationQueue[];
    mountSprites: number[];
    speed: number;
    interactive: op_def.IPBPoint2f[];
    animator?: Animator;
    updateSuits: boolean;
    layer: number;
    constructor(obj: op_client.ISprite, nodeType?: op_def.NodeType);
    clear(): void;
    toSprite(): op_client.ISprite;
    showNickName(): boolean;
    showBadge(): boolean;
    newID(): void;
    setPosition(x: number, y: number): void;
    turn(): any;
    updateAvatarSuits(suits: AvatarSuit[]): boolean;
    updateAvatar(avatar: op_gameconfig.IAvatar | IAvatar): void;
    setTempAvatar(avatar: IAvatar): void;
    getAvatarSuits(attrs: op_def.IStrPair[]): AvatarSuit[];
    updateAttr(attrs: op_def.IStrPair[]): void;
    updateDisplay(display: op_gameconfig.IDisplay, animations: op_gameconfig_01.IAnimationData[], defAnimation?: string): void;
    setAnimationQueue(queue: AnimationQueue[]): void;
    setMountSprites(ids: number[]): void;
    setAnimationName(name: string, times?: number): RunningAnimation;
    setDirection(val: number): void;
    setDisplayInfo(displayInfo: FramesModel | DragonbonesModel): void;
    get hasInteractive(): boolean;
    getInteractive(): op_def.IPBPoint2i[];
    setOriginCollisionPoint(value: number[] | null): void;
    setOriginWalkPoint(value: number[] | null): void;
    getCollisionArea(): number[][];
    getWalkableArea(): number[][];
    getOriginPoint(): LogicPoint;
    registerAnimationMap(key: string, value: string): void;
    unregisterAnimationMap(key: string): void;
    private setAnimationData;
    private checkDirectionAnimation;
    private setArea;
    private dirable;
    private tryRegisterAnimation;
    private getBaseAniName;
}
