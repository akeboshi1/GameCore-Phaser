import { AnimationModel, IAnimationData, IDisplay, IFramesModel, RunningAnimation } from "structure";
import { Direction, LogicPoint } from "utils";
import { op_def, op_gameconfig, op_gameconfig_01 } from "pixelpai_proto";
import { Sprite } from "./sprite";
export declare class FramesModel implements IFramesModel {
    static createFromDisplay(display: any, animation: any, id?: number): {
        animations: Map<any, any>;
        id: number;
        gene: any;
        discriminator: string;
        animationName: any;
        display: any;
    };
    avatarDir?: number;
    readonly discriminator: string;
    id: number;
    type: string;
    eventName: number[];
    display: IDisplay | null;
    animations: Map<string, AnimationModel>;
    animationName: string;
    package: op_gameconfig.IPackage;
    shops: op_gameconfig.IShop[];
    gene: string;
    constructor(data: any);
    setInfo(val: any): void;
    getAnimationData(): Map<string, IAnimationData>;
    existAnimation(aniName: string): boolean;
    getAnimations(name: string): IAnimationData;
    destroy(): void;
    createProtocolObject(): op_gameconfig_01.IAnimationData[];
    getCollisionArea(aniName: string, flip?: boolean): number[][];
    getWalkableArea(aniName: string, flip?: boolean): number[][];
    getInteractiveArea(aniName: string, flip?: boolean): op_def.IPBPoint2i[] | undefined;
    getOriginPoint(aniName: any, flip?: boolean): LogicPoint;
    getDirable(): void;
    createSprite(properties: {
        nodeType: op_def.NodeType;
        x: number;
        y: number;
        z?: number;
        id?: number;
        dir?: number;
        isMoss?: boolean;
        layer?: number;
    }): Sprite;
    findAnimation(baseName: string, dir: number): RunningAnimation;
    checkDirectionAnimation(baseAniName: string, dir: Direction): string;
    checkDirectionByExistAnimations(baseAniName: string, dir: number): number;
    private setDisplay;
    private setAnimationData;
    private getDefaultAnimation;
}
