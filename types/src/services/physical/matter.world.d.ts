import { Body, Engine, World } from "tooqingmatter-js";
import { PhysicalPeer } from "../../services/physical.worker";
import { ISizeChart } from "structure";
import { ChatCommandInterface, IPos, IPosition45Obj } from "utils";
import { MatterObject } from "./matter.object";
import { MatterUserObject } from "./matter.user.object";
export declare class MatterWorld implements ChatCommandInterface, ISizeChart {
    peer: PhysicalPeer;
    readonly engine: Engine;
    readonly localWorld: World;
    enabled: boolean;
    autoUpdate: boolean;
    matterUser: MatterUserObject;
    private mAstar;
    private drawBodies;
    private ignoreSensors?;
    private mSize;
    private mMiniSize;
    constructor(peer: PhysicalPeer);
    clear(): void;
    initAstar(map: any): void;
    set size(size: IPosition45Obj);
    get size(): IPosition45Obj;
    set miniSize(size: IPosition45Obj);
    get miniSize(): IPosition45Obj;
    update(): void;
    setUser(user: MatterUserObject): void;
    findPath(targets: IPos[], targetId?: number, toReverse?: boolean): void;
    getPath(startPos: IPos, targets: IPos[], toReverse?: boolean): IPos[];
    setSensor(body: Body, val: boolean): void;
    debugEnable(): void;
    debugDisable(): void;
    add(body: Body | Body[], ignoreSensor?: boolean, ele?: MatterObject): void;
    remove(object: any, deep?: boolean): void;
    drawWall(): Promise<void>;
    isWalkableAt(x: number, y: number): any;
    setWalkableAt(x: number, y: number, val: boolean): void;
    v(): void;
    q(): void;
    private renderWireframes;
}
