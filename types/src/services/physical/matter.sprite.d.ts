import { IDragonbonesModel, IFramesModel, RunningAnimation, AnimationQueue, Animator } from "structure";
import { Direction, IPos, LogicPoint } from "utils";
import { op_def, op_gameconfig_01 } from "pixelpai_proto";
import { IPoint } from "game-capsule";
export declare class MatterSprite {
    id: number;
    pos: IPos;
    speed: number;
    direction: number;
    currentAnimationName: string;
    currentAnimation: RunningAnimation;
    animations: Map<string, MatterAnimationModel>;
    registerAnimation: Map<string, string>;
    animationQueue: AnimationQueue[];
    originCollisionPoint: LogicPoint;
    mountSprites: number[];
    animator: Animator;
    eventName: number[];
    sprite: any;
    protected currentCollisionArea: number[][];
    protected currentWalkableArea: number[][];
    protected currentCollisionPoint: LogicPoint;
    protected originWalkPoint: LogicPoint;
    protected interactive: op_def.IPBPoint2f[];
    constructor(obj: any);
    initAnimations(anis: any): void;
    setPosition(x: number, y: number): void;
    updateAnimations(anis: op_gameconfig_01.IAnimationData[]): void;
    setDirection(val: number): void;
    setDisplayInfo(displayInfo: IFramesModel | IDragonbonesModel): void;
    get hasInteractive(): boolean;
    getInteractiveArea(aniName: string, flip?: boolean): op_def.IPBPoint2i[] | undefined;
    getInteractive(): op_def.IPBPoint2i[];
    setOriginCollisionPoint(value: number[] | null): void;
    setOriginWalkPoint(value: number[] | null): void;
    getCollisionArea(): any[][];
    getAnimations(name: string): IMatterAnimationData;
    getWalkableArea(): any[][];
    getOriginPoint(): LogicPoint;
    findDragonBonesAnimation(baseName: string, dir: Direction): RunningAnimation;
    findFramesAnimation(baseName: string, dir: number): RunningAnimation;
    setAnimationName(name: string, playTimes?: number): RunningAnimation;
    private setAnimationData;
    private setAnimationModelData;
    private setArea;
}
export interface IMatterAnimationData {
    name: string;
    frameName: string[];
    frameRate: number;
    loop: boolean;
    baseLoc: LogicPoint;
    collisionArea?: number[][];
    walkableArea?: number[][];
    originPoint: LogicPoint;
    layer: op_gameconfig_01.IAnimationLayer[];
    interactiveArea?: op_def.IPBPoint2i[];
    mountLayer: op_gameconfig_01.IAnimationMountLayer;
}
export declare class MatterAnimationModel implements IMatterAnimationData {
    id: number;
    name: string;
    frameName: string[];
    frameRate: number;
    loop: boolean;
    baseLoc: LogicPoint;
    collisionArea?: number[][];
    walkableArea?: number[][];
    originPoint: LogicPoint;
    layer: op_gameconfig_01.IAnimationLayer[];
    interactiveArea: IPoint[];
    mountLayer: op_gameconfig_01.IAnimationMountLayer;
    protected mNode: op_gameconfig_01.INode;
    constructor(ani: any);
    changeLayer(layer: any[]): void;
    createProtocolObject(): op_gameconfig_01.IAnimationData;
    private stringToArray;
    private arrayToString;
}
