import { ConnectionService } from "lib/net/connection.service";
import { PacketHandler } from "net-socket-packet";
import { op_client } from "pixelpai_proto";
import { ElementStateType, ISprite } from "structure";
import { IRoomService } from "../room";
import { Element, IElement } from "./element";
export declare class ElementStateManager extends PacketHandler {
    protected mRoom: IRoomService;
    protected mElements: Map<string, Map<number, Element>>;
    protected mRepairMap: Map<number, boolean>;
    constructor(mRoom: IRoomService);
    addLisenter(): void;
    removeLisenter(): void;
    get(id: number, type?: ElementStateType): Element;
    remove(id: number, type?: ElementStateType): IElement;
    getElements(type?: ElementStateType): IElement[];
    add(elements: Element[]): void;
    syncElement(elements: Element[]): void;
    isLocked(element: IElement): boolean;
    destroy(): void;
    update(time: number, delta: number): void;
    get connection(): ConnectionService;
    protected getMap(type: ElementStateType): Map<any, any>;
    protected getElementStateType(element: IElement): ElementStateType.NONE | ElementStateType.UNFROZEN;
    protected checkElementHeadState(): void;
    protected checkElementUnfrozenState(): void;
    protected onElementUnfrozenStateHandler(maps: Map<string, op_client.ICountablePackageItem[]>): void;
    protected getElementsBySN(type: ElementStateType, sn: string): Element[];
    get roomService(): IRoomService;
    protected getFrozenType(sprite: ISprite): any;
}
