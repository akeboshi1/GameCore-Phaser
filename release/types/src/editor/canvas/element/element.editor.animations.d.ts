/// <reference types="phaser" />
import { ResourcesChangeListener } from "./element.editor.resource.manager";
import ElementEditorGrids from "./element.editor.grids";
export declare const LOCAL_HOME_PATH: string;
export default class ElementEditorAnimations extends Phaser.GameObjects.Container implements ResourcesChangeListener {
    private readonly MOUNT_ARMATURE_KEY;
    private readonly MOUNT_DRAGONBONES_KEY;
    private readonly MOUNT_ANIMATION_TIME_SCALE;
    private mGrids;
    private mEmitter;
    private mDisplays;
    private mSelectedGameObjects;
    private mAnimationData;
    private mMountArmatureParent;
    private mMountArmatures;
    private mDragonBonesLoaded;
    private mCurFrameIdx;
    private mPlaying;
    private mInteractive;
    private mMountAnimationTimer;
    constructor(scene: Phaser.Scene, node: any, grids: ElementEditorGrids, emitter: Phaser.Events.EventEmitter);
    setAnimationData(data: any): void;
    onResourcesLoaded(): void;
    onResourcesCleared(): void;
    setFrame(frameIdx: number): void;
    setMountAnimation(aniName: string, idx?: number): void;
    updateMountDisplay(): void;
    setPlay(playing: boolean): void;
    setInputEnabled(val: boolean): void;
    setSelectedAnimationLayer(idxs: number[]): void;
    setSelectedMountLayer(mountPointIndex?: number): void;
    updateDepth(): void;
    updatePerAnimationLayerVisible(idx: number): void;
    updateAnimationLayer(): void;
    updateOffsetLoc(idx: number): void;
    generateThumbnail(): Promise<string>;
    clear(): void;
    clearDisplays(): void;
    private loadMountDragonBones;
    private dragonBoneLoaded;
    private createMountDisplay;
    private keyboardEvent;
    private onDragStartHandler;
    private onDragHandler;
    private onDragEndHandler;
    private syncPositionData;
    private createDisplays;
    private createDisplay;
    private updatePlay;
    private onMountTimerEvent;
    private makeAnimation;
    private setSelectedGameObjects;
    private getMaskValue;
    private generateFrameSumb;
    private updateInputEnabled;
    private updatePerInputEnabled;
    private updateChildrenIdxByDepth;
    private cleatArmatureUnusedSlots;
}
