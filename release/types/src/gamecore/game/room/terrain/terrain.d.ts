import { BlockObject } from "../block/block.object";
import { IElement, MoveData } from "../element/element";
import { IElementManager } from "../element/element.manager";
import { op_client } from "pixelpai_proto";
import { IRoomService } from "../room";
import { IFramesModel, IPos, ISprite } from "structure";
export declare class Terrain extends BlockObject implements IElement {
    protected mElementManager: IElementManager;
    protected mId: number;
    protected mDisplayInfo: IFramesModel;
    protected mModel: ISprite;
    protected mCreatedDisplay: boolean;
    private mMoveData;
    private mState;
    constructor(sprite: ISprite, mElementManager: IElementManager);
    get state(): boolean;
    set state(val: boolean);
    get moveData(): MoveData;
    startMove(): void;
    stopMove(): void;
    startFireMove(pos: IPos): void;
    addToWalkableMap(): void;
    removeFromWalkableMap(): void;
    setModel(val: ISprite): Promise<void>;
    updateModel(val: op_client.ISprite): void;
    load(displayInfo: IFramesModel): void;
    play(animationName: string): void;
    setDirection(val: number): void;
    getDirection(): number;
    setPosition(p: IPos): void;
    showNickname(): void;
    hideNickname(): void;
    showRefernceArea(): void;
    hideRefernceArea(): void;
    showEffected(): void;
    turn(): void;
    setAlpha(val: number): void;
    scaleTween(): void;
    setQueue(): void;
    completeAnimationQueue(): void;
    update(): void;
    mount(): this;
    unmount(): Promise<this>;
    addMount(): this;
    removeMount(): Promise<void>;
    getInteractivePositionList(): Promise<any[]>;
    destroy(): void;
    protected createDisplay(): Promise<any>;
    protected addDisplay(): Promise<any>;
    protected setDepth(): void;
    private setPosition45;
    get id(): number;
    get dir(): number;
    get roomService(): IRoomService;
    get model(): ISprite;
    set model(val: ISprite);
    get currentAnimationName(): string;
    get created(): boolean;
}
