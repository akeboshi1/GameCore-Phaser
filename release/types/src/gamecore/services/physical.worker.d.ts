import { RPCPeer } from "webworker-rpc";
import { IMatterObject } from "./physical/matter.object";
import { MatterWorld } from "./physical/matter.world";
import { EventDispatcher, IPos, IWorkerParam } from "structure";
export declare class PhysicalPeer extends RPCPeer {
    scaleRatio: number;
    protected currentTime: number;
    protected mWorkerLoop: any;
    protected mEmitter: EventDispatcher;
    protected mRenderParam: IWorkerParam;
    protected mMainPeerParam: IWorkerParam;
    protected mPhysicalPeerParam: IWorkerParam;
    private matterWorld;
    private matterObjectMap;
    private isDestroy;
    constructor(workerName: string);
    get world(): MatterWorld;
    get emitter(): EventDispatcher;
    getMatterObj(id: number): IMatterObject;
    run(): Promise<any>;
    update(): Promise<void>;
    get physicalPeerParam(): IWorkerParam;
    get mainPeerParam(): IWorkerParam;
    get renderParam(): IWorkerParam;
    get mainPeer(): any;
    get render(): any;
    start(): void;
    renderEmitter(eventType: string, data?: any): void;
    initAstar(map: any): void;
    setRoomSize(size: any): void;
    setMiniRoomSize(size: any): void;
    setScaleRatio(scaleRatio: number): void;
    createMatterWorld(): void;
    destroyMatterWorld(): void;
    startMove(): void;
    stopMove(x: any, y: any): void;
    debugEnable(): void;
    debugDisable(): void;
    moveMotion(worldX: number, worldY: number, id?: number): void;
    findPath(targets: [], targetId?: number, toReverse?: boolean): void;
    getPath(startPos: IPos, targetPosList: IPos[], toReverse: boolean): IPos[];
    isWalkableAt(x: number, y: number): any;
    setWalkableAt(x: number, y: number, val: boolean): void;
    updateModel(model: any): void;
    updateAnimations(displayInfo: any): void;
    createMatterObject(id: any): void;
    createMatterUserObject(id: any): void;
    getInteractivePosition(id: number): Promise<IPos[]>;
    changePlayerState(id: number, state: string, times?: number): void;
    move(id: number, path?: any): void;
    setModel(sprite: any): void;
    applyForce(id: number, force: any): void;
    setVelocityX(id: number): void;
    setVelocityY(id: number): void;
    setVelocity(id: number, x: number, y: number): void;
    setBaseVelocity(id: number, x: number, y: number): void;
    setOffset(id: number, val: any): void;
    setPosition(id: number, x: number, y: number, z?: number): void;
    destroyMatterObject(id: number): void;
    setBody(id: number): void;
    addBody(id: number, sensor?: boolean): void;
    removeBody(id: number): void;
    changeAnimation(id: number, animationName: string, times?: number): void;
    setVertices(id: number, vertexSets: any): void;
    addMount(): void;
    setSensor(id: number, boo: boolean): void;
    positionPrev(id: number): any;
    position(id: number): any;
    createBodyFromVertices(id: number, x: number, y: number, paths: any, addToWorld?: boolean, sensor?: boolean, param?: any): void;
    destroy(): void;
}
