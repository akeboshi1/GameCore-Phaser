/// <reference types="tooqingphaser" />
import { ValueResolver, DisplayField, IDragonbonesModel, IFramesModel, RunningAnimation, Handler, IProjection, LogicPos } from "structure";
import { ISortObject } from "./sort.object";
export interface IBaseDisplay {
    displayInfo: IDragonbonesModel | IFramesModel | undefined;
    direction: number;
    x: number;
    y: number;
    z: number;
    visible: boolean;
    load(data: IDragonbonesModel | IFramesModel, field?: DisplayField): Promise<any>;
    displayCreated(): any;
    play(animation: RunningAnimation): any;
    changeAlpha(val: number): any;
    getPosition(): LogicPos;
    setRootMount(gameObject: Phaser.GameObjects.Container): any;
    fadeIn(callback?: () => void): any;
    fadeOut(callback?: () => void): any;
    getSprite(key: DisplayField): any;
    destroy(fromScene?: boolean): any;
    setDepth(value: integer): any;
    setPosition(x?: number, y?: number, z?: number, w?: number): any;
    once(event: string | symbol, fn: Function, context?: any): any;
    setInteractive(shape?: Phaser.Types.Input.InputConfiguration | any, callback?: Phaser.Types.Input.HitAreaCallback, dropZone?: boolean): any;
    disableInteractive(): any;
}
export declare abstract class BaseDisplay extends Phaser.GameObjects.Container implements IBaseDisplay, ISortObject {
    createdHandler: Handler;
    protected mAlpha: number;
    protected mDirection: number;
    protected mDisplayInfo: IDragonbonesModel | IFramesModel | undefined;
    protected mAnimation: RunningAnimation;
    protected mRootMount: BaseDisplay;
    protected mMountList: Map<number, Phaser.GameObjects.Container>;
    protected moveData: any;
    protected mCreated: boolean;
    protected mSprites: Map<DisplayField, Phaser.GameObjects.Sprite | Phaser.GameObjects.Image | Phaser.GameObjects.Container>;
    protected mLoadDisplayPromise: ValueResolver<any>;
    protected mProjectionSize: IProjection;
    protected mSortX: number;
    protected mSortY: number;
    protected mID: number;
    protected mHasInteractive: boolean;
    constructor(scene: Phaser.Scene, id?: number);
    destroy(fromScene?: boolean): void;
    load(data: IDragonbonesModel | IFramesModel): Promise<any>;
    displayCreated(): void;
    get created(): boolean;
    set direction(dir: number);
    get direction(): number;
    get displayInfo(): IDragonbonesModel | IFramesModel | undefined;
    set displayInfo(data: IDragonbonesModel | IFramesModel);
    play(animation: RunningAnimation): void;
    changeAlpha(val: number): void;
    setDirection(dir: number): void;
    setPosition(x?: number, y?: number, z?: number, w?: number): this;
    update(): void;
    getPosition(): LogicPos;
    setRootMount(gameObject: BaseDisplay): void;
    mount(display: Phaser.GameObjects.Container, index?: number): void;
    unmount(display: Phaser.GameObjects.Container): void;
    destroyMount(): void;
    fadeIn(callback?: () => void): void;
    fadeOut(callback?: () => void): void;
    getSprite(key: DisplayField): Phaser.GameObjects.Container | Phaser.GameObjects.Image | Phaser.GameObjects.Sprite;
    getScene(): Phaser.Scene;
    protected updateSort(): void;
    get runningAnimation(): RunningAnimation;
    get rootMount(): BaseDisplay;
    get projectionSize(): IProjection;
    get sortX(): number;
    get sortY(): number;
    get sortZ(): number;
    get id(): number;
    get hasInteractive(): boolean;
    set hasInteractive(val: boolean);
}
