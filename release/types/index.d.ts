// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../net-socket-packet
//   ../../pixelpai_proto
//   ../../game-capsule
//   ../../game-capsule/lib/configobjects/scene
//   ../../phaser
//   ../../game-capsule/lib/helpers
//   ../../tooqingui
//   ../../events
//   ../../buffer

declare module 'game-core' {
    export * from "game-core/game";
    export * from "game-core/utils";
    export * from "game-core/rooms";
    export * from "game-core/plugins";
    export { GameMain, ILauncherConfig } from "game-core/launcher";
    export { HandlerDispatcher } from "game-core/Handler/HandlerDispatcher";
}

declare module 'game-core/game' {
    export { WorldService } from "game-core/game/world.service";
    export { World } from "game-core/game/world";
}

declare module 'game-core/utils' {
    export { Pos } from "game-core/utils/pos";
    export { Tool } from "game-core/utils/tool";
    export { IPosition45Obj, Position45 } from "game-core/utils/position45";
    export { log, error, Logger } from "game-core/utils/log";
    export { Size } from "game-core/utils/size";
    export { load, checkIsFriend } from "game-core/utils/http";
    export { Url, ResUtils, BlackButton, BlueButton, WhiteButton, CloseButton, Background, Border, TransparentButton, Coin } from "game-core/utils/resUtil";
    export { Algorithm } from "game-core/utils/algorithm";
    export { isMobile } from "game-core/utils/device";
    export { Font } from "game-core/utils/font";
    export { Rectangle45 } from "game-core/utils/rectangle45";
    export { SortRectangle } from "game-core/utils/sort.rectangle";
}

declare module 'game-core/rooms' {
    export { IRoomService, SpriteAddCompletedListener } from "game-core/rooms/room";
    export * from "game-core/rooms/sky.box";
    export { Clock } from "game-core/rooms/clock";
    export { IRoomManager, RoomManager } from "game-core/rooms/room.manager";
    export * from "game-core/rooms/terrain";
    export * from "game-core/rooms/element";
    export * from "game-core/rooms/player";
    export { WallManager } from "game-core/rooms/wall/wall.manager";
    export { LayerManager } from "game-core/rooms/layer/layer.manager";
    export * from "game-core/rooms/display";
    export { GroupManager, GroupType } from "game-core/rooms/group/GroupManager";
    export { IGroup } from "game-core/rooms/group/IGroup";
}

declare module 'game-core/plugins' {
    export { BasicPlugin } from "game-core/plugins/basic.plugin";
    export { PluginManager } from "game-core/plugins/plugin.manager";
}

declare module 'game-core/launcher' {
    export interface ILauncherConfig {
        auth_token: string;
        token_expire: string | null;
        token_fingerprint: string;
        server_addr: any | undefined;
        game_id: string;
        virtual_world_id: string;
        ui_scale?: number;
        devicePixelRatio?: number;
        scale_ratio?: number;
        platform?: string;
        width: number;
        height: number;
        modulePath?: string;
        readonly screenWidth: number;
        readonly screenHeight: number;
        readonly baseWidth: number;
        readonly baseHeight: number;
        readonly game_created?: Function;
        readonly connection?: any;
        readonly isEditor?: boolean;
        readonly osd?: string;
        readonly closeGame: Function;
        readonly parent?: string;
    }
    export interface GameMain {
        resize(newWidth: any, newHeight: any): any;
        onOrientationChange(oriation: number, newWidth: number, newHeight: number): any;
        scaleChange(scale: number): any;
        enableClick(): any;
        disableClick(): any;
        startFullscreen(): void;
        stopFullscreen(): void;
        createGame(): void;
        setGameConfig(config: any): void;
        updatePalette(palette: any): void;
        updateMoss(moss: any): void;
        destroy(): void;
    }
    export class Launcher {
        get config(): ILauncherConfig;
        static start(config?: ILauncherConfig): Launcher;
        static DeserializeNode(buffer: any): void;
        static startElementEditor(config: any): void;
        readonly minWidth = 1280;
        readonly minHeight = 720;
        readonly maxWidth = 1920;
        readonly maxHeight = 1080;
        constructor(config?: ILauncherConfig);
        enableClick(): void;
        disableClick(): void;
        startFullscreen(): void;
        stopFullscreen(): void;
        setGameConfig(config: any): void;
        updatePalette(palette: any): void;
        updateMoss(moss: any): void;
        registerReload(func: Function): void;
        registerComplete(func: Function): void;
        onResize(width: number, height: number, ui_scale?: number): void;
        onOrientationChange(orientation: number, width: number, height: number): void;
        destroy(): void;
    }
}

declare module 'game-core/Handler/HandlerDispatcher' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    export class HandlerDispatcher implements IDispose {
        hasListener(type: string): Boolean;
        emitter(type: string, data?: any): Boolean;
        on(type: string, caller: any, listener: Function, args?: any[]): HandlerDispatcher;
        once(type: string, caller: any, listener: Function, args?: any[]): HandlerDispatcher;
        off(type: string, caller: any, listener: Function, onceOnly?: Boolean): HandlerDispatcher;
        offAll(type?: string): HandlerDispatcher;
        destroy(): void;
    }
}

declare module 'game-core/game/world.service' {
    import { IRoomManager, IRoomService, Clock } from "game-core/rooms";
    import { Size } from "game-core/utils";
    import { UiManager } from "game-core/ui";
    import { InputManager } from "game-core/game/input.service";
    import { Account } from "game-core/game/account";
    import { HttpService } from "game-core/net";
    import { MouseManager } from "game-core/game/mouse.manager";
    import { ConnectionService } from "game-core/net";
    import { ISoundConfig } from "game-core/game/sound.manager";
    import { PluginManager } from "game-core/plugins";
    export interface WorldService {
        connection: ConnectionService;
        clock: Clock;
        moveStyle: number;
        orientation: number;
        readonly game: Phaser.Game;
        readonly roomManager: IRoomManager;
        readonly elementStorage: any;
        readonly uiManager: UiManager;
        readonly inputManager: InputManager;
        readonly mouseManager: MouseManager;
        readonly httpService: HttpService;
        readonly uiScale: number;
        readonly scaleRatio: number;
        readonly uiRatio: number;
        readonly account: Account;
        readonly modulePath: string;
        readonly emitter: Phaser.Events.EventEmitter;
        readonly pluginManager: PluginManager;
        reconnect(): any;
        startHeartBeat(): any;
        changeScene(): any;
        getSize(): Size;
        getConfig(): any;
        getGameConfig(): Phaser.Types.Core.GameConfig;
        onFocus(): any;
        onBlur(): any;
        changeRoom(room: IRoomService): any;
        startFullscreen(): any;
        stopFullscreen(): any;
        closeGame(): any;
        loadSceneConfig(sceneId: string): Promise<any>;
        playSound(config: ISoundConfig): any;
        showLoading(): any;
    }
}

declare module 'game-core/game/world' {
    import "tooqinggamephaser";
    import "dragonBones";
    import "tooqingui";
    import { WorldService } from "game-core/game/world.service";
    import { PacketHandler, PBpacket } from "net-socket-packet";
    import { IConnectListener, SocketConnection, SocketConnectionError, ConnectionService } from "game-core/net";
    import { op_def } from "pixelpai_proto";
    import { Size } from "game-core/utils";
    import { IRoomManager, IRoomService } from "game-core/rooms";
    import { MouseManager } from "game-core/game/mouse.manager";
    import { GameMain, ILauncherConfig } from "game-core/launcher";
    import { IElementStorage } from "game-core/game/element.storage";
    import { Lite, Capsule, PaletteNode, MossNode } from "game-capsule";
    import { UiManager } from "game-core/ui";
    import { InputManager } from "game-core/game/input.service";
    import { Account } from "game-core/game/account";
    import { HttpService } from "game-core/net";
    import { Clock, ClockReadyListener } from "game-core/rooms/clock";
    import { ISoundConfig } from "game-core/game/sound.manager";
    import { PluginManager } from "game-core/plugins";
    export class World extends PacketHandler implements IConnectListener, WorldService, GameMain, ClockReadyListener {
            static SCALE_CHANGE: string;
            constructor(config: ILauncherConfig, callBack?: Function);
            focusoutFunc: () => void;
            get moveStyle(): number;
            getConfig(): ILauncherConfig;
            setGameConfig(config: Capsule): void;
            updatePalette(palette: PaletteNode): void;
            updateMoss(moss: MossNode): void;
            destroy(): void;
            onConnected(connection?: SocketConnection): void;
            onDisConnected(connection?: SocketConnection): void;
            onError(reason: SocketConnectionError | undefined): void;
            onClientErrorHandler(packet: PBpacket): void;
            /**
                * 当scene发生改变时，调用该方法并传入各个需要调整监听的manager中去
                */
            changeRoom(room: IRoomService): void;
            getSize(): Size | undefined;
            scaleChange(scale: number): void;
            closeGame(): void;
            resize(width: number, height: number): void;
            onOrientationChange(orientation: number, width: number, height: number): void;
            startFullscreen(): void;
            stopFullscreen(): void;
            onGotoAnotherGame(packet: PBpacket): void;
            changeScene(): Promise<void>;
            reconnect(): void;
            startHeartBeat(): void;
            playSound(config: ISoundConfig): void;
            get uiScale(): number;
            get uiRatio(): number;
            get scaleRatio(): number;
            get game(): Phaser.Game | undefined;
            get roomManager(): IRoomManager | undefined;
            get orientation(): number;
            get elementStorage(): IElementStorage | undefined;
            get uiManager(): UiManager | undefined;
            get mouseManager(): MouseManager;
            get pluginManager(): PluginManager;
            get inputManager(): InputManager | undefined;
            get connection(): ConnectionService;
            get clock(): Clock;
            get emitter(): Phaser.Events.EventEmitter;
            get httpService(): HttpService;
            get account(): Account;
            get modulePath(): string;
            enableClick(): void;
            disableClick(): void;
            showLoading(): Promise<any>;
            getGameConfig(): Phaser.Types.Core.GameConfig;
            onClockReady(): void;
            onFocus(): void;
            onBlur(): void;
            initgameConfigUrls(urls: string[]): void;
            getConfigUrl(sceneId: string): string;
            loadSceneConfig(sceneId: string): Promise<Lite>;
            createGame(keyEvents?: op_def.IKeyCodeEvent[]): Promise<void>;
    }
}

declare module 'game-core/utils/pos' {
    export class Pos {
        x: number;
        y: number;
        z?: number;
        depth?: number;
        constructor();
        constructor(x: number, y: number, z?: number, depth?: number);
        add(x: number, y: number, z?: number): Pos;
        equal(p: Pos): boolean;
        toString(): string;
        toPoint(): Phaser.Geom.Point;
    }
}

declare module 'game-core/utils/tool' {
    import { Pos } from "game-core/utils/pos";
    export class Tool {
            /**
                * scene之间坐标转换
                * @param fromScene 当前所在scene
                * @param pos 需要转换去scene上的position
                */
            static getPosByScenes(fromScene: Phaser.Scene, pos: Pos): Pos;
            static twoPointDistance(p1: any, p2: any): number;
            /**
                * 两点之间弧度
                * @param baseP
                * @param moveP
                */
            static twoPointRadin(baseP: any, moveP: any): number;
            static formatChineseString(context: string, fontSize: number | string, lineWidth: number): string;
            static checkChinese(name: string): boolean;
            static checkItemName(name: string, checkStr: string): boolean;
            static checkPointerContains(gameObject: any, pointer: Phaser.Input.Pointer): boolean;
            static baseName(str: any): string;
    }
}

declare module 'game-core/utils/position45' {
    import { Pos } from "game-core/utils/pos";
    export interface IPosition45Obj {
        readonly cols: number;
        readonly rows: number;
        readonly tileWidth: number;
        readonly tileHeight: number;
        readonly sceneWidth?: number;
        readonly sceneHeight?: number;
        readonly offset?: Phaser.Geom.Point;
    }
    export class Position45 {
        static transformTo90(point: Pos, position: IPosition45Obj): Pos;
        static transformTo45(point3: Pos, position: IPosition45Obj): Pos;
    }
}

declare module 'game-core/utils/log' {
    export class Logger {
        constructor();
        static getInstance(): Logger;
        fatal(message?: any, ...optionalParams: any[]): void;
        log(message?: any, ...optionalParams: any[]): void;
        error(message?: any, ...optionalParams: any[]): void;
        warn(message?: any, ...optionalParams: any[]): void;
        debug(message?: any, ...optionalParams: any[]): void;
        info(message?: any, ...optionalParams: any[]): void;
        getErrorList(): string[];
        getWarnList(): string[];
    }
    export function log(message: any, ...optionalParams: any[]): void;
    export function error(message: any, ...optionalParams: any[]): void;
}

declare module 'game-core/utils/size' {
    export class Size extends Phaser.Structs.Size {
        constructor(width?: number, height?: number);
    }
}

declare module 'game-core/utils/http' {
    export function load(path: string, responseType: XMLHttpRequestResponseType): Promise<any>;
    export function checkIsFriend(uids: number[]): Promise<Response>;
}

declare module 'game-core/utils/resUtil' {
    export class Url {
        static OSD_PATH: string;
        static RES_PATH: string;
        static RESUI_PATH: string;
        static getRes(value: string): string;
        static getUIRes(dpr: number, value: string): string;
        static getOsdRes(value: string): string;
    }
    export class ResUtils {
        static getPartName(value: string): string;
        static getPartUrl(value: string): string;
        static getGameConfig(value: string): string;
    }
    export class BlackButton {
        static getName(): string;
        static getPNG(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            top: number;
            left: number;
            right: number;
            bottom: number;
        };
    }
    export class BlueButton {
        static getName(): string;
        static getPNG(): string;
        static getJSON(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class WhiteButton {
        static getName(): string;
        static getPNG(): string;
        static getJSON(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class CloseButton {
        static getName(): string;
        static getPNG(): string;
        static getJSON(): string;
        static getFrameConfig(): Phaser.Types.Loader.FileTypes.ImageFrameConfig;
    }
    export class Background {
        static getName(): string;
        static getPNG(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class Border {
        static getName(): string;
        static getPNG(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class TransparentButton {
        static getName(): string;
        static getPNG(): string;
        static getJSON(): string;
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class Coin {
        static getIcon(coinType: number): string;
    }
}

declare module 'game-core/utils/algorithm' {
    export class Algorithm {
        static median(arr: number[]): number;
    }
}

declare module 'game-core/utils/device' {
    export function isMobile(game: Phaser.Game): boolean;
}

declare module 'game-core/utils/font' {
    export class Font {
        static readonly YAHEI_14_BOLD: string;
        static readonly YAHEI_16_BOLD: string;
        static readonly YAHEI_18_BOLD: string;
        static readonly YAHEI_20_BOLD: string;
        static readonly DEFULT_FONT = "'Source Han Sans'";
    }
}

declare module 'game-core/utils/rectangle45' {
    import Rectangle = Phaser.Geom.Rectangle;
    export class Rectangle45 extends Rectangle {
        row: number;
        col: number;
        endRow: number;
        endCol: number;
        constructor(row: number, col: number, endRow: number, endCol: number);
    }
}

declare module 'game-core/utils/sort.rectangle' {
    import { Pos } from "game-core/utils/pos";
    export class SortRectangle {
        setArea(val: number[][]): void;
        get left(): Pos;
        get right(): Pos;
        get top(): Pos;
        get bottom(): Pos;
    }
}

declare module 'game-core/rooms/room' {
    import { IRoomManager } from "game-core/rooms/room.manager";
    import { ElementManager } from "game-core/rooms/element/element.manager";
    import { PlayerManager } from "game-core/rooms/player/player.manager";
    import { LayerManager } from "game-core/rooms/layer/layer.manager";
    import { TerrainManager } from "game-core/rooms/terrain/terrain.manager";
    import { ConnectionService } from "game-core/net";
    import { op_client, op_def } from "pixelpai_proto";
    import { IPosition45Obj } from "game-core/utils";
    import { ICameraService } from "game-core/rooms/cameras/cameras.manager";
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { ViewblockService } from "game-core/rooms/cameras/viewblock.manager";
    import { Pos } from "game-core/utils/pos";
    import { ClockReadyListener } from "game-core/rooms/clock";
    import IActor = op_client.IActor;
    import { Map } from "game-core/rooms/map/map";
    import { IElement } from "game-core/rooms/element";
    import { IBlockObject } from "game-core/rooms/cameras/block.object";
    import { WallManager } from "game-core/rooms/wall/wall.manager";
    import { SkyBoxManager, IScenery } from "game-core/rooms/sky.box";
    import { GroupManager } from "game-core/rooms/group/GroupManager";
    import { FrameManager } from "game-core/rooms/element/frame.manager";
    export interface SpriteAddCompletedListener {
        onFullPacketReceived(sprite_t: op_def.NodeType): void;
    }
    export interface IRoomService {
        readonly id: number;
        readonly terrainManager: TerrainManager;
        readonly elementManager: ElementManager;
        readonly playerManager: PlayerManager;
        readonly layerManager: LayerManager;
        readonly cameraService: ICameraService;
        readonly roomSize: IPosition45Obj;
        readonly miniSize: IPosition45Obj;
        readonly blocks: ViewblockService;
        readonly world: WorldService;
        readonly map?: Map;
        readonly enableEdit: boolean;
        readonly sceneType: op_def.SceneTypeEnum;
        readonly scene: Phaser.Scene | undefined;
        readonly connection: ConnectionService | undefined;
        now(): number;
        startLoad(): any;
        completeLoad(): any;
        startPlay(): any;
        enter(room: op_client.IScene): void;
        pause(): void;
        resume(name: string | string[]): void;
        transformTo45(p: Pos): Pos;
        transformTo90(p: Pos): Pos;
        transformToMini45(p: Pos): Pos;
        transformToMini90(p: Pos): Pos;
        addBlockObject(object: IBlockObject): any;
        removeBlockObject(object: IBlockObject): any;
        updateBlockObject(object: IBlockObject): any;
        addToGround(element: ElementDisplay | ElementDisplay[], index?: number): any;
        addToSurface(element: ElementDisplay | ElementDisplay[]): any;
        addToSceneUI(element: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[]): any;
        addToUI(element: Phaser.GameObjects.Container | Phaser.GameObjects.Container[]): any;
        addMouseListen(): any;
        getElement(id: number): IElement;
        update(time: number, delta: number): void;
        destroy(): any;
    }
    export class Room extends PacketHandler implements IRoomService, SpriteAddCompletedListener, ClockReadyListener {
        protected manager: IRoomManager;
        protected mWorld: WorldService;
        protected mMap: Map;
        protected mID: number;
        protected mTerrainManager: TerrainManager;
        protected mElementManager: ElementManager;
        protected mPlayerManager: PlayerManager;
        protected mWallManager: WallManager;
        protected mLayManager: LayerManager;
        protected mGroupManager: GroupManager;
        protected mFrameManager: FrameManager;
        protected mSkyboxManager: SkyBoxManager;
        protected mScene: Phaser.Scene | undefined;
        protected mSize: IPosition45Obj;
        protected mMiniSize: IPosition45Obj;
        protected mCameraService: ICameraService;
        protected mBlocks: ViewblockService;
        protected mEnableEdit: boolean;
        protected mScaleRatio: number;
        protected mMods: string[];
        constructor(manager: IRoomManager);
        enter(data: op_client.IScene): void;
        onFullPacketReceived(sprite_t: op_def.NodeType): void;
        onClockReady(): void;
        startLoad(): void;
        completeLoad(): void;
        startPlay(): void;
        pause(): void;
        resume(name: string): void;
        addActor(data: IActor): void;
        addBlockObject(object: IBlockObject): void;
        removeBlockObject(object: IBlockObject): void;
        updateBlockObject(object: IBlockObject): void;
        addToGround(element: ElementDisplay | ElementDisplay[], index?: number): void;
        addToSurface(element: ElementDisplay | ElementDisplay[]): void;
        addToSceneUI(element: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[]): void;
        addToUI(element: Phaser.GameObjects.Container | Phaser.GameObjects.Container[]): void;
        resize(width: number, height: number): void;
        transformTo90(p: Pos): Pos;
        transformTo45(p: Pos): Pos;
        transformToMini90(p: Pos): Pos;
        transformToMini45(p: Pos): Pos;
        addMouseListen(): void;
        getElement(id: number): IElement;
        moveable(pos: Pos): boolean;
        update(time: number, delta: number): void;
        updateClock(time: number, delta: number): void;
        now(): number;
        clear(): void;
        destroy(): void;
        protected addSkyBox(scenery: IScenery): void;
        protected onPointerDownHandler(pointer: Phaser.Input.Pointer): void;
        protected onPointerUpHandler(pointer: Phaser.Input.Pointer): void;
        protected addPointerMoveHandler(): void;
        protected removePointerMoveHandler(): void;
        protected onPointerMoveHandler(pointer: Phaser.Input.Pointer): void;
        protected onGameOutHandler(): void;
        get scene(): Phaser.Scene | undefined;
        get terrainManager(): TerrainManager;
        get elementManager(): ElementManager;
        get playerManager(): PlayerManager;
        get map(): Map;
        get layerManager(): LayerManager;
        get groupManager(): GroupManager;
        get frameManager(): FrameManager;
        get cameraService(): ICameraService;
        get id(): number;
        get roomSize(): IPosition45Obj | undefined;
        get miniSize(): IPosition45Obj | undefined;
        get blocks(): ViewblockService;
        get world(): WorldService | undefined;
        get enableEdit(): boolean;
        get connection(): ConnectionService | undefined;
        get sceneType(): op_def.SceneTypeEnum;
        get mods(): string[];
    }
}

declare module 'game-core/rooms/sky.box' {
    export { ISkyBoxConfig, SkyBoxManager } from "game-core/rooms/sky.box/sky.box.manager";
    export { IScenery, Fit } from "game-core/rooms/sky.box/scenery";
}

declare module 'game-core/rooms/clock' {
    import { PacketHandler } from "net-socket-packet";
    import { ConnectionService } from "game-core/net/connection.service";
    export interface ClockReadyListener {
        onClockReady(): void;
    }
    export class Clock extends PacketHandler {
        protected get sysUnixTime(): number;
        set unixTime(t: number);
        get unixTime(): number;
        constructor(conn: ConnectionService, listener?: ClockReadyListener);
        sync(times?: number): void;
        update(time: number, delta: number): void;
        clearTime(): void;
        destroy(): void;
        get clockSync(): boolean;
        protected _check(): void;
        get medianLatency(): number;
    }
}

declare module 'game-core/rooms/room.manager' {
    import { WorldService } from "game-core/game";
    import { ConnectionService } from "game-core/net";
    import { Room, IRoomService } from "game-core/rooms/room";
    import { PacketHandler } from "net-socket-packet";
    export interface IRoomManager {
        readonly world: WorldService | undefined;
        readonly currentRoom: Room | undefined;
        readonly connection: ConnectionService | undefined;
        addPackListener(): any;
        removePackListener(): any;
        resize(width: number, height: number): any;
        onFocus(): any;
        onBlur(): any;
        destroy(): any;
    }
    export class RoomManager extends PacketHandler implements IRoomManager {
        protected mWorld: WorldService;
        constructor(world: WorldService);
        addPackListener(): void;
        removePackListener(): void;
        getRoom(id: number): IRoomService | undefined;
        onFocus(): void;
        onBlur(): void;
        pasuseRoom(id: number): void;
        resumeRoom(id: number): void;
        stop(): void;
        resize(width: number, height: number): void;
        destroy(): void;
        get world(): WorldService;
        get currentRoom(): Room;
        get connection(): ConnectionService;
    }
}

declare module 'game-core/rooms/terrain' {
    export { TerrainManager } from "game-core/rooms/terrain/terrain.manager";
    export { Terrain } from "game-core/rooms/terrain/terrain";
}

declare module 'game-core/rooms/element' {
    export { ISprite, AnimationData, AnimationQueue } from "game-core/rooms/element/sprite";
    export { ElementManager, IElementManager } from "game-core/rooms/element/element.manager";
    export * from "game-core/rooms/element/element";
    export { FrameManager } from "game-core/rooms/element/frame.manager";
}

declare module 'game-core/rooms/player' {
    export { PlayerManager } from "game-core/rooms/player/player.manager";
    export { Actor } from "game-core/rooms/player/Actor";
    export { Player } from "game-core/rooms/player/player";
    export { Bag } from "game-core/rooms/player/bag/bag";
    export { Friend } from "game-core/rooms/player/friend/friend";
    export { Interactive } from "game-core/rooms/player/interactive/interactive";
}

declare module 'game-core/rooms/wall/wall.manager' {
    import { IRoomService } from "game-core/rooms/room";
    import { Direction } from "game-core/rooms/wall/wall";
    import { PacketHandler } from "net-socket-packet";
    export class WallManager extends PacketHandler {
        protected mRoom: IRoomService;
        constructor(mRoom: IRoomService);
        destroy(): void;
        protected _add(x: number, y: number, dir: Direction): void;
    }
}

declare module 'game-core/rooms/layer/layer.manager' {
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IRoomService } from "game-core/rooms/room";
    import { GridLayer } from "game-core/rooms/layer/grid.layer";
    export class LayerManager {
            /**
                * 背景层1(用于鼠标点击移动)
                */
            protected mGroundClickLayer: Phaser.GameObjects.Container;
            /**
                * 背景层2
                */
            protected mUGroundLayer2: Phaser.GameObjects.Container;
            /**
                * 舞台地皮层（地块）
                */
            protected mGroundLayer: Phaser.GameObjects.Container;
            /**
                * 网格层
                * 介于地皮和地表中间
                */
            protected mTileLayer: GridLayer;
            /**
                * 舞台地表层（包括角色，物件 ，特效等）
                */
            protected mSurfaceLayer: Phaser.GameObjects.Container;
            protected mSurfaceInteractived: boolean;
            /**
                * 舞台大气层
                */
            protected mAtmosphere: Phaser.GameObjects.Container;
            /**
                * 场景中的ui，可能跟跟随物件或人物
                */
            protected mSceneUILayer: Phaser.GameObjects.Container;
            /**
                * ui层(该层不跟随相机移动)
                */
            protected mUILayer: Phaser.GameObjects.Container;
            protected mMiddleLayer: Phaser.GameObjects.Container;
            constructor(room: IRoomService);
            addToGround(ele: ElementDisplay | ElementDisplay[], index?: number): void;
            addToSurface(ele: ElementDisplay | ElementDisplay[]): void;
            addToSceneToUI(child: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[]): void;
            addToUI(child: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[]): void;
            addToAtmosphere(child: Phaser.GameObjects.GameObject): void;
            addToMiddle(child: Phaser.GameObjects.GameObject): void;
            resize(width: number, height: number): void;
            addMouseListen(): void;
            sortSurface(): void;
            changeScene(): void;
            drawGrid(room: IRoomService): void;
            setGridVisible(visible: boolean): void;
            update(time: number, delta: number): void;
            setSurfaceInteractive(val: boolean): void;
            destroy(): void;
            set depthSurfaceDirty(val: boolean);
            set depthGroundDirty(val: boolean);
            get layer(): Phaser.GameObjects.Container;
    }
}

declare module 'game-core/rooms/display' {
    export { IAnimationData } from "game-core/rooms/display/animation";
    export { DisplayObject, DisplayField } from "game-core/rooms/display/display.object";
    export { DragonbonesDisplay } from "game-core/rooms/display/dragonbones.display";
    export * from "game-core/rooms/display/dragonbones.model";
    export { FramesDisplay } from "game-core/rooms/display/frames.display";
    export { FramesModel, IFramesModel } from "game-core/rooms/display/frames.model";
    export { ElementDisplay } from "game-core/rooms/display/element.display";
}

declare module 'game-core/rooms/group/GroupManager' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    import { IGroup } from "game-core/rooms/group/IGroup";
    import { IRoomService } from "game-core/rooms/room";
    export class GroupManager implements IDispose {
        protected map: Map<any, IGroup[]>;
        constructor(room: IRoomService);
        createGroup<T extends IGroup>(owner: any, groupType: GroupType): T;
        getGroup<T extends IGroup>(owner: any, groupType: GroupType): T;
        hasGroup(owner: any, groupType: number): boolean;
        destroy(): void;
    }
    export enum GroupType {
        Follow = 1
    }
    export enum GroupEventType {
        DEFAULT_TYPE = "DEFAULT_TYPE",
        REPLACE_TYPE = "REPLACE_TYPE"
    }
}

declare module 'game-core/rooms/group/IGroup' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    import { HandlerDispatcher } from "game-core/Handler/HandlerDispatcher";
    import { GroupType } from "game-core/rooms/group/GroupManager";
    export interface IGroup extends IDispose {
        owner: any;
        childs: any[];
        eventDisp: HandlerDispatcher;
        data: any;
        groupType: GroupType;
        on(type: string, caller: any, method: Function, args: any[]): any;
        off(type: string, caller: any, method: Function, args: any[]): any;
        emitter(type: string, data?: any): any;
        addChild(child: any): any;
        removeChild(child: any): any;
        replaceOwner(owner: any): any;
    }
}

declare module 'game-core/plugins/basic.plugin' {
    import { WorldService } from "game-core/game";
    export class BasicPlugin {
        protected mWorld: WorldService;
        init(worldService: WorldService): void;
        preUpdate(time: any, delta: any): void;
        update(time: any, delta: any): void;
        postUpdate(time: any, delta: any): void;
        destroy(): void;
        get world(): WorldService;
    }
}

declare module 'game-core/plugins/plugin.manager' {
    import { WorldService } from "game-core/game";
    import { BasicPlugin } from "game-core/plugins/basic.plugin";
    export class PluginManager {
        constructor(mWorld: WorldService);
        load(name: string, url: string): Promise<BasicPlugin>;
        add(id: string, plugin: BasicPlugin): void;
        remove(id: string): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/action/IDispose' {
    export interface IDispose {
        destroy(): any;
    }
}

declare module 'game-core/ui' {
    export { UiManager } from "game-core/ui/ui.manager";
    export { ILayerManager, LayerManager } from "game-core/ui/layer.manager";
    export { UIMediatorType } from "game-core/ui/ui.mediatorType";
    export { UIAtlasName, UIAtlasKey } from "game-core/ui/ui.atals.name";
    export { BasePanel } from "game-core/ui/components";
}

declare module 'game-core/game/input.service' {
    import { IRoomService } from "game-core/rooms/room";
    export interface InputManager {
        enable: boolean;
        addListener(l: InputListener): any;
        removeListener(l: InputListener): any;
        resize(width: number, height: number): any;
        onRoomChanged(currentRoom: IRoomService, previousRoom?: IRoomService): void;
        getKeyCodes(eventName: number): any[];
        getKeyDowns(): number[];
        getKeyUps(): number[];
    }
    export interface InputListener {
        downHandler(d: number, keyList: number[]): any;
        upHandler(): any;
        getDirection(): number;
        setDirection(val: number): any;
    }
}

declare module 'game-core/game/account' {
    export interface IAccountData {
        token: string;
        expire: number;
        fingerprint: string;
    }
    export class Account {
        constructor();
        setAccount(val: any): void;
        get accountData(): IAccountData | undefined;
    }
}

declare module 'game-core/net' {
    export { ConnectionService } from "game-core/net/connection.service";
    export { HttpService } from "game-core/net/http.service";
    export { IConnectListener, SocketConnection, SocketConnectionError } from "game-core/net/socket";
    export { ServerAddress } from "game-core/net/address";
}

declare module 'game-core/game/mouse.manager' {
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game/world.service";
    import { IRoomService } from "game-core/rooms/room";
    export enum MouseEvent {
        RightMouseDown = 1,
        RightMouseUp = 2,
        LeftMouseDown = 3,
        LeftMouseUp = 4,
        WheelDown = 5,
        WheelUp = 6,
        RightMouseHolding = 7,
        LeftMouseHolding = 8,
        Tap = 9
    }
    export class MouseManager extends PacketHandler {
        constructor(worldService: WorldService);
        changeRoom(room: IRoomService): void;
        resize(width: number, height: number): void;
        pause(): void;
        resume(): void;
        onUpdate(pointer: Phaser.Input.Pointer, gameobject: Phaser.GameObjects.GameObject): void;
        /**
          * 设置鼠标事件开关
          */
        set enable(value: boolean);
        get enable(): boolean;
        destroy(): void;
    }
}

declare module 'game-core/game/sound.manager' {
    import { IRoomService } from "game-core/rooms/room";
    import { WorldService } from "game-core/game/world.service";
    import { PacketHandler } from "net-socket-packet";
    export enum SoundField {
        Background = 0,
        Element = 1,
        Effect = 2
    }
    export interface ISoundConfig {
        key?: string;
        urls?: string | string[];
        field?: SoundField;
        soundConfig?: Phaser.Types.Sound.SoundConfig;
    }
    export class SoundManager extends PacketHandler {
        constructor(world: WorldService);
        changeRoom(room: IRoomService): void;
        play(config: ISoundConfig): void;
        stop(field: SoundField): void;
        pause(field: SoundField): void;
        resumes(field: SoundField): void;
        stopAll(): void;
        pauseAll(): void;
        resume(): void;
        destroy(): void;
    }
}

declare module 'game-core/game/element.storage' {
    import { FramesModel, IFramesModel } from "game-core/rooms/display/frames.model";
    import { DragonbonesModel, IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { Lite, PaletteNode, TerrainCollectionNode, MossNode, AssetsNode } from "game-capsule";
    import { MossCollectionNode } from "game-capsule/lib/configobjects/scene";
    import { IScenery } from "game-core/rooms/sky.box/scenery";
    import { IAsset } from "game-core/loading/loading.manager";
    export interface IElementStorage {
        setGameConfig(gameConfig: Lite): any;
        updatePalette(palette: PaletteNode): any;
        updateMoss(moss: MossNode): any;
        setSceneConfig(config: Lite): any;
        add(obj: IFramesModel | IDragonbonesModel): void;
        getDisplayModel(id: number): IFramesModel | IDragonbonesModel;
        getTerrainCollection(): any;
        getTerrainPalette(key: number): IFramesModel;
        getTerrainPaletteByBindId(id: number): IFramesModel;
        getMossPalette(key: number): IFramesModel;
        getAssets(): IAsset[];
        getScenerys(): IScenery[];
        on(event: string | symbol, fn: Function, context?: any): any;
        off(event: string | symbol, fn: Function, context?: any): any;
        destroy(): any;
    }
    export class ElementStorage implements IElementStorage {
        constructor();
        on(event: string | symbol, fn: Function, context?: any): void;
        off(event: string | symbol, fn: Function, context?: any): void;
        setGameConfig(config: Lite): void;
        updatePalette(palette: PaletteNode): void;
        updateMoss(moss: MossNode): void;
        updateAssets(assetsNode: AssetsNode): void;
        setSceneConfig(config: any): void;
        add(obj: FramesModel | DragonbonesModel): void;
        getDisplayModel(id: number): FramesModel | DragonbonesModel;
        getTerrainCollection(): TerrainCollectionNode;
        getTerrainPalette(key: number): FramesModel;
        getTerrainPaletteByBindId(id: number): FramesModel;
        getMossCollection(): MossCollectionNode;
        getMossPalette(id: number): FramesModel;
        getScenerys(): IScenery[];
        getAssets(): IAsset[];
        destroy(): void;
    }
}

declare module 'game-core/rooms/element/element.manager' {
    import { PacketHandler, PBpacket } from "net-socket-packet";
    import { op_def } from "pixelpai_proto";
    import { ConnectionService } from "game-core/net/connection.service";
    import { Element, IElement } from "game-core/rooms/element/element";
    import { IRoomService } from "game-core/rooms/room";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    export interface IElementManager {
        hasAddComplete: boolean;
        readonly connection: ConnectionService | undefined;
        readonly roomService: IRoomService;
        readonly scene: Phaser.Scene | undefined;
        readonly camera: Phaser.Cameras.Scene2D.Camera | undefined;
        readonly map: number[][];
        add(sprite: ISprite[]): any;
        remove(id: number): IElement;
        getElements(): IElement[];
        destroy(): any;
    }
    export interface Task {
        action: string;
        loc: Partial<op_def.IMossMetaData>;
    }
    export class ElementManager extends PacketHandler implements IElementManager {
        protected mRoom: IRoomService;
        hasAddComplete: boolean;
        protected mElements: Map<number, Element>;
        protected mMap: number[][];
        constructor(mRoom: IRoomService);
        init(): void;
        get(id: number): Element;
        remove(id: number): IElement;
        getElements(): IElement[];
        add(sprites: ISprite[], addMap?: boolean): void;
        destroy(): void;
        update(time: number, delta: number): void;
        protected addMap(sprite: ISprite): void;
        protected removeMap(sprite: ISprite): void;
        get camera(): Phaser.Cameras.Scene2D.Camera | undefined;
        get connection(): ConnectionService;
        protected onAdjust(packet: PBpacket): void;
        protected onAdd(packet: PBpacket): void;
        protected _add(sprite: ISprite, addMap?: boolean): Element;
        protected addComplete(packet: PBpacket): void;
        protected checkDisplay(sprite: ISprite): IFramesModel | IDragonbonesModel;
        protected fetchDisplay(ids: number[]): void;
        get roomService(): IRoomService;
        get scene(): Phaser.Scene | undefined;
        get map(): number[][];
        protected onSetPosition(packet: PBpacket): void;
        protected onRemove(packet: PBpacket): void;
        protected onSync(packet: PBpacket): void;
        protected onMove(packet: PBpacket): void;
    }
}

declare module 'game-core/rooms/player/player.manager' {
    import { IElementManager } from "game-core/rooms/element/element.manager";
    import { PacketHandler } from "net-socket-packet";
    import { op_client, op_gameconfig } from "pixelpai_proto";
    import { ConnectionService } from "game-core/net/connection.service";
    import { IRoomService, Room } from "game-core/rooms/room";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { Player } from "game-core/rooms/player/player";
    import { IElement } from "game-core/rooms/element/element";
    import { Actor } from "game-core/rooms/player/Actor";
    export class PlayerManager extends PacketHandler implements IElementManager {
        hasAddComplete: boolean;
        constructor(mRoom: Room);
        createActor(actor: op_client.IActor): void;
        get actor(): Actor;
        destroy(): void;
        removeFromMap(id: number): void;
        requestActorMove(dir: number, keyArr: number[]): void;
        startActorMove(): void;
        stopActorMove(): void;
        get(id: number): Player;
        add(sprite: ISprite[]): void;
        remove(id: number): IElement;
        getElements(): IElement[];
        set(id: number, player: Player): void;
        get camera(): Phaser.Cameras.Scene2D.Camera;
        addPackItems(elementId: number, items: op_gameconfig.IItem[]): void;
        removePackItems(elementId: number, itemId: number): boolean;
        get roomService(): IRoomService;
        get scene(): Phaser.Scene | undefined;
        get connection(): ConnectionService;
        get map(): number[][];
    }
}

declare module 'game-core/rooms/terrain/terrain.manager' {
    import { PacketHandler, PBpacket } from "net-socket-packet";
    import { ConnectionService } from "game-core/net/connection.service";
    import { Terrain } from "game-core/rooms/terrain/terrain";
    import { IRoomService, SpriteAddCompletedListener } from "game-core/rooms/room";
    import { IElementManager } from "game-core/rooms/element/element.manager";
    import { IElementStorage } from "game-core/game/element.storage";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { IElement } from "game-core/rooms/element/element";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    export class TerrainManager extends PacketHandler implements IElementManager {
        protected mRoom: IRoomService;
        hasAddComplete: boolean;
        protected mTerrains: Map<number, Terrain>;
        protected mGameConfig: IElementStorage;
        protected mPacketFrameCount: number;
        protected mListener: SpriteAddCompletedListener;
        protected mMap: number[][];
        constructor(mRoom: IRoomService, listener?: SpriteAddCompletedListener);
        init(): void;
        destroy(): void;
        get(id: number): Terrain;
        add(sprites: ISprite[]): void;
        remove(id: number): IElement;
        getElements(): IElement[];
        protected onAdd(packet: PBpacket): void;
        protected _add(sprite: ISprite): Terrain;
        protected addComplete(packet: PBpacket): void;
        protected onRemove(packet: PBpacket): void;
        protected onSyncSprite(packet: PBpacket): void;
        protected checkDisplay(sprite: ISprite): IFramesModel | IDragonbonesModel;
        protected checkTerrainDisplay(sprite: ISprite): void;
        protected fetchDisplay(ids: number[]): void;
        protected removeMap(sprite: ISprite): void;
        protected addMap(sprite: ISprite): void;
        protected setMap(sprite: ISprite, type: number): void;
        get connection(): ConnectionService | undefined;
        get roomService(): IRoomService;
        get scene(): Phaser.Scene | undefined;
        get camera(): Phaser.Cameras.Scene2D.Camera;
        get map(): number[][];
    }
}

declare module 'game-core/rooms/cameras/cameras.manager' {
    import { PacketHandler } from "net-socket-packet";
    import { IRoomService } from "game-core/rooms/room";
    import { ConnectionService } from "game-core/net/connection.service";
    import { Rectangle45 } from "game-core/utils/rectangle45";
    export interface ICameraService {
        camera: Phaser.Cameras.Scene2D.Camera | undefined;
        moving: boolean;
        readonly targetFollow: any;
        startFollow(target: any): void;
        stopFollow(): void;
        addCamera(camera: Phaser.Cameras.Scene2D.Camera): void;
        removeCamera(camera: Phaser.Cameras.Scene2D.Camera): void;
        resize(width: number, height: number): void;
        getViewPort(): Phaser.Geom.Rectangle | undefined;
        getMiniViewPort(): Rectangle45 | undefined;
        setBounds(x: integer, y: integer, width: integer, height: integer, centerOn?: boolean): void;
        setPosition(x: number, y: number): void;
        setScroll(x: number, y: number): void;
        offsetScroll(x: number, y: number): void;
        scrollTargetPoint(x: number, y: number): any;
        syncToEditor(): void;
        centerCameas(): void;
        syncCamera(): void;
        syncCameraScroll(): void;
    }
    export class CamerasManager extends PacketHandler implements ICameraService {
        protected mRoomService: IRoomService;
        readonly MINI_VIEW_SIZE = 30;
        readonly VIEW_PORT_SIZE = 30;
        protected mMain: Phaser.Cameras.Scene2D.Camera;
        protected viewPort: Phaser.Geom.Rectangle;
        protected miniViewPort: Phaser.Geom.Rectangle;
        protected mMoving: boolean;
        protected mTarget: any;
        protected mCameras: Phaser.Cameras.Scene2D.Camera[];
        protected readonly zoom: number;
        constructor(mRoomService: IRoomService);
        getViewPort(): Phaser.Geom.Rectangle | undefined;
        getMiniViewPort(): Rectangle45;
        set camera(camera: Phaser.Cameras.Scene2D.Camera | undefined);
        get camera(): Phaser.Cameras.Scene2D.Camera | undefined;
        resize(width: number, height: number): void;
        setScroll(x: number, y: number): void;
        offsetScroll(x: number, y: number): void;
        startFollow(target: any): void;
        stopFollow(): void;
        addCamera(camera: Phaser.Cameras.Scene2D.Camera): void;
        removeCamera(camera: Phaser.Cameras.Scene2D.Camera): void;
        setBounds(x: integer, y: integer, width: integer, height: integer, centerOn?: boolean): void;
        setPosition(x: number, y: number): void;
        syncToEditor(): void;
        centerCameas(): void;
        syncCamera(): void;
        syncCameraScroll(): void;
        scrollTargetPoint(x: number, y: number): void;
        get connection(): ConnectionService;
        set moving(val: boolean);
        get moving(): boolean;
        get targetFollow(): any;
    }
}

declare module 'game-core/rooms/display/element.display' {
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { op_def } from "pixelpai_proto";
    import { IElement } from "game-core/rooms/element/element";
    import { AnimationData } from "game-core/rooms/element/sprite";
    import { DisplayField } from "game-core/rooms/display/display.object";
    export interface ElementDisplay extends Phaser.GameObjects.Container {
        readonly baseLoc: Phaser.Geom.Point;
        readonly element: IElement;
        sortX: number;
        sortY: number;
        sortZ: number;
        changeAlpha(val?: number): any;
        load(data: IFramesModel | IDragonbonesModel, field?: DisplayField): any;
        play(animationName: AnimationData, field?: DisplayField): any;
        removeFromParent(): void;
        fadeIn(callback?: () => void): any;
        fadeOut(callback?: () => void): any;
        showNickname(val: string): any;
        setDisplayBadges(cards: op_def.IBadgeCard[]): any;
        showRefernceArea(): any;
        hideRefernceArea(): any;
        showEffect(): any;
        destroy(): void;
    }
}

declare module 'game-core/rooms/cameras/viewblock.manager' {
    import { ICameraService } from "game-core/rooms/cameras/cameras.manager";
    import { IPosition45Obj } from "game-core/utils/position45";
    import { IBlockObject } from "game-core/rooms/cameras/block.object";
    export interface ViewblockService {
        update(time: number, delta: number): void;
        int(size: IPosition45Obj): void;
        add(e: IBlockObject): boolean;
        remove(e: IBlockObject): boolean;
        check(e: IBlockObject): void;
        destroy(): void;
    }
    export class ViewblockManager implements ViewblockService {
        constructor(cameras: ICameraService);
        add(e: IBlockObject): boolean;
        remove(e: IBlockObject): boolean;
        check(e: IBlockObject): void;
        int(size: IPosition45Obj): void;
        update(time: number, delta: number): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/map/map' {
    import { WorldService } from "game-core/game/world.service";
    import { op_client, op_gameconfig } from "pixelpai_proto";
    import { MapModel } from "game-core/rooms/map/map.model";
    import { PacketHandler } from "net-socket-packet";
    import { IEntity } from "game-core/rooms/entity";
    export class Map extends PacketHandler implements IEntity {
        static NAME: string;
        constructor(mWorld: WorldService);
        initialize(): boolean;
        getMapModel(): MapModel;
        register(): void;
        unRegister(): void;
        destroy(): void;
        setMapInfo(value: op_client.IScene): void;
        addPackItems(elementId: number, items: op_gameconfig.IItem[]): void;
        removePackItems(elementId: number, itemId: number): void;
    }
}

declare module 'game-core/rooms/cameras/block.object' {
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { InputEnable } from "game-core/rooms/element/element";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { Pos } from "game-core/utils/pos";
    import { IRoomService } from "game-core/rooms/room";
    export interface IBlockObject {
        readonly id: number;
        getPosition(): Pos;
        getPosition45(): Pos;
        setRenderable(isRenderable: boolean, delay?: number): void;
        getRenderable(): boolean;
        setBlockable(val: boolean): this;
    }
    export abstract class BlockObject implements IBlockObject {
        protected mRoomService: IRoomService;
        isUsed: boolean;
        protected mDisplay?: ElementDisplay;
        protected mRenderable: boolean;
        protected mBlockable: boolean;
        protected mModel: ISprite;
        protected mInputEnable: InputEnable;
        constructor(mRoomService: IRoomService);
        setRenderable(isRenderable: boolean, delay?: number): void;
        getPosition(): Pos;
        getPosition45(): Pos;
        getRenderable(): boolean;
        fadeIn(callback?: () => void): void;
        fadeOut(callback?: () => void): void;
        fadeAlpha(alpha: number): void;
        setInputEnable(val: InputEnable): void;
        setBlockable(val: boolean): this;
        destroy(): void;
        clear(): void;
        protected addDisplay(): void;
        protected removeDisplay(): void;
        protected addToBlock(): void;
        protected removeFromBlock(remove?: boolean): void;
        protected updateBlock(): void;
        get id(): number;
    }
}

declare module 'game-core/rooms/element/frame.manager' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    export class FrameManager implements IDispose {
        add(caller: any, method: Function, args?: any[]): void;
        remove(caller: any, method: Function): void;
        update(time: number, delta: number): void;
        destroy(): void;
        hasRegistered(caller: any, method: Function): boolean;
    }
}

declare module 'game-core/rooms/sky.box/sky.box.manager' {
    import { BlockManager } from "game-core/rooms/sky.box/block.manager";
    import { IRoomService } from "game-core/rooms/room";
    import { IScenery } from "game-core/rooms/sky.box/scenery";
    import { PacketHandler } from "net-socket-packet";
    export interface ISkyBoxConfig {
        key: string;
        width: number;
        height: number;
        gridW?: number;
        gridH?: number;
    }
    export class SkyBoxManager extends PacketHandler {
        protected mRoom: IRoomService;
        protected mScenetys: Map<number, BlockManager>;
        constructor(room: IRoomService);
        add(scenery: IScenery): void;
        update(scenery: IScenery): void;
        remove(id: number): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/sky.box/scenery' {
    import { op_def, op_client } from "pixelpai_proto";
    export interface IScenery {
        readonly id: number;
        readonly depth: number;
        readonly width: number;
        readonly height: number;
        readonly uris: string[][];
        readonly speed: number;
        readonly fit: Fit;
        readonly offset: op_def.IPBPoint2f;
    }
    export class Scenery implements IScenery {
        constructor(scenery: op_client.IOP_EDITOR_REQ_CLIENT_ADD_SCENERY);
        get width(): number;
        get height(): number;
        get id(): number;
        get depth(): number;
        get offset(): op_def.IPBPoint2f;
        get speed(): number;
        get uris(): string[][];
        get fit(): Fit;
    }
    export enum Fit {
        Center = 1,
        Fill = 2
    }
}

declare module 'game-core/net/connection.service' {
    import { ServerAddress } from "game-core/net/address";
    import { PacketHandler, PBpacket } from "net-socket-packet";
    export interface ConnectionService {
        startConnect(addr: ServerAddress, keepalive?: boolean): void;
        closeConnect(): void;
        clearHeartBeat(): any;
        addPacketListener(listener: PacketHandler): void;
        removePacketListener(listener: PacketHandler): void;
        clearPacketListeners(): void;
        send(packet: PBpacket): void;
    }
}

declare module 'game-core/rooms/terrain/terrain' {
    import { IElement } from "game-core/rooms/element/element";
    import { IElementManager } from "game-core/rooms/element/element.manager";
    import { Pos } from "game-core/utils/pos";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IRoomService } from "game-core/rooms/room";
    import { TerrainDisplay } from "game-core/rooms/display/terrain.display";
    import { BlockObject } from "game-core/rooms/cameras/block.object";
    import { op_client } from "pixelpai_proto";
    import { DisplayObject } from "game-core/rooms/display/display.object";
    export class Terrain extends BlockObject implements IElement {
        protected mElementManager: IElementManager;
        protected mId: number;
        protected mDisplayInfo: IFramesModel;
        protected mDisplay: TerrainDisplay | undefined;
        protected mModel: ISprite;
        constructor(sprite: ISprite, mElementManager: IElementManager);
        setModel(val: ISprite): void;
        updateModel(val: op_client.ISprite): void;
        load(displayInfo: IFramesModel): void;
        play(animationName: string): void;
        setDirection(val: number): void;
        getDirection(): number;
        setPosition(p: Pos): void;
        getDisplay(): DisplayObject;
        showNickname(): void;
        showEffected(): void;
        turn(): void;
        setAlpha(val: number): void;
        scaleTween(): void;
        setQueue(): void;
        mount(): this;
        unmount(): this;
        addMount(): this;
        removeMount(): this;
        destroy(): void;
        protected createDisplay(): ElementDisplay;
        protected addDisplay(): void;
        protected setDepth(): void;
        protected onInitializedHandler(): void;
        get id(): number;
        get dir(): number;
        get roomService(): IRoomService;
        get model(): ISprite;
        set model(val: ISprite);
        get currentAnimationName(): string;
        get scene(): Phaser.Scene;
    }
}

declare module 'game-core/rooms/element/sprite' {
    import { Pos } from "game-core/utils/pos";
    import { IAvatar, IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { op_client, op_gameconfig, op_gameconfig_01, op_def } from "pixelpai_proto";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import NodeType = op_def.NodeType;
    export interface ISprite {
        readonly id: number;
        readonly avatar: IAvatar;
        readonly nickname: string;
        readonly alpha: number;
        readonly displayBadgeCards: op_def.IBadgeCard[];
        readonly platformId: string;
        readonly sceneId: number;
        readonly nodeType: op_def.NodeType;
        readonly currentAnimation: AnimationData;
        readonly currentCollisionArea: number[][];
        readonly currentWalkableArea: number[][];
        readonly currentCollisionPoint: Phaser.Geom.Point;
        readonly hasInteractive: boolean;
        readonly attrs: op_def.IStrPair[];
        readonly animationQueue: AnimationQueue[];
        currentAnimationName: string;
        displayInfo: IFramesModel | IDragonbonesModel;
        direction: number;
        pos: Pos;
        bindID: number;
        sn: string;
        isMoss?: boolean;
        mountSprites?: number[];
        newID(): any;
        updateAvatar(avatar: op_gameconfig.IAvatar): any;
        updateDisplay(display: op_gameconfig.IDisplay, animations: op_gameconfig_01.IAnimationData[], defAnimation?: string): any;
        setPosition(x: number, y: number): any;
        setAnimationName(name: string, playTimes?: number): AnimationData;
        setAnimationQueue(queue: AnimationQueue[]): any;
        turn(): ISprite;
        toSprite(): op_client.ISprite;
    }
    export interface AnimationData {
        animationName: string;
        flip: boolean;
        playingQueue?: AnimationQueue;
    }
    export interface AnimationQueue {
        name: string;
        playTimes?: number;
        playedTimes?: number;
        complete?: Function;
    }
    export class Sprite implements ISprite {
        protected mID: number;
        protected mPos: Pos;
        protected mAvatar: IAvatar;
        protected mCurrentAnimationName: string;
        protected mDirection: number;
        protected mBindID: number;
        protected mSn: string;
        protected mAlpha: number;
        protected mNickname: string;
        protected mDisplayBadgeCards: op_def.IBadgeCard[];
        protected mPackage: op_gameconfig.IPackage;
        protected mSceneId: number;
        protected mUuid: number;
        protected mPlatformId: string;
        protected mDisplayInfo: IFramesModel | IDragonbonesModel;
        protected mNodeType: NodeType;
        protected mCurrentAnimation: AnimationData;
        protected mCurrentCollisionArea: number[][];
        protected mCurrentWalkableArea: number[][];
        protected mCurrentCollisionPoint: Phaser.Geom.Point;
        protected mVersion: string;
        protected mIsMoss: boolean;
        protected mRegisterAnimation: Map<string, string>;
        protected _originWalkPoint: Phaser.Geom.Point;
        protected _originCollisionPoint: Phaser.Geom.Point;
        protected mAttrs: op_def.IStrPair[];
        protected mAnimationQueue: AnimationQueue[];
        protected mMountSprites: number[];
        constructor(obj: op_client.ISprite, nodeType?: NodeType);
        toSprite(): op_client.ISprite;
        newID(): void;
        setPosition(x: number, y: number): void;
        turn(): ISprite;
        updateAvatar(avatar: op_gameconfig.IAvatar): void;
        updateDisplay(display: op_gameconfig.IDisplay, animations: op_gameconfig_01.IAnimationData[], defAnimation?: string): void;
        setAnimationQueue(queue: AnimationQueue[]): void;
        setMountSprites(ids: number[]): void;
        updateAttr(attrs: op_def.IStrPair[]): void;
        setAnimationName(name: string): AnimationData;
        get id(): number;
        get pos(): Pos;
        set pos(pos: Pos);
        get avatar(): IAvatar;
        get currentAnimationName(): string;
        set currentAnimationName(animationName: string);
        get direction(): number;
        set direction(val: number);
        get nickname(): string;
        get bindID(): number;
        set bindID(id: number);
        get sn(): string;
        set sn(value: string);
        get alpha(): number;
        get package(): op_gameconfig.IPackage;
        set package(value: op_gameconfig.IPackage);
        get sceneId(): number;
        get uuid(): number;
        get displayBadgeCards(): op_def.IBadgeCard[];
        get platformId(): string;
        get displayInfo(): IFramesModel | IDragonbonesModel;
        set displayInfo(displayInfo: IFramesModel | IDragonbonesModel);
        get isMoss(): boolean;
        set isMoss(val: boolean);
        get animationQueue(): AnimationQueue[];
        get nodeType(): NodeType;
        get currentAnimation(): AnimationData;
        get currentCollisionArea(): number[][];
        get currentWalkableArea(): number[][];
        get currentCollisionPoint(): Phaser.Geom.Point;
        get hasInteractive(): boolean;
        get mountSprites(): number[];
        set mountSprites(ids: number[]);
        get animationMap(): Map<string, string>;
        get originCollisionPoint(): Phaser.Geom.Point;
        get originWalkPoint(): Phaser.Geom.Point;
        get attrs(): op_def.IStrPair[];
        setOriginCollisionPoint(value: number[] | null): void;
        setOriginWalkPoint(value: number[] | null): void;
        getInteracviveArea(): op_def.IPBPoint2i[];
    }
}

declare module 'game-core/rooms/element/element' {
    import { IElementManager, ElementManager } from "game-core/rooms/element/element.manager";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IRoomService } from "game-core/rooms/room";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { op_client } from "pixelpai_proto";
    import { Tweens } from "phaser";
    import { Pos } from "game-core/utils/pos";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { BlockObject } from "game-core/rooms/cameras/block.object";
    import { BubbleContainer } from "game-core/rooms/bubble/bubble.container";
    import { ShopEntity } from "game-core/rooms/element/shop/shop.entity";
    import { DisplayObject } from "game-core/rooms/display/display.object";
    import { AI } from "game-core/rooms/action/AI";
    export enum PlayerState {
        IDLE = "idle",
        WALK = "walk",
        RUN = "run",
        ATTACK = "attack",
        JUMP = "jump",
        INJURED = "injured",
        FAILED = "failed",
        DANCE01 = "dance01",
        DANCE02 = "dance02",
        FISHING = "fishing",
        GREET01 = "greet01",
        SIT = "sit",
        LIE = "lit",
        EMOTION01 = "emotion01"
    }
    export enum Direction {
        north = 0,
        north_west = 1,
        west = 2,
        west_south = 3,
        south = 4,
        south_east = 5,
        east = 6,
        east_north = 7
    }
    export interface IElement {
        readonly id: number;
        readonly dir: number;
        readonly roomService: IRoomService;
        readonly scene: Phaser.Scene;
        model: ISprite;
        setModel(model: ISprite): any;
        updateModel(model: op_client.ISprite): any;
        play(animationName: string): void;
        getDisplay(): DisplayObject;
        setPosition(p: Pos): void;
        getPosition(): Pos;
        getPosition45(): Pos;
        setDirection(val: number): void;
        getDirection(): number;
        showEffected(): any;
        showNickname(): any;
        scaleTween(): any;
        turn(): any;
        setAlpha(val: number): any;
        setQueue(queue: op_client.IChangeAnimation[]): any;
        mount(ele: IElement): this;
        unmount(): this;
        addMount(ele: IElement, index?: number): this;
        removeMount(ele: IElement): this;
    }
    export interface MoveData {
        destPos?: Pos;
        posPath?: MovePath[];
        arrivalTime?: number;
        tweenAnim?: Tweens.Tween;
        tweenLineAnim?: Tweens.Timeline;
        tweenLastUpdate?: number;
        onCompleteParams?: any;
        onComplete?: Function;
        step?: number;
    }
    export interface MovePath {
        x: number;
        y: number;
        duration?: number;
        onStartParams?: any;
        onStart?: Function;
        onComplete?: Function;
    }
    export interface AnimationQueue {
        name: string;
        playTimes?: number;
        complete?: Function;
    }
    export enum InputEnable {
        Diasble = 0,
        Enable = 1,
        Interactive = 2
    }
    export class Element extends BlockObject implements IElement {
        protected mElementManager: IElementManager;
        get dir(): number;
        get roomService(): IRoomService;
        get id(): number;
        get model(): ISprite;
        set model(val: ISprite);
        get scene(): Phaser.Scene;
        get ai(): AI;
        get eleMgr(): ElementManager;
        protected mId: number;
        protected mDisplayInfo: IFramesModel | IDragonbonesModel;
        protected mDisplay: DisplayObject | undefined;
        protected mBubble: BubbleContainer;
        protected mAnimationName: string;
        protected mMoveData: MoveData;
        protected mCurState: string;
        protected mShopEntity: ShopEntity;
        protected mAi: AI;
        protected mOffsetY: number;
        protected mQueueAnimations: AnimationQueue[];
        protected mMoving: boolean;
        protected mRootMount: IElement;
        protected mMounts: IElement[];
        constructor(sprite: ISprite, mElementManager: IElementManager);
        load(displayInfo: IFramesModel | IDragonbonesModel): void;
        setModel(model: ISprite): void;
        updateModel(model: op_client.ISprite): void;
        scaleTween(): void;
        play(animationName: string): void;
        setQueue(animations: op_client.IChangeAnimation[]): void;
        setDirection(val: number): void;
        getDirection(): number;
        changeState(val?: string): void;
        getState(): string;
        getRenderable(): boolean;
        getDisplay(): DisplayObject;
        move(moveData: op_client.IMoveData): void;
        movePosition(pos: Pos, angel: number): void;
        movePath(movePath: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE_BY_PATH): void;
        startMove(): void;
        stopMove(): void;
        getPosition(): Pos;
        setPosition(p: Pos): void;
        getRootPosition(): Pos;
        showBubble(text: string, setting: op_client.IChat_Setting): void;
        clearBubble(): void;
        showNickName(): void;
        showEffected(): void;
        showNickname(): void;
        turn(): void;
        setAlpha(val: number): void;
        mount(root: IElement): this;
        unmount(): this;
        addMount(ele: IElement, index: number): this;
        removeMount(ele: IElement): this;
        getDepth(): number;
        destroy(): void;
        protected _doMove(): void;
        protected createDisplay(): ElementDisplay;
        protected loadDisplayInfo(): void;
        protected addDisplay(): void;
        protected setDepth(depth: number): void;
        protected onDisplayReady(): void;
        protected onUpdateAnimationHandler(): void;
        protected updateBubble(): void;
        protected onMoveStart(): void;
        protected onMoveComplete(): void;
        protected onMoving(): void;
        protected get offsetY(): number;
        protected onCheckDirection(params: any): void;
        protected calculateDirectionByAngle(angle: any): number;
        protected mergeMounth(mounts: number[]): void;
        protected updateMounth(mounts: number[]): void;
    }
}

declare module 'game-core/rooms/player/Actor' {
    import { IElementManager, ISprite, MoveData } from "game-core/rooms/element";
    import { InputListener } from "game-core/game/input.service";
    import { op_client, op_gameconfig } from "pixelpai_proto";
    import { Player } from "game-core/rooms/player/player";
    import { Bag } from "game-core/rooms/player/bag/bag";
    import { Interactive } from "game-core/rooms/player/interactive/interactive";
    import { Friend } from "game-core/rooms/player/friend/friend";
    export class Actor extends Player implements InputListener {
        protected mElementManager: IElementManager;
        readonly GameObject: Phaser.GameObjects.GameObject;
        protected mBag: Bag;
        protected mFriend: Friend;
        protected mInteractive: Interactive;
        constructor(sprite: ISprite, mElementManager: IElementManager);
        getBag(): Bag;
        getFriend(): Friend;
        getInteractive(): Interactive;
        setRenderable(isRenderable: boolean): void;
        destroy(): void;
        downHandler(d: number, keyList: number[]): void;
        upHandler(): void;
        startMove(): void;
        stopMove(): void;
        move(moveData: op_client.IMoveData): void;
        movePath(movePath: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE_BY_PATH): void;
        protected onMoveComplete(): void;
        protected onMoving(): void;
        protected addToBlock(): void;
        set model(val: ISprite);
        get model(): ISprite;
        get package(): op_gameconfig.IPackage;
        set package(value: op_gameconfig.IPackage);
        set moveTime(val: number);
        get moveData(): MoveData;
    }
}

declare module 'game-core/rooms/player/player' {
    import { Element, MovePath, IElementManager } from "game-core/rooms/element";
    import { op_client } from "pixelpai_proto";
    import { ISprite } from "game-core/rooms/element";
    import { Pos } from "game-core/utils/pos";
    export class Player extends Element {
        protected mElementManager: IElementManager;
        protected nodeType: number;
        protected mOffsetY: number;
        constructor(sprite: ISprite, mElementManager: IElementManager);
        setModel(val: ISprite): void;
        move(moveData: op_client.IMoveData): void;
        movePath(movePath: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE_BY_PATH): void;
        setDirection(dir: number): void;
        changeState(val?: string): void;
        setPosition(pos: Pos): void;
        getPosition(): Pos;
        protected onCheckDirection(params: any): void;
        protected onMoveStart(): void;
        protected onMoveComplete(): void;
        protected preMoveComplete(): void;
        protected onMovePathPointComplete(params: any): void;
        protected mMovePathPointFinished(path: MovePath): void;
        protected get offsetY(): number;
    }
}

declare module 'game-core/rooms/player/bag/bag' {
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game/world.service";
    import { IEntity } from "game-core/rooms/entity";
    export class Bag extends PacketHandler implements IEntity {
        constructor(mWorld: WorldService);
        initialize(): boolean;
        register(): void;
        unRegister(): void;
        destroy(): void;
        requestVirtualWorldQueryPackage(bagId: number, page?: number, perPage?: number): void;
    }
}

declare module 'game-core/rooms/player/friend/friend' {
    import { WorldService } from "game-core/game/world.service";
    export class Friend {
        constructor(world: WorldService);
        requestFriend(callBack?: Function): void;
        friendList(): any[];
    }
}

declare module 'game-core/rooms/player/interactive/interactive' {
    import { PacketHandler } from "net-socket-packet";
    import { IEntity } from "game-core/rooms/entity";
    import { WorldService } from "game-core/game/world.service";
    export class Interactive extends PacketHandler implements IEntity {
        constructor(mWorld: WorldService);
        initialize(): boolean;
        register(): void;
        unRegister(): void;
        destroy(): void;
        requestTargetUI(uiId: any, id: any): void;
    }
}

declare module 'game-core/rooms/wall/wall' {
    import { BlockObject } from "game-core/rooms/cameras/block.object";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IRoomService } from "game-core/rooms/room";
    import { WallDisplay } from "game-core/rooms/display/wall.display";
    import { Pos } from "game-core/utils/pos";
    export enum Direction {
        UP = "up",
        LEFT = "left",
        RIGHT = "right",
        DOWN = "down"
    }
    export class Wall extends BlockObject {
        protected mDisplay?: WallDisplay;
        protected mDirection: Direction;
        protected mPosition: Pos;
        protected mID: number;
        constructor(room: IRoomService, id: number, pos: Pos, dir: Direction);
        setPosition(pos: Pos): void;
        protected createDisplay(): ElementDisplay;
        protected onInitializedHandler(): void;
        protected addDisplay(): void;
        protected setDepth(): void;
        get id(): number;
    }
}

declare module 'game-core/rooms/layer/grid.layer' {
    import { IRoomService } from "game-core/rooms/room";
    export class GridLayer extends Phaser.GameObjects.Graphics {
        constructor(scene: Phaser.Scene);
        draw(room: IRoomService): void;
    }
}

declare module 'game-core/rooms/display/animation' {
    import { op_gameconfig_01, op_def } from "pixelpai_proto";
    import { IPoint } from "game-capsule/lib/helpers";
    export interface IAnimationData {
        name: string;
        frameName: string[];
        frameRate: number;
        loop: boolean;
        baseLoc: Phaser.Geom.Point;
        collisionArea?: number[][];
        walkableArea?: number[][];
        originPoint: Phaser.Geom.Point;
        readonly interactiveArea?: op_def.IPBPoint2i[];
        readonly layer: op_gameconfig_01.IAnimationLayer[];
        readonly mountLayer: op_gameconfig_01.IAnimationMountLayer;
        createProtocolObject(): op_gameconfig_01.IAnimationData;
    }
    export class Animation implements IAnimationData {
        protected mNode: op_gameconfig_01.INode;
        protected mID: number;
        protected mBaseLoc: Phaser.Geom.Point;
        protected mFrameName: string[];
        protected mFrameRate: number;
        protected mLoop: boolean;
        protected mName: string;
        protected mCollisionArea: number[][];
        protected mWalkableArea: number[][];
        protected mOriginPoint: Phaser.Geom.Point;
        protected mInteractiveArea: IPoint[];
        protected mLayer: op_gameconfig_01.IAnimationLayer[];
        protected mMountLayer: op_gameconfig_01.IAnimationMountLayer;
        constructor(ani: op_gameconfig_01.IAnimationData);
        createProtocolObject(): op_gameconfig_01.IAnimationData;
        get baseLoc(): Phaser.Geom.Point;
        get id(): number;
        get frameName(): string[];
        get frameRate(): number;
        get loop(): boolean;
        get name(): string;
        get collisionArea(): number[][];
        get walkableArea(): number[][];
        get originPoint(): Phaser.Geom.Point;
        get interactiveArea(): op_def.IPBPoint2i[];
        get layer(): op_gameconfig_01.IAnimationLayer[];
        get mountLayer(): op_gameconfig_01.IAnimationMountLayer;
    }
}

declare module 'game-core/rooms/display/display.object' {
    import { DynamicSprite } from "game-core/ui/components/dynamic.sprite";
    import { DynamicImage } from "game-core/ui/components/dynamic.image";
    import { op_def } from "pixelpai_proto";
    import { ReferenceArea } from "game-core/rooms/editor/reference.area";
    import { IRoomService } from "game-core/rooms/room";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { IElement } from "game-core/rooms/element/element";
    import { AnimationData } from "game-core/rooms/element/sprite";
    export enum DisplayField {
        BACKEND = 1,
        STAGE = 2,
        FRONTEND = 3,
        FLAG = 4
    }
    export class DisplayObject extends Phaser.GameObjects.Container implements ElementDisplay {
        /**
          * 实际透明度，避免和tween混淆
          */
        protected mAlpha: number;
        protected mBaseLoc: Phaser.Geom.Point;
        protected mCollisionArea: number[][];
        protected mOriginPoint: Phaser.Geom.Point;
        protected mRoomService: IRoomService;
        protected mFlagContainer: Phaser.GameObjects.Container;
        protected mNickname: Phaser.GameObjects.Text;
        protected mBadges: DynamicImage[];
        protected mBackEffect: DynamicSprite;
        protected mFrontEffect: DynamicSprite;
        protected mReferenceArea: ReferenceArea;
        protected mElement: IElement;
        protected mChildMap: Map<string, any>;
        protected mDirection: number;
        protected mAntial: boolean;
        protected mActionName: AnimationData;
        constructor(scene: Phaser.Scene, roomService: IRoomService, element?: IElement, antial?: boolean);
        changeAlpha(val?: number): void;
        removeFromParent(): void;
        fadeIn(callback?: () => void): void;
        fadeOut(callback?: () => void): void;
        load(data: IFramesModel | IDragonbonesModel, field?: DisplayField): void;
        play(animationName: AnimationData, field?: DisplayField): void;
        mount(ele: Phaser.GameObjects.Container, targetIndex?: number): void;
        unmount(ele: Phaser.GameObjects.Container): void;
        destroy(fromScene?: boolean): void;
        showNickname(val: string): void;
        setDisplayBadges(cards: op_def.IBadgeCard[]): void;
        showRefernceArea(): void;
        hideRefernceArea(): void;
        scaleTween(): void;
        showEffect(): void;
        getElement(key: string): any;
        protected addEffect(target: DynamicSprite, textureURL: string, atlasURL?: string, isBack?: boolean, framerate?: number, loop?: boolean, killComplete?: boolean): void;
        protected layouFlag(offset?: number): void;
        protected clearBadges(): void;
        protected get flagContainer(): Phaser.GameObjects.Container;
        protected addChildMap(key: string, display: Phaser.GameObjects.GameObject): void;
        protected removeChildMap(key: string): void;
        get baseLoc(): Phaser.Geom.Point;
        get sortX(): number;
        get sortY(): number;
        get sortZ(): number;
        get element(): IElement;
        get collisionArea(): number[][];
        get originPoint(): Phaser.Geom.Point;
    }
}

declare module 'game-core/rooms/display/dragonbones.display' {
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { DisplayObject } from "game-core/rooms/display/display.object";
    import { IRoomService } from "game-core/rooms/room";
    import { IElement } from "game-core/rooms/element/element";
    import { AnimationData } from "game-core/rooms/element/sprite";
    export enum AvatarSlotType {
            BodyCostDres = "body_cost_$_dres",
            BodyCost = "body_cost_$",
            BodyTail = "body_tail_$",
            BodyWing = "body_wing_$",
            BodyBase = "body_base_$",
            BodySpec = "body_spec_$",
            FlegSpec = "fleg_spec_$",
            FlegBase = "fleg_base_$",
            FlegCost = "fleg_cost_$",
            BarmSpec = "barm_spec_$",
            BarmBase = "barm_base_$",
            BarmCost = "barm_cost_$",
            WeapBarm = "weap_barm_$",
            ShldBarm = "shld_barm_$",
            BlegSpec = "bleg_spec_$",
            BlegBase = "bleg_base_$",
            BlegCost = "bleg_cost_$",
            FarmSpec = "farm_spec_$",
            FarmBase = "farm_base_$",
            FarmCost = "farm_cost_$",
            ShldFarm = "shld_farm_$",
            WeapFarm = "weap_farm_$",
            HeadSpec = "head_spec_$",
            HeadMask = "head_mask_$",
            HeadEyes = "head_eyes_$",
            HeadBase = "head_base_$",
            HeadHairBack = "head_hair_$_back",
            HeadMous = "head_mous_$",
            HeadHair = "head_hair_$",
            HeadHats = "head_hats_$"
    }
    export enum AvatarPartType {
            BarmBase = "barm_base_#_$",
            BarmCost = "barm_cost_#_$",
            BarmSpec = "barm_spec_#_$",
            BlegBase = "bleg_base_#_$",
            BlegCost = "bleg_cost_#_$",
            BlegSpec = "bleg_spec_#_$",
            BodyBase = "body_base_#_$",
            BodyCost = "body_cost_#_$",
            BodyCostDres = "body_cost_#_$_dres",
            BodySpec = "body_spec_#_$",
            BodyTail = "body_tail_#_$",
            BodyWing = "body_wing_#_$",
            FarmBase = "farm_base_#_$",
            FarmCost = "farm_cost_#_$",
            FarmSpec = "farm_spec_#_$",
            FlegBase = "fleg_base_#_$",
            FlegCost = "fleg_cost_#_$",
            FlegSpec = "fleg_spec_#_$",
            HeadBase = "head_base_#_$",
            HeadEyes = "head_eyes_#_$",
            HeadHair = "head_hair_#_$",
            HeadHairBack = "head_hair_#_$_back",
            HeadHats = "head_hats_#_$",
            HeadMask = "head_mask_#_$",
            HeadMous = "head_mous_#_$",
            HeadSpec = "head_spec_#_$",
            ShldFarm = "shld_farm_#_$",
            WeapFarm = "weap_farm_#_$",
            ShldBarm = "shld_barm_#_$",
            WeapBarm = "weap_barm_#_$"
    }
    /**
        * 龙骨显示对象
        */
    export class DragonbonesDisplay extends DisplayObject implements ElementDisplay {
            mDisplayInfo: IDragonbonesModel | undefined;
            protected mAnimationName: string;
            protected mDragonbonesName: string;
            protected mArmatureDisplay: dragonBones.phaser.display.ArmatureDisplay | undefined;
            protected mFadeTween: Phaser.Tweens.Tween;
            constructor(scene: Phaser.Scene, roomService: IRoomService, element?: IElement, antial?: boolean);
            get spriteWidth(): number;
            get spriteHeight(): number;
            get GameObject(): DisplayObject;
            changeAlpha(val?: number): void;
            load(display: IDragonbonesModel): void;
            getDisplay(): dragonBones.phaser.display.ArmatureDisplay | undefined;
            play(val: AnimationData): void;
            fadeIn(callback?: () => void): void;
            fadeOut(callback?: () => void): void;
            destroy(): void;
            protected buildDragbones(): void;
            protected onLoadCompleteHandler(loader?: any, totalComplete?: number, totalFailed?: number): void;
            set dragonBonesName(val: string);
            get dragonBonesName(): string;
    }
}

declare module 'game-core/rooms/display/dragonbones.model' {
    import { op_def } from "pixelpai_proto";
    import { AnimationData } from "game-core/rooms/element/sprite";
    import { Direction } from "game-core/rooms/element/element";
    export interface IDragonbonesModel {
        readonly discriminator: string;
        id: number;
        avatarDir?: number;
        avatar?: IAvatar;
        animationName?: string;
        destroy(): any;
        getCollisionArea(aniName: string): number[][];
        getWalkableArea(aniName: string): number[][];
        getOriginPoint(aniName: string): Phaser.Geom.Point;
        existAnimation(aniName: string): boolean;
        getInteractiveArea(aniName: string): op_def.IPBPoint2i[] | undefined;
        findAnimation(baseName: string, dir: Direction): AnimationData;
    }
    export interface IAvatar {
        id: string;
        dirable?: (number[] | null);
        headBaseId?: (string | null);
        headHairId?: (string | null);
        headEyesId?: (string | null);
        headBackId?: (string | null);
        headMousId?: (string | null);
        headHatsId?: (string | null);
        headMaskId?: (string | null);
        headSpecId?: (string | null);
        bodyBaseId?: (string | null);
        bodyCostId?: (string | null);
        bodyDresId?: (string | null);
        bodyTailId?: (string | null);
        bodyWingId?: (string | null);
        bodySpecId?: (string | null);
        farmBaseId?: (string | null);
        farmCostId?: (string | null);
        farmShldId?: (string | null);
        farmWeapId?: (string | null);
        farmSpecId?: (string | null);
        barmBaseId?: (string | null);
        barmCostId?: (string | null);
        barmShldId?: (string | null);
        barmWeapId?: (string | null);
        barmSpecId?: (string | null);
        flegBaseId?: (string | null);
        flegCostId?: (string | null);
        flegSpecId?: (string | null);
        blegBaseId?: (string | null);
        blegCostId?: (string | null);
        blegSpecId?: (string | null);
        stalkerId?: (string | null);
    }
    export class DragonbonesModel implements IDragonbonesModel {
        discriminator: string;
        id: number;
        avatarDir?: number;
        avatar?: IAvatar;
        constructor(data: any);
        setInfo(val: any): void;
        destroy(): void;
        getCollisionArea(aniName: string): number[][];
        getWalkableArea(): number[][];
        getOriginPoint(aniName: any): Phaser.Geom.Point;
        getInteractiveArea(): op_def.IPBPoint2i[];
        existAnimation(aniName: string): boolean;
        findAnimation(baseName: string, dir: Direction): AnimationData;
    }
}

declare module 'game-core/rooms/display/frames.display' {
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { DisplayObject, DisplayField } from "game-core/rooms/display/display.object";
    import { IAnimationData } from "game-core/rooms/display/animation";
    import { AnimationData } from "game-core/rooms/element/sprite";
    /**
      * 序列帧显示对象
      */
    export class FramesDisplay extends DisplayObject {
        protected mFadeTween: Phaser.Tweens.Tween;
        protected mDisplayDatas: Map<DisplayField, IFramesModel>;
        protected mSprites: Map<DisplayField, Phaser.GameObjects.Sprite | Phaser.GameObjects.Image>;
        protected mScaleTween: Phaser.Tweens.Tween;
        protected mDisplays: Array<Phaser.GameObjects.Sprite | Phaser.GameObjects.Image>;
        protected mMountContainer: Phaser.GameObjects.Container;
        protected mMainSprite: Phaser.GameObjects.Sprite;
        protected mCurAnimation: IAnimationData;
        protected mMountList: Phaser.GameObjects.Container[];
        load(displayInfo: IFramesModel, field?: DisplayField): void;
        play(animation: AnimationData, field?: DisplayField): void;
        mount(display: Phaser.GameObjects.Container, targetIndex?: number): void;
        unmount(display: Phaser.GameObjects.Container): void;
        fadeIn(callback?: () => void): void;
        fadeOut(callback?: () => void): void;
        scaleTween(): void;
        setInteractive(shape?: Phaser.Types.Input.InputConfiguration | any, callback?: (hitArea: any, x: number, y: number, gameObject: Phaser.GameObjects.GameObject) => void, dropZone?: boolean): this;
        disableInteractive(): this;
        destroy(): void;
        protected createDisplay(key: string, ani: IAnimationData): void;
        protected clearFadeTween(): void;
        protected clear(): void;
        get spriteWidth(): number;
        get spriteHeight(): number;
    }
}

declare module 'game-core/rooms/display/frames.model' {
    import { op_gameconfig, op_gameconfig_01, op_def } from "pixelpai_proto";
    import { IAnimationData } from "game-core/rooms/display/animation";
    import { Sprite } from "game-core/rooms/element/sprite";
    import { Direction } from "game-core/rooms/element/element";
    import { AnimationData } from "game-core/rooms/element/sprite";
    export interface IFramesModel {
        readonly discriminator: string;
        readonly gene: string | undefined;
        id: number;
        avatarDir?: number;
        type?: string;
        display?: IDisplay | null;
        animations?: Map<string, IAnimationData>;
        animationName: string;
        package?: op_gameconfig.IPackage;
        shops?: op_gameconfig.IShop[] | null;
        getAnimations(name: string): IAnimationData;
        existAnimation(aniName: string): boolean;
        getCollisionArea(aniName: string, flip: boolean): number[][];
        getWalkableArea(aniName: string, flip: boolean): number[][];
        getInteractiveArea(aniName: string): op_def.IPBPoint2i[] | undefined;
        getOriginPoint(aniName: string, flip: boolean): Phaser.Geom.Point;
        createSprite(properties: object): Sprite;
        findAnimation(baseName: string, dir: Direction): AnimationData;
        destroy(): any;
    }
    export interface IDisplay {
        texturePath: string;
        dataPath?: string;
    }
    export class FramesModel implements IFramesModel {
        avatarDir?: number;
        readonly discriminator: string;
        id: number;
        type: string;
        display: IDisplay | null;
        animations: Map<string, IAnimationData>;
        animationName: string;
        package: op_gameconfig.IPackage;
        shops: op_gameconfig.IShop[];
        protected mGen: string;
        constructor(data: any);
        setInfo(val: any): void;
        getAnimationData(): Map<string, IAnimationData>;
        existAnimation(aniName: string): boolean;
        getAnimations(name: string): IAnimationData;
        destroy(): void;
        get gene(): string | undefined;
        createProtocolObject(): op_gameconfig_01.IAnimationData[];
        getCollisionArea(aniName: string, flip?: boolean): number[][];
        getWalkableArea(aniName: string, flip?: boolean): number[][];
        getInteractiveArea(aniName: string): op_def.IPBPoint2i[] | undefined;
        getOriginPoint(aniName: any, flip?: boolean): Phaser.Geom.Point;
        getDirable(): void;
        createSprite(properties: {
            nodeType: op_def.NodeType;
            x: number;
            y: number;
            z: number;
            id?: number;
            dir?: number;
            isMoss?: boolean;
        }): Sprite;
        findAnimation(baseName: string, dir: Direction): AnimationData;
    }
}

declare module 'game-core/ui/ui.manager' {
    import { WorldService } from "game-core/game";
    import { PacketHandler } from "net-socket-packet";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { InputTextFactory } from "game-core/ui/components/inputTextFactory";
    export class UiManager extends PacketHandler {
        constructor(worldService: WorldService);
        getInputTextFactory(): InputTextFactory;
        addPackListener(): void;
        removePackListener(): void;
        getUILayerManager(): ILayerManager;
        setScene(scene: Phaser.Scene): void;
        showMainUI(): void;
        showDecorateUI(): void;
        resize(width: number, height: number): void;
        setMediator(value: string, mediator: any): void;
        getMediator(type: string): any | undefined;
        clearMediator(): void;
        destroy(): void;
        baseFaceResize(): void;
        baseFaceTween(show: boolean): void;
        checkUIState(medName: string, show: boolean): void;
        showMed(type: string, ...param: any[]): void;
    }
}

declare module 'game-core/ui/layer.manager' {
    export interface ILayerManager {
        readonly interactive: Phaser.GameObjects.Container;
        readonly scene: Phaser.Scene;
        setScene(scene: Phaser.Scene): void;
        addToUILayer(obj: Phaser.GameObjects.GameObject): any;
        addToDialogLayer(obj: Phaser.GameObjects.GameObject): any;
        addToToolTipsLayer(obj: Phaser.GameObjects.GameObject): any;
        removeToUILayer(obj: Phaser.GameObjects.GameObject): any;
        removeToDialogLayer(obj: Phaser.GameObjects.GameObject): any;
        removeToToolTipsLayer(obj: Phaser.GameObjects.GameObject): any;
        destroy(): any;
    }
    export class LayerManager implements ILayerManager {
        setScene(scene: Phaser.Scene): void;
        addToUILayer(obj: Phaser.GameObjects.GameObject): void;
        addToDialogLayer(obj: Phaser.GameObjects.GameObject): void;
        addToToolTipsLayer(obj: Phaser.GameObjects.GameObject): void;
        removeToUILayer(obj: Phaser.GameObjects.GameObject): void;
        removeToDialogLayer(obj: Phaser.GameObjects.GameObject): void;
        removeToToolTipsLayer(obj: Phaser.GameObjects.GameObject): void;
        destroy(): void;
        get interactive(): Phaser.GameObjects.Container;
        get scene(): Phaser.Scene;
    }
}

declare module 'game-core/ui/ui.mediatorType' {
    export class UIMediatorType {
        static BagMediator: string;
        static ChatMediator: string;
        static NOTICE: string;
        static DIALOGO: string;
        static Turn_Btn_Top: string;
        static Turn_Btn_Bottom: string;
        static App_Back: string;
        static Editor_Save: string;
        static Editor_Cancel: string;
        static Close_Btn: string;
        static ControlF: string;
        static Storage: string;
        static UserInfo: string;
        static UserMenu: string;
        static MessageBox: string;
        static ComponentRank: string;
        static Rank: string;
        static VoteResult: string;
        static Shop: string;
        static MineSettle: string;
        static EquipUpgrade: string;
    }
}

declare module 'game-core/ui/ui.atals.name' {
    export class UIAtlasName {
        static common: string;
    }
    export class UIAtlasKey {
        static commonKey: string;
    }
}

declare module 'game-core/ui/components' {
    export { BasePanel } from "game-core/ui/components/BasePanel";
}

declare module 'game-core/net/http.service' {
    import { WorldService } from "game-core/game/world.service";
    export class HttpService {
            constructor(mWorld: WorldService);
            /**
                * 用户关注其他用户
                * @param uids
                */
            follow(fuid: string[]): Promise<Response>;
            /**
                * 用户取消关注其他用户
                * @param fuid
                */
            unfollow(fuid: string): Promise<Response>;
            /**
                * 检查用户列表是否有关注的用户
                * @param uids
                */
            checkFollowed(uids: string[]): Promise<Response>;
            /**
                * 登录
                * @param name
                * @param password
                */
            login(account: string, password: string): Promise<Response>;
            /**
                * 请求手机验证码
                * @param name
                */
            requestPhoneCode(phone: string): Promise<Response>;
            loginByPhoneCode(phone: string, code: string): Promise<Response>;
            quickLogin(): Promise<Response>;
            /**
                *
                * 获取用户好友列表
                */
            firend(): Promise<any>;
            /**
                * 获取用户信息
                * @param uid
                */
            userDetail(uid: string): Promise<any>;
            /**
                * 用户徽章
                * @param uid
                */
            badgecards(uid: string): Promise<any>;
    }
}

declare module 'game-core/net/socket' {
    import { ServerAddress } from "game-core/net/address";
    import { WSWrapper } from "game-core/net/transport/websocket";
    export interface IConnectListener {
        onConnected(connection?: SocketConnection): void;
        onDisConnected(connection?: SocketConnection): void;
        onError(reason: SocketConnectionError | undefined): void;
    }
    export class SocketConnectionError extends Error {
        name: string;
        constructor(reason: any);
    }
    export class SocketConnection {
        protected mTransport: WSWrapper;
        protected mServerAddr: ServerAddress;
        protected mConnectListener?: IConnectListener;
        constructor($listener: IConnectListener);
        startConnect(addr: ServerAddress): void;
        stopConnect(): void;
        send(data: any): void;
        destroy(): void;
        protected onConnected(): void;
        protected onData(data: any): void;
    }
}

declare module 'game-core/net/address' {
    export interface ServerAddress {
        readonly host: string;
        readonly port: number;
        readonly secure?: boolean;
    }
}

declare module 'game-core/loading/loading.manager' {
    import { WorldService } from "game-core/game/world.service";
    export interface IAsset {
        type: string;
        key: string;
        source: string;
    }
    export interface ILoadingManager {
        start(): Promise<any>;
        addAssets(asset: IAsset[]): Promise<any>;
        destroy(): any;
    }
    export class LoadingManager {
        constructor(world: WorldService);
        start(callBack?: Function): Promise<void>;
        addAssets(assets: IAsset[]): Promise<void>;
        startup(scene: Phaser.Scene): Promise<void>;
        destroy(): void;
        get game(): Phaser.Game;
    }
}

declare module 'game-core/rooms/map/map.model' {
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { op_client, op_gameconfig } from "pixelpai_proto";
    export class MapModel {
            mapId: number;
            zStart: number;
            zEnd: number;
            get bgSound(): number;
            set bgSound(value: number);
            get mapTotalWidth(): number;
            get mapTotalHeight(): number;
            /**
                * 获取格子宽（单位：像素）
                */
            get tileWidth(): number;
            /**
                * 获取格子高（单位：像素）
                */
            get tileHeight(): number;
            get terrainConfig(): any[];
            get elementConfig(): IFramesModel[];
            get cols(): number;
            set cols(value: number);
            get rows(): number;
            set rows(value: number);
            get voiceChatRoomId(): number;
            set voiceChatRoomId(value: number);
            setConfig(cols: number, rows: number, zStart: number, zEnd: number, tileWidth: number, tileHeight: number): void;
            setTerrainInfo(value: op_client.ITerrain[]): void;
            addTerrainInfo(value: op_client.ITerrain[]): void;
            setElementInfo(value: op_client.IElement[]): void;
            addElementInfo(value: op_client.IElement[]): void;
            addPackItems(elementId: number, items: op_gameconfig.IItem[]): void;
            removePackItems(elementId: number, itemId: number): boolean;
            getElementInfo(value: number): IFramesModel;
    }
}

declare module 'game-core/rooms/entity' {
    export interface IEntity {
        destroy(): any;
    }
}

declare module 'game-core/rooms/sky.box/block.manager' {
    import { WorldService } from "game-core/game/world.service";
    import { IScenery } from "game-core/rooms/sky.box/scenery";
    import { IRoomService } from "game-core/rooms/room";
    export interface IBlockManager {
        readonly world: WorldService;
        startPlay(scene: Phaser.Scene): any;
        check(time?: number, delta?: number): any;
    }
    export class BlockManager implements IBlockManager {
        constructor(scenery: IScenery, room: IRoomService);
        startPlay(scene: Phaser.Scene): void;
        check(time?: number, delta?: number): void;
        update(scenery: IScenery): void;
        setSize(imageW: number, imageH: number, gridW?: number, gridH?: number): void;
        updatePosition(): void;
        destroy(): void;
        get world(): WorldService;
        get scenery(): IScenery;
    }
}

declare module 'game-core/rooms/display/terrain.display' {
    import { FramesDisplay } from "game-core/rooms/display/frames.display";
    export class TerrainDisplay extends FramesDisplay {
        showRefernceArea(): void;
    }
}

declare module 'game-core/rooms/bubble/bubble.container' {
    import { op_client } from "pixelpai_proto";
    export class BubbleContainer extends Phaser.GameObjects.Container {
        constructor(scene: Phaser.Scene, scale: number);
        addBubble(text: string, bubbleSetting: op_client.IChat_Setting): void;
        updatePos(x: number, y: number): void;
        destroy(fromScene?: boolean): void;
        removeFormParent(): void;
    }
}

declare module 'game-core/rooms/element/shop/shop.entity' {
    import { PacketHandler } from "net-socket-packet";
    import { IEntity } from "game-core/rooms/entity";
    import { WorldService } from "game-core/game/world.service";
    export class ShopEntity extends PacketHandler implements IEntity {
        static NAME: string;
        constructor(mWorld: WorldService);
        initialize(): boolean;
        register(): void;
        unRegister(): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/action/AI' {
    import { AIAction } from "game-core/rooms/action/AIAction";
    import { Element } from "game-core/rooms/element/element";
    export class AI extends AIAction {
        constructor(owner: Element);
        execute(): void;
        nextAction(): void;
        addAction(action: AIAction, isbreak?: boolean): void;
        breakAction(): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/display/wall.display' {
    import { IRoomService } from "game-core/rooms/room";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { AnimationData } from "game-core/rooms/element/sprite";
    import { op_def } from "pixelpai_proto";
    import { IElement } from "game-core/rooms/element/element";
    import { Direction } from "game-core/rooms/wall/wall";
    export class WallDisplay extends Phaser.GameObjects.Container implements ElementDisplay {
        protected readonly roomService: IRoomService;
        constructor(scene: Phaser.Scene, roomService: IRoomService);
        loadDisplay(texture: string, data: string): void;
        setDir(dir: Direction): void;
        load(data: IFramesModel | IDragonbonesModel): void;
        changeAlpha(val?: number): void;
        play(animationName: AnimationData): void;
        removeFromParent(): void;
        fadeIn(callback?: () => void): void;
        fadeOut(callback?: () => void): void;
        showNickname(val: string): void;
        setDisplayBadges(cards: op_def.IBadgeCard[]): void;
        showRefernceArea(): void;
        hideRefernceArea(): void;
        showEffect(): void;
        get sortX(): number;
        get sortY(): number;
        get sortZ(): number;
        get baseLoc(): Phaser.Geom.Point;
        get element(): IElement;
    }
}

declare module 'game-core/ui/components/dynamic.sprite' {
    export class DynamicSprite extends Phaser.GameObjects.Sprite {
        constructor(scene: Phaser.Scene, x: number, y: number);
        load(textureURL: string, atlasURL: string, loadContext?: any, completeCallBack?: Function, errorCallBack?: Function): void;
        destroy(fromScene?: boolean): void;
    }
}

declare module 'game-core/ui/components/dynamic.image' {
    export class DynamicImage extends Phaser.GameObjects.Image {
        constructor(scene: Phaser.Scene, x: number, y: number);
        load(value: string, loadContext?: any, completeCallBack?: Function, errorCallBack?: Function): void;
        destroy(fromScene?: boolean): void;
        protected onLoadComplete(file?: string): void;
        protected onLoadError(file: Phaser.Loader.File): void;
    }
}

declare module 'game-core/rooms/editor/reference.area' {
    import { IRoomService } from "game-core/rooms/room";
    import { IPosition45Obj } from "game-core/utils/position45";
    export class ReferenceArea extends Phaser.GameObjects.Graphics {
        constructor(scene: Phaser.Scene, mRoomService: IRoomService);
        draw(area: number[][], origin: Phaser.Geom.Point): void;
        setPosition(x?: number, y?: number, z?: number, w?: number): this;
        get size(): IPosition45Obj;
    }
}

declare module 'game-core/ui/components/inputTextFactory' {
    import { WorldService } from "game-core/game/world.service";
    export class InputTextFactory {
        constructor(world: WorldService);
        getInputText(scene: Phaser.Scene, style?: any): InputTextField;
    }
    export const InputTextFieldEvent: {
        textchange: string;
        textclick: string;
        textdblclick: string;
        textfocus: string;
        textblur: string;
        textExit: string;
    };
    export class InputTextField extends Phaser.Events.EventEmitter {
        constructor(scene: Phaser.Scene, world: WorldService, config: any);
        onBlur(): void;
        onFocus(): void;
        getText(): string;
        getSkin(): Phaser.GameObjects.Text;
        destroy(): void;
    }
}

declare module 'game-core/ui/components/BasePanel' {
    import { WorldService } from "game-core/game/world.service";
    import { Panel } from "tooqingui";
    export class BasePanel extends Panel {
        protected mInitialized: boolean;
        protected mTweening: boolean;
        protected mScene: Phaser.Scene;
        protected mWorld: WorldService;
        protected mWidth: number;
        protected mHeight: number;
        protected mPanelTween: Phaser.Tweens.Tween;
        protected dpr: number;
        protected mResources: Map<string, any>;
        protected mReLoadResources: Map<string, any>;
        constructor(scene: Phaser.Scene, world: WorldService);
        protected addResources(key: string, resource: any): void;
        protected get scaleWidth(): number;
        protected get scaleHeight(): number;
        protected get cameraWidth(): number;
        protected get cameraHeight(): number;
    }
}

declare module 'game-core/net/transport/websocket' {
    import { EventEmitter } from "events";
    import { Buffer } from "buffer/";
    enum ReadyState {
        CONNECTING = 0,
        OPEN = 1,
        CLOSING = 2,
        CLOSED = 3
    }
    export class WSWrapper extends EventEmitter {
        secure: boolean;
        _host: string;
        _port: number;
        _connection: any;
        _readyState: ReadyState;
        _packets_q: Buffer[];
        _writable: boolean;
        _sent_count: number;
        _auto_reconnect: boolean;
        _force_close: boolean;
        constructor();
        constructor(host: string, port: number);
        Open(): void;
        Open(host: string, port: number): void;
        Close(): void;
        Send(packet: Buffer): void;
        destroy(): void;
    }
    export {};
}

declare module 'game-core/rooms/action/AIAction' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    import { Element } from "game-core/rooms/element/element";
    import { ActionGroup } from "game-core/rooms/action/ActionGroup";
    export abstract class AIAction implements IDispose {
        owner: Element;
        group: ActionGroup;
        isBreak: boolean;
        isEnd: boolean;
        nextAction(): void;
        abstract execute(): any;
        destroy(): void;
    }
}

declare module 'game-core/rooms/action/ActionGroup' {
    import { AIAction } from "game-core/rooms/action/AIAction";
    import { Handler } from "game-core/Handler/Handler";
    import { IDispose } from "game-core/rooms/action/IDispose";
    export class ActionGroup implements IDispose {
        list: AIAction[];
        current: AIAction;
        sleepAction: AIAction;
        compHandler: Handler;
        addAction(action: AIAction): void;
        nextAction(): void;
        setComplHandler(handler: Handler): void;
        clear(): void;
        stopCurrentAction(): void;
        isExecuting(): boolean;
        hasLast(): boolean;
        breakAction(): void;
        destroy(): void;
    }
}

declare module 'game-core/Handler/Handler' {
    export class Handler {
            /**
                * 从对象池内创建一个Handler，默认会执行一次并立即回收，如果不需要自动回收，设置once参数为false。
                * @param	caller 执行域(this)。
                * @param	method 回调方法。
                * @param	args 携带的参数。
                * @param	once 是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。
                * @return  返回创建的handler实例。
                */
            static create(caller: any, method: Function, args?: any[], once?: Boolean): Handler;
            caller: any;
            method: Function;
            args: any[];
            once: Boolean;
            protected _id: number;
            /**
                * 根据指定的属性值，创建一个 <code>Handler</code> 类的实例。
                * @param	caller 执行域。
                * @param	method 处理函数。
                * @param	args 函数参数。
                * @param	once 是否只执行一次。
                */
            constructor(caller?: any, method?: Function, args?: any[], once?: Boolean);
            /**
                * 设置此对象的指定属性值。
                * @param	caller 执行域(this)。
                * @param	method 回调方法。
                * @param	args 携带的参数。
                * @param	once 是否只执行一次，如果为true，执行后执行recover()进行回收。
                * @return  返回 handler 本身。
                */
            setTo(caller: any, method: Function, args: any[], once: Boolean): Handler;
            /**
                * 执行处理器。
                */
            run(): any;
            /**
                * 执行处理器，携带额外数据。
                * @param	data 附加的回调数据，可以是单数据或者Array(作为多参)。
                */
            runWith(data: any): any;
            /**
                * 清理对象引用。
                */
            clear(): Handler;
            /**
                * 清理并回收到 Handler 对象池内。
                */
            recover(): void;
    }
}

