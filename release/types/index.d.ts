// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../net-socket-packet
//   ../pixelpai_proto
//   ../game-capsule
//   ../game-capsule/lib/configobjects/animations
//   ../game-capsule/lib/configobjects/scene
//   ../phaser
//   ../game-capsule/lib/helpers
//   ../events
//   ../buffer
//   ../apowophaserui

declare module 'game-core' {
    export * from "game-core/game";
    export * from "game-core/utils";
    export * from "game-core/rooms";
    export * from "game-core/plugins";
    export * from "game-core/net";
    export * from "game-core/const";
    export * from "game-core/scenes";
    export * from "game-core/ui";
    export * from "game-core/ui/role";
    export * from "game-core/editor";
    export { i18n } from "game-core/i18n";
    export { GameMain, ILauncherConfig } from "game-core/launcher";
    export { Handler, HandlerDispatcher } from "game-core/Handler";
}

declare module 'game-core/game' {
    export { WorldService } from "game-core/game/world.service";
    export { World } from "game-core/game/world";
    export * from "game-core/game/world.events";
    export { IAccountData, Account } from "game-core/game/Account";
    export { JoyStickManager } from "game-core/game/joystick.manager";
}

declare module 'game-core/utils' {
    export { Pos } from "game-core/utils/pos";
    export { Tool } from "game-core/utils/tool";
    export { IPosition45Obj, Position45 } from "game-core/utils/position45";
    export { log, error, Logger } from "game-core/utils/log";
    export { Size } from "game-core/utils/size";
    export { load, checkIsFriend } from "game-core/utils/http";
    export { Url, ResUtils, BlackButton, BlueButton, WhiteButton, CloseButton, Background, Border, TransparentButton, Coin } from "game-core/utils/resUtil";
    export { Algorithm } from "game-core/utils/algorithm";
    export { isMobile } from "game-core/utils/device";
    export { Font } from "game-core/utils/font";
    export { Rectangle45 } from "game-core/utils/rectangle45";
    export { SortRectangle } from "game-core/utils/sort.rectangle";
}

declare module 'game-core/rooms' {
    export { IRoomService, SpriteAddCompletedListener, Room } from "game-core/rooms/room";
    export { ISkyBoxConfig, SkyBoxManager, IScenery, Fit, Scenery } from "game-core/rooms/sky.box";
    export { ClockReadyListener, Clock } from "game-core/rooms/Clock";
    export { IRoomManager, RoomManager } from "game-core/rooms/room.manager";
    export { TerrainManager, Terrain } from "game-core/rooms/terrain";
    export * from "game-core/rooms/element";
    export * from "game-core/rooms/player";
    export { WallManager } from "game-core/rooms/wall/wall.manager";
    export { RoomLayerManager } from "game-core/rooms/layer/room.layer.manager";
    export * from "game-core/rooms/display";
    export { GroupManager, GroupType } from "game-core/rooms/group/GroupManager";
    export { IGroup } from "game-core/rooms/group/IGroup";
    export { FrameManager } from "game-core/rooms/element/FrameManager";
    export * from "game-core/rooms/Animation";
    export * from "game-core/rooms/cameras";
}

declare module 'game-core/plugins' {
    export { BasicPlugin } from "game-core/plugins/basic.plugin";
    export { PluginManager } from "game-core/plugins/plugin.manager";
}

declare module 'game-core/net' {
    export { ConnectionService } from "game-core/net/connection.service";
    export { HttpService } from "game-core/net/http.service";
    export { IConnectListener, SocketConnection, SocketConnectionError } from "game-core/net/socket";
    export { ServerAddress } from "game-core/net/address";
}

declare module 'game-core/const' {
    export { MessageType } from "game-core/const/MessageType";
    export { Brush } from "game-core/const/brush";
    export { UI } from "game-core/const/res.const";
    export { HTTP_REGEX, PI_EXTENSION_REGEX } from "game-core/const/constants";
    export { LoaderType } from "game-core/const/loader";
}

declare module 'game-core/scenes' {
    export { BasicScene } from "game-core/scenes/basic.scene";
    export { PlayScene } from "game-core/scenes/play";
    export { AlphaScene } from "game-core/scenes/alpha";
    export { CreateRoleScene } from "game-core/scenes/create.character";
    export { EditScene } from "game-core/scenes/edit";
    export { GamePauseScene } from "game-core/scenes/gamepause";
    export { LoadingScene } from "game-core/scenes/loading";
    export { LoginScene } from "game-core/scenes/login";
    export { MainUIScene } from "game-core/scenes/main.ui";
    export { SelectCharacter } from "game-core/scenes/select.character";
    export { SkyBoxScene } from "game-core/scenes/sky.box";
}

declare module 'game-core/ui' {
    export { ILayerManager, LayerManager } from "game-core/ui/layer.manager";
    export { UiManager } from "game-core/ui/ui.manager";
    export * from "game-core/ui/ui.mediatorType";
    export * from "game-core/ui/ui.atals.name";
    export * from "game-core/ui/components";
    export * from "game-core/ui/baseView";
    export * from "game-core/ui/ElementStorage";
    export * from "game-core/ui/Notice";
    export * from "game-core/ui/Rank";
    export * from "game-core/ui/Shop";
    export * from "game-core/ui/UserInfo";
    export * from "game-core/ui/UserMenu";
    export * from "game-core/ui/alert";
    export * from "game-core/ui/bag";
    export * from "game-core/ui/chat";
    export * from "game-core/ui/decorate";
    export * from "game-core/ui/friend";
    export * from "game-core/ui/tips";
    export * from "game-core/ui/ControlF";
    export * from "game-core/ui/DebugLogger";
    export * from "game-core/ui/DecorateControl";
    export * from "game-core/ui/ComponentRank";
    export * from "game-core/ui/role";
    export * from "game-core/ui/Bubble";
}

declare module 'game-core/ui/role' {
    export { CreateRole, ICreateRole } from "game-core/ui/role/create.role";
    export { RoleManager } from "game-core/ui/role/role.manager";
    export { CreateRolePanel } from "game-core/ui/role/create.role.panel";
}

declare module 'game-core/editor' {
    export { EditorLauncher, EditorCanvasType } from "game-core/editor/editor.launcher";
    export { ElementEditorCanvas, ElementEditorEmitType, ElementEditorBrushType } from "game-core/editor/canvas/element/element.editor.canvas";
    export { AvatarEditorCanvas } from "game-core/editor/canvas/avatar/avatar.editor.canvas";
}

declare module 'game-core/i18n' {
    export function initLocales(path: string): Promise<any>;
    export const i18n: import("i18next").i18n;
}

declare module 'game-core/launcher' {
    export interface ILauncherConfig {
        auth_token: string;
        token_expire: string | null;
        token_fingerprint: string;
        server_addr: any | undefined;
        game_id: string;
        virtual_world_id: string;
        ui_scale?: number;
        devicePixelRatio?: number;
        scale_ratio?: number;
        platform?: string;
        width: number;
        height: number;
        modulePath?: string;
        modules?: string[];
        readonly screenWidth: number;
        readonly screenHeight: number;
        readonly baseWidth: number;
        readonly baseHeight: number;
        readonly game_created?: Function;
        readonly connection?: any;
        readonly isEditor?: boolean;
        readonly osd?: string;
        readonly closeGame: Function;
        readonly parent?: string;
    }
    export interface GameMain {
        resize(newWidth: any, newHeight: any): any;
        onOrientationChange(oriation: number, newWidth: number, newHeight: number): any;
        scaleChange(scale: number): any;
        enableClick(): any;
        disableClick(): any;
        startFullscreen(): void;
        stopFullscreen(): void;
        createGame(): void;
        setGameConfig(config: any): void;
        updatePalette(palette: any): void;
        updateMoss(moss: any): void;
        destroy(): void;
    }
    export class Launcher {
        get config(): ILauncherConfig;
        static start(config?: ILauncherConfig): Launcher;
        static DeserializeNode(buffer: any): void;
        static startElementEditor(config: any): void;
        readonly minWidth = 1280;
        readonly minHeight = 720;
        readonly maxWidth = 1920;
        readonly maxHeight = 1080;
        constructor(config?: ILauncherConfig);
        enableClick(): void;
        disableClick(): void;
        startFullscreen(): void;
        stopFullscreen(): void;
        setGameConfig(config: any): void;
        updatePalette(palette: any): void;
        updateMoss(moss: any): void;
        registerReload(func: Function): void;
        registerComplete(func: Function): void;
        onResize(width: number, height: number, ui_scale?: number): void;
        onOrientationChange(orientation: number, width: number, height: number): void;
        destroy(): void;
    }
}

declare module 'game-core/Handler' {
    export { Handler } from "game-core/Handler/Handler";
    export { HandlerDispatcher } from "game-core/Handler/HandlerDispatcher";
}

declare module 'game-core/game/world.service' {
    import { IRoomManager, IRoomService, Clock } from "game-core/rooms";
    import { Size } from "game-core/utils";
    import { UiManager } from "game-core/ui";
    import { InputManager } from "game-core/game/input.service";
    import { Account } from "game-core/game/Account";
    import { HttpService } from "game-core/net";
    import { MouseManager } from "game-core/game/mouse.manager";
    import { ConnectionService } from "game-core/net";
    import { ISoundConfig } from "game-core/game/sound.manager";
    import { PluginManager } from "game-core/plugins";
    import { ILoadingManager } from "game-core/loading/loading.manager";
    export interface WorldService {
        connection: ConnectionService;
        clock: Clock;
        moveStyle: number;
        orientation: number;
        readonly game: Phaser.Game;
        readonly roomManager: IRoomManager;
        readonly elementStorage: any;
        readonly uiManager: UiManager;
        readonly inputManager: InputManager;
        readonly mouseManager: MouseManager;
        readonly loadingManager: ILoadingManager;
        readonly httpService: HttpService;
        readonly uiScale: number;
        readonly scaleRatio: number;
        readonly uiRatio: number;
        readonly account: Account;
        readonly modulePath: string;
        readonly emitter: Phaser.Events.EventEmitter;
        readonly pluginManager: PluginManager;
        reconnect(): any;
        startHeartBeat(): any;
        changeScene(): any;
        getSize(): Size;
        getConfig(): any;
        getModuleRootPath(): string;
        getModulePath(name: string): string;
        getGameConfig(): Phaser.Types.Core.GameConfig;
        onFocus(): any;
        onBlur(): any;
        changeRoom(room: IRoomService): any;
        startFullscreen(): any;
        stopFullscreen(): any;
        closeGame(): any;
        loadSceneConfig(sceneId: string): Promise<any>;
        playSound(config: ISoundConfig): any;
        showLoading(): any;
    }
}

declare module 'game-core/game/world' {
    import "phaser";
    import "apowophaserui";
    import { WorldService } from "game-core/game/world.service";
    import { PacketHandler, PBpacket } from "net-socket-packet";
    import { IConnectListener, SocketConnection, SocketConnectionError, ConnectionService } from "game-core/net";
    import { op_def } from "pixelpai_proto";
    import { Size } from "game-core/utils";
    import { IRoomManager, IRoomService } from "game-core/rooms";
    import { MouseManager } from "game-core/game/mouse.manager";
    import { GameMain, ILauncherConfig } from "game-core/launcher";
    import { IElementStorage } from "game-core/game/element.storage";
    import { Lite, Capsule, PaletteNode, MossNode } from "game-capsule";
    import { UiManager } from "game-core/ui";
    import { InputManager } from "game-core/game/input.service";
    import { Account } from "game-core/game/Account";
    import { HttpService } from "game-core/net";
    import { Clock, ClockReadyListener } from "game-core/rooms/Clock";
    import { ISoundConfig } from "game-core/game/sound.manager";
    import { ILoadingManager } from "game-core/loading/loading.manager";
    import { PluginManager } from "game-core/plugins";
    export class World extends PacketHandler implements IConnectListener, WorldService, GameMain, ClockReadyListener {
            static SCALE_CHANGE: string;
            constructor(config: ILauncherConfig, callBack?: Function);
            focusoutFunc: () => void;
            get moveStyle(): number;
            getConfig(): ILauncherConfig;
            setGameConfig(config: Capsule): void;
            updatePalette(palette: PaletteNode): void;
            updateMoss(moss: MossNode): void;
            destroy(): void;
            getModuleRootPath(): string;
            getModulePath(name: string): string;
            onConnected(connection?: SocketConnection): void;
            onDisConnected(connection?: SocketConnection): void;
            onError(reason: SocketConnectionError | undefined): void;
            onClientErrorHandler(packet: PBpacket): void;
            /**
                * 当scene发生改变时，调用该方法并传入各个需要调整监听的manager中去
                */
            changeRoom(room: IRoomService): void;
            getSize(): Size | undefined;
            scaleChange(scale: number): void;
            closeGame(): void;
            resize(width: number, height: number): void;
            onOrientationChange(orientation: number, width: number, height: number): void;
            startFullscreen(): void;
            stopFullscreen(): void;
            onGotoAnotherGame(packet: PBpacket): void;
            changeScene(): Promise<void>;
            reconnect(): void;
            startHeartBeat(): void;
            playSound(config: ISoundConfig): void;
            get uiScale(): number;
            get uiRatio(): number;
            get scaleRatio(): number;
            get game(): Phaser.Game | undefined;
            get roomManager(): IRoomManager | undefined;
            get orientation(): number;
            get elementStorage(): IElementStorage | undefined;
            get uiManager(): UiManager | undefined;
            get mouseManager(): MouseManager;
            get pluginManager(): PluginManager;
            get inputManager(): InputManager | undefined;
            get connection(): ConnectionService;
            get clock(): Clock;
            get emitter(): Phaser.Events.EventEmitter;
            get httpService(): HttpService;
            get account(): Account;
            get modulePath(): string;
            get modules(): any;
            get loadingManager(): ILoadingManager;
            enableClick(): void;
            disableClick(): void;
            showLoading(): Promise<any>;
            getGameConfig(): Phaser.Types.Core.GameConfig;
            onClockReady(): void;
            onFocus(): void;
            onBlur(): void;
            initgameConfigUrls(urls: string[]): void;
            getConfigUrl(sceneId: string): string;
            loadSceneConfig(sceneId: string): Promise<Lite>;
            createGame(keyEvents?: op_def.IKeyCodeEvent[]): Promise<void>;
    }
}

declare module 'game-core/game/world.events' {
    export enum SceneEvent {
        SCENE_CREATE = "scene_create",
        SCENE_CHANGE = "scene_change",
        SCENE_DESTROY = "scene_destroy",
        SCENE_PAUSE = "scene_pause",
        SCENE_RESUME = "scene_resume"
    }
    export enum GameEvent {
        GAME_CREATE = "game_create",
        GAME_CLEAR = "game_clear",
        GAME_DESTROY = "game_destroy"
    }
    export enum UIEvent {
        SHOW_UI = "show_ui",
        HIDE_UI = "hide_ui"
    }
    export enum ModuleEvent {
        MODULE_INIT = "module_init",
        MODULE_DESTROY = "module_destroy"
    }
}

declare module 'game-core/game/Account' {
    export interface IAccountData {
        token: string;
        expire: number;
        fingerprint: string;
    }
    export class Account {
        constructor();
        setAccount(val: any): void;
        get accountData(): IAccountData | undefined;
    }
}

declare module 'game-core/game/joystick.manager' {
    import { WorldService } from "game-core/game/world.service";
    import { InputListener, InputManager } from "game-core/game/input.service";
    import { IRoomService } from "game-core/rooms/room";
    import { op_def } from "pixelpai_proto";
    export class JoyStickManager implements InputManager {
        constructor(worldService: WorldService, keyEvents: op_def.IKeyCodeEvent[]);
        onRoomChanged(currentRoom: IRoomService, previousRoom?: IRoomService): void;
        setScene(scene: Phaser.Scene): void;
        resize(): void;
        tweenView(show: boolean): void;
        addListener(l: InputListener): void;
        getKeyCodes(eventName: number): number[];
        removeListener(l: InputListener): void;
        getKeyDowns(): number[];
        getKeyUps(): number[];
        downHandler(): void;
        upHandler(): void;
        set enable(val: boolean);
        get enable(): boolean;
    }
    export class JoyStick {
        btn: Phaser.GameObjects.Sprite;
        constructor(scene: Phaser.Scene, world: WorldService, parentCon: Phaser.GameObjects.Container, joyListeners: InputListener[], scale: number);
        load(): void;
        onListener(): void;
        offListener(): void;
        changeListeners(list: InputListener[]): void;
    }
}

declare module 'game-core/utils/pos' {
    export class Pos {
        x: number;
        y: number;
        z?: number;
        depth?: number;
        constructor();
        constructor(x: number, y: number, z?: number, depth?: number);
        add(x: number, y: number, z?: number): Pos;
        equal(p: Pos): boolean;
        toString(): string;
        toPoint(): Phaser.Geom.Point;
    }
}

declare module 'game-core/utils/tool' {
    import { Pos } from "game-core/utils/pos";
    export class Tool {
            /**
                * scene之间坐标转换
                * @param fromScene 当前所在scene
                * @param pos 需要转换去scene上的position
                */
            static getPosByScenes(fromScene: Phaser.Scene, pos: Pos): Pos;
            static twoPointDistance(p1: any, p2: any): number;
            /**
                * 两点之间弧度
                * @param baseP
                * @param moveP
                */
            static twoPointRadin(baseP: any, moveP: any): number;
            static formatChineseString(context: string, fontSize: number | string, lineWidth: number): string;
            static checkChinese(name: string): boolean;
            static checkItemName(name: string, checkStr: string): boolean;
            static checkPointerContains(gameObject: any, pointer: Phaser.Input.Pointer): boolean;
            static baseName(str: any): string;
    }
}

declare module 'game-core/utils/position45' {
    import { Pos } from "game-core/utils/pos";
    export interface IPosition45Obj {
        readonly cols: number;
        readonly rows: number;
        readonly tileWidth: number;
        readonly tileHeight: number;
        readonly sceneWidth?: number;
        readonly sceneHeight?: number;
        readonly offset?: Phaser.Geom.Point;
    }
    export class Position45 {
        static transformTo90(point: Pos, position: IPosition45Obj): Pos;
        static transformTo45(point3: Pos, position: IPosition45Obj): Pos;
    }
}

declare module 'game-core/utils/log' {
    export class Logger {
        constructor();
        static getInstance(): Logger;
        fatal(message?: any, ...optionalParams: any[]): void;
        log(message?: any, ...optionalParams: any[]): void;
        error(message?: any, ...optionalParams: any[]): void;
        warn(message?: any, ...optionalParams: any[]): void;
        debug(message?: any, ...optionalParams: any[]): void;
        info(message?: any, ...optionalParams: any[]): void;
        getErrorList(): string[];
        getWarnList(): string[];
    }
    export function log(message: any, ...optionalParams: any[]): void;
    export function error(message: any, ...optionalParams: any[]): void;
}

declare module 'game-core/utils/size' {
    export class Size extends Phaser.Structs.Size {
        constructor(width?: number, height?: number);
    }
}

declare module 'game-core/utils/http' {
    export function load(path: string, responseType: XMLHttpRequestResponseType): Promise<any>;
    export function checkIsFriend(uids: number[]): Promise<Response>;
}

declare module 'game-core/utils/resUtil' {
    export class Url {
        static OSD_PATH: string;
        static RES_PATH: string;
        static RESUI_PATH: string;
        static MODULE_PATH: string;
        static getRes(value: string, modulePath?: string): string;
        static getUIRes(dpr: number, value: string, modulePath?: string): string;
        static getOsdRes(value: string): string;
    }
    export class ResUtils {
        static getPartName(value: string): string;
        static getPartUrl(value: string): string;
        static getGameConfig(value: string): string;
    }
    export class BlackButton {
        static getName(): string;
        static getPNG(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            top: number;
            left: number;
            right: number;
            bottom: number;
        };
    }
    export class BlueButton {
        static getName(): string;
        static getPNG(): string;
        static getJSON(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class WhiteButton {
        static getName(): string;
        static getPNG(): string;
        static getJSON(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class CloseButton {
        static getName(): string;
        static getPNG(): string;
        static getJSON(): string;
        static getFrameConfig(): Phaser.Types.Loader.FileTypes.ImageFrameConfig;
    }
    export class Background {
        static getName(): string;
        static getPNG(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class Border {
        static getName(): string;
        static getPNG(): string;
        static getColumns(): number[];
        static getRows(): number[];
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class TransparentButton {
        static getName(): string;
        static getPNG(): string;
        static getJSON(): string;
        static getConfig(): {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
    }
    export class Coin {
        static getIcon(coinType: number): string;
        static getName(coinType: number): string;
    }
}

declare module 'game-core/utils/algorithm' {
    export class Algorithm {
        static median(arr: number[]): number;
    }
}

declare module 'game-core/utils/device' {
    export function isMobile(game: Phaser.Game): boolean;
}

declare module 'game-core/utils/font' {
    export class Font {
        static readonly YAHEI_14_BOLD: string;
        static readonly YAHEI_16_BOLD: string;
        static readonly YAHEI_18_BOLD: string;
        static readonly YAHEI_20_BOLD: string;
        static readonly ZH_MAIN = "Source Han Sans";
        static readonly EN_MAINT = "tt0503m_";
        static readonly EN_BOLD = "tt0173m_";
        static get DEFULT_FONT(): "tt0503m_" | "Source Han Sans";
        static get BOLD_FONT(): "Source Han Sans" | "tt0173m_";
    }
}

declare module 'game-core/utils/rectangle45' {
    import Rectangle = Phaser.Geom.Rectangle;
    export class Rectangle45 extends Rectangle {
        row: number;
        col: number;
        endRow: number;
        endCol: number;
        constructor(row: number, col: number, endRow: number, endCol: number);
    }
}

declare module 'game-core/utils/sort.rectangle' {
    import { Pos } from "game-core/utils/pos";
    export class SortRectangle {
        setArea(val: number[][]): void;
        get left(): Pos;
        get right(): Pos;
        get top(): Pos;
        get bottom(): Pos;
    }
}

declare module 'game-core/rooms/room' {
    import { IRoomManager } from "game-core/rooms/room.manager";
    import { ElementManager } from "game-core/rooms/element/element.manager";
    import { PlayerManager } from "game-core/rooms/player/player.manager";
    import { RoomLayerManager } from "game-core/rooms/layer/room.layer.manager";
    import { TerrainManager } from "game-core/rooms/terrain/terrain.manager";
    import { ConnectionService } from "game-core/net";
    import { op_client, op_def } from "pixelpai_proto";
    import { IPosition45Obj } from "game-core/utils";
    import { ICameraService } from "game-core/rooms/cameras/cameras.manager";
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { ViewblockService } from "game-core/rooms/cameras/viewblock.manager";
    import { Pos } from "game-core/utils/pos";
    import { ClockReadyListener } from "game-core/rooms/Clock";
    import IActor = op_client.IActor;
    import { IElement } from "game-core/rooms/element/element";
    import { IBlockObject } from "game-core/rooms/cameras/block.object";
    import { WallManager } from "game-core/rooms/wall/wall.manager";
    import { SkyBoxManager, IScenery } from "game-core/rooms/sky.box";
    import { GroupManager } from "game-core/rooms/group/GroupManager";
    import { FrameManager } from "game-core/rooms/element/FrameManager";
    import { State } from "game-core/rooms/state/state.group";
    import { EffectManager } from "game-core/rooms/effect/effect.manager";
    export interface SpriteAddCompletedListener {
        onFullPacketReceived(sprite_t: op_def.NodeType): void;
    }
    export interface IRoomService {
        readonly id: number;
        readonly terrainManager: TerrainManager;
        readonly elementManager: ElementManager;
        readonly playerManager: PlayerManager;
        readonly layerManager: RoomLayerManager;
        readonly cameraService: ICameraService;
        readonly effectManager: EffectManager;
        readonly roomSize: IPosition45Obj;
        readonly miniSize: IPosition45Obj;
        readonly blocks: ViewblockService;
        readonly world: WorldService;
        readonly enableEdit: boolean;
        readonly sceneType: op_def.SceneTypeEnum;
        readonly scene: Phaser.Scene | undefined;
        readonly connection: ConnectionService | undefined;
        now(): number;
        startLoad(): any;
        completeLoad(): any;
        startPlay(): any;
        enter(room: op_client.IScene): void;
        pause(): void;
        resume(name: string | string[]): void;
        transformTo45(p: Pos): Pos;
        transformTo90(p: Pos): Pos;
        transformToMini45(p: Pos): Pos;
        transformToMini90(p: Pos): Pos;
        addBlockObject(object: IBlockObject): any;
        removeBlockObject(object: IBlockObject): any;
        updateBlockObject(object: IBlockObject): any;
        addToGround(element: ElementDisplay | ElementDisplay[], index?: number): any;
        addToSurface(element: ElementDisplay | ElementDisplay[]): any;
        addToSceneUI(element: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[]): any;
        addToUI(element: Phaser.GameObjects.Container | Phaser.GameObjects.Container[]): any;
        addMouseListen(): any;
        getElement(id: number): IElement;
        update(time: number, delta: number): void;
        destroy(): any;
    }
    export class Room extends PacketHandler implements IRoomService, SpriteAddCompletedListener, ClockReadyListener {
        protected manager: IRoomManager;
        protected mWorld: WorldService;
        protected mID: number;
        protected mTerrainManager: TerrainManager;
        protected mElementManager: ElementManager;
        protected mPlayerManager: PlayerManager;
        protected mWallManager: WallManager;
        protected mLayManager: RoomLayerManager;
        protected mGroupManager: GroupManager;
        protected mFrameManager: FrameManager;
        protected mSkyboxManager: SkyBoxManager;
        protected mEffectManager: EffectManager;
        protected mScene: Phaser.Scene | undefined;
        protected mSize: IPosition45Obj;
        protected mMiniSize: IPosition45Obj;
        protected mCameraService: ICameraService;
        protected mBlocks: ViewblockService;
        protected mEnableEdit: boolean;
        protected mScaleRatio: number;
        protected mStateMap: Map<string, State>;
        constructor(manager: IRoomManager);
        enter(data: op_client.IScene, callback?: Function): void;
        onFullPacketReceived(sprite_t: op_def.NodeType): void;
        onClockReady(): void;
        startLoad(): void;
        completeLoad(): void;
        startPlay(): void;
        pause(): void;
        resume(name: string): void;
        addActor(data: IActor): void;
        addBlockObject(object: IBlockObject): void;
        removeBlockObject(object: IBlockObject): void;
        updateBlockObject(object: IBlockObject): void;
        addToGround(element: ElementDisplay | ElementDisplay[], index?: number): void;
        addToSurface(element: ElementDisplay | ElementDisplay[]): void;
        addToSceneUI(element: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[]): void;
        addToUI(element: Phaser.GameObjects.Container | Phaser.GameObjects.Container[]): void;
        resize(width: number, height: number): void;
        transformTo90(p: Pos): Pos;
        transformTo45(p: Pos): Pos;
        transformToMini90(p: Pos): Pos;
        transformToMini45(p: Pos): Pos;
        addMouseListen(): void;
        getElement(id: number): IElement;
        moveable(pos: Pos): boolean;
        update(time: number, delta: number): void;
        updateClock(time: number, delta: number): void;
        now(): number;
        getMaxScene(): {
            width: number;
            height: number;
        };
        setState(states: op_def.IState[]): void;
        clear(): void;
        destroy(): void;
        protected addSkyBox(scenery: IScenery): void;
        protected onPointerDownHandler(pointer: Phaser.Input.Pointer): void;
        protected onPointerUpHandler(pointer: Phaser.Input.Pointer): void;
        protected addPointerMoveHandler(): void;
        protected removePointerMoveHandler(): void;
        protected onPointerMoveHandler(pointer: Phaser.Input.Pointer): void;
        protected onGameOutHandler(): void;
        protected handlerState(state: State): void;
        get scene(): Phaser.Scene | undefined;
        get terrainManager(): TerrainManager;
        get elementManager(): ElementManager;
        get playerManager(): PlayerManager;
        get layerManager(): RoomLayerManager;
        get groupManager(): GroupManager;
        get frameManager(): FrameManager;
        get cameraService(): ICameraService;
        get effectManager(): EffectManager;
        get id(): number;
        get roomSize(): IPosition45Obj | undefined;
        get miniSize(): IPosition45Obj | undefined;
        get blocks(): ViewblockService;
        get world(): WorldService | undefined;
        get enableEdit(): boolean;
        get connection(): ConnectionService | undefined;
        get sceneType(): op_def.SceneTypeEnum;
        get mods(): string[];
    }
}

declare module 'game-core/rooms/sky.box' {
    export { ISkyBoxConfig, SkyBoxManager } from "game-core/rooms/sky.box/sky.box.manager";
    export { IScenery, Fit, Scenery } from "game-core/rooms/sky.box/scenery";
}

declare module 'game-core/rooms/Clock' {
    import { PacketHandler } from "net-socket-packet";
    import { ConnectionService } from "game-core/net/connection.service";
    export interface ClockReadyListener {
        onClockReady(): void;
    }
    export class Clock extends PacketHandler {
        protected get sysUnixTime(): number;
        set unixTime(t: number);
        get unixTime(): number;
        constructor(conn: ConnectionService, listener?: ClockReadyListener);
        sync(times?: number): void;
        update(time: number, delta: number): void;
        clearTime(): void;
        destroy(): void;
        get clockSync(): boolean;
        protected _check(): void;
        get medianLatency(): number;
    }
}

declare module 'game-core/rooms/room.manager' {
    import { WorldService } from "game-core/game";
    import { ConnectionService } from "game-core/net";
    import { Room, IRoomService } from "game-core/rooms/room";
    import { PacketHandler } from "net-socket-packet";
    export interface IRoomManager {
        readonly world: WorldService | undefined;
        readonly currentRoom: Room | undefined;
        readonly connection: ConnectionService | undefined;
        addPackListener(): any;
        removePackListener(): any;
        resize(width: number, height: number): any;
        onFocus(): any;
        onBlur(): any;
        destroy(): any;
    }
    export class RoomManager extends PacketHandler implements IRoomManager {
        protected mWorld: WorldService;
        constructor(world: WorldService);
        addPackListener(): void;
        removePackListener(): void;
        getRoom(id: number): IRoomService | undefined;
        onFocus(): void;
        onBlur(): void;
        pasuseRoom(id: number): void;
        resumeRoom(id: number): void;
        stop(): void;
        resize(width: number, height: number): void;
        destroy(): void;
        get world(): WorldService;
        get currentRoom(): Room;
        get connection(): ConnectionService;
    }
}

declare module 'game-core/rooms/terrain' {
    export { TerrainManager } from "game-core/rooms/terrain/terrain.manager";
    export { Terrain } from "game-core/rooms/terrain/terrain";
}

declare module 'game-core/rooms/element' {
    export * from "game-core/rooms/element/sprite";
    export { ElementManager, IElementManager } from "game-core/rooms/element/element.manager";
    export * from "game-core/rooms/element/element";
    export { FrameManager } from "game-core/rooms/element/FrameManager";
}

declare module 'game-core/rooms/player' {
    export { PlayerManager } from "game-core/rooms/player/player.manager";
    export { Actor } from "game-core/rooms/player/Actor";
    export { Player } from "game-core/rooms/player/player";
    export { Bag } from "game-core/rooms/player/bag/bag";
    export { Friend } from "game-core/rooms/player/friend/friend";
    export { Interactive } from "game-core/rooms/player/interactive/interactive";
}

declare module 'game-core/rooms/wall/wall.manager' {
    import { IRoomService } from "game-core/rooms/room";
    import { Direction } from "game-core/rooms/wall/wall";
    import { PacketHandler } from "net-socket-packet";
    export class WallManager extends PacketHandler {
        protected mRoom: IRoomService;
        static COMPLETE: string;
        constructor(mRoom: IRoomService);
        hasElement(id: any): boolean;
        deleElement(id: any): void;
        destroy(): void;
        protected _add(x: number, y: number, dir: Direction): void;
    }
}

declare module 'game-core/rooms/layer/room.layer.manager' {
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IRoomService } from "game-core/rooms/room";
    import { GridLayer } from "game-core/rooms/layer/grid.layer";
    export class RoomLayerManager {
            /**
                * 背景层1(用于鼠标点击移动)
                */
            protected mGroundClickLayer: Phaser.GameObjects.Container;
            /**
                * 背景层2
                */
            protected mUGroundLayer2: Phaser.GameObjects.Container;
            /**
                * 舞台地皮层（地块）
                */
            protected mGroundLayer: Phaser.GameObjects.Container;
            /**
                * 网格层
                * 介于地皮和地表中间
                */
            protected mTileLayer: GridLayer;
            /**
                * 舞台地表层（包括角色，物件 ，特效等）
                */
            protected mSurfaceLayer: Phaser.GameObjects.Container;
            protected mSurfaceInteractived: boolean;
            /**
                * 舞台大气层
                */
            protected mAtmosphere: Phaser.GameObjects.Container;
            /**
                * 场景中的ui，可能跟跟随物件或人物
                */
            protected mSceneUILayer: Phaser.GameObjects.Container;
            /**
                * ui层(该层不跟随相机移动)
                */
            protected mUILayer: Phaser.GameObjects.Container;
            protected mMiddleLayer: Phaser.GameObjects.Container;
            constructor(room: IRoomService);
            addToGround(ele: ElementDisplay | ElementDisplay[], index?: number): void;
            addToSurface(ele: ElementDisplay | ElementDisplay[]): void;
            addToSceneToUI(child: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[]): void;
            addToUI(child: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[]): void;
            addToAtmosphere(child: Phaser.GameObjects.GameObject): void;
            addToMiddle(child: Phaser.GameObjects.GameObject): void;
            resize(width: number, height: number): void;
            addMouseListen(): void;
            sortSurface(): void;
            changeScene(): void;
            drawGrid(room: IRoomService): void;
            setGridVisible(visible: boolean): void;
            update(time: number, delta: number): void;
            setSurfaceInteractive(val: boolean): void;
            destroy(): void;
            set depthSurfaceDirty(val: boolean);
            set depthGroundDirty(val: boolean);
            get layer(): Phaser.GameObjects.Container;
    }
}

declare module 'game-core/rooms/display' {
    export { IAnimationData } from "game-core/rooms/display/animation";
    export { DisplayObject, DisplayField } from "game-core/rooms/display/display.object";
    export { DragonbonesDisplay } from "game-core/rooms/display/dragonbones.display";
    export * from "game-core/rooms/display/dragonbones.model";
    export { FramesDisplay } from "game-core/rooms/display/frames.display";
    export { FramesModel, IFramesModel } from "game-core/rooms/display/frames.model";
    export { ElementDisplay } from "game-core/rooms/display/element.display";
}

declare module 'game-core/rooms/group/GroupManager' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    import { IGroup } from "game-core/rooms/group/IGroup";
    import { IRoomService } from "game-core/rooms/room";
    export class GroupManager implements IDispose {
        protected map: Map<any, IGroup[]>;
        constructor(room: IRoomService);
        createGroup<T extends IGroup>(owner: any, groupType: GroupType): T;
        getGroup<T extends IGroup>(owner: any, groupType: GroupType): T;
        hasGroup(owner: any, groupType: number): boolean;
        destroy(): void;
    }
    export enum GroupType {
        Follow = 1
    }
    export enum GroupEventType {
        DEFAULT_TYPE = "DEFAULT_TYPE",
        REPLACE_TYPE = "REPLACE_TYPE"
    }
}

declare module 'game-core/rooms/group/IGroup' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    import { HandlerDispatcher } from "game-core/Handler/HandlerDispatcher";
    import { GroupType } from "game-core/rooms/group/GroupManager";
    export interface IGroup extends IDispose {
        owner: any;
        childs: any[];
        eventDisp: HandlerDispatcher;
        data: any;
        groupType: GroupType;
        on(type: string, caller: any, method: Function, args: any[]): any;
        off(type: string, caller: any, method: Function, args: any[]): any;
        emitter(type: string, data?: any): any;
        addChild(child: any): any;
        removeChild(child: any): any;
        replaceOwner(owner: any): any;
    }
}

declare module 'game-core/rooms/element/FrameManager' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    export class FrameManager implements IDispose {
        add(caller: any, method: Function, args?: any[]): void;
        remove(caller: any, method: Function): void;
        update(time: number, delta: number): void;
        destroy(): void;
        hasRegistered(caller: any, method: Function): boolean;
    }
}

declare module 'game-core/rooms/Animation' {
    export { BubbleAnimation } from "game-core/rooms/Animation/bubble.animation";
    export { FrameAnimation } from "game-core/rooms/Animation/frame.animation";
    export { DragonbonesAnimation } from "game-core/rooms/Animation/dragonbones.animation";
    export { IAnimationBase, AnimationUrlData } from "game-core/rooms/Animation/ianimationbase";
}

declare module 'game-core/rooms/cameras' {
    export * from "game-core/rooms/cameras/cameras.manager";
    export * from "game-core/rooms/cameras/play.camera";
    export * from "game-core/rooms/cameras/viewblock.manager";
    export { IBlockObject } from "game-core/rooms/cameras/block.object";
}

declare module 'game-core/plugins/basic.plugin' {
    import { WorldService } from "game-core/game";
    export class BasicPlugin {
        protected mWorld: WorldService;
        constructor();
        init(worldService: WorldService): void;
        preUpdate(time: any, delta: any): void;
        update(time: any, delta: any): void;
        postUpdate(time: any, delta: any): void;
        destroy(): void;
        get world(): WorldService;
    }
}

declare module 'game-core/plugins/plugin.manager' {
    import { WorldService } from "game-core/game";
    import { BasicPlugin } from "game-core/plugins/basic.plugin";
    export class PluginManager {
        constructor(mWorld: WorldService);
        load(name: string, url: string): Promise<BasicPlugin>;
        update(time: number, delta: number): void;
        add(id: string, plugin: BasicPlugin): void;
        remove(id: string): void;
        destroy(): void;
    }
}

declare module 'game-core/net/connection.service' {
    import { ServerAddress } from "game-core/net/address";
    import { PacketHandler, PBpacket } from "net-socket-packet";
    export interface ConnectionService {
        startConnect(addr: ServerAddress, keepalive?: boolean): void;
        closeConnect(): void;
        clearHeartBeat(): any;
        addPacketListener(listener: PacketHandler): void;
        removePacketListener(listener: PacketHandler): void;
        clearPacketListeners(): void;
        send(packet: PBpacket): void;
    }
}

declare module 'game-core/net/http.service' {
    import { WorldService } from "game-core/game/world.service";
    export class HttpService {
            constructor(mWorld: WorldService);
            /**
                * 用户关注其他用户
                * @param uids
                */
            follow(fuid: string[]): Promise<Response>;
            /**
                * 用户取消关注其他用户
                * @param fuid
                */
            unfollow(fuid: string): Promise<Response>;
            /**
                * 检查用户列表是否有关注的用户
                * @param uids
                */
            checkFollowed(uids: string[]): Promise<Response>;
            /**
                * 登录
                * @param name
                * @param password
                */
            login(account: string, password: string): Promise<Response>;
            /**
                * 请求手机验证码
                * @param name
                */
            requestPhoneCode(phone: string): Promise<Response>;
            loginByPhoneCode(phone: string, code: string): Promise<Response>;
            quickLogin(): Promise<Response>;
            /**
                *
                * 获取用户好友列表
                */
            firend(): Promise<any>;
            /**
                * 获取用户信息
                * @param uid
                */
            userDetail(uid: string): Promise<any>;
            /**
                * 用户徽章
                * @param uid
                */
            badgecards(uid: string): Promise<any>;
    }
}

declare module 'game-core/net/socket' {
    import { ServerAddress } from "game-core/net/address";
    import { WSWrapper } from "game-core/net/transport/websocket";
    export interface IConnectListener {
        onConnected(connection?: SocketConnection): void;
        onDisConnected(connection?: SocketConnection): void;
        onError(reason: SocketConnectionError | undefined): void;
    }
    export class SocketConnectionError extends Error {
        name: string;
        constructor(reason: any);
    }
    export class SocketConnection {
        protected mTransport: WSWrapper;
        protected mServerAddr: ServerAddress;
        protected mConnectListener?: IConnectListener;
        constructor($listener: IConnectListener);
        startConnect(addr: ServerAddress): void;
        stopConnect(): void;
        send(data: any): void;
        destroy(): void;
        protected onConnected(): void;
        protected onData(data: any): void;
    }
}

declare module 'game-core/net/address' {
    export interface ServerAddress {
        readonly host: string;
        readonly port: number;
        readonly secure?: boolean;
    }
}

declare module 'game-core/const/MessageType' {
    /**
      * 系统消息定义
      * author aaron
      */
    export class MessageType {
        static CREATE_ROLE: string;
        static APP_START: string;
        static EDITOR_CHANGE_MODE: string;
        static CLIENT_RESIZE: string;
        static SCENE_INITIALIZED: string;
        static SCENE_CLEARED: string;
        static SCENE_CHANGE_TO: string;
        static SCENE_MOVE_TO: string;
        static SCENE_MOVE_STOP: string;
        static CHANGE_ELEMENT_ANIMATION: string;
        static CHANGE_CHARACTER_ANIMATION: string;
        static CHAT_TO: string;
        static SHOW_CHAT_BUBBLE: string;
        static REMOVE_CHAT_BUBBLE: string;
        static PROMPT_ALERT: string;
        static CHARACTER_TALING: string;
        static CHARACTER_SHUT_UP: string;
        static QCLOUD_AUTH: string;
        static ENTER_SCENE: string;
        static SCENE_ADD_PLAYER: string;
        static SCENE_REMOVE_PLAYER: string;
        static SCENE_UPDATE_PLAYER: string;
        static SCENE_ADD_ELEMENT: string;
        static SCENE_ADD_TERRAIN: string;
        static SCENE_ADD_TERRAIN_END: string;
        static SCENE_ADD_ALL_TERRAIN: string;
        static SCENE_REMOVE_ELEMENT: string;
        static SCENE_REMOVE_TERRAIN: string;
        static SCENE_REMOVE_ALL_TERRAIN: string;
        static SCENE_MOUSE_FOLLOW: string;
        static SCENE_SELECT_ELEMENT: string;
        static SCENE_FIXED_TO_ELEMENT: string;
        static SCENE_UPDATE_ELEMENT: string;
        static SCENE_SYNCHRO_PACKAGE: string;
        static SCENE_VISIBLE_GRID: string;
        static PLAYER_SELECT_CHARACTER: string;
        static PLAYER_DATA_INITIALIZE: string;
        static SCENE_DATA_INITIALIZE: string;
        static PACKAGE_ITEM_ADD: string;
        static PACKAGE_ITEM_REMOVE: string;
        static PACKAGE_EXCHANGE_ITEM_POS: string;
        static SCENE_BACKGROUND_CLICK: string;
        static CHANGE_SELF_AVATAR: string;
        static DRAG_TO_DROP: string;
        static DRAG_OVER_DROP: string;
        static QUERY_PACKAGE: string;
        static SYNC_USER_BALANCE: string;
        static UPDATED_CHARACTER_PACKAGE: string;
        static SHOW_EFFECT: string;
        static EDIT_MODE_QUERY_PACKAGE: string;
        static PRESS_ELEMENT: string;
        static TURN_ELEMENT: string;
        static RECYCLE_ELEMENT: string;
        static PUT_ELEMENT: string;
        static CANCEL_PUT: string;
        static EDIT_PACKAGE_EXPANED: string;
        static EDIT_PACKAGE_COLLAPSE: string;
        static SELECTED_DECORATE_ELEMENT: string;
        static CANCEL_DECORATE_ELEMENT: string;
        static ADD_ICON_TO_TOP: string;
        static REMOVE_ICON_FROM_TOP: string;
        static SHOW_UI: string;
        static SHOW_NOTICE: string;
    }
}

declare module 'game-core/const/brush' {
    import { EditorRoomService } from "game-core/rooms/editor.room";
    export enum BrushEnum {
        MOVE = "move",
        BRUSH = "brush",
        SELECT = "select",
        ERASER = "eraser",
        FILL = "FILL"
    }
    export class Brush {
        constructor(mEditorRoom: EditorRoomService);
        set mode(mode: BrushEnum);
        get mode(): BrushEnum;
    }
}

declare module 'game-core/const/res.const' {
    export namespace UI {
        class TuDing18 {
            static getName(): string;
            static getPNG(): string;
        }
    }
}

declare module 'game-core/const/constants' {
    export const PI_EXTENSION_REGEX: RegExp;
    export const HTTP_REGEX: RegExp;
}

declare module 'game-core/const/loader' {
    export enum LoaderType {
        Atlas = 0,
        Image = 1
    }
}

declare module 'game-core/scenes/basic.scene' {
    export class BasicScene extends Phaser.Scene {
        protected mModuleName: string;
        constructor(config: string | Phaser.Types.Scenes.SettingsConfig);
        setViewPort(x: number, y: number, width: number, height: number): void;
    }
}

declare module 'game-core/scenes/play' {
    import { IRoomService } from "game-core/rooms/room";
    import { BasicScene } from "game-core/scenes/basic.scene";
    export class PlayScene extends BasicScene {
        protected mRoom: IRoomService;
        constructor(config?: string | Phaser.Types.Scenes.SettingsConfig);
        preload(): void;
        init(data: any): void;
        create(): void;
        update(time: number, delta: number): void;
        setViewPort(x: number, y: number, width: number, height: number): void;
        getKey(): string;
    }
}

declare module 'game-core/scenes/alpha' {
    import { PlayScene } from "game-core/scenes/play";
    export class AlphaScene extends PlayScene {
        constructor();
    }
}

declare module 'game-core/scenes/create.character' {
    import { BasicScene } from "game-core/scenes/basic.scene";
    export class CreateRoleScene extends BasicScene {
        constructor();
        init(data: any): void;
        create(): void;
    }
}

declare module 'game-core/scenes/edit' {
    import { PlayScene } from "game-core/scenes/play";
    export class EditScene extends PlayScene {
        constructor();
        create(): void;
    }
}

declare module 'game-core/scenes/gamepause' {
    import { BasicScene } from "game-core/scenes/basic.scene";
    export class GamePauseScene extends BasicScene {
        constructor();
        preload(): void;
        init(data: any): void;
        create(): void;
        awake(): void;
        sleep(): void;
        getKey(): string;
    }
}

declare module 'game-core/scenes/loading' {
    import { BasicScene } from "game-core/scenes/basic.scene";
    export class LoadingScene extends BasicScene {
            constructor();
            /**
                * preload是scene创建的第二步
                */
            preload(): void;
            /**
                * 初始化 是scene创建的第一步
                * @param data
                */
            init(data: any): void;
            create(): void;
            show(): Promise<unknown>;
            close(): Promise<unknown>;
            awake(data?: any): void;
            sleep(): void;
            getKey(): string;
    }
}

declare module 'game-core/scenes/login' {
    import { BasicScene } from "game-core/scenes/basic.scene";
    export class LoginScene extends BasicScene {
        constructor();
        preload(): void;
        create(): void;
        init(data: any): void;
        update(): void;
        awake(): void;
        sleep(): void;
        remove(): void;
        getKey(): string;
    }
}

declare module 'game-core/scenes/main.ui' {
    export class MainUIScene extends Phaser.Scene {
        constructor();
        setViewPort(x: number, y: number, width: number, height: number): void;
        preload(): void;
        init(data: any): void;
        create(): void;
        setTimeout(caller: any, time: any): number;
        clearTimeout(id: any): void;
        update(time: number, delta: number): void;
        getKey(): string;
    }
}

declare module 'game-core/scenes/select.character' {
    export class SelectCharacter extends Phaser.Scene {
        constructor();
        preload(): void;
        init(data: any): void;
        create(): void;
        get key(): string;
    }
}

declare module 'game-core/scenes/sky.box' {
    import { BasicScene } from "game-core/scenes/basic.scene";
    export class SkyBoxScene extends BasicScene {
        constructor();
        init(data: any): void;
        create(): void;
        update(time: number, delta: number): void;
    }
}

declare module 'game-core/ui/layer.manager' {
    export interface ILayerManager {
        readonly interactive: Phaser.GameObjects.Container;
        readonly scene: Phaser.Scene;
        setScene(scene: Phaser.Scene): void;
        addToUILayer(obj: Phaser.GameObjects.GameObject, index?: number): any;
        addToDialogLayer(obj: Phaser.GameObjects.GameObject): any;
        addToToolTipsLayer(obj: Phaser.GameObjects.GameObject): any;
        removeToUILayer(obj: Phaser.GameObjects.GameObject): any;
        removeToDialogLayer(obj: Phaser.GameObjects.GameObject): any;
        removeToToolTipsLayer(obj: Phaser.GameObjects.GameObject): any;
        destroy(): any;
    }
    export class LayerManager implements ILayerManager {
        setScene(scene: Phaser.Scene): void;
        addToUILayer(obj: Phaser.GameObjects.GameObject, index?: number): void;
        addToDialogLayer(obj: Phaser.GameObjects.GameObject): void;
        addToToolTipsLayer(obj: Phaser.GameObjects.GameObject): void;
        removeToUILayer(obj: Phaser.GameObjects.GameObject): void;
        removeToDialogLayer(obj: Phaser.GameObjects.GameObject): void;
        removeToToolTipsLayer(obj: Phaser.GameObjects.GameObject): void;
        destroy(): void;
        get interactive(): Phaser.GameObjects.Container;
        get scene(): Phaser.Scene;
    }
}

declare module 'game-core/ui/ui.manager' {
    import { PacketHandler } from "net-socket-packet";
    import { op_pkt_def } from "pixelpai_proto";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { InputTextFactory } from "game-core/ui/components/inputTextFactory";
    import { WorldService } from "game-core/game";
    import { BaseMediator } from "game-core/ui/components";
    export class UiManager extends PacketHandler {
        constructor(worldService: WorldService);
        getInputTextFactory(): InputTextFactory;
        addPackListener(): void;
        removePackListener(): void;
        getUILayerManager(): ILayerManager;
        getActiveUIData(name: string): op_pkt_def.IPKT_UI[];
        setScene(scene: Phaser.Scene): void;
        getScene(): Phaser.Scene;
        createMediator(className: string, nsPath: string): BaseMediator;
        showMainUI(): void;
        showDecorateUI(): void;
        resize(width: number, height: number): void;
        setMediator(value: string, mediator: any): void;
        getMediator(type: string): any | undefined;
        clearMediator(): void;
        destroy(): void;
        baseFaceResize(): void;
        baseFaceTween(show: boolean): void;
        checkUIState(medName: string, show: boolean): void;
        showMed(type: string, ...param: any[]): void;
        hideMed(type: string): void;
        showExistMed(type: string, extendName?: string): void;
        register(key: string, mediator: BaseMediator): void;
        unregister(key: string): void;
    }
}

declare module 'game-core/ui/ui.mediatorType' {
    export class UIMediatorType {
        static BagMediator: string;
        static ChatMediator: string;
        static NOTICE: string;
        static DIALOGO: string;
        static Turn_Btn_Top: string;
        static Turn_Btn_Bottom: string;
        static App_Back: string;
        static Editor_Save: string;
        static Editor_Cancel: string;
        static Close_Btn: string;
        static ControlF: string;
        static Storage: string;
        static UserInfo: string;
        static UserMenu: string;
        static MessageBox: string;
        static ComponentRank: string;
        static Rank: string;
        static VoteResult: string;
        static Shop: string;
        static MineSettle: string;
        static EquipUpgrade: string;
    }
}

declare module 'game-core/ui/ui.atals.name' {
    export class UIAtlasName {
        static commonUrl: string;
        static common2Url: string;
    }
    export class UIAtlasKey {
        static commonKey: string;
        static common2Key: string;
    }
}

declare module 'game-core/ui/components' {
    export { BasePanel } from "game-core/ui/components/BasePanel";
    export { BaseMediator } from "game-core/ui/components/BaseMediator";
    export { DynamicImage } from "game-core/ui/components/dynamic.image";
    export { DynamicNinepatch } from "game-core/ui/components/dynamic.ninepatch";
    export { DynamicSprite } from "game-core/ui/components/dynamic.sprite";
    export { Radio } from "game-core/ui/components/radio";
    export { CheckButton } from "game-core/ui/components/check.button";
    export { NumberCounter } from "game-core/ui/components/NumberCounter";
    export { IDropable } from "game-core/ui/components/idropable";
    export { IDragable } from "game-core/ui/components/idragable";
    export * from "game-core/ui/components/GridLayoutGroup";
    export { GraphicsProgressBar } from "game-core/ui/components/GraphicsProgressBar";
    export { IListItemComponent } from "game-core/ui/components/IListItemRender";
    export { Item } from "game-core/ui/components/Item";
    export { ItemSlot } from "game-core/ui/components/item.slot";
    export { DragDropIcon } from "game-core/ui/components/dragDropIcon";
    export { IItem } from "game-core/ui/components/baseitem";
    export { ScrollRect } from "game-core/ui/components/ScrollRect";
    export { TextButton } from "game-core/ui/components/TextButton";
    export { IconBtn, IBtnData } from "game-core/ui/components/icon.btn";
    export { IconSelectBtn } from "game-core/ui/components/icon.select.btn";
    export { AlertView } from "game-core/ui/components/alert.view";
    export { InputPanel } from "game-core/ui/components/input.panel";
    export { CheckboxGroup } from "game-core/ui/components/checkbox.group";
    export * from "game-core/ui/components/patches.config";
}

declare module 'game-core/ui/baseView' {
    export { BagGroup } from "game-core/ui/baseView/bagGroup/bag.group";
    export { BagGroupMediator } from "game-core/ui/baseView/bagGroup/bag.group.mediator";
    export { BottomBtnGroup } from "game-core/ui/baseView/bottomGroup/bottom.btn.group";
    export { BottomMediator } from "game-core/ui/baseView/bottomGroup/bottom.mediator";
    export { LeftBtnGroup } from "game-core/ui/baseView/leftGroup/left.btn.group";
    export { LeftMediator } from "game-core/ui/baseView/leftGroup/left.mediator";
    export { RightBtnGroup } from "game-core/ui/baseView/rightGroup/right.btn.group";
    export { RightMediator } from "game-core/ui/baseView/rightGroup/right.mediator";
    export { TopMenuContainer } from "game-core/ui/baseView/top.menu/top.menu.container";
    export { TopMenuMediator } from "game-core/ui/baseView/top.menu/top.menu.mediator";
    export { TopBtnGroup } from "game-core/ui/baseView/topGroup/top.btn.group";
    export { TopMediator } from "game-core/ui/baseView/topGroup/top.mediator";
}

declare module 'game-core/ui/ElementStorage' {
    export * from "game-core/ui/ElementStorage/DragManager";
    export * from "game-core/ui/ElementStorage/ElementStorageMediator";
    export * from "game-core/ui/ElementStorage/ElementStoragePanel";
    export * from "game-core/ui/ElementStorage/ElementStorate";
}

declare module 'game-core/ui/Notice' {
    export * from "game-core/ui/Notice/Notice";
    export * from "game-core/ui/Notice/NoticeMediator";
    export * from "game-core/ui/Notice/NoticePanel";
}

declare module 'game-core/ui/Rank' {
    export * from "game-core/ui/Rank/BasicRankPanel";
    export * from "game-core/ui/Rank/RankMediator";
    export * from "game-core/ui/Rank/RankPanel";
}

declare module 'game-core/ui/Shop' {
    export * from "game-core/ui/Shop/ShopMediator";
    export * from "game-core/ui/Shop/ShopPanel";
    export * from "game-core/ui/Shop/shop.itemSlot";
}

declare module 'game-core/ui/UserInfo' {
    export * from "game-core/ui/UserInfo/UserInfoMediator";
    export * from "game-core/ui/UserInfo/UserInfoPanel";
}

declare module 'game-core/ui/UserMenu' {
    export * from "game-core/ui/UserMenu/MenuItem";
    export * from "game-core/ui/UserMenu/UserMenuMediator";
    export * from "game-core/ui/UserMenu/UserMenuPanel";
}

declare module 'game-core/ui/alert' {
    export { PopUpTextUI } from "game-core/ui/alert/PopUpTextUI";
}

declare module 'game-core/ui/bag' {
    export { BagPanel } from "game-core/ui/bag/bagView/bagPanel";
    export { DragType, DropType, BagMediator } from "game-core/ui/bag/bagView/bagMediator";
    export { StorageMediator } from "game-core/ui/bag/storage/storageMediator";
    export { StoragePanel } from "game-core/ui/bag/storage/storagePanel";
}

declare module 'game-core/ui/chat' {
    export * from "game-core/ui/chat/Chat";
    export * from "game-core/ui/chat/base.chat.panel";
    export * from "game-core/ui/chat/chat.mediator";
    export * from "game-core/ui/chat/chatPanel.pc";
    export * from "game-core/ui/chat/message";
    export * from "game-core/ui/chat/mobile/chatPanel.mobile";
}

declare module 'game-core/ui/decorate' {
    export { DecorateManager } from "game-core/ui/decorate/decorate.manager";
    export { DecoratePanel } from "game-core/ui/decorate/decorate.panel";
}

declare module 'game-core/ui/friend' {
    export * from "game-core/ui/friend/friend.mediator";
    export * from "game-core/ui/friend/friend.panel";
}

declare module 'game-core/ui/tips' {
    export * from "game-core/ui/tips/TextToolTip";
    export * from "game-core/ui/tips/itoolTip";
    export * from "game-core/ui/tips/toolTip";
}

declare module 'game-core/ui/ControlF' {
    export * from "game-core/ui/ControlF/ControlFMediator";
    export * from "game-core/ui/ControlF/ControlFPanel";
}

declare module 'game-core/ui/DebugLogger' {
    export * from "game-core/ui/DebugLogger/DebugLoggerMediator";
    export * from "game-core/ui/DebugLogger/DebugLoggerPanel";
}

declare module 'game-core/ui/DecorateControl' {
    export { DecorateControlMediator } from "game-core/ui/DecorateControl/DecorateControlMediator";
    export { DecorateControlPanel } from "game-core/ui/DecorateControl/DecorateControlPanel";
}

declare module 'game-core/ui/ComponentRank' {
    export * from "game-core/ui/ComponentRank/ComponentRankMediator";
    export * from "game-core/ui/ComponentRank/ComponentRankPanel";
}

declare module 'game-core/ui/Bubble' {
    export * from "game-core/ui/Bubble/InteractiveBubble";
    export * from "game-core/ui/Bubble/InteractionBubbleContainer";
    export * from "game-core/ui/Bubble/InteractionBubbleCell";
    export * from "game-core/ui/Bubble/InteractiveBubbleMediator";
    export * from "game-core/ui/Bubble/InteractiveBubblePanel";
}

declare module 'game-core/ui/role/create.role' {
    import { RoleManager } from "game-core/ui/role/role.manager";
    import { PacketHandler } from "net-socket-packet";
    import { op_client } from "pixelpai_proto";
    export interface ICreateRole {
        enter(): any;
        start(scene: Phaser.Scene): any;
        destroy(): any;
    }
    export class CreateRole extends PacketHandler {
        constructor($roleManager: RoleManager);
        enter(content: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_SHOW_CREATE_ROLE_UI): void;
        start(scene: Phaser.Scene): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/role/role.manager' {
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game/world.service";
    /**
      * 角色创建，选择管理
      */
    export class RoleManager extends PacketHandler {
        readonly world: WorldService;
        constructor($world: WorldService);
        register(): void;
        unregister(): void;
    }
}

declare module 'game-core/ui/role/create.role.panel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    import { op_gameconfig } from "pixelpai_proto";
    export class CreateRolePanel extends BasePanel {
        protected key: string;
        constructor(scene: Phaser.Scene, world: WorldService);
        show(param: any): void;
        preload(): void;
        resize(wid: number, hei: number): void;
        init(): void;
        setAvatars(avatars: op_gameconfig.IAvatar[]): void;
        showError(msg: string): void;
        setNickName(val: string): void;
        destroy(): void;
    }
}

declare module 'game-core/editor/editor.launcher' {
    import "phaser";
    import "dragonBones";
    import { IEditorCanvasConfig } from "game-core/editor/canvas/editor.canvas";
    import { ElementEditorCanvas } from "game-core/editor/canvas/element/element.editor.canvas";
    import { AvatarEditorCanvas } from "game-core/editor/canvas/avatar/avatar.editor.canvas";
    export enum EditorCanvasType {
        Element = 0,
        Avatar = 1
    }
    export class EditorLauncher {
        static CreateCanvas(type: EditorCanvasType, config: IEditorCanvasConfig): ElementEditorCanvas | AvatarEditorCanvas;
    }
}

declare module 'game-core/editor/canvas/element/element.editor.canvas' {
    import { EditorCanvas, IEditorCanvasConfig } from "game-core/editor/canvas/editor.canvas";
    import { ElementNode } from "game-capsule";
    import { IImage } from "game-capsule/lib/configobjects/animations";
    export enum ElementEditorBrushType {
        Drag = 0,
        Walkable = 1,
        Collision = 2,
        Interactive = 3
    }
    export enum ElementEditorEmitType {
        Resource_Loaded = "resourceLoaded",
        Active_Animation_Layer = "activeAnimationLayer",
        Active_Mount_Layer = "activeMountLayer",
        Update_Frame_Sumb = "updateFrameSumb"
    }
    export class ElementEditorCanvas extends EditorCanvas {
        mData: ElementNode;
        constructor(config: IEditorCanvasConfig);
        destroy(): void;
        getScene(): Phaser.Scene;
        onSceneCreated(): void;
        onSceneDestroy(): void;
        on(event: ElementEditorEmitType, fn: Function, context?: any): void;
        off(event: ElementEditorEmitType, fn?: Function, context?: any, once?: boolean): void;
        deserializeDisplay(): Promise<IImage[]>;
        generateSpriteSheet(images: IImage[]): Promise<{
            url: string;
            json: string;
        }>;
        reloadDisplayNode(): void;
        changeAnimationData(animationDataId: number): void;
        selectFrame(frameIndex: number): void;
        playAnimation(): void;
        stopAnimation(): void;
        changeBrush(mode: ElementEditorBrushType): void;
        selectAnimationLayer(layerIndexs: number[]): void;
        selectMountLayer(mountPointIndex?: number): void;
        updateDepth(): void;
        updateAnimationLayer(): void;
        toggleMountPointAnimationPlay(playerAnimationName: string, mountPointIndex?: number): void;
        updateMountLayer(): void;
        updateOffsetLoc(layerIndexs: number): void;
        generateThumbnail(): Promise<string>;
    }
}

declare module 'game-core/editor/canvas/avatar/avatar.editor.canvas' {
    import { EditorCanvas, IEditorCanvasConfig } from "game-core/editor/canvas/editor.canvas";
    import { AvatarNode } from "game-capsule";
    export class AvatarEditorCanvas extends EditorCanvas {
        mData: AvatarNode;
        constructor(config: IEditorCanvasConfig);
        destroy(): void;
        getScene(): Phaser.Scene;
        onSceneCreated(): void;
        update(): void;
        onSceneDestroy(): void;
    }
}

declare module 'game-core/Handler/Handler' {
    export class Handler {
            /**
                * 从对象池内创建一个Handler，默认会执行一次并立即回收，如果不需要自动回收，设置once参数为false。
                * @param	caller 执行域(this)。
                * @param	method 回调方法。
                * @param	args 携带的参数。
                * @param	once 是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。
                * @return  返回创建的handler实例。
                */
            static create(caller: any, method: Function, args?: any[], once?: Boolean): Handler;
            caller: any;
            method: Function;
            args: any[];
            once: Boolean;
            protected _id: number;
            /**
                * 根据指定的属性值，创建一个 <code>Handler</code> 类的实例。
                * @param	caller 执行域。
                * @param	method 处理函数。
                * @param	args 函数参数。
                * @param	once 是否只执行一次。
                */
            constructor(caller?: any, method?: Function, args?: any[], once?: Boolean);
            /**
                * 设置此对象的指定属性值。
                * @param	caller 执行域(this)。
                * @param	method 回调方法。
                * @param	args 携带的参数。
                * @param	once 是否只执行一次，如果为true，执行后执行recover()进行回收。
                * @return  返回 handler 本身。
                */
            setTo(caller: any, method: Function, args: any[], once: Boolean): Handler;
            /**
                * 执行处理器。
                */
            run(): any;
            /**
                * 执行处理器，携带额外数据。
                * @param	data 附加的回调数据，可以是单数据或者Array(作为多参)。
                */
            runWith(data: any): any;
            /**
                * 清理对象引用。
                */
            clear(): Handler;
            /**
                * 清理并回收到 Handler 对象池内。
                */
            recover(): void;
    }
}

declare module 'game-core/Handler/HandlerDispatcher' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    export class HandlerDispatcher implements IDispose {
        hasListener(type: string): Boolean;
        emitter(type: string, data?: any): Boolean;
        on(type: string, caller: any, listener: Function, args?: any[]): HandlerDispatcher;
        once(type: string, caller: any, listener: Function, args?: any[]): HandlerDispatcher;
        off(type: string, caller: any, listener: Function, onceOnly?: Boolean): HandlerDispatcher;
        offAll(type?: string): HandlerDispatcher;
        destroy(): void;
    }
}

declare module 'game-core/game/input.service' {
    import { IRoomService } from "game-core/rooms/room";
    export interface InputManager {
        enable: boolean;
        addListener(l: InputListener): any;
        removeListener(l: InputListener): any;
        resize(width: number, height: number): any;
        onRoomChanged(currentRoom: IRoomService, previousRoom?: IRoomService): void;
        getKeyCodes(eventName: number): any[];
        getKeyDowns(): number[];
        getKeyUps(): number[];
    }
    export interface InputListener {
        downHandler(d: number, keyList: number[]): any;
        upHandler(): any;
        getDirection(): number;
        setDirection(val: number): any;
    }
}

declare module 'game-core/game/mouse.manager' {
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game/world.service";
    import { IRoomService } from "game-core/rooms/room";
    export enum MouseEvent {
        RightMouseDown = 1,
        RightMouseUp = 2,
        LeftMouseDown = 3,
        LeftMouseUp = 4,
        WheelDown = 5,
        WheelUp = 6,
        RightMouseHolding = 7,
        LeftMouseHolding = 8,
        Tap = 9
    }
    export class MouseManager extends PacketHandler {
        constructor(worldService: WorldService);
        changeRoom(room: IRoomService): void;
        resize(width: number, height: number): void;
        pause(): void;
        resume(): void;
        onUpdate(pointer: Phaser.Input.Pointer, gameobject: Phaser.GameObjects.GameObject): void;
        /**
          * 设置鼠标事件开关
          */
        set enable(value: boolean);
        get enable(): boolean;
        destroy(): void;
    }
}

declare module 'game-core/game/sound.manager' {
    import { IRoomService } from "game-core/rooms/room";
    import { WorldService } from "game-core/game/world.service";
    import { PacketHandler } from "net-socket-packet";
    export enum SoundField {
        Background = 0,
        Element = 1,
        Effect = 2
    }
    export interface ISoundConfig {
        key?: string;
        urls?: string | string[];
        field?: SoundField;
        soundConfig?: Phaser.Types.Sound.SoundConfig;
    }
    export class SoundManager extends PacketHandler {
        constructor(world: WorldService);
        addPackListener(): void;
        removePacketListener(): void;
        changeRoom(room: IRoomService): void;
        play(config: ISoundConfig): void;
        stop(field: SoundField): void;
        pause(field: SoundField): void;
        resumes(field: SoundField): void;
        stopAll(): void;
        pauseAll(): void;
        resume(): void;
        destroy(): void;
    }
}

declare module 'game-core/loading/loading.manager' {
    import { WorldService } from "game-core/game/world.service";
    export interface IAsset {
        type: string;
        key: string;
        source: string;
    }
    export interface ILoadingManager {
        start(): Promise<any>;
        addAssets(asset: IAsset[]): Promise<any>;
        destroy(): any;
    }
    export class LoadingManager {
        constructor(world: WorldService);
        start(callBack?: Function): Promise<never>;
        addAssets(assets: IAsset[]): Promise<void>;
        startup(scene: Phaser.Scene): Promise<void>;
        destroy(): void;
        get game(): Phaser.Game;
    }
}

declare module 'game-core/game/element.storage' {
    import { FramesModel, IFramesModel } from "game-core/rooms/display/frames.model";
    import { DragonbonesModel, IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { Lite, PaletteNode, TerrainCollectionNode, MossNode, AssetsNode } from "game-capsule";
    import { MossCollectionNode } from "game-capsule/lib/configobjects/scene";
    import { IScenery } from "game-core/rooms/sky.box/scenery";
    import { IAsset } from "game-core/loading/loading.manager";
    export interface IElementStorage {
        setGameConfig(gameConfig: Lite): any;
        updatePalette(palette: PaletteNode): any;
        updateMoss(moss: MossNode): any;
        setSceneConfig(config: Lite): any;
        add(obj: IFramesModel | IDragonbonesModel): void;
        getDisplayModel(id: number): IFramesModel | IDragonbonesModel;
        getTerrainCollection(): any;
        getTerrainPalette(key: number): IFramesModel;
        getTerrainPaletteByBindId(id: number): IFramesModel;
        getMossPalette(key: number): IFramesModel;
        getAssets(): IAsset[];
        getScenerys(): IScenery[];
        on(event: string | symbol, fn: Function, context?: any): any;
        off(event: string | symbol, fn: Function, context?: any): any;
        destroy(): any;
    }
    export class ElementStorage implements IElementStorage {
        constructor();
        on(event: string | symbol, fn: Function, context?: any): void;
        off(event: string | symbol, fn: Function, context?: any): void;
        setGameConfig(config: Lite): void;
        updatePalette(palette: PaletteNode): void;
        updateMoss(moss: MossNode): void;
        updateAssets(assetsNode: AssetsNode): void;
        setSceneConfig(config: any): void;
        add(obj: FramesModel | DragonbonesModel): void;
        getDisplayModel(id: number): FramesModel | DragonbonesModel;
        getTerrainCollection(): TerrainCollectionNode;
        getTerrainPalette(key: number): FramesModel;
        getTerrainPaletteByBindId(id: number): FramesModel;
        getMossCollection(): MossCollectionNode;
        getMossPalette(id: number): FramesModel;
        getScenerys(): IScenery[];
        getAssets(): IAsset[];
        destroy(): void;
    }
}

declare module 'game-core/rooms/element/element.manager' {
    import { PacketHandler, PBpacket } from "net-socket-packet";
    import { op_client, op_def } from "pixelpai_proto";
    import { ConnectionService } from "game-core/net/connection.service";
    import { Element, IElement } from "game-core/rooms/element/element";
    import { IRoomService } from "game-core/rooms/room";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    export interface IElementManager {
        hasAddComplete: boolean;
        readonly connection: ConnectionService | undefined;
        readonly roomService: IRoomService;
        readonly scene: Phaser.Scene | undefined;
        readonly camera: Phaser.Cameras.Scene2D.Camera | undefined;
        readonly map: number[][];
        add(sprite: ISprite[]): any;
        remove(id: number): IElement;
        getElements(): IElement[];
        destroy(): any;
    }
    export interface Task {
        action: string;
        loc: Partial<op_def.IMossMetaData>;
    }
    export class ElementManager extends PacketHandler implements IElementManager {
        protected mRoom: IRoomService;
        static COMPLETE: string;
        hasAddComplete: boolean;
        protected mElements: Map<number, Element>;
        protected mMap: number[][];
        constructor(mRoom: IRoomService);
        init(): void;
        hasElement(id: any): boolean;
        deleElement(id: any): void;
        get(id: number): Element;
        remove(id: number): IElement;
        getElements(): IElement[];
        add(sprites: ISprite[], addMap?: boolean): void;
        setState(state: op_client.IStateGroup): void;
        destroy(): void;
        update(time: number, delta: number): void;
        protected addMap(sprite: ISprite): void;
        protected removeMap(sprite: ISprite): void;
        get camera(): Phaser.Cameras.Scene2D.Camera | undefined;
        get connection(): ConnectionService;
        protected onAdjust(packet: PBpacket): void;
        protected onAdd(packet: PBpacket): void;
        protected _add(sprite: ISprite, addMap?: boolean): Element;
        protected addComplete(packet: PBpacket): void;
        protected checkDisplay(sprite: ISprite): IFramesModel | IDragonbonesModel;
        protected fetchDisplay(ids: number[]): void;
        get roomService(): IRoomService;
        get scene(): Phaser.Scene | undefined;
        get map(): number[][];
        protected onSetPosition(packet: PBpacket): void;
        protected onRemove(packet: PBpacket): void;
        protected onSync(packet: PBpacket): void;
        protected onMove(packet: PBpacket): void;
    }
}

declare module 'game-core/rooms/player/player.manager' {
    import { IElementManager } from "game-core/rooms/element/element.manager";
    import { PacketHandler } from "net-socket-packet";
    import { op_client, op_gameconfig } from "pixelpai_proto";
    import { ConnectionService } from "game-core/net/connection.service";
    import { IRoomService, Room } from "game-core/rooms/room";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { Player } from "game-core/rooms/player/player";
    import { IElement } from "game-core/rooms/element/element";
    import { Actor } from "game-core/rooms/player/Actor";
    export class PlayerManager extends PacketHandler implements IElementManager {
        static COMPLETE: string;
        hasAddComplete: boolean;
        constructor(mRoom: Room);
        createActor(actor: op_client.IActor): void;
        get actor(): Actor;
        destroy(): void;
        removeFromMap(id: number): void;
        requestActorMove(dir: number, keyArr: number[]): void;
        startActorMove(): void;
        stopActorMove(): void;
        get(id: number): Player;
        add(sprite: ISprite[]): void;
        hasElement(id: any): boolean;
        deleElement(id: any): void;
        remove(id: number): IElement;
        getElements(): IElement[];
        set(id: number, player: Player): void;
        get camera(): Phaser.Cameras.Scene2D.Camera;
        addPackItems(elementId: number, items: op_gameconfig.IItem[]): void;
        removePackItems(elementId: number, itemId: number): boolean;
        get roomService(): IRoomService;
        get scene(): Phaser.Scene | undefined;
        get connection(): ConnectionService;
        get map(): number[][];
    }
}

declare module 'game-core/rooms/terrain/terrain.manager' {
    import { PacketHandler, PBpacket } from "net-socket-packet";
    import { ConnectionService } from "game-core/net/connection.service";
    import { Terrain } from "game-core/rooms/terrain/terrain";
    import { IRoomService, SpriteAddCompletedListener } from "game-core/rooms/room";
    import { IElementManager } from "game-core/rooms/element/element.manager";
    import { IElementStorage } from "game-core/game/element.storage";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { IElement } from "game-core/rooms/element/element";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    export class TerrainManager extends PacketHandler implements IElementManager {
        protected mRoom: IRoomService;
        static COMPLETE: string;
        hasAddComplete: boolean;
        protected mTerrains: Map<number, Terrain>;
        protected mInitMap: Map<number, any>;
        protected mGameConfig: IElementStorage;
        protected mPacketFrameCount: number;
        protected mListener: SpriteAddCompletedListener;
        protected mMap: number[][];
        constructor(mRoom: IRoomService, listener?: SpriteAddCompletedListener);
        init(): void;
        destroy(): void;
        get(id: number): Terrain;
        hasElement(id: any): boolean;
        deleElement(id: any): void;
        add(sprites: ISprite[]): void;
        remove(id: number): IElement;
        getElements(): IElement[];
        protected onAdd(packet: PBpacket): void;
        protected _add(sprite: ISprite): Terrain;
        protected addComplete(packet: PBpacket): void;
        protected onRemove(packet: PBpacket): void;
        protected onSyncSprite(packet: PBpacket): void;
        protected checkDisplay(sprite: ISprite): IFramesModel | IDragonbonesModel;
        protected checkTerrainDisplay(sprite: ISprite): void;
        protected fetchDisplay(ids: number[]): void;
        protected removeMap(sprite: ISprite): void;
        protected addMap(sprite: ISprite): void;
        protected setMap(sprite: ISprite, type: number): void;
        get connection(): ConnectionService | undefined;
        get roomService(): IRoomService;
        get scene(): Phaser.Scene | undefined;
        get camera(): Phaser.Cameras.Scene2D.Camera;
        get map(): number[][];
    }
}

declare module 'game-core/rooms/cameras/cameras.manager' {
    import { PacketHandler } from "net-socket-packet";
    import { IRoomService } from "game-core/rooms/room";
    import { ConnectionService } from "game-core/net/connection.service";
    import { Rectangle45 } from "game-core/utils/rectangle45";
    export interface ICameraService {
        camera: Phaser.Cameras.Scene2D.Camera | undefined;
        moving: boolean;
        readonly targetFollow: any;
        startFollow(target: any): void;
        stopFollow(): void;
        addCamera(camera: Phaser.Cameras.Scene2D.Camera): void;
        removeCamera(camera: Phaser.Cameras.Scene2D.Camera): void;
        resize(width: number, height: number): void;
        getViewPort(): Phaser.Geom.Rectangle | undefined;
        getMiniViewPort(): Rectangle45 | undefined;
        setBounds(x: integer, y: integer, width: integer, height: integer, centerOn?: boolean): void;
        setPosition(x: number, y: number): void;
        setScroll(x: number, y: number): void;
        offsetScroll(x: number, y: number): void;
        scrollTargetPoint(x: number, y: number): any;
        syncToEditor(): void;
        centerCameas(): void;
        syncCamera(): void;
        syncCameraScroll(): void;
        destroy(): void;
    }
    export class CamerasManager extends PacketHandler implements ICameraService {
        protected mRoomService: IRoomService;
        readonly MINI_VIEW_SIZE = 30;
        readonly VIEW_PORT_SIZE = 30;
        protected mMain: Phaser.Cameras.Scene2D.Camera;
        protected viewPort: Phaser.Geom.Rectangle;
        protected miniViewPort: Phaser.Geom.Rectangle;
        protected mMoving: boolean;
        protected mTarget: any;
        protected mCameras: Phaser.Cameras.Scene2D.Camera[];
        protected readonly zoom: number;
        constructor(mRoomService: IRoomService);
        getViewPort(): Phaser.Geom.Rectangle | undefined;
        getMiniViewPort(): Rectangle45;
        set camera(camera: Phaser.Cameras.Scene2D.Camera | undefined);
        get camera(): Phaser.Cameras.Scene2D.Camera | undefined;
        resize(width: number, height: number): void;
        setScroll(x: number, y: number): void;
        offsetScroll(x: number, y: number): void;
        startFollow(target: any): void;
        stopFollow(): void;
        addCamera(camera: Phaser.Cameras.Scene2D.Camera): void;
        removeCamera(camera: Phaser.Cameras.Scene2D.Camera): void;
        setBounds(x: integer, y: integer, width: integer, height: integer, centerOn?: boolean): void;
        setPosition(x: number, y: number): void;
        syncToEditor(): void;
        centerCameas(): void;
        syncCamera(): void;
        syncCameraScroll(): void;
        scrollTargetPoint(x: number, y: number): void;
        destroy(): void;
        get connection(): ConnectionService;
        set moving(val: boolean);
        get moving(): boolean;
        get targetFollow(): any;
    }
}

declare module 'game-core/rooms/display/element.display' {
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { op_def } from "pixelpai_proto";
    import { IElement } from "game-core/rooms/element/element";
    import { AnimationData } from "game-core/rooms/element/sprite";
    import { DisplayField } from "game-core/rooms/display/display.object";
    export interface ElementDisplay extends Phaser.GameObjects.Container {
        readonly baseLoc: Phaser.Geom.Point;
        readonly element: IElement;
        sortX: number;
        sortY: number;
        sortZ: number;
        changeAlpha(val?: number): any;
        load(data: IFramesModel | IDragonbonesModel, field?: DisplayField): any;
        play(animationName: AnimationData, field?: DisplayField): any;
        removeFromParent(): void;
        fadeIn(callback?: () => void): any;
        fadeOut(callback?: () => void): any;
        showNickname(val: string): any;
        setDisplayBadges(cards: op_def.IBadgeCard[]): any;
        showRefernceArea(): any;
        hideRefernceArea(): any;
        showEffect(): any;
        destroy(): void;
    }
}

declare module 'game-core/rooms/cameras/viewblock.manager' {
    import { ICameraService } from "game-core/rooms/cameras/cameras.manager";
    import { IPosition45Obj } from "game-core/utils/position45";
    import { IBlockObject } from "game-core/rooms/cameras/block.object";
    export interface ViewblockService {
        update(time: number, delta: number): void;
        int(size: IPosition45Obj): void;
        add(e: IBlockObject): boolean;
        remove(e: IBlockObject): boolean;
        check(e: IBlockObject): void;
        destroy(): void;
    }
    export class ViewblockManager implements ViewblockService {
        constructor(cameras: ICameraService);
        add(e: IBlockObject): boolean;
        remove(e: IBlockObject): boolean;
        check(e: IBlockObject): void;
        int(size: IPosition45Obj): void;
        update(time: number, delta: number): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/element/element' {
    import { IElementManager, ElementManager } from "game-core/rooms/element/element.manager";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IRoomService } from "game-core/rooms/room";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { op_client, op_def } from "pixelpai_proto";
    import { Tweens } from "phaser";
    import { Pos } from "game-core/utils/pos";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { BlockObject } from "game-core/rooms/cameras/block.object";
    import { BubbleContainer } from "game-core/rooms/bubble/bubble.container";
    import { ShopEntity } from "game-core/rooms/element/shop/shop.entity";
    import { DisplayObject, DisplayField } from "game-core/rooms/display/display.object";
    import { AI } from "game-core/rooms/action/AI";
    export enum PlayerState {
        IDLE = "idle",
        WALK = "walk",
        RUN = "run",
        ATTACK = "attack",
        JUMP = "jump",
        INJURED = "injured",
        FAILED = "failed",
        DANCE01 = "dance01",
        DANCE02 = "dance02",
        FISHING = "fishing",
        GREET01 = "greet01",
        SIT = "sit",
        LIE = "lit",
        EMOTION01 = "emotion01"
    }
    export enum Direction {
        north = 0,
        north_west = 1,
        west = 2,
        west_south = 3,
        south = 4,
        south_east = 5,
        east = 6,
        east_north = 7
    }
    export interface IElement {
        readonly id: number;
        readonly dir: number;
        readonly roomService: IRoomService;
        readonly scene: Phaser.Scene;
        model: ISprite;
        setModel(model: ISprite): any;
        updateModel(model: op_client.ISprite): any;
        play(animationName: string): void;
        getDisplay(): DisplayObject;
        setPosition(p: Pos): void;
        getPosition(): Pos;
        getPosition45(): Pos;
        setDirection(val: number): void;
        getDirection(): number;
        showEffected(displayInfo: IFramesModel): any;
        showNickname(): any;
        scaleTween(): any;
        turn(): any;
        setAlpha(val: number): any;
        setQueue(queue: op_client.IChangeAnimation[]): any;
        mount(ele: IElement): this;
        unmount(): this;
        addMount(ele: IElement, index?: number): this;
        removeMount(ele: IElement): this;
    }
    export interface MoveData {
        destPos?: Pos;
        posPath?: MovePath[];
        arrivalTime?: number;
        tweenAnim?: Tweens.Tween;
        tweenLineAnim?: Tweens.Timeline;
        tweenLastUpdate?: number;
        onCompleteParams?: any;
        onComplete?: Function;
        step?: number;
    }
    export interface MovePath {
        x: number;
        y: number;
        duration?: number;
        onStartParams?: any;
        onStart?: Function;
        onComplete?: Function;
    }
    export interface AnimationQueue {
        name: string;
        playTimes?: number;
        complete?: Function;
    }
    export enum InputEnable {
        Diasble = 0,
        Enable = 1,
        Interactive = 2
    }
    export class Element extends BlockObject implements IElement {
        protected mElementManager: IElementManager;
        get dir(): number;
        get roomService(): IRoomService;
        get id(): number;
        get model(): ISprite;
        set model(val: ISprite);
        get scene(): Phaser.Scene;
        get ai(): AI;
        get eleMgr(): ElementManager;
        protected mId: number;
        protected mDisplayInfo: IFramesModel | IDragonbonesModel;
        protected mDisplay: DisplayObject | undefined;
        protected mBubble: BubbleContainer;
        protected mAnimationName: string;
        protected mMoveData: MoveData;
        protected mCurState: string;
        protected mShopEntity: ShopEntity;
        protected mAi: AI;
        protected mOffsetY: number;
        protected mQueueAnimations: AnimationQueue[];
        protected mMoving: boolean;
        protected mRootMount: IElement;
        protected mMounts: IElement[];
        constructor(sprite: ISprite, mElementManager: IElementManager);
        load(displayInfo: IFramesModel | IDragonbonesModel): void;
        setModel(model: ISprite): void;
        updateModel(model: op_client.ISprite): void;
        scaleTween(): void;
        play(animationName: string): void;
        setQueue(animations: op_client.IChangeAnimation[]): void;
        setDirection(val: number): void;
        getDirection(): number;
        changeState(val?: string): void;
        getState(): string;
        getRenderable(): boolean;
        getDisplay(): DisplayObject;
        move(moveData: op_client.IMoveData): void;
        movePosition(pos: Pos, angel: number): void;
        movePath(movePath: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE_BY_PATH): void;
        startMove(): void;
        stopMove(): void;
        getPosition(): Pos;
        setPosition(p: Pos): void;
        getRootPosition(): Pos;
        showBubble(text: string, setting: op_client.IChat_Setting): void;
        clearBubble(): void;
        showNickName(): void;
        showEffected(displayInfo: IFramesModel, field?: DisplayField): void;
        showNickname(): void;
        turn(): void;
        setAlpha(val: number): void;
        mount(root: IElement): this;
        unmount(): this;
        addMount(ele: IElement, index: number): this;
        removeMount(ele: IElement): this;
        setState(states: op_def.IState[]): void;
        getDepth(): number;
        destroy(): void;
        protected _doMove(): void;
        protected createDisplay(): ElementDisplay;
        protected loadDisplayInfo(): void;
        protected addDisplay(): void;
        protected setDepth(depth: number): void;
        protected onDisplayReady(field?: any): void;
        protected onUpdateAnimationHandler(): void;
        protected updateBubble(): void;
        protected onMoveStart(): void;
        protected onMoveComplete(): void;
        protected onMoving(): void;
        protected get offsetY(): number;
        protected onCheckDirection(params: any): void;
        protected calculateDirectionByAngle(angle: any): number;
        protected mergeMounth(mounts: number[]): void;
        protected updateMounth(mounts: number[]): void;
        protected updateStateHandler(state: op_def.IState): void;
        protected removeStateHandler(state: op_def.IState): void;
    }
}

declare module 'game-core/rooms/cameras/block.object' {
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { InputEnable } from "game-core/rooms/element/element";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { Pos } from "game-core/utils/pos";
    import { IRoomService } from "game-core/rooms/room";
    export interface IBlockObject {
        readonly id: number;
        getPosition(): Pos;
        getPosition45(): Pos;
        setRenderable(isRenderable: boolean, delay?: number): void;
        getRenderable(): boolean;
        setBlockable(val: boolean): this;
    }
    export abstract class BlockObject implements IBlockObject {
        protected mRoomService: IRoomService;
        isUsed: boolean;
        protected mDisplay?: ElementDisplay;
        protected mRenderable: boolean;
        protected mBlockable: boolean;
        protected mModel: ISprite;
        protected mInputEnable: InputEnable;
        constructor(mRoomService: IRoomService);
        setRenderable(isRenderable: boolean, delay?: number): void;
        getPosition(): Pos;
        getPosition45(): Pos;
        getRenderable(): boolean;
        fadeIn(callback?: () => void): void;
        fadeOut(callback?: () => void): void;
        fadeAlpha(alpha: number): void;
        setInputEnable(val: InputEnable): void;
        setBlockable(val: boolean): this;
        destroy(): void;
        clear(): void;
        protected addDisplay(): void;
        protected removeDisplay(): void;
        protected onDisplayReady(): void;
        protected addToBlock(): void;
        protected removeFromBlock(remove?: boolean): void;
        protected updateBlock(): void;
        get id(): number;
    }
}

declare module 'game-core/rooms/state/state.group' {
    import { op_def, op_client } from "pixelpai_proto";
    export class StateGroup {
        constructor();
        update(group: op_client.IStateGroup): void;
    }
    export class State {
        constructor(state: op_def.IState);
        get name(): string;
        get type(): op_def.NodeType;
        get packet(): any;
    }
}

declare module 'game-core/rooms/effect/effect.manager' {
    import { IRoomService } from "game-core/rooms/room";
    import { PacketHandler } from "net-socket-packet";
    import { Effect } from "game-core/rooms/effect/effect";
    export class EffectManager extends PacketHandler {
        constructor(room: IRoomService);
        add(id: number): Effect;
        remove(id: number): void;
        get(id: number): Effect;
        destroy(): void;
        protected updateDisplay(effect: Effect): void;
        protected fetchDisplay(ids: number[]): void;
        get connection(): import("../..").ConnectionService;
    }
}

declare module 'game-core/rooms/sky.box/sky.box.manager' {
    import { BlockManager } from "game-core/rooms/sky.box/block.manager";
    import { IRoomService } from "game-core/rooms/room";
    import { IScenery } from "game-core/rooms/sky.box/scenery";
    import { PacketHandler } from "net-socket-packet";
    import { State } from "game-core/rooms/state/state.group";
    export interface ISkyBoxConfig {
        key: string;
        width: number;
        height: number;
        gridW?: number;
        gridH?: number;
    }
    export class SkyBoxManager extends PacketHandler {
        protected mRoom: IRoomService;
        protected mScenetys: Map<number, BlockManager>;
        protected mStateMap: Map<string, State>;
        constructor(room: IRoomService);
        add(scenery: IScenery): void;
        update(scenery: IScenery): void;
        remove(id: number): void;
        setState(states: State): void;
        destroy(): void;
        get scenery(): BlockManager[];
    }
}

declare module 'game-core/rooms/sky.box/scenery' {
    import { op_def, op_client } from "pixelpai_proto";
    export interface IScenery {
        readonly id: number;
        readonly depth: number;
        readonly width: number;
        readonly height: number;
        readonly uris: string[][];
        readonly speed: number;
        readonly fit: Fit;
        readonly offset: op_def.IPBPoint2f;
    }
    export class Scenery implements IScenery {
        constructor(scenery: op_client.IOP_EDITOR_REQ_CLIENT_ADD_SCENERY);
        get width(): number;
        get height(): number;
        get id(): number;
        get depth(): number;
        get offset(): op_def.IPBPoint2f;
        get speed(): number;
        get uris(): string[][];
        get fit(): Fit;
    }
    export enum Fit {
        Center = 1,
        Fill = 2,
        Stretch = 3,
        Repeat = 4
    }
}

declare module 'game-core/rooms/terrain/terrain' {
    import { IElement } from "game-core/rooms/element/element";
    import { IElementManager } from "game-core/rooms/element/element.manager";
    import { Pos } from "game-core/utils/pos";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IRoomService } from "game-core/rooms/room";
    import { TerrainDisplay } from "game-core/rooms/display/terrain.display";
    import { BlockObject } from "game-core/rooms/cameras/block.object";
    import { op_client } from "pixelpai_proto";
    import { DisplayObject } from "game-core/rooms/display/display.object";
    export class Terrain extends BlockObject implements IElement {
        protected mElementManager: IElementManager;
        protected mId: number;
        protected mDisplayInfo: IFramesModel;
        protected mDisplay: TerrainDisplay | undefined;
        protected mModel: ISprite;
        constructor(sprite: ISprite, mElementManager: IElementManager);
        setModel(val: ISprite): void;
        updateModel(val: op_client.ISprite): void;
        load(displayInfo: IFramesModel): void;
        play(animationName: string): void;
        setDirection(val: number): void;
        getDirection(): number;
        setPosition(p: Pos): void;
        getDisplay(): DisplayObject;
        showNickname(): void;
        showEffected(): void;
        turn(): void;
        setAlpha(val: number): void;
        scaleTween(): void;
        setQueue(): void;
        mount(): this;
        unmount(): this;
        addMount(): this;
        removeMount(): this;
        destroy(): void;
        protected createDisplay(): ElementDisplay;
        protected addDisplay(): void;
        protected onDisplayReady(field?: TerrainDisplay): void;
        protected setDepth(): void;
        get id(): number;
        get dir(): number;
        get roomService(): IRoomService;
        get model(): ISprite;
        set model(val: ISprite);
        get currentAnimationName(): string;
        get scene(): Phaser.Scene;
    }
}

declare module 'game-core/rooms/element/sprite' {
    import { Pos } from "game-core/utils/pos";
    import { IAvatar, IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { op_client, op_gameconfig, op_gameconfig_01, op_def } from "pixelpai_proto";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import NodeType = op_def.NodeType;
    export interface ISprite {
        readonly id: number;
        readonly avatar: IAvatar;
        readonly nickname: string;
        readonly alpha: number;
        readonly displayBadgeCards: op_def.IBadgeCard[];
        readonly platformId: string;
        readonly sceneId: number;
        readonly nodeType: op_def.NodeType;
        readonly currentAnimation: AnimationData;
        readonly currentCollisionArea: number[][];
        readonly currentWalkableArea: number[][];
        readonly currentCollisionPoint: Phaser.Geom.Point;
        readonly hasInteractive: boolean;
        readonly attrs: op_def.IStrPair[];
        readonly animationQueue: SpriteAnimationQueue[];
        currentAnimationName: string;
        displayInfo: IFramesModel | IDragonbonesModel;
        direction: number;
        pos: Pos;
        bindID: number;
        sn: string;
        isMoss?: boolean;
        mountSprites?: number[];
        newID(): any;
        updateAvatar(avatar: op_gameconfig.IAvatar): any;
        updateDisplay(display: op_gameconfig.IDisplay, animations: op_gameconfig_01.IAnimationData[], defAnimation?: string): any;
        setPosition(x: number, y: number): any;
        setAnimationName(name: string, playTimes?: number): AnimationData;
        setAnimationQueue(queue: SpriteAnimationQueue[]): any;
        turn(): ISprite;
        toSprite(): op_client.ISprite;
    }
    export interface AnimationData {
        name: string;
        flip: boolean;
        playingQueue?: SpriteAnimationQueue;
    }
    export interface SpriteAnimationQueue {
        name: string;
        playTimes?: number;
        playedTimes?: number;
        complete?: Function;
    }
    export class Sprite implements ISprite {
        protected mID: number;
        protected mPos: Pos;
        protected mAvatar: IAvatar;
        protected mCurrentAnimationName: string;
        protected mDirection: number;
        protected mBindID: number;
        protected mSn: string;
        protected mAlpha: number;
        protected mNickname: string;
        protected mDisplayBadgeCards: op_def.IBadgeCard[];
        protected mPackage: op_gameconfig.IPackage;
        protected mSceneId: number;
        protected mUuid: number;
        protected mPlatformId: string;
        protected mDisplayInfo: IFramesModel | IDragonbonesModel;
        protected mNodeType: NodeType;
        protected mCurrentAnimation: AnimationData;
        protected mCurrentCollisionArea: number[][];
        protected mCurrentWalkableArea: number[][];
        protected mCurrentCollisionPoint: Phaser.Geom.Point;
        protected mVersion: string;
        protected mIsMoss: boolean;
        protected mRegisterAnimation: Map<string, string>;
        protected _originWalkPoint: Phaser.Geom.Point;
        protected _originCollisionPoint: Phaser.Geom.Point;
        protected mAttrs: op_def.IStrPair[];
        protected mAnimationQueue: SpriteAnimationQueue[];
        protected mMountSprites: number[];
        constructor(obj: op_client.ISprite, nodeType?: NodeType);
        toSprite(): op_client.ISprite;
        newID(): void;
        setPosition(x: number, y: number): void;
        turn(): ISprite;
        updateAvatar(avatar: op_gameconfig.IAvatar): void;
        updateDisplay(display: op_gameconfig.IDisplay, animations: op_gameconfig_01.IAnimationData[], defAnimation?: string): void;
        setAnimationQueue(queue: SpriteAnimationQueue[]): void;
        setMountSprites(ids: number[]): void;
        updateAttr(attrs: op_def.IStrPair[]): void;
        setAnimationName(name: string): AnimationData;
        get id(): number;
        get pos(): Pos;
        set pos(pos: Pos);
        get avatar(): IAvatar;
        get currentAnimationName(): string;
        set currentAnimationName(animationName: string);
        get direction(): number;
        set direction(val: number);
        get nickname(): string;
        get bindID(): number;
        set bindID(id: number);
        get sn(): string;
        set sn(value: string);
        get alpha(): number;
        get package(): op_gameconfig.IPackage;
        set package(value: op_gameconfig.IPackage);
        get sceneId(): number;
        get uuid(): number;
        get displayBadgeCards(): op_def.IBadgeCard[];
        get platformId(): string;
        get displayInfo(): IFramesModel | IDragonbonesModel;
        set displayInfo(displayInfo: IFramesModel | IDragonbonesModel);
        get isMoss(): boolean;
        set isMoss(val: boolean);
        get animationQueue(): SpriteAnimationQueue[];
        get nodeType(): NodeType;
        get currentAnimation(): AnimationData;
        get currentCollisionArea(): number[][];
        get currentWalkableArea(): number[][];
        get currentCollisionPoint(): Phaser.Geom.Point;
        get hasInteractive(): boolean;
        get mountSprites(): number[];
        set mountSprites(ids: number[]);
        get animationMap(): Map<string, string>;
        get originCollisionPoint(): Phaser.Geom.Point;
        get originWalkPoint(): Phaser.Geom.Point;
        get attrs(): op_def.IStrPair[];
        setOriginCollisionPoint(value: number[] | null): void;
        setOriginWalkPoint(value: number[] | null): void;
        getInteracviveArea(): op_def.IPBPoint2i[];
    }
}

declare module 'game-core/rooms/player/Actor' {
    import { IElementManager, ISprite, MoveData } from "game-core/rooms/element";
    import { InputListener } from "game-core/game/input.service";
    import { op_client, op_gameconfig } from "pixelpai_proto";
    import { Player } from "game-core/rooms/player/player";
    import { Bag } from "game-core/rooms/player/bag/bag";
    import { Interactive } from "game-core/rooms/player/interactive/interactive";
    import { Friend } from "game-core/rooms/player/friend/friend";
    export class Actor extends Player implements InputListener {
        protected mElementManager: IElementManager;
        readonly GameObject: Phaser.GameObjects.GameObject;
        protected mBag: Bag;
        protected mFriend: Friend;
        protected mInteractive: Interactive;
        constructor(sprite: ISprite, mElementManager: IElementManager);
        getBag(): Bag;
        getFriend(): Friend;
        getInteractive(): Interactive;
        setRenderable(isRenderable: boolean): void;
        destroy(): void;
        downHandler(d: number, keyList: number[]): void;
        upHandler(): void;
        startMove(): void;
        stopMove(): void;
        move(moveData: op_client.IMoveData): void;
        movePath(movePath: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE_BY_PATH): void;
        protected onMoveComplete(): void;
        protected onMoving(): void;
        protected addToBlock(): void;
        set model(val: ISprite);
        get model(): ISprite;
        get package(): op_gameconfig.IPackage;
        set package(value: op_gameconfig.IPackage);
        set moveTime(val: number);
        get moveData(): MoveData;
    }
}

declare module 'game-core/rooms/player/player' {
    import { Element, MovePath, IElementManager } from "game-core/rooms/element";
    import { op_client } from "pixelpai_proto";
    import { ISprite } from "game-core/rooms/element";
    import { Pos } from "game-core/utils/pos";
    export class Player extends Element {
        protected mElementManager: IElementManager;
        protected nodeType: number;
        protected mOffsetY: number;
        constructor(sprite: ISprite, mElementManager: IElementManager);
        setModel(val: ISprite): void;
        move(moveData: op_client.IMoveData): void;
        movePath(movePath: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE_BY_PATH): void;
        setDirection(dir: number): void;
        changeState(val?: string): void;
        setPosition(pos: Pos): void;
        getPosition(): Pos;
        protected onDisplayReady(field?: any): void;
        protected onCheckDirection(params: any): void;
        protected onMoveStart(): void;
        protected onMoveComplete(): void;
        protected preMoveComplete(): void;
        protected onMovePathPointComplete(params: any): void;
        protected mMovePathPointFinished(path: MovePath): void;
        protected get offsetY(): number;
    }
}

declare module 'game-core/rooms/player/bag/bag' {
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game/world.service";
    import { IEntity } from "game-core/rooms/entity";
    export class Bag extends PacketHandler implements IEntity {
        constructor(mWorld: WorldService);
        initialize(): boolean;
        register(): void;
        unRegister(): void;
        destroy(): void;
        requestVirtualWorldQueryPackage(bagId: number, page?: number, perPage?: number): void;
    }
}

declare module 'game-core/rooms/player/friend/friend' {
    import { WorldService } from "game-core/game/world.service";
    export class Friend {
        constructor(world: WorldService);
        requestFriend(callBack?: Function): void;
        friendList(): any[];
    }
}

declare module 'game-core/rooms/player/interactive/interactive' {
    import { PacketHandler } from "net-socket-packet";
    import { IEntity } from "game-core/rooms/entity";
    import { WorldService } from "game-core/game/world.service";
    export class Interactive extends PacketHandler implements IEntity {
        constructor(mWorld: WorldService);
        initialize(): boolean;
        register(): void;
        unRegister(): void;
        destroy(): void;
        requestTargetUI(uiId: any, id: any): void;
    }
}

declare module 'game-core/rooms/wall/wall' {
    import { BlockObject } from "game-core/rooms/cameras/block.object";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IRoomService } from "game-core/rooms/room";
    import { WallDisplay } from "game-core/rooms/display/wall.display";
    import { Pos } from "game-core/utils/pos";
    export enum Direction {
        UP = "up",
        LEFT = "left",
        RIGHT = "right",
        DOWN = "down"
    }
    export class Wall extends BlockObject {
        protected mDisplay?: WallDisplay;
        protected mDirection: Direction;
        protected mPosition: Pos;
        protected mID: number;
        constructor(room: IRoomService, id: number, pos: Pos, dir: Direction);
        setPosition(pos: Pos): void;
        protected createDisplay(): ElementDisplay;
        protected onInitializedHandler(): void;
        protected addDisplay(): void;
        protected setDepth(): void;
        get id(): number;
    }
}

declare module 'game-core/rooms/layer/grid.layer' {
    import { IRoomService } from "game-core/rooms/room";
    export class GridLayer extends Phaser.GameObjects.Graphics {
        constructor(scene: Phaser.Scene);
        draw(room: IRoomService): void;
    }
}

declare module 'game-core/rooms/display/animation' {
    import { op_gameconfig_01, op_def } from "pixelpai_proto";
    import { IPoint } from "game-capsule/lib/helpers";
    export interface IAnimationData {
        name: string;
        frameName: string[];
        frameRate: number;
        loop: boolean;
        baseLoc: Phaser.Geom.Point;
        collisionArea?: number[][];
        walkableArea?: number[][];
        originPoint: Phaser.Geom.Point;
        readonly interactiveArea?: op_def.IPBPoint2i[];
        readonly layer: op_gameconfig_01.IAnimationLayer[];
        readonly mountLayer: op_gameconfig_01.IAnimationMountLayer;
        createProtocolObject(): op_gameconfig_01.IAnimationData;
    }
    export class Animation implements IAnimationData {
        protected mNode: op_gameconfig_01.INode;
        protected mID: number;
        protected mBaseLoc: Phaser.Geom.Point;
        protected mFrameName: string[];
        protected mFrameRate: number;
        protected mLoop: boolean;
        protected mName: string;
        protected mCollisionArea: number[][];
        protected mWalkableArea: number[][];
        protected mOriginPoint: Phaser.Geom.Point;
        protected mInteractiveArea: IPoint[];
        protected mLayer: op_gameconfig_01.IAnimationLayer[];
        protected mMountLayer: op_gameconfig_01.IAnimationMountLayer;
        constructor(ani: op_gameconfig_01.IAnimationData);
        createProtocolObject(): op_gameconfig_01.IAnimationData;
        get baseLoc(): Phaser.Geom.Point;
        get id(): number;
        get frameName(): string[];
        get frameRate(): number;
        get loop(): boolean;
        get name(): string;
        get collisionArea(): number[][];
        get walkableArea(): number[][];
        get originPoint(): Phaser.Geom.Point;
        get interactiveArea(): op_def.IPBPoint2i[];
        get layer(): op_gameconfig_01.IAnimationLayer[];
        get mountLayer(): op_gameconfig_01.IAnimationMountLayer;
    }
}

declare module 'game-core/rooms/display/display.object' {
    import { DynamicSprite } from "game-core/ui/components/dynamic.sprite";
    import { DynamicImage } from "game-core/ui/components/dynamic.image";
    import { op_def } from "pixelpai_proto";
    import { ReferenceArea } from "game-core/rooms/editor/reference.area";
    import { IRoomService } from "game-core/rooms/room";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { IElement } from "game-core/rooms/element/element";
    import { AnimationData } from "game-core/rooms/element/sprite";
    export enum DisplayField {
        BACKEND = 0,
        STAGE = 1,
        FRONTEND = 2,
        FLAG = 3,
        Effect = 4
    }
    export class DisplayObject extends Phaser.GameObjects.Container implements ElementDisplay {
        /**
          * 实际透明度，避免和tween混淆
          */
        protected mAlpha: number;
        protected mBaseLoc: Phaser.Geom.Point;
        protected mCollisionArea: number[][];
        protected mOriginPoint: Phaser.Geom.Point;
        protected mRoomService: IRoomService;
        protected mFlagContainer: Phaser.GameObjects.Container;
        protected mNickname: Phaser.GameObjects.Text;
        protected mBadges: DynamicImage[];
        protected mBackEffect: DynamicSprite;
        protected mFrontEffect: DynamicSprite;
        protected mReferenceArea: ReferenceArea;
        protected mElement: IElement;
        protected mChildMap: Map<string, any>;
        protected mDirection: number;
        protected mAntial: boolean;
        protected mActionName: AnimationData;
        constructor(scene: Phaser.Scene, roomService: IRoomService, element?: IElement, antial?: boolean);
        changeAlpha(val?: number): void;
        removeFromParent(): void;
        fadeIn(callback?: () => void): void;
        fadeOut(callback?: () => void): void;
        load(data: IFramesModel | IDragonbonesModel, field?: DisplayField): void;
        play(animationName: AnimationData, field?: DisplayField): void;
        mount(ele: Phaser.GameObjects.Container, targetIndex?: number): void;
        unmount(ele: Phaser.GameObjects.Container): void;
        removeEffect(field: DisplayField): void;
        removeDisplay(field: DisplayField): void;
        destroy(fromScene?: boolean): void;
        showNickname(val: string): void;
        setDisplayBadges(cards: op_def.IBadgeCard[]): void;
        showRefernceArea(): void;
        hideRefernceArea(): void;
        scaleTween(): void;
        showEffect(): void;
        getElement(key: string): any;
        protected addEffect(target: DynamicSprite, textureURL: string, atlasURL?: string, isBack?: boolean, framerate?: number, loop?: boolean, killComplete?: boolean): void;
        protected layouFlag(offset?: number): void;
        protected clearBadges(): void;
        protected get flagContainer(): Phaser.GameObjects.Container;
        protected addChildMap(key: string, display: Phaser.GameObjects.GameObject): void;
        protected removeChildMap(key: string): void;
        get baseLoc(): Phaser.Geom.Point;
        get sortX(): number;
        get sortY(): number;
        get sortZ(): number;
        get element(): IElement;
        get collisionArea(): number[][];
        get originPoint(): Phaser.Geom.Point;
    }
}

declare module 'game-core/rooms/display/dragonbones.display' {
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { DisplayObject, DisplayField } from "game-core/rooms/display/display.object";
    import { IRoomService } from "game-core/rooms/room";
    import { IElement } from "game-core/rooms/element/element";
    import { AnimationData } from "game-core/rooms/element/sprite";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    export enum AvatarSlotType {
            BodyCostDres = "body_cost_$_dres",
            BodyCost = "body_cost_$",
            BodyTail = "body_tail_$",
            BodyWing = "body_wing_$",
            BodyBase = "body_base_$",
            BodySpec = "body_spec_$",
            FlegSpec = "fleg_spec_$",
            FlegBase = "fleg_base_$",
            FlegCost = "fleg_cost_$",
            BarmSpec = "barm_spec_$",
            BarmBase = "barm_base_$",
            BarmCost = "barm_cost_$",
            WeapBarm = "weap_barm_$",
            ShldBarm = "shld_barm_$",
            BlegSpec = "bleg_spec_$",
            BlegBase = "bleg_base_$",
            BlegCost = "bleg_cost_$",
            FarmSpec = "farm_spec_$",
            FarmBase = "farm_base_$",
            FarmCost = "farm_cost_$",
            ShldFarm = "shld_farm_$",
            WeapFarm = "weap_farm_$",
            HeadSpec = "head_spec_$",
            HeadMask = "head_mask_$",
            HeadEyes = "head_eyes_$",
            HeadBase = "head_base_$",
            HeadHairBack = "head_hair_$_back",
            HeadMous = "head_mous_$",
            HeadHair = "head_hair_$",
            HeadHats = "head_hats_$"
    }
    export enum AvatarPartType {
            BarmBase = "barm_base_#_$",
            BarmCost = "barm_cost_#_$",
            BarmSpec = "barm_spec_#_$",
            BlegBase = "bleg_base_#_$",
            BlegCost = "bleg_cost_#_$",
            BlegSpec = "bleg_spec_#_$",
            BodyBase = "body_base_#_$",
            BodyCost = "body_cost_#_$",
            BodyCostDres = "body_cost_#_$_dres",
            BodySpec = "body_spec_#_$",
            BodyTail = "body_tail_#_$",
            BodyWing = "body_wing_#_$",
            FarmBase = "farm_base_#_$",
            FarmCost = "farm_cost_#_$",
            FarmSpec = "farm_spec_#_$",
            FlegBase = "fleg_base_#_$",
            FlegCost = "fleg_cost_#_$",
            FlegSpec = "fleg_spec_#_$",
            HeadBase = "head_base_#_$",
            HeadEyes = "head_eyes_#_$",
            HeadHair = "head_hair_#_$",
            HeadHairBack = "head_hair_#_$_back",
            HeadHats = "head_hats_#_$",
            HeadMask = "head_mask_#_$",
            HeadMous = "head_mous_#_$",
            HeadSpec = "head_spec_#_$",
            ShldFarm = "shld_farm_#_$",
            WeapFarm = "weap_farm_#_$",
            ShldBarm = "shld_barm_#_$",
            WeapBarm = "weap_barm_#_$"
    }
    /**
        * 龙骨显示对象
        */
    export class DragonbonesDisplay extends DisplayObject implements ElementDisplay {
            mDisplayInfo: IDragonbonesModel | undefined;
            protected mAnimationName: string;
            protected mDragonbonesName: string;
            protected mArmatureDisplay: dragonBones.phaser.display.ArmatureDisplay | undefined;
            protected mFadeTween: Phaser.Tweens.Tween;
            constructor(scene: Phaser.Scene, roomService: IRoomService, element?: IElement, antial?: boolean);
            get spriteWidth(): number;
            get spriteHeight(): number;
            get GameObject(): DisplayObject;
            changeAlpha(val?: number): void;
            load(display: IDragonbonesModel | IFramesModel, field?: DisplayField): void;
            getDisplay(): dragonBones.phaser.display.ArmatureDisplay | undefined;
            play(val: AnimationData): void;
            fadeIn(callback?: () => void): void;
            fadeOut(callback?: () => void): void;
            destroy(): void;
            protected buildDragbones(): void;
            protected onLoadCompleteHandler(loader?: any, totalComplete?: number, totalFailed?: number): void;
            set dragonBonesName(val: string);
            get dragonBonesName(): string;
    }
}

declare module 'game-core/rooms/display/dragonbones.model' {
    import { op_def } from "pixelpai_proto";
    import { AnimationData } from "game-core/rooms/element/sprite";
    import { Direction } from "game-core/rooms/element/element";
    export interface IDragonbonesModel {
        readonly discriminator: string;
        id: number;
        avatarDir?: number;
        avatar?: IAvatar;
        animationName?: string;
        destroy(): any;
        getCollisionArea(aniName: string): number[][];
        getWalkableArea(aniName: string): number[][];
        getOriginPoint(aniName: string): Phaser.Geom.Point;
        existAnimation(aniName: string): boolean;
        getInteractiveArea(aniName: string): op_def.IPBPoint2i[] | undefined;
        findAnimation(baseName: string, dir: Direction): AnimationData;
    }
    export interface IAvatar {
        id: string;
        dirable?: (number[] | null);
        headBaseId?: (string | null);
        headHairId?: (string | null);
        headEyesId?: (string | null);
        headBackId?: (string | null);
        headMousId?: (string | null);
        headHatsId?: (string | null);
        headMaskId?: (string | null);
        headSpecId?: (string | null);
        bodyBaseId?: (string | null);
        bodyCostId?: (string | null);
        bodyDresId?: (string | null);
        bodyTailId?: (string | null);
        bodyWingId?: (string | null);
        bodySpecId?: (string | null);
        farmBaseId?: (string | null);
        farmCostId?: (string | null);
        farmShldId?: (string | null);
        farmWeapId?: (string | null);
        farmSpecId?: (string | null);
        barmBaseId?: (string | null);
        barmCostId?: (string | null);
        barmShldId?: (string | null);
        barmWeapId?: (string | null);
        barmSpecId?: (string | null);
        flegBaseId?: (string | null);
        flegCostId?: (string | null);
        flegSpecId?: (string | null);
        blegBaseId?: (string | null);
        blegCostId?: (string | null);
        blegSpecId?: (string | null);
        stalkerId?: (string | null);
    }
    export class DragonbonesModel implements IDragonbonesModel {
        discriminator: string;
        id: number;
        avatarDir?: number;
        avatar?: IAvatar;
        constructor(data: any);
        setInfo(val: any): void;
        destroy(): void;
        getCollisionArea(aniName: string): number[][];
        getWalkableArea(): number[][];
        getOriginPoint(aniName: any): Phaser.Geom.Point;
        getInteractiveArea(): op_def.IPBPoint2i[];
        existAnimation(aniName: string): boolean;
        findAnimation(baseName: string, dir: Direction): AnimationData;
    }
}

declare module 'game-core/rooms/display/frames.display' {
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { DisplayObject, DisplayField } from "game-core/rooms/display/display.object";
    import { IAnimationData } from "game-core/rooms/display/animation";
    import { AnimationData } from "game-core/rooms/element/sprite";
    /**
      * 序列帧显示对象
      */
    export class FramesDisplay extends DisplayObject {
        protected mFadeTween: Phaser.Tweens.Tween;
        protected mDisplayDatas: Map<DisplayField, IFramesModel>;
        protected mSprites: Map<DisplayField, Phaser.GameObjects.Sprite | Phaser.GameObjects.Image | Phaser.GameObjects.Container>;
        protected mScaleTween: Phaser.Tweens.Tween;
        protected mDisplays: Array<Phaser.GameObjects.Sprite | Phaser.GameObjects.Image>;
        protected mMountContainer: Phaser.GameObjects.Container;
        protected mMainSprite: Phaser.GameObjects.Sprite;
        protected mCurAnimation: IAnimationData;
        protected mMountList: Phaser.GameObjects.Container[];
        load(displayInfo: IFramesModel, field?: DisplayField): void;
        play(animation: AnimationData, field?: DisplayField): void;
        playEffect(): void;
        mount(display: Phaser.GameObjects.Container, targetIndex?: number): void;
        unmount(display: Phaser.GameObjects.Container): void;
        fadeIn(callback?: () => void): void;
        fadeOut(callback?: () => void): void;
        scaleTween(): void;
        setInteractive(shape?: Phaser.Types.Input.InputConfiguration | any, callback?: (hitArea: any, x: number, y: number, gameObject: Phaser.GameObjects.GameObject) => void, dropZone?: boolean): this;
        disableInteractive(): this;
        removeEffect(): void;
        removeDisplay(field: DisplayField): void;
        destroy(): void;
        protected createDisplay(key: string, ani: IAnimationData): void;
        protected clearFadeTween(): void;
        protected clear(): void;
        get spriteWidth(): number;
        get spriteHeight(): number;
    }
}

declare module 'game-core/rooms/display/frames.model' {
    import { op_gameconfig, op_gameconfig_01, op_def } from "pixelpai_proto";
    import { IAnimationData } from "game-core/rooms/display/animation";
    import { Sprite, AnimationData } from "game-core/rooms/element/sprite";
    import { Direction } from "game-core/rooms/element/element";
    export interface IFramesModel {
        readonly discriminator: string;
        readonly gene: string | undefined;
        id: number;
        avatarDir?: number;
        type?: string;
        display?: IDisplay | null;
        animations?: Map<string, IAnimationData>;
        animationName: string;
        package?: op_gameconfig.IPackage;
        shops?: op_gameconfig.IShop[] | null;
        getAnimations(name: string): IAnimationData;
        existAnimation(aniName: string): boolean;
        getCollisionArea(aniName: string, flip: boolean): number[][];
        getWalkableArea(aniName: string, flip: boolean): number[][];
        getInteractiveArea(aniName: string): op_def.IPBPoint2i[] | undefined;
        getOriginPoint(aniName: string, flip: boolean): Phaser.Geom.Point;
        createSprite(properties: object): Sprite;
        findAnimation(baseName: string, dir: Direction): AnimationData;
        destroy(): any;
    }
    export interface IDisplay {
        texturePath: string;
        dataPath?: string;
    }
    export class FramesModel implements IFramesModel {
        avatarDir?: number;
        readonly discriminator: string;
        id: number;
        type: string;
        display: IDisplay | null;
        animations: Map<string, IAnimationData>;
        animationName: string;
        package: op_gameconfig.IPackage;
        shops: op_gameconfig.IShop[];
        protected mGen: string;
        constructor(data: any);
        setInfo(val: any): void;
        getAnimationData(): Map<string, IAnimationData>;
        existAnimation(aniName: string): boolean;
        getAnimations(name: string): IAnimationData;
        destroy(): void;
        get gene(): string | undefined;
        createProtocolObject(): op_gameconfig_01.IAnimationData[];
        getCollisionArea(aniName: string, flip?: boolean): number[][];
        getWalkableArea(aniName: string, flip?: boolean): number[][];
        getInteractiveArea(aniName: string): op_def.IPBPoint2i[] | undefined;
        getOriginPoint(aniName: any, flip?: boolean): Phaser.Geom.Point;
        getDirable(): void;
        createSprite(properties: {
            nodeType: op_def.NodeType;
            x: number;
            y: number;
            z: number;
            id?: number;
            dir?: number;
            isMoss?: boolean;
        }): Sprite;
        findAnimation(baseName: string, dir: Direction): AnimationData;
    }
}

declare module 'game-core/rooms/action/IDispose' {
    export interface IDispose {
        destroy(): any;
    }
}

declare module 'game-core/rooms/Animation/bubble.animation' {
    import { IAnimationBase, AnimationUrlData } from "game-core/rooms/Animation/ianimationbase";
    export class BubbleAnimation extends Phaser.GameObjects.Container implements IAnimationBase {
        resName: string;
        resUrl: string;
        animUrlData: AnimationUrlData;
        loaded: boolean;
        isPlaying: boolean;
        loop: boolean;
        constructor(scene: Phaser.Scene);
        load(resName: string, resUrl: string, data?: string): void;
        play(aniName?: string): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/Animation/frame.animation' {
    import { IAnimationBase, AnimationUrlData } from "game-core/rooms/Animation/ianimationbase";
    export class FrameAnimation extends Phaser.GameObjects.Container implements IAnimationBase {
        resName: string;
        resUrl: string;
        animUrlData: AnimationUrlData;
        loaded: boolean;
        isPlaying: boolean;
        loop: boolean;
        curAniName: string;
        constructor(scene: Phaser.Scene);
        load(resName: string, resUrl: string, data?: string): void;
        play(aniName?: string): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/Animation/dragonbones.animation' {
    import { IAnimationBase, AnimationUrlData } from "game-core/rooms/Animation/ianimationbase";
    export class DragonbonesAnimation extends Phaser.GameObjects.Container implements IAnimationBase {
        resName: string;
        resUrl: string;
        animUrlData: AnimationUrlData;
        loaded: boolean;
        isPlaying: boolean;
        loop: boolean;
        curAniName: string;
        constructor(scene: Phaser.Scene);
        load(resName: string, resUrl: string, data?: string): void;
        play(aniName?: string): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/Animation/ianimationbase' {
    export interface IAnimationBase {
        resName: string;
        resUrl: string;
        rate?: number;
        animUrlData: AnimationUrlData;
        loaded: boolean;
        loop: boolean;
        load(resName: string, resUrl: string, data?: string): any;
        play(aniName: string): any;
    }
    export class AnimationUrlData {
        resName: string;
        resUrl: string;
        pngUrl: string;
        jsonUrl: string;
        boneUrl: string;
        responseType: string;
        textureXhrSettings?: any;
        atlasXhrSettings?: any;
        boneXhrSettings?: any;
        setData(resName: string, resUrl: string, isbone?: boolean, extension?: string): void;
        setDisplayData(pngUrl: string, jsonUrl: string, extension?: string): void;
        dispose(): void;
    }
}

declare module 'game-core/rooms/cameras/play.camera' {
    export class PlayCamera extends Phaser.Cameras.Scene2D.Camera {
        constructor(x: number, y: number, width: number, height: number, pixelRatio: number, moveRatio?: number);
        startFollow(target: any, roundPixels: boolean, lerpX: number, lerpY: number, offsetX: number, offsetY: number): this;
        preRender(resolution: number): void;
    }
}

declare module 'game-core/net/transport/websocket' {
    import { EventEmitter } from "events";
    import { Buffer } from "buffer/";
    enum ReadyState {
        CONNECTING = 0,
        OPEN = 1,
        CLOSING = 2,
        CLOSED = 3
    }
    export class WSWrapper extends EventEmitter {
        secure: boolean;
        _host: string;
        _port: number;
        _connection: any;
        _readyState: ReadyState;
        _packets_q: Buffer[];
        _writable: boolean;
        _sent_count: number;
        _auto_reconnect: boolean;
        _force_close: boolean;
        constructor();
        constructor(host: string, port: number);
        Open(): void;
        Open(host: string, port: number): void;
        Close(): void;
        Send(packet: Buffer): void;
        destroy(): void;
    }
    export {};
}

declare module 'game-core/rooms/editor.room' {
    import { IPosition45Obj } from "game-core/utils/position45";
    import { IRoomManager } from "game-core/rooms/room.manager";
    import { op_client } from "pixelpai_proto";
    import { Brush } from "game-core/const/brush";
    import { IRoomService, Room } from "game-core/rooms/room";
    import { Pos } from "game-core/utils/pos";
    import { EditorElementManager } from "game-core/rooms/element/editor.element.manager";
    import { EditorTerrainManager } from "game-core/rooms/terrain/editor.terrain.manager";
    import { EditorMossManager } from "game-core/rooms/element/editor.moss.manager";
    import { DisplayObjectPool } from "game-core/rooms/display-object.pool";
    import { EditorSkyBoxManager } from "game-core/rooms/sky.box/editor.sky.box.manager";
    export interface EditorRoomService extends IRoomService {
        readonly brush: Brush;
        readonly miniSize: IPosition45Obj;
        displayObjectPool: DisplayObjectPool;
        transformToMini45(p: Pos): Pos;
        transformToMini90(p: Pos): Pos;
        removeSelected(): void;
    }
    export class EditorRoom extends Room implements EditorRoomService {
        displayObjectPool: DisplayObjectPool;
        protected editorTerrainManager: EditorTerrainManager;
        protected editorElementManager: EditorElementManager;
        protected editorMossManager: EditorMossManager;
        protected editorSkyboxManager: EditorSkyBoxManager;
        constructor(manager: IRoomManager);
        enter(data: op_client.IScene): void;
        startPlay(): void;
        destroy(): void;
        update(time: number, delta: number): void;
        transformToMini90(p: Pos): undefined | Pos;
        transformToMini45(p: Pos): undefined | Pos;
        removeSelected(): void;
        protected addPointerMoveHandler(): void;
        protected removePointerMoveHandler(): void;
        protected addPointerDownHandler(): void;
        protected removePointerDownHandler(): void;
        protected addPointerUpHandler(): void;
        protected removePointerUpHandler(): void;
        protected addGameObjectDownHandler(): void;
        protected removeGameObjectDownHandler(): void;
        protected addKeydownHandler(): void;
        protected removeKeydownHandler(): void;
        protected onPointerDownHandler(): void;
        protected onPointerUpHandler(pointer: Phaser.Input.Pointer): void;
        protected onPointerMoveHandler(pointer: any): void;
        get brush(): Brush;
        get miniSize(): IPosition45Obj;
    }
}

declare module 'game-core/ui/components/inputTextFactory' {
    import { WorldService } from "game-core/game/world.service";
    export class InputTextFactory {
        constructor(world: WorldService);
        getInputText(scene: Phaser.Scene, style?: any): InputTextField;
    }
    export const InputTextFieldEvent: {
        textchange: string;
        textclick: string;
        textdblclick: string;
        textfocus: string;
        textblur: string;
        textExit: string;
    };
    export class InputTextField extends Phaser.Events.EventEmitter {
        constructor(scene: Phaser.Scene, world: WorldService, config: any);
        onBlur(): void;
        onFocus(): void;
        getText(): string;
        getSkin(): Phaser.GameObjects.Text;
        destroy(): void;
    }
}

declare module 'game-core/ui/components/BasePanel' {
    import { WorldService } from "game-core/game/world.service";
    import { Panel } from "apowophaserui";
    export class BasePanel extends Panel {
        protected mInitialized: boolean;
        protected mTweening: boolean;
        protected mScene: Phaser.Scene;
        protected mWorld: WorldService;
        protected mWidth: number;
        protected mHeight: number;
        protected mPanelTween: Phaser.Tweens.Tween;
        protected dpr: number;
        protected mResources: Map<string, any>;
        protected mReLoadResources: Map<string, any>;
        protected mModuleName: string;
        constructor(scene: Phaser.Scene, world: WorldService, moduleName?: string);
        updateUIState(ui: any): void;
        protected addResources(key: string, resource: any): void;
        protected get scaleWidth(): number;
        protected get scaleHeight(): number;
        protected get cameraWidth(): number;
        protected get cameraHeight(): number;
    }
}

declare module 'game-core/ui/components/BaseMediator' {
    import { IAbstractPanel, Panel } from "apowophaserui";
    export interface IMediator {
        type: number;
        isShow(): boolean;
        tweenExpand(show: boolean): any;
        resize(wid: any, hei: any): any;
        show(param?: any): void;
        update(param?: any): void;
        hide(): void;
        updateViewPos(): any;
        destroy(): any;
        isSceneUI(): boolean;
        getView(): IAbstractPanel;
        setParam(param: any): void;
        getParam(): any;
    }
    export class BaseMediator implements IMediator {
        protected mView: Panel;
        /**
          * 面板处于打开状态
          */
        protected mShow: boolean;
        protected mParam: any;
        protected mUIType: number;
        constructor();
        get type(): number;
        updateViewPos(): void;
        tweenExpand(show: boolean): void;
        getView(): Panel;
        hide(): void;
        isSceneUI(): boolean;
        isShow(): boolean;
        resize(width?: number, height?: number): void;
        show(param?: any): void;
        update(param?: any): void;
        setParam(param: any): void;
        getParam(): any;
        destroy(): void;
    }
}

declare module 'game-core/ui/components/dynamic.image' {
    export class DynamicImage extends Phaser.GameObjects.Image {
        constructor(scene: Phaser.Scene, x: number, y: number);
        load(value: string, loadContext?: any, completeCallBack?: Function, errorCallBack?: Function): void;
        destroy(fromScene?: boolean): void;
        protected onLoadComplete(file?: string): void;
        protected onLoadError(file: Phaser.Loader.File): void;
    }
}

declare module 'game-core/ui/components/dynamic.ninepatch' {
    import { NinePatch } from "apowophaserui";
    export class DynamicNinepatch {
        protected mUrl: string;
        protected mLoadCompleteCallBack?: Function;
        protected mLoadContext?: any;
        protected mImage: NinePatch;
        protected mConfig: any;
        constructor(mScene: Phaser.Scene, mParent?: Phaser.GameObjects.Container);
        load(value: string, config: any, completeCallBack?: Function, loadContext?: any): void;
        get image(): NinePatch;
    }
}

declare module 'game-core/ui/components/dynamic.sprite' {
    export class DynamicSprite extends Phaser.GameObjects.Sprite {
        constructor(scene: Phaser.Scene, x: number, y: number);
        load(textureURL: string, atlasURL: string, loadContext?: any, completeCallBack?: Function, errorCallBack?: Function): void;
        destroy(fromScene?: boolean): void;
    }
}

declare module 'game-core/ui/components/radio' {
    import { BBCodeText } from "apowophaserui";
    export interface IRadioResConfig {
        wid: number;
        hei: number;
        resKey: string;
        resPng: string;
        resJson: string;
        resBg: string;
        resArrow: string;
        fontStyle: {
            size: number;
            color: string;
            bold: boolean;
        };
        completeBack: Function;
        clickCallBack: Function;
    }
    export class Radio extends Phaser.GameObjects.Container {
        protected itemList: RadioItemRender[];
        constructor(scene: Phaser.Scene, config: IRadioResConfig);
        setRadioData(value: any[]): void;
        clearRadioData(): void;
        get isShow(): boolean;
        set isShow(value: boolean);
        selectCall(itemData: any): void;
        destroy(): void;
        protected init(): void;
    }
    export class RadioItemRender extends Phaser.GameObjects.Container {
        protected mText: BBCodeText;
        protected mSelectBG: Phaser.GameObjects.Graphics;
        protected mData: any;
        protected mSelectCallUI: any;
        constructor(scene: Phaser.Scene, selectCallUI: any, wid: number, hei: number, resKey: string, arrowRes: string);
        addListen(): void;
        removeListen(): void;
        set itemData(val: any);
        get itemData(): any;
        destroy(): void;
        setSelected(val: boolean): void;
        protected overHandler(): void;
        protected outHandler(): void;
        protected selectHandler(): void;
    }
}

declare module 'game-core/ui/components/check.button' {
    export class CheckButton extends Phaser.GameObjects.Image {
        constructor(scene: Phaser.Scene, x: number, y: number, key: string, normalFrames: string, selectFrame: string);
        set selected(val: boolean);
        get selected(): boolean;
    }
}

declare module 'game-core/ui/components/NumberCounter' {
    export class NumberCounter extends Phaser.GameObjects.Container {
        constructor(scene: Phaser.Scene, key: string, x?: number, y?: number, dpr?: number, scale?: number);
        resize(): void;
        setMinNumber(val: number): void;
        setMaxNumber(val: number): void;
        addActionListener(): void;
        removeActionListener(): void;
        setCounter(num: number): void;
        setBlur(): void;
        get number(): number;
    }
}

declare module 'game-core/ui/components/idropable' {
    import { IDragable } from "game-core/ui/components/idragable";
    export interface IDropable {
        dragDrop(dragable: IDragable): void;
        dragOver(dragable: IDragable): void;
        getDropType(): number;
        getDropData(): any;
        getBound(): Phaser.Geom.Rectangle;
    }
}

declare module 'game-core/ui/components/idragable' {
    import { IDropable } from "game-core/ui/components/idropable";
    export interface IDragable {
        dragStart(): void;
        dragStop(acceptDrag: IDropable): void;
        getDragImage(): Phaser.GameObjects.Image;
        getVisualDisplay(): Phaser.GameObjects.Image;
        getDragType(): number;
        getDragData(): any;
    }
}

declare module 'game-core/ui/components/GridLayoutGroup' {
    export class GridLayoutGroup extends Phaser.GameObjects.Container {
            static readonly ClassName: string;
            constructor(scene: Phaser.Scene, x: number, y: number);
            onPlay(): void;
            start(): void;
            set padding(value: Phaser.Math.Vector4);
            get padding(): Phaser.Math.Vector4;
            /**
                * vec2(width,height);
                */
            set cellSize(value: Phaser.Math.Vector2);
            get cellSize(): Phaser.Math.Vector2;
            /**
                * vec2(x,y);
                */
            set spacing(value: Phaser.Math.Vector2);
            get spacing(): Phaser.Math.Vector2;
            set alignmentType(value: AlignmentType);
            get alignmentType(): AlignmentType;
            set startCorner(value: CornerType);
            get startCorner(): CornerType;
            set startAxis(value: AxisType);
            get startAxis(): AxisType;
            set constraint(value: ConstraintType);
            get constraint(): ConstraintType;
            set constraintCount(value: number);
            get constraintCount(): number;
            Layout(): void;
    }
    export enum AlignmentType {
            UpperLeft = 0,
            UpperCenter = 1,
            UpperRight = 2,
            MiddleLeft = 3,
            MiddleCenter = 4,
            MiddleRight = 5,
            LowerLeft = 6,
            LowerCenter = 7,
            LowerRight = 8
    }
    export enum CornerType {
            UpperLeft = 0,
            UpperRight = 1,
            LowerLeft = 2,
            LowerRight = 3
    }
    export enum AxisType {
            Horizontal = 0,
            Vertical = 1
    }
    export enum ConstraintType {
            Flexible = 0,
            FixedColumnCount = 1,
            FixedRowCount = 2
    }
}

declare module 'game-core/ui/components/GraphicsProgressBar' {
    export class GraphicsProgressBar extends Phaser.GameObjects.Container {
        constructor(scene: Phaser.Scene, x: number, y: number, width: number, height: number, isHorizontal?: boolean);
        setColor(barColor: number, bgColor?: number): void;
        setValue(value: number): void;
        setRoundedRectValue(value: number, radius: number): void;
    }
}

declare module 'game-core/ui/components/IListItemRender' {
    export interface IListItemComponent {
        index: number;
        getView(): any;
        dataChange(val: any): any;
    }
}

declare module 'game-core/ui/components/Item' {
    import { op_client } from "pixelpai_proto";
    export class Item extends Phaser.GameObjects.Container {
        constructor(scene: Phaser.Scene);
        setProp(prop: op_client.ICountablePackageItem): void;
        clear(): void;
        destroy(): void;
        get prop(): op_client.ICountablePackageItem;
    }
}

declare module 'game-core/ui/components/item.slot' {
    import { IListItemComponent } from "game-core/ui/components/IListItemRender";
    import { op_gameconfig } from "pixelpai_proto";
    import { DragDropIcon } from "game-core/ui/components/dragDropIcon";
    import { WorldService } from "game-core/game/world.service";
    import { IToolTip } from "game-core/ui/tips/itoolTip";
    export class ItemSlot implements IListItemComponent {
        toolTipCon: Phaser.GameObjects.Container;
        index: number;
        protected toolTip: IToolTip;
        protected mData: op_gameconfig.Item;
        protected mScene: Phaser.Scene;
        protected mResStr: string;
        protected mResPng: string;
        protected mResJson: string;
        protected mResSlot: string;
        protected mIcon: DragDropIcon;
        protected mAnimationCon: Phaser.GameObjects.Sprite | Phaser.GameObjects.Image;
        protected mSubScriptSprite: Phaser.GameObjects.Image;
        protected mSubScriptRes: string;
        protected itemBG: Phaser.GameObjects.Image | Phaser.GameObjects.Graphics;
        protected mSelectSprite: Phaser.GameObjects.Sprite | Phaser.GameObjects.Graphics;
        protected mSelectRes: string;
        protected mWorld: WorldService;
        protected minitialize: boolean;
        protected mWid: number;
        protected mHei: number;
        protected isTipBoo: boolean;
        protected mModuleName: string;
        constructor(scene: Phaser.Scene, world: WorldService, parentCon: Phaser.GameObjects.Container, x: number, y: number, resStr?: string, respng?: string, resjson?: string, resSlot?: string, selectRes?: string, subscriptRes?: string, moduleName?: string);
        set hasTip(value: boolean);
        get hasTip(): boolean;
        createUI(): void;
        getView(): any;
        getBg(): Phaser.GameObjects.Graphics | Phaser.GameObjects.Image;
        getIcon(): DragDropIcon;
        dataChange(val: any): void;
        destroy(): void;
        protected setToolTipData(text: string): void;
        protected onLoadCompleteHandler(): void;
        protected downHandler(pointer: any): void;
        protected overHandler(pointer: any): void;
        protected outHandler(pointer: any): void;
    }
}

declare module 'game-core/ui/components/dragDropIcon' {
    import { IDropable } from "game-core/ui/components/idropable";
    import { IDragable } from "game-core/ui/components/idragable";
    export class DragDropIcon extends Phaser.GameObjects.Container implements IDragable, IDropable {
        protected mDropType: number;
        protected mDragType: number;
        constructor(mScene: Phaser.Scene, x: number, y: number, texture?: string);
        load(value: string, thisArg?: any, onLoadComplete?: Function): void;
        dragStart(): void;
        dragStop(acceptDrag: IDropable): void;
        dragDrop(dragable: IDragable): void;
        dragOver(dragable: IDragable): void;
        getDragData(): any;
        getDropData(): any;
        getDragImage(): Phaser.GameObjects.Image;
        getVisualDisplay(): Phaser.GameObjects.Image;
        getBound(): Phaser.Geom.Rectangle;
        get resKey(): string;
        destroy(): void;
        get icon(): Phaser.GameObjects.Image;
        setDragType(value: number): void;
        setDropType(value: number): void;
        getDropType(): number;
        getDragType(): number;
    }
}

declare module 'game-core/ui/components/baseitem' {
    export interface IItem {
        readonly url: string;
        readonly id: number;
        count: number;
    }
}

declare module 'game-core/ui/components/ScrollRect' {
    import { GridLayoutGroup } from "game-core/ui/components/GridLayoutGroup";
    export class ScrollRect extends Phaser.GameObjects.Zone {
        content: GridLayoutGroup;
        constructor(scene: Phaser.Scene, x: number, y: number);
        setParent(parent: Phaser.GameObjects.Container): void;
        setPosition(x: any, y: any): this;
        addItem(item: any): void;
        sort(): void;
    }
}

declare module 'game-core/ui/components/TextButton' {
    import { IButtonState } from "apowophaserui";
    export class TextButton extends Phaser.GameObjects.Container implements IButtonState {
        constructor(scene: Phaser.Scene, dpr: number, scale?: number, text?: string, x?: number, y?: number);
        setText(val: string): void;
        setFontSize(size: number): void;
        setFontStyle(val: string): void;
        setStyle(style: object): void;
        setNormalColor(color: string): void;
        setChangeColor(color: string): void;
        changeDown(): void;
        changeNormal(): void;
        get text(): Phaser.GameObjects.Text;
    }
}

declare module 'game-core/ui/components/icon.btn' {
    import { WorldService } from "game-core/game/world.service";
    import { Pos } from "game-core/utils/pos";
    export interface IBtnData {
            readonly name?: string;
            key: string;
            bgResKey: string;
            bgTextures: string[];
            iconResKey: string;
            iconTexture: string;
            scale: number;
            pngUrl: string;
            jsonUrl: string;
            callBack?: Function;
    }
    /**
        * 多帧资源按钮
        */
    export class IconBtn extends Phaser.GameObjects.Container {
            constructor(scene: Phaser.Scene, world: WorldService, data: IBtnData);
            getKey(): string;
            setPos(x: number, y: number): void;
            /**
                * 获取按钮的初始化时的位置，用于tween时，按钮来回切换位置用
                */
            getPos(): Pos;
            setBtnData(value: any): void;
            getBtnData(): any;
            setClick(func: Function): void;
            destroy(): void;
            addListen(): void;
            removeListen(): void;
            protected loadComplete(): void;
    }
}

declare module 'game-core/ui/components/icon.select.btn' {
    import { WorldService } from "game-core/game/world.service";
    import { Pos } from "game-core/utils/pos";
    /**
        * 切换状态按钮(点击后状态改变的按钮，需要多帧资源)
        */
    export class IconSelectBtn extends Phaser.GameObjects.Container {
            constructor(scene: Phaser.Scene, world: WorldService, bgResKey: string, bgTexture: string[], scale?: number);
            setPos(x: number, y: number): void;
            /**
                * 获取按钮的初始化时的位置，用于tween时，按钮来回切换位置用
                */
            getPos(): Pos;
            setBtnData(value: any): void;
            getBtnData(): any;
            setClick(func: Function): void;
            setBgRes(index: number): void;
            destroy(): void;
    }
}

declare module 'game-core/ui/components/alert.view' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    export class AlertView extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        show(config: IAlertConfig): void;
        preload(): void;
        protected init(): void;
    }
    export interface IAlertConfig {
        text: string;
        title?: string;
        callback: Function;
        content?: any;
        ox?: number;
        oy?: number;
    }
}

declare module 'game-core/ui/components/input.panel' {
    import { WorldService } from "game-core/game/world.service";
    export class InputPanel extends Phaser.Events.EventEmitter {
        constructor(scene: Phaser.Scene, world: WorldService, text?: string);
    }
}

declare module 'game-core/ui/components/checkbox.group' {
    export { IButtonState } from "apowophaserui";
    export class CheckboxGroup extends Phaser.Events.EventEmitter {
        constructor();
        appendItem(item: any): this;
        appendItemAll(items: any[]): this;
        removeItem(item: any): this;
        selectIndex(index: number): this;
        select(item: any): void;
        reset(): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/components/patches.config' {
    export interface IPatchesConfig {
        top: number;
        left?: number;
        right?: number;
        bottom?: number;
    }
    const normalizePatchesConfig: (config: IPatchesConfig) => IPatchesConfig;
    export { normalizePatchesConfig };
}

declare module 'game-core/ui/baseView/bagGroup/bag.group' {
    import { WorldService } from "game-core/game/world.service";
    import { ItemSlot } from "game-core/ui/components/item.slot";
    import { op_gameconfig } from "pixelpai_proto";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    /**
      * 主界面ui pc版本
      */
    export class BagGroup extends BasePanel {
        static SlotMaxCount: number;
        bagBtn: Phaser.GameObjects.Sprite | Phaser.GameObjects.Graphics;
        bagSlotList: ItemSlot[];
        constructor(scene: Phaser.Scene, world: WorldService, x: number, y: number);
        show(param?: any): void;
        resize(wid: number, hei: number): void;
        tweenExpand(show: boolean): void;
        destroy(): void;
        addListen(): void;
        removeListen(): void;
        setDataList(items: op_gameconfig.IItem[]): void;
        protected preload(): void;
        protected init(): void;
        protected tweenComplete(show: boolean): void;
    }
}

declare module 'game-core/ui/baseView/bagGroup/bag.group.mediator' {
    import { BaseFaceMediator } from "game-core/ui/baseView/baseFace.mediator";
    import { WorldService } from "game-core/game/world.service";
    /**
      * 背包场景UI，带背包slot，pc端用
      */
    export class BagGroupMediator extends BaseFaceMediator {
        static NAME: string;
        constructor(mWorld: WorldService, scene: Phaser.Scene);
        isSceneUI(): boolean;
        isShow(): boolean;
        show(param?: any): void;
        update(param: any): void;
        hide(): void;
    }
}

declare module 'game-core/ui/baseView/bottomGroup/bottom.btn.group' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    export class BottomBtnGroup extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        show(param?: any): void;
        addListen(): void;
        removeListen(): void;
        resize(): void;
        tweenView(show: boolean): void;
        protected preload(): void;
        protected init(): void;
        protected tweenComplete(show: boolean): void;
    }
}

declare module 'game-core/ui/baseView/bottomGroup/bottom.mediator' {
    import { WorldService } from "game-core/game/world.service";
    import { BaseFaceMediator } from "game-core/ui/baseView/baseFace.mediator";
    export class BottomMediator extends BaseFaceMediator {
        static NAME: string;
        constructor(mWorld: WorldService, scene: Phaser.Scene);
        show(param?: any): void;
    }
}

declare module 'game-core/ui/baseView/leftGroup/left.btn.group' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    export class LeftBtnGroup extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        show(param?: any): void;
        resize(): void;
        destroy(): void;
        tweenView(show: boolean): void;
        addListen(): void;
        removeListen(): void;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/baseView/leftGroup/left.mediator' {
    import { BaseFaceMediator } from "game-core/ui/baseView/baseFace.mediator";
    import { WorldService } from "game-core/game/world.service";
    export class LeftMediator extends BaseFaceMediator {
        static NAME: string;
        constructor(mWorld: WorldService, scene: Phaser.Scene);
        show(param?: any): void;
    }
}

declare module 'game-core/ui/baseView/rightGroup/right.btn.group' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    export class RightBtnGroup extends BasePanel {
        static SlotMaxCount: number;
        constructor(scene: Phaser.Scene, world: WorldService);
        show(param?: any): void;
        resize(): void;
        hide(): void;
        destroy(): void;
        tweenView(show: boolean): void;
        refreshSlot(): void;
        protected tweenComplete(show: boolean): void;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/baseView/rightGroup/right.mediator' {
    import { BaseFaceMediator } from "game-core/ui/baseView/baseFace.mediator";
    import { WorldService } from "game-core/game/world.service";
    export class RightMediator extends BaseFaceMediator {
        static NAME: string;
        constructor(mWorld: WorldService, scene: Phaser.Scene);
        tweenView(show: boolean): void;
        show(param?: any): void;
        hide(): void;
    }
}

declare module 'game-core/ui/baseView/top.menu/top.menu.container' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { IBtnData } from "game-core/ui/components/icon.btn";
    import { WorldService } from "game-core/game/world.service";
    export class TopMenuContainer extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        resize(): void;
        show(param?: any): void;
        hide(): void;
        addItem(data: IBtnData): void;
        removeItem(name: string): void;
        preload(): void;
        init(): void;
        refresh(): void;
        expand(): void;
        collapse(): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/baseView/top.menu/top.menu.mediator' {
    import { WorldService } from "game-core/game/world.service";
    import { TopMenuContainer } from "game-core/ui/baseView/top.menu/top.menu.container";
    import { IBtnData } from "game-core/ui/components/icon.btn";
    import { BaseMediator } from "game-core/ui/components";
    export class TopMenuMediator extends BaseMediator {
        static NAME: string;
        protected mView: TopMenuContainer;
        constructor(scene: Phaser.Scene, world: WorldService);
        show(): void;
        hide(): void;
        isSceneUI(): boolean;
        register(): void;
        unregister(): void;
        destroy(): void;
        addItem(data: IBtnData): void;
        removeItem(name: string): void;
    }
}

declare module 'game-core/ui/baseView/topGroup/top.btn.group' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    import { IBtnData } from "game-core/ui/components/icon.btn";
    export class TopBtnGroup extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        show(param?: any): void;
        resize(): void;
        destroy(): void;
        tweenView(show: boolean): void;
        addBtn(data: IBtnData): void;
        removeBtn(key: string): void;
        protected preload(): void;
        protected init(): void;
        protected tweenComplete(show: boolean): void;
    }
}

declare module 'game-core/ui/baseView/topGroup/top.mediator' {
    import { BaseFaceMediator } from "game-core/ui/baseView/baseFace.mediator";
    import { WorldService } from "game-core/game/world.service";
    export class TopMediator extends BaseFaceMediator {
        static NAME: string;
        constructor(mWorld: WorldService, scene: Phaser.Scene);
        preRefreshBtn(medName: string): void;
        refreshBtn(medName: string, addBoo: boolean): void;
        tweenView(show: boolean): void;
        show(param?: any): void;
        hide(): void;
        addBtn(data: any): void;
    }
}

declare module 'game-core/ui/ElementStorage/DragManager' {
    export class DragManager {
        constructor(scene: Phaser.Scene);
        setDragProp(prop: any): void;
    }
}

declare module 'game-core/ui/ElementStorage/ElementStorageMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ElementStoragePanel } from "game-core/ui/ElementStorage/ElementStoragePanel";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { BaseMediator } from "game-core/ui/components";
    export class ElementStorageMediator extends BaseMediator {
            static NAME: string;
            constructor(layerManager: ILayerManager, scene: Phaser.Scene, world: WorldService);
            show(param?: any): void;
            hide(): void;
            isSceneUI(): boolean;
            /**
                * 展开
                */
            expand(): void;
            /**
                * 收起
                */
            collapse(): void;
            destroy(): void;
            getView(): ElementStoragePanel;
    }
}

declare module 'game-core/ui/ElementStorage/ElementStoragePanel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    import { op_client } from "pixelpai_proto";
    export class ElementStoragePanel extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        show(param?: any): void;
        resize(oriention?: number): void;
        addListen(): void;
        removeListen(): void;
        setProps(data: op_client.IOP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_QUERY_EDIT_PACKAGE): void;
        expand(): void;
        collapse(): void;
        destroy(): void;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/ElementStorage/ElementStorate' {
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game/world.service";
    import { op_def } from "pixelpai_proto";
    export class ElementStorage extends PacketHandler {
        constructor($world: WorldService);
        register(): void;
        unregister(): void;
        on(event: string | symbol, fn: Function, context?: any): void;
        off(event: string | symbol, fn: Function, context?: any): void;
        /**
          * 请求编辑背包
          */
        queryPackage(page: number, perPage: number, nodeType?: op_def.NodeType, queryString?: string): void;
        queryMarketPackage(page: number, perPage: number, nodeType?: op_def.NodeType, queryString?: string): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/Notice/Notice' {
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game/world.service";
    import { ConnectionService } from "game-core/net/connection.service";
    export class Notice extends PacketHandler {
        constructor(world: WorldService);
        on(event: string | symbol, fn: Function, context?: any): void;
        off(event: string | symbol, fn: Function, context?: any): void;
        register(): void;
        unregister(): void;
        get connection(): ConnectionService;
    }
}

declare module 'game-core/ui/Notice/NoticeMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { Panel } from "apowophaserui";
    import { BaseMediator } from "game-core/ui/components";
    export class NoticeMediator extends BaseMediator {
        static NAME: string;
        constructor(layerManager: ILayerManager, scene: Phaser.Scene, worldService: WorldService);
        setUiScale(value: number): void;
        getView(): Panel;
        getUIType(): number;
        hide(): void;
        destroy(): void;
        isShow(): boolean;
        resize(): void;
        show(param?: any): void;
        update(param?: any): void;
        setParam(param: any): void;
        getParam(): any;
    }
}

declare module 'game-core/ui/Notice/NoticePanel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { op_client } from "pixelpai_proto";
    import { WorldService } from "game-core/game/world.service";
    export class NoticePanel extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        show(param?: any): void;
        addListen(): void;
        removeListen(): void;
        destroy(): void;
        resize(wid?: number, hei?: number): void;
        showNotice(data: op_client.IOP_VIRTUAL_WORLD_RES_CLIENT_NOTICE): void;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/Rank/BasicRankPanel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { op_client } from "pixelpai_proto";
    import { WorldService } from "game-core/game/world.service";
    import { NinePatch } from "apowophaserui";
    export class BasicRankPanel extends BasePanel {
        protected mTitleLabel: Phaser.GameObjects.Text;
        protected mTexts: Phaser.GameObjects.Text[];
        protected mBackground: NinePatch;
        protected mChildContainer: Phaser.GameObjects.Container;
        constructor(scene: Phaser.Scene, world: WorldService);
        addItem(items: op_client.IOP_VIRTUAL_WORLD_RES_CLIENT_SHOW_UI): void;
        tweenView(show: boolean): void;
        update(param: any): void;
        destroy(): void;
        protected preload(): void;
        protected init(): void;
        protected clearText(): void;
    }
}

declare module 'game-core/ui/Rank/RankMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { BaseMediator } from "game-core/ui/components";
    export class RankMediator extends BaseMediator {
        static NAME: string;
        constructor(layerManager: ILayerManager, scene: Phaser.Scene, world: WorldService);
        tweenView(show: boolean): void;
        getName(): string;
        getView(): BasePanel;
        hide(): void;
        isSceneUI(): boolean;
        isShow(): boolean;
        resize(): void;
        show(param?: any): void;
        update(param?: any): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/Rank/RankPanel' {
    import { BasicRankPanel } from "game-core/ui/Rank/BasicRankPanel";
    import { WorldService } from "game-core/game/world.service";
    export class RankPanel extends BasicRankPanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        addListen(): void;
        removeListen(): void;
        resize(wid?: number, hei?: number): void;
        tweenView(show: boolean): void;
        destroy(): void;
        protected init(): void;
        protected tweenComplete(show: boolean): void;
    }
}

declare module 'game-core/ui/Shop/ShopMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { BaseMediator } from "game-core/ui/components";
    export class ShopMediator extends BaseMediator {
        static NAME: string;
        constructor(layerManager: ILayerManager, scene: Phaser.Scene, world: WorldService);
        isSceneUI(): boolean;
        resize(): void;
        getView(): BasePanel;
        show(param?: any): void;
        update(param?: any): void;
        hide(): void;
        destroy(): void;
        isShow(): boolean;
    }
}

declare module 'game-core/ui/Shop/ShopPanel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    import { op_client } from "pixelpai_proto";
    import { IconBtn } from "game-core/ui/components/icon.btn";
    export class ShopPanel extends BasePanel {
        static ShopSlotCount: number;
        mClsBtn: IconBtn;
        constructor(scene: Phaser.Scene, world: WorldService);
        resize(wid: number, hei: number): void;
        setDataList(value: op_client.IOP_VIRTUAL_WORLD_RES_CLIENT_QUERY_PACKAGE): void;
        destroy(): void;
        addListen(): void;
        removeListen(): void;
        protected preload(): void;
        protected loadComplete(loader: Phaser.Loader.LoaderPlugin, totalComplete: integer, totalFailed: integer): void;
        protected init(): void;
        protected tweenComplete(show: boolean): void;
    }
}

declare module 'game-core/ui/Shop/shop.itemSlot' {
    import { ItemSlot } from "game-core/ui/components/item.slot";
    import { WorldService } from "game-core/game/world.service";
    import { op_gameconfig } from "pixelpai_proto";
    export class ShopItemSlot extends ItemSlot {
        constructor(scene: Phaser.Scene, world: WorldService, parentCon: Phaser.GameObjects.Container, x: number, y: number, resStr: string, respng: string, resjson: string, resSlot: string, selectRes?: string, subscriptRes?: string, moduleName?: string);
        shopDataChange(val: any, packID: number): void;
        destroy(): void;
        protected makeCoin(price: op_gameconfig.IPrice, y: number): void;
        protected onLoadCompleteHandler(): void;
        protected overHandler(pointer: any): void;
        protected downHandler(pointer: any): void;
        protected outHandler(pointer: any): void;
    }
}

declare module 'game-core/ui/UserInfo/UserInfoMediator' {
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { WorldService } from "game-core/game/world.service";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { BaseMediator } from "game-core/ui/components";
    export class UserInfoMediator extends BaseMediator {
        static NAME: string;
        constructor(mLayerManager: ILayerManager, mScene: Phaser.Scene, world: WorldService);
        getView(): BasePanel;
        hide(): void;
        isSceneUI(): boolean;
        isShow(): boolean;
        resize(): void;
        show(param?: any): void;
        destroy(): void;
        update(param?: any): void;
    }
}

declare module 'game-core/ui/UserInfo/UserInfoPanel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    import { op_client } from "pixelpai_proto";
    export class UserInfoPanel extends BasePanel {
        constructor(scene: Phaser.Scene, worldService: WorldService);
        show(param?: any): void;
        hide(): void;
        resize(wid: number, hei: number): void;
        setInfo(data: op_client.IOP_VIRTUAL_WORLD_RES_CLIENT_SHOW_UI): void;
        destroy(): void;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/UserMenu/MenuItem' {
    import { IPatchesConfig } from "game-core/ui/components/patches.config";
    import { NinePatch, NineSliceButton } from "apowophaserui";
    export class MenuItem extends NineSliceButton {
        protected mMenus: MenuItem[];
        protected mChild: Phaser.GameObjects.Container;
        protected mArrow: Phaser.GameObjects.Image;
        protected mBackground: NinePatch;
        constructor(scene: Phaser.Scene, x: number, y: number, width: number, height: number, key: string, text: string, config: IPatchesConfig);
        appendItem(menu: MenuItem): void;
        show(): void;
        destroy(fromScene?: boolean): void;
        get menus(): MenuItem[];
    }
}

declare module 'game-core/ui/UserMenu/UserMenuMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { BaseMediator } from "game-core/ui/components";
    export class UserMenuMediator extends BaseMediator {
        constructor(layerManager: ILayerManager, scene: Phaser.Scene, worldService: WorldService);
        getView(): BasePanel;
        hide(): void;
        isSceneUI(): boolean;
        isShow(): boolean;
        resize(): void;
        show(param?: any): void;
        update(param?: any): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/UserMenu/UserMenuPanel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { op_client } from "pixelpai_proto";
    import { WorldService } from "game-core/game/world.service";
    export class UserMenuPanel extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        show(param?: any): void;
        hide(): void;
        addListen(): void;
        removeListen(): void;
        setSize(width: number, height: number): this;
        destroy(): void;
        addItem(params: op_client.IOP_VIRTUAL_WORLD_RES_CLIENT_SHOW_UI): void;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/alert/PopUpTextUI' {
    import { WorldService } from "game-core/game/world.service";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    export class PopUpTextUI extends BasePanel {
        constructor(world: WorldService, scene: Phaser.Scene);
        show(param?: any): void;
        resize(): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/bag/bagView/bagPanel' {
    import { WorldService } from "game-core/game/world.service";
    import { ItemSlot } from "game-core/ui/components/item.slot";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    export class BagPanel extends BasePanel {
        static PageMaxCount: number;
        bagSlotList: ItemSlot[];
        mPreBtn: Phaser.GameObjects.Sprite | Phaser.GameObjects.Graphics;
        mNextBtn: Phaser.GameObjects.Sprite | Phaser.GameObjects.Graphics;
        protected mResStr: string;
        protected mResPng: string;
        protected mResJson: string;
        constructor(scene: Phaser.Scene, world: WorldService);
        resize(wid: number, hei: number): void;
        setDataList(): void;
        getPageNum(): number;
        destroy(): void;
        getCurPageIndex(): number;
        show(param?: any): void;
        setBlur(): void;
        addListen(): void;
        removeListen(): void;
        protected init(): void;
        protected preload(): void;
        protected loadComplete(loader: Phaser.Loader.LoaderPlugin, totalComplete: integer, totalFailed: integer): void;
        protected tweenComplete(show: boolean): void;
    }
}

declare module 'game-core/ui/bag/bagView/bagMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { BaseMediator } from "game-core/ui/components";
    export enum DragType {
        DRAG_TYPE_SHORTCUT = 1,
        DRAG_TYPE_BAG = 2
    }
    export enum DropType {
        DROP_TYPE_SHORTCUT = 1,
        DROP_TYPE_BAG = 2
    }
    export class BagMediator extends BaseMediator {
        static NAME: string;
        world: WorldService;
        constructor(layerManager: ILayerManager, mworld: WorldService, scene: Phaser.Scene);
        resize(width: any, height: any): void;
        isSceneUI(): boolean;
        isShow(): boolean;
        show(param: any): void;
        update(param: any): void;
        hide(): void;
        destroy(): void;
        protected handleDrop(value: any): void;
    }
}

declare module 'game-core/ui/bag/storage/storageMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { BaseMediator } from "game-core/ui/components";
    export class StorageMediator extends BaseMediator {
        static NAME: string;
        constructor(layerManager: ILayerManager, mworld: WorldService, scene: Phaser.Scene);
        isShow(): boolean;
        resize(): void;
        show(param?: any): void;
        update(param?: any): void;
        hide(): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/bag/storage/storagePanel' {
    import { WorldService } from "game-core/game/world.service";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    export class StoragePanel extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        resize(wid: number, hei: number): void;
        destroy(): void;
        addListen(): void;
        removeListen(): void;
        protected init(): void;
        protected preload(): void;
        protected tweenComplete(show: boolean): void;
    }
}

declare module 'game-core/ui/chat/Chat' {
    import { PacketHandler } from "net-socket-packet";
    import { WorldService } from "game-core/game/world.service";
    import { ConnectionService } from "game-core/net/connection.service";
    export class Chat extends PacketHandler {
        constructor(world: WorldService);
        on(event: string | symbol, fn: Function, context?: any): void;
        off(event: string | symbol, fn: Function, context?: any): void;
        register(): void;
        unregister(): void;
        get connection(): ConnectionService;
    }
}

declare module 'game-core/ui/chat/base.chat.panel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    export class BaseChatPanel extends BasePanel {
        constructor(scene: any, world: WorldService);
        appendChat(val: string): void;
        get outChannel(): number;
    }
}

declare module 'game-core/ui/chat/chat.mediator' {
    import { WorldService } from "game-core/game/world.service";
    import { BaseMediator } from "game-core/ui/components";
    export class ChatMediator extends BaseMediator {
        static NAME: string;
        world: WorldService;
        constructor(world: WorldService, scene: Phaser.Scene);
        getUIType(): number;
        enterRoom(): void;
        exitRoom(): void;
        isSceneUI(): boolean;
        tweenView(show: boolean): void;
        isShow(): boolean;
        showing(): boolean;
        resize(): void;
        show(param?: any): void;
        update(param?: any): void;
        hide(): void;
        setParam(param: any): void;
        getParam(): any;
        destroy(): void;
        get room(): import("../..").Room;
    }
}

declare module 'game-core/ui/chat/chatPanel.pc' {
    import { WorldService } from "game-core/game/world.service";
    import { BaseChatPanel } from "game-core/ui/chat/base.chat.panel";
    export class ChatPanelPC extends BaseChatPanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        appendChat(val: string): void;
        tweenExpand(show: boolean): void;
        setPosition(x?: number, y?: number): this;
        addListen(): void;
        removeListen(): void;
        destroy(): void;
        protected preload(): void;
        protected init(): void;
        get outChannel(): number;
    }
}

declare module 'game-core/ui/chat/message' {
    import { op_def } from "pixelpai_proto";
    export interface IMessage {
        chat: string;
        channel: op_def.ChatChannel;
        color?: string;
    }
}

declare module 'game-core/ui/chat/mobile/chatPanel.mobile' {
    import { BaseChatPanel } from "game-core/ui/chat/base.chat.panel";
    import { WorldService } from "game-core/game/world.service";
    export class ChatPanelMobile extends BaseChatPanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        addListen(): void;
        removeListen(): void;
        appendChat(val: string): void;
        show(param?: any): void;
        setPosition(x?: number, y?: number): this;
        destroy(): void;
        tweenExpand(show: boolean): void;
        hide(): void;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/decorate/decorate.manager' {
    import { IRoomService } from "game-core/rooms/room";
    import { IElement } from "game-core/rooms/element/element";
    export class DecorateManager extends Phaser.Events.EventEmitter {
        constructor(scene: Phaser.Scene, roomService: IRoomService);
        setElement(ele: IElement): void;
        canPut(val: boolean): void;
        remove(): void;
        updatePos(x: number, y: number): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/decorate/decorate.panel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { DecorateRoom } from "game-core/rooms/decorate.room";
    import { IElement } from "game-core/rooms/element/element";
    export class DecoratePanel extends BasePanel {
        constructor(scene: Phaser.Scene, mRoomService: DecorateRoom);
        show(param?: any): void;
        addListen(): void;
        removeListen(): void;
        setElement(ele: IElement): void;
        canPUt(val: boolean): void;
        setPos(x: number, y?: number, z?: number): this;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/friend/friend.mediator' {
    import { WorldService } from "game-core/game/world.service";
    import { BaseMediator } from "game-core/ui/components";
    export class FriendMediator extends BaseMediator {
        static NAME: string;
        constructor(scene: Phaser.Scene, world: WorldService);
        isShow(): boolean;
        isSceneUI(): boolean;
        resize(): void;
        show(param?: any): void;
        hide(): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/friend/friend.panel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    import { IListItemComponent } from "game-core/ui/components/IListItemRender";
    import { DynamicImage } from "game-core/ui/components/dynamic.image";
    export interface IFriendIcon {
        res: string;
        name: string;
    }
    export class FriendPanel extends BasePanel {
        static count: number;
        constructor(scene: Phaser.Scene, world: WorldService);
        resize(wid: number, hei: number): void;
        addListen(): void;
        removeListen(): void;
        show(param?: any): void;
        destroy(): void;
        friendChat(id: string): void;
        friendGo(gameId: string): void;
        btnScaleHandler(gameObject: any, scaleX?: number): void;
        hide(): void;
        protected preload(): void;
        protected init(): void;
        protected tweenComplete(show: any): void;
    }
    export class FriendItem extends Phaser.GameObjects.Container implements IListItemComponent {
        index: number;
        nameTF: Phaser.GameObjects.Text;
        statusTF: Phaser.GameObjects.Text;
        mRoleIcon: DynamicImage;
        constructor(world: WorldService, scene: Phaser.Scene, panel: FriendPanel, iconResList: IFriendIcon[]);
        resize(): void;
        getView(): any;
        dataChange(data: any): void;
        destory(): void;
    }
}

declare module 'game-core/ui/tips/TextToolTip' {
    export class TextToolTips extends Phaser.GameObjects.Container {
        constructor(scene: Phaser.Scene, key: string, frame: string, dpr: number, zoom: number);
        setSize(width: number, height: number): this;
        setText(text: string): void;
        setTextData(text: string, delay: number): void;
    }
}

declare module 'game-core/ui/tips/itoolTip' {
    export interface IToolTip extends Phaser.GameObjects.Container {
        setToolTipData(data: any): any;
    }
}

declare module 'game-core/ui/tips/toolTip' {
    import { IToolTip } from "game-core/ui/tips/itoolTip";
    export class ToolTip extends Phaser.GameObjects.Container implements IToolTip {
        constructor(mScene: Phaser.Scene, resStr: string, resJson: string, resUrl: string, uiScale: number);
        setToolTipData(value: string): void;
        destroy(): void;
        protected preLoad(): void;
        protected init(): void;
        protected refreshTip(): void;
    }
}

declare module 'game-core/ui/ControlF/ControlFMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { BaseMediator } from "game-core/ui/components";
    export class ControlFMediator extends BaseMediator {
        static NAME: string;
        constructor(layerManager: ILayerManager, scene: Phaser.Scene, world: WorldService);
        getName(): string;
        getView(): BasePanel;
        hide(): void;
        isSceneUI(): boolean;
        isShow(): boolean;
        resize(): void;
        show(param?: any): void;
        update(param?: any): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/ControlF/ControlFPanel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    export class ControlFPanel extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        addListen(): void;
        removeListen(): void;
        resize(wid?: number, hei?: number): void;
        destroy(): void;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/DebugLogger/DebugLoggerMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { BaseMediator } from "game-core/ui/components";
    export class DebugLoggerMediator extends BaseMediator {
        static NAME: string;
        constructor(uiManager: ILayerManager, scene: Phaser.Scene, world: WorldService);
        resize(): void;
        isShow(): boolean;
        show(param?: any): void;
        hide(): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/DebugLogger/DebugLoggerPanel' {
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { WorldService } from "game-core/game/world.service";
    export class DebugLogger extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService);
        addListen(): void;
        removeListen(): void;
        show(param?: any): void;
        resize(wid?: number, hei?: number): void;
        update(param: any): void;
        protected preload(): void;
        protected init(): void;
        protected tweenComplete(show: any): void;
    }
}

declare module 'game-core/ui/DecorateControl/DecorateControlMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { DecorateControlPanel } from "game-core/ui/DecorateControl/DecorateControlPanel";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { ConnectionService } from "game-core/net/connection.service";
    import { BaseMediator } from "game-core/ui/components";
    export class DecorateControlMediator extends BaseMediator {
        static NAME: string;
        protected mView: DecorateControlPanel;
        constructor(layerManager: ILayerManager, scene: Phaser.Scene, world: WorldService);
        show(): void;
        destroy(): void;
        isSceneUI(): boolean;
        get connection(): ConnectionService;
    }
}

declare module 'game-core/ui/DecorateControl/DecorateControlPanel' {
    import { WorldService } from "game-core/game/world.service";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    export class DecorateControlPanel extends BasePanel {
        constructor(scene: Phaser.Scene, worldService: WorldService);
        addListen(): void;
        removeListen(): void;
        resize(w: number, h: number): void;
        protected preload(): void;
        protected init(): void;
    }
}

declare module 'game-core/ui/ComponentRank/ComponentRankMediator' {
    import { WorldService } from "game-core/game/world.service";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { BaseMediator } from "game-core/ui/components";
    export class ComponentRankMediator extends BaseMediator {
        static NAME: string;
        readonly world: WorldService;
        constructor(layerManager: ILayerManager, scene: Phaser.Scene, worldService: WorldService);
        getName(): string;
        hide(): void;
        isSceneUI(): boolean;
        isShow(): boolean;
        resize(): void;
        show(param?: any): void;
        destroy(): void;
        update(param?: any): void;
    }
}

declare module 'game-core/ui/ComponentRank/ComponentRankPanel' {
    import { BasicRankPanel } from "game-core/ui/Rank/BasicRankPanel";
    import { WorldService } from "game-core/game/world.service";
    export class ComponentRankPanel extends BasicRankPanel {
        constructor(scene: Phaser.Scene, worldService: WorldService);
        addListen(): void;
        removeListen(): void;
        resize(wid: number, hei: number): void;
        destroy(): void;
        protected preload(): void;
        protected init(): void;
        protected tweenComplete(show: boolean): void;
    }
}

declare module 'game-core/ui/Bubble/InteractiveBubble' {
    import { PacketHandler } from "net-socket-packet";
    import { ConnectionService } from "game-core/net/connection.service";
    import { WorldService } from "game-core/game/world.service";
    export class InteractiveBubble extends PacketHandler {
        constructor(world: WorldService);
        register(): void;
        unregister(): void;
        on(event: string | symbol, fn: Function, context?: any): void;
        off(event: string | symbol, fn: Function, context?: any): void;
        destroy(): void;
        queryInteractiveHandler(data: any): void;
        get connection(): ConnectionService;
    }
}

declare module 'game-core/ui/Bubble/InteractionBubbleContainer' {
    import { op_client } from "pixelpai_proto";
    import { Handler } from "game-core/Handler/Handler";
    import { BaseUI } from "apowophaserui";
    import { InteractionBubbleCell } from "game-core/ui/Bubble/InteractionBubbleCell";
    export class InteractionBubbleContainer extends BaseUI {
        id: number;
        constructor(scene: Phaser.Scene, dpr: number);
        set show(value: boolean);
        get show(): boolean;
        hide(): void;
        setFollow(gameObject: any, fromScene: Phaser.Scene, posFunc?: Function): void;
        setBubble(content: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_SHOW_INTERACTIVE_BUBBLE, handler: Handler): InteractionBubbleCell;
        destroy(): void;
    }
}

declare module 'game-core/ui/Bubble/InteractionBubbleCell' {
    import { op_client } from "pixelpai_proto";
    import { Handler } from "game-core/Handler/Handler";
    export class InteractionBubbleCell extends Phaser.GameObjects.Container {
        constructor(scene: Phaser.Scene, dpr: number);
        setContentData(content: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_SHOW_INTERACTIVE_BUBBLE, handler: Handler): void;
        load(resName?: string, url?: string, jsonUrl?: string): void;
        show(): void;
        hide(): void;
        destroy(): void;
    }
}

declare module 'game-core/ui/Bubble/InteractiveBubbleMediator' {
    import { InteractiveBubblePanel } from "game-core/ui/Bubble/InteractiveBubblePanel";
    import { ILayerManager } from "game-core/ui/layer.manager";
    import { WorldService } from "game-core/game/world.service";
    import { Room } from "game-core/rooms/room";
    import { BaseMediator } from "game-core/ui/components";
    export class InteractiveBubbleMediator extends BaseMediator {
        protected mView: InteractiveBubblePanel;
        constructor(layerMgr: ILayerManager, scene: Phaser.Scene, mworld: WorldService);
        get currentRoom(): Room;
        destroy(): void;
        update(): void;
    }
}

declare module 'game-core/ui/Bubble/InteractiveBubblePanel' {
    import { WorldService } from "game-core/game/world.service";
    import { op_client } from "pixelpai_proto";
    import { BasePanel } from "game-core/ui/components/BasePanel";
    import { IElement } from "game-core/rooms/element/element";
    export class InteractiveBubblePanel extends BasePanel {
        constructor(scene: Phaser.Scene, world: WorldService, moduleName?: string);
        resize(width: number, height: number): void;
        init(): void;
        destroy(): void;
        clearInteractionBubble(id: number): void;
        showInteractionBubble(content: op_client.IOP_VIRTUAL_WORLD_REQ_CLIENT_SHOW_INTERACTIVE_BUBBLE, ele: IElement): void;
        updateBubblePos(gameObject: any, scene: Phaser.Scene): void;
        update(): void;
    }
}

declare module 'game-core/editor/canvas/editor.canvas' {
    import { IRectangle } from "game-capsule/lib/helpers";
    export interface IEditorCanvasConfig {
        width: number;
        height: number;
        node: {};
        LOCAL_HOME_PATH: string;
        parent?: string;
    }
    export class EditorCanvas {
        protected mGame: Phaser.Game | undefined;
        protected mConfig: IEditorCanvasConfig;
        protected mEmitter: Phaser.Events.EventEmitter;
        constructor(config: IEditorCanvasConfig);
        resize(bounds: IRectangle): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/bubble/bubble.container' {
    import { op_client } from "pixelpai_proto";
    export class BubbleContainer extends Phaser.GameObjects.Container {
        constructor(scene: Phaser.Scene, scale: number);
        addBubble(text: string, bubbleSetting: op_client.IChat_Setting): void;
        updatePos(x: number, y: number): void;
        destroy(fromScene?: boolean): void;
        removeFormParent(): void;
    }
}

declare module 'game-core/rooms/element/shop/shop.entity' {
    import { PacketHandler } from "net-socket-packet";
    import { IEntity } from "game-core/rooms/entity";
    import { WorldService } from "game-core/game/world.service";
    export class ShopEntity extends PacketHandler implements IEntity {
        static NAME: string;
        constructor(mWorld: WorldService);
        initialize(): boolean;
        register(): void;
        unRegister(): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/action/AI' {
    import { AIAction } from "game-core/rooms/action/AIAction";
    import { Element } from "game-core/rooms/element/element";
    export class AI extends AIAction {
        constructor(owner: Element);
        execute(): void;
        nextAction(): void;
        addAction(action: AIAction, isbreak?: boolean): void;
        breakAction(): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/effect/effect' {
    import { op_client } from "pixelpai_proto";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    export class Effect extends Phaser.Events.EventEmitter {
        constructor(id: number);
        syncSprite(sprite: op_client.ISprite): void;
        destroy(): void;
        get id(): number;
        set displayInfo(display: IFramesModel | IDragonbonesModel);
        get displayInfo(): IFramesModel | IDragonbonesModel;
    }
}

declare module 'game-core/rooms/sky.box/block.manager' {
    import { WorldService } from "game-core/game/world.service";
    import { IScenery } from "game-core/rooms/sky.box/scenery";
    import { IRoomService } from "game-core/rooms/room";
    import { State } from "game-core/rooms/state/state.group";
    export interface IBlockManager {
        readonly world: WorldService;
        startPlay(scene: Phaser.Scene): any;
        check(time?: number, delta?: number): any;
    }
    export class BlockManager implements IBlockManager {
        constructor(scenery: IScenery, room: IRoomService);
        startPlay(scene: Phaser.Scene): void;
        check(time?: number, delta?: number): void;
        update(scenery: IScenery): void;
        setSize(imageW: number, imageH: number, gridW?: number, gridH?: number): void;
        updatePosition(): void;
        destroy(): void;
        setState(state: State): void;
        playSkyBoxAnimation(packet: any): void;
        protected handlerState(state: State): void;
        protected updateDepth(): void;
        protected initBlock(): void;
        protected move(targets: any, props: any, duration?: number, resetProps?: any, resetDuration?: number): void;
        protected initCamera(): void;
        protected clear(): void;
        get world(): WorldService;
        get scenery(): IScenery;
        protected fixPosition(props: any): any;
        protected get offset(): {
            x: number;
            y: number;
        };
    }
}

declare module 'game-core/rooms/display/terrain.display' {
    import { FramesDisplay } from "game-core/rooms/display/frames.display";
    export class TerrainDisplay extends FramesDisplay {
        showRefernceArea(): void;
    }
}

declare module 'game-core/rooms/entity' {
    export interface IEntity {
        destroy(): any;
    }
}

declare module 'game-core/rooms/display/wall.display' {
    import { IRoomService } from "game-core/rooms/room";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { IFramesModel } from "game-core/rooms/display/frames.model";
    import { IDragonbonesModel } from "game-core/rooms/display/dragonbones.model";
    import { AnimationData } from "game-core/rooms/element/sprite";
    import { op_def } from "pixelpai_proto";
    import { IElement } from "game-core/rooms/element/element";
    import { Direction } from "game-core/rooms/wall/wall";
    export class WallDisplay extends Phaser.GameObjects.Container implements ElementDisplay {
        protected readonly roomService: IRoomService;
        constructor(scene: Phaser.Scene, roomService: IRoomService);
        loadDisplay(texture: string, data: string): void;
        setDir(dir: Direction): void;
        load(data: IFramesModel | IDragonbonesModel): void;
        changeAlpha(val?: number): void;
        play(animationName: AnimationData): void;
        removeFromParent(): void;
        fadeIn(callback?: () => void): void;
        fadeOut(callback?: () => void): void;
        showNickname(val: string): void;
        setDisplayBadges(cards: op_def.IBadgeCard[]): void;
        showRefernceArea(): void;
        hideRefernceArea(): void;
        showEffect(): void;
        get sortX(): number;
        get sortY(): number;
        get sortZ(): number;
        get baseLoc(): Phaser.Geom.Point;
        get element(): IElement;
    }
}

declare module 'game-core/rooms/editor/reference.area' {
    import { IRoomService } from "game-core/rooms/room";
    import { IPosition45Obj } from "game-core/utils/position45";
    export class ReferenceArea extends Phaser.GameObjects.Graphics {
        constructor(scene: Phaser.Scene, mRoomService: IRoomService);
        draw(area: number[][], origin: Phaser.Geom.Point): void;
        setPosition(x?: number, y?: number, z?: number, w?: number): this;
        get size(): IPosition45Obj;
    }
}

declare module 'game-core/rooms/element/editor.element.manager' {
    import { ElementManager } from "game-core/rooms/element/element.manager";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { PBpacket } from "net-socket-packet";
    import { op_client } from "pixelpai_proto";
    import { EditorRoomService } from "game-core/rooms/editor.room";
    export class EditorElementManager extends ElementManager {
        protected mRoom: EditorRoomService;
        constructor(mRoom: EditorRoomService);
        update(): void;
        addElements(sprites: ISprite[]): void;
        callEditorCreateElementData(sprites: ISprite[]): void;
        updateElements(sprites: op_client.ISprite[]): void;
        callEditorUpdateElementData(sprites: op_client.ISprite[]): void;
        deleteElements(ids: number[]): void;
        callEditorDeleteElementData(ids: number[]): void;
        protected handleCreateElements(packet: PBpacket): void;
        protected handleDeleteElements(packet: PBpacket): void;
        protected handleSyncElements(packet: PBpacket): void;
        get roomService(): EditorRoomService;
    }
}

declare module 'game-core/rooms/terrain/editor.terrain.manager' {
    import { TerrainManager } from "game-core/rooms/terrain/terrain.manager";
    import { PBpacket } from "net-socket-packet";
    import { op_def } from "pixelpai_proto";
    import { SpriteAddCompletedListener } from "game-core/rooms/room";
    import { Pos } from "game-core/utils/pos";
    import { EditorRoomService } from "game-core/rooms/editor.room";
    export class EditorTerrainManager extends TerrainManager {
        protected mRoom: EditorRoomService;
        protected taskQueue: Map<string, any>;
        constructor(mRoom: EditorRoomService, listener?: SpriteAddCompletedListener);
        addTerrains(terrainCoorData: any): void;
        reqEditorAddTerrainsData(locs: op_def.IPBPoint3f[], key: any): void;
        removeTerrains(locations: Pos[]): void;
        reqEditorDeleteTerrainsData(loc: Pos[]): void;
        update(): void;
        protected handleAddTerrains(packet: PBpacket): void;
        protected handleDeleteTerrains(packet: PBpacket): void;
    }
}

declare module 'game-core/rooms/element/editor.moss.manager' {
    import { ElementManager } from "game-core/rooms/element/element.manager";
    import { PBpacket } from "net-socket-packet";
    import { op_def } from "pixelpai_proto";
    import { EditorRoomService } from "game-core/rooms/editor.room";
    import { SelectedElement } from "game-core/rooms/editor/selected.element";
    export class EditorMossManager extends ElementManager {
        protected mRoom: EditorRoomService;
        constructor(mRoom: EditorRoomService);
        update(): void;
        addMosses(coorData: any): void;
        reqEditorCreateMossData(locs: op_def.IMossMetaData[]): void;
        updateMosses(elements: SelectedElement[]): void;
        reqEditorUpdateMossData(locs: op_def.IMossMetaData[]): void;
        deleteMosses(ids: number[]): void;
        reqEditorDeleteMossData(locs: op_def.IMossMetaData[]): void;
        protected handleAddMosses(packet: PBpacket): void;
        protected handleDeleteMosses(packet: PBpacket): void;
        protected handleUpdateMosses(packet: PBpacket): void;
        get roomService(): EditorRoomService;
    }
}

declare module 'game-core/rooms/display-object.pool' {
    import { ISprite } from "game-core/rooms/element/sprite";
    export class DisplayObjectPool {
        constructor();
        getPool(poolName: string): any;
        push(poolName: string, id: string, sprite: ISprite, manager: any): void;
        remove(poolName: string, id: string): void;
        update(poolName: string, id: string, newSprite: ISprite): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/sky.box/editor.sky.box.manager' {
    import { SkyBoxManager } from "game-core/rooms/sky.box/sky.box.manager";
    import { IRoomService } from "game-core/rooms/room";
    import { IScenery } from "game-core/rooms/sky.box/scenery";
    import { BlockManager } from "game-core/rooms/sky.box/block.manager";
    export class EditorSkyBoxManager extends SkyBoxManager {
        constructor(room: IRoomService);
        add(scenery: IScenery): void;
        fetch(id: number): void;
        move(pointer: Phaser.Input.Pointer): void;
        keyboardMove(keyCode: number): void;
        removeSelect(): void;
        get selected(): BlockManager;
    }
}

declare module 'game-core/ui/baseView/baseFace.mediator' {
    import { WorldService } from "game-core/game/world.service";
    import { Panel } from "apowophaserui";
    import { BaseMediator } from "game-core/ui/components";
    /**
      * 场景UImediator
      */
    export class BaseFaceMediator extends BaseMediator {
        protected mScene: Phaser.Scene;
        protected world: WorldService;
        constructor(world: WorldService, scene: Phaser.Scene);
        getView(): Panel;
        isSceneUI(): boolean;
        isShow(): boolean;
        resize(): void;
        hide(): void;
        destroy(): void;
    }
}

declare module 'game-core/rooms/decorate.room' {
    import { IRoomService } from "game-core/rooms/room";
    import { IRoomManager } from "game-core/rooms/room.manager";
    import { ViewblockService } from "game-core/rooms/cameras/viewblock.manager";
    import { ICameraService } from "game-core/rooms/cameras/cameras.manager";
    import { ConnectionService } from "game-core/net/connection.service";
    import { RoomLayerManager } from "game-core/rooms/layer/room.layer.manager";
    import { IPosition45Obj } from "game-core/utils/position45";
    import { TerrainManager } from "game-core/rooms/terrain/terrain.manager";
    import { WorldService } from "game-core/game/world.service";
    import { IElement } from "game-core/rooms/element/element";
    import { ElementDisplay } from "game-core/rooms/display/element.display";
    import { op_client, op_def } from "pixelpai_proto";
    import { Pos } from "game-core/utils/pos";
    import { PlayerManager } from "game-core/rooms/player/player.manager";
    import { PacketHandler } from "net-socket-packet";
    import { DecorateElementManager } from "game-core/rooms/element/decorate.element.manager";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { IBlockObject } from "game-core/rooms/cameras/block.object";
    export interface DecorateRoomService extends IRoomService {
        readonly miniSize: IPosition45Obj;
        readonly selectedSprite: IElement | undefined;
        transformToMini45(p: Pos): Pos;
        transformToMini90(p: Pos): Pos;
        canPut(pos: Pos, collisionArea: number[][], origin: Phaser.Geom.Point): boolean;
    }
    export class DecorateRoom extends PacketHandler implements DecorateRoomService {
        readonly blocks: ViewblockService;
        clockSyncComplete: boolean;
        readonly playerManager: PlayerManager;
        readonly world: WorldService;
        constructor(manager: IRoomManager);
        enter(room: op_client.IScene): void;
        addBlockObject(object: IBlockObject): void;
        addMouseListen(): void;
        addToGround(element: ElementDisplay | ElementDisplay[]): void;
        addToSceneUI(element: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[]): void;
        addToSurface(element: ElementDisplay | ElementDisplay[]): void;
        addToUI(element: Phaser.GameObjects.Container | Phaser.GameObjects.Container[]): void;
        completeLoad(): void;
        destroy(): void;
        now(): number;
        pause(): void;
        removeBlockObject(object: IBlockObject): void;
        requestActorMove(d: number, key: number[]): void;
        resume(name: string): void;
        startLoad(): void;
        startPlay(): void;
        transformTo45(p: Pos): Pos;
        transformTo90(p: Pos): Pos;
        transformToMini90(p: Pos): undefined | Pos;
        transformToMini45(p: Pos): undefined | Pos;
        update(time: number, delta: number): void;
        updateBlockObject(): void;
        resize(width: number, height: number): void;
        transitionGrid(x: number, y: number): Pos;
        addElements(sprites: ISprite[], nodeType: any): void;
        setEnterPos(x: number, y: number): void;
        /**
          * 边界检查
          * @param pos 45度坐标，
          * @param source 没有超出边界并不贴边就返回原始坐标
          */
        checkBound(pos: Pos, source?: Pos): Pos;
        canPut(pos: Pos, collisionArea: number[][], origin: Phaser.Geom.Point): boolean;
        setMap(cols: number, rows: number, type: number): void;
        getElement(id: number): IElement;
        get id(): number;
        get roomSize(): IPosition45Obj;
        get terrainManager(): TerrainManager;
        get elementManager(): DecorateElementManager;
        get layerManager(): RoomLayerManager;
        get cameraService(): ICameraService;
        get scene(): Phaser.Scene | undefined;
        get connection(): ConnectionService;
        get miniSize(): IPosition45Obj;
        get selectedSprite(): IElement | undefined;
        get enableEdit(): boolean;
        get sceneType(): op_def.SceneTypeEnum;
        get effectManager(): any;
    }
}

declare module 'game-core/rooms/action/AIAction' {
    import { IDispose } from "game-core/rooms/action/IDispose";
    import { Element } from "game-core/rooms/element/element";
    import { ActionGroup } from "game-core/rooms/action/ActionGroup";
    export abstract class AIAction implements IDispose {
        owner: Element;
        group: ActionGroup;
        isBreak: boolean;
        isEnd: boolean;
        nextAction(): void;
        abstract execute(): any;
        destroy(): void;
    }
}

declare module 'game-core/rooms/editor/selected.element' {
    import { FramesDisplay } from "game-core/rooms/display/frames.display";
    import { DragonbonesDisplay } from "game-core/rooms/display/dragonbones.display";
    import { RoomLayerManager } from "game-core/rooms/layer/room.layer.manager";
    import { ISprite } from "game-core/rooms/element/sprite";
    export class SelectedElement {
        constructor(mScene: Phaser.Scene, mLayerManager: RoomLayerManager);
        setElement(display: FramesDisplay | DragonbonesDisplay): void;
        remove(): void;
        update(): void;
        setDisplayPos(x: number, y: number): void;
        destroy(): void;
        get display(): FramesDisplay | DragonbonesDisplay;
        set selecting(val: boolean);
        /**
          * 鼠标按下选中物件, 松开取消选择
          */
        get selecting(): boolean;
        get sprite(): ISprite;
    }
}

declare module 'game-core/rooms/element/decorate.element.manager' {
    import { ElementManager } from "game-core/rooms/element/element.manager";
    import { ISprite } from "game-core/rooms/element/sprite";
    import { Element } from "game-core/rooms/element/element";
    import { DecorateRoomService } from "game-core/rooms/decorate.room";
    import { PBpacket } from "net-socket-packet";
    import { Pos } from "game-core/utils/pos";
    export class DecorateElementManager extends ElementManager {
        protected mRoom: DecorateRoomService;
        constructor(room: DecorateRoomService);
        addMap(sprite: ISprite): void;
        removeMap(sprite: ISprite): void;
        canPut(pos45: Pos, collisionArea: number[][], origin: Phaser.Geom.Point): boolean;
        protected _add(sprite: ISprite, addMap?: boolean): Element;
        protected onSync(packet: PBpacket): void;
        get map(): number[][];
    }
}

declare module 'game-core/rooms/action/ActionGroup' {
    import { AIAction } from "game-core/rooms/action/AIAction";
    import { Handler } from "game-core/Handler/Handler";
    import { IDispose } from "game-core/rooms/action/IDispose";
    export class ActionGroup implements IDispose {
        list: AIAction[];
        current: AIAction;
        sleepAction: AIAction;
        compHandler: Handler;
        addAction(action: AIAction): void;
        nextAction(): void;
        setComplHandler(handler: Handler): void;
        clear(): void;
        stopCurrentAction(): void;
        isExecuting(): boolean;
        hasLast(): boolean;
        breakAction(): void;
        destroy(): void;
    }
}

