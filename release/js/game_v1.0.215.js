(this["webpackJsonpTooqingCore"] = this["webpackJsonpTooqingCore"] || []).push([[0],Array(104).concat([
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "h", function() { return /* binding */ resUtil_Url; });
__webpack_require__.d(__webpack_exports__, "f", function() { return /* binding */ resUtil_ResUtils; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ BlackButton; });
__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ BlueButton; });
__webpack_require__.d(__webpack_exports__, "i", function() { return /* binding */ WhiteButton; });
__webpack_require__.d(__webpack_exports__, "e", function() { return /* binding */ CloseButton; });
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Background; });
__webpack_require__.d(__webpack_exports__, "d", function() { return /* binding */ Border; });
__webpack_require__.d(__webpack_exports__, "g", function() { return /* binding */ TransparentButton; });

// CONCATENATED MODULE: ./src/const/constants.ts
var PI_EXTENSION_REGEX = /\.pi$/i;
var HTTP_REGEX = /^(http|https):/i;

// CONCATENATED MODULE: ./src/utils/resUtil.ts

var resUtil_Url = /** @class */ (function () {
    function Url() {
    }
    Url.getRes = function (value) {
        // 资源地址根路径 CONFIG.BUNDLE_RESOURCES_ROOT
        if (Object({"debug":true,"api_root":"https://api-dev.tooqing.com/","osd":"https://osd.tooqing.com/","gateway":Object({"host":"gdev.tooqing.com","port":11100,"secure":true}),"game_id":"5e719a0a68196e416ecf7aad","virtual_world_id":"0"}).BUNDLE_RESOURCES_ROOT) {
            return Object({"debug":true,"api_root":"https://api-dev.tooqing.com/","osd":"https://osd.tooqing.com/","gateway":Object({"host":"gdev.tooqing.com","port":11100,"secure":true}),"game_id":"5e719a0a68196e416ecf7aad","virtual_world_id":"0"}).BUNDLE_RESOURCES_ROOT
                + value;
        }
        return Url.RES_PATH + value;
    };
    Url.getUIRes = function (dpr, value) {
        if (Object({"debug":true,"api_root":"https://api-dev.tooqing.com/","osd":"https://osd.tooqing.com/","gateway":Object({"host":"gdev.tooqing.com","port":11100,"secure":true}),"game_id":"5e719a0a68196e416ecf7aad","virtual_world_id":"0"}).BUNDLE_RESOURCES_ROOT) {
            return Object({"debug":true,"api_root":"https://api-dev.tooqing.com/","osd":"https://osd.tooqing.com/","gateway":Object({"host":"gdev.tooqing.com","port":11100,"secure":true}),"game_id":"5e719a0a68196e416ecf7aad","virtual_world_id":"0"}).BUNDLE_RESOURCES_ROOT
                + dpr + "x" + value;
        }
        return Url.RESUI_PATH + (dpr + "x/" + value);
    };
    Url.getOsdRes = function (value) {
        if (Url.OSD_PATH) {
            if (HTTP_REGEX.test(Url.OSD_PATH)) {
                return Url.OSD_PATH + value;
            }
            return "https://osd.tooqing.com/" + value;
        }
        return value;
    };
    Url.OSD_PATH = "";
    Url.RES_PATH = "";
    Url.RESUI_PATH = "";
    return Url;
}());

var resUtil_ResUtils = /** @class */ (function () {
    function ResUtils() {
    }
    ResUtils.getPartName = function (value) {
        return value + "_png";
    };
    ResUtils.getPartUrl = function (value) {
        // TOOD 编辑器或调式会传入本地资源。Avatar资源只存在cdn
        if (HTTP_REGEX.test(resUtil_Url.OSD_PATH)) {
            return resUtil_Url.OSD_PATH + "avatar/part/" + value + ".png";
        }
        return "https://osd.tooqing.com/" + "avatar/part/" + value + ".png";
    };
    ResUtils.getGameConfig = function (value) {
        if (HTTP_REGEX.test(value)) {
            return value;
        }
        return resUtil_Url.OSD_PATH + value;
    };
    return ResUtils;
}());

var BlackButton = /** @class */ (function () {
    function BlackButton() {
    }
    BlackButton.getName = function () {
        return "black_button";
    };
    BlackButton.getPNG = function () {
        return resUtil_Url.getRes("ui/common/button.png");
    };
    BlackButton.getColumns = function () {
        return [4, 2, 4];
    };
    BlackButton.getRows = function () {
        return [4, 2, 4];
    };
    BlackButton.getConfig = function () {
        return {
            top: 4,
            left: 4,
            right: 4,
            bottom: 4
        };
    };
    return BlackButton;
}());

var BlueButton = /** @class */ (function () {
    function BlueButton() {
    }
    BlueButton.getName = function () {
        return "button_blue";
    };
    BlueButton.getPNG = function () {
        return resUtil_Url.getRes("ui/common/button_blue.png");
    };
    BlueButton.getJSON = function () {
        return resUtil_Url.getRes("ui/common/button_blue.json");
    };
    BlueButton.getColumns = function () {
        return [7, 1, 7];
    };
    BlueButton.getRows = function () {
        return [7, 1, 7];
    };
    BlueButton.getConfig = function () {
        return {
            left: 7,
            top: 7,
            right: 7,
            bottom: 7
        };
    };
    return BlueButton;
}());

var WhiteButton = /** @class */ (function () {
    function WhiteButton() {
    }
    WhiteButton.getName = function () {
        return "button_white";
    };
    WhiteButton.getPNG = function () {
        return resUtil_Url.getRes("ui/common/button_white.png");
    };
    WhiteButton.getJSON = function () {
        return resUtil_Url.getRes("ui/common/button_white.json");
    };
    WhiteButton.getColumns = function () {
        return [7, 1, 7];
    };
    WhiteButton.getRows = function () {
        return [7, 1, 7];
    };
    WhiteButton.getConfig = function () {
        return {
            left: 7,
            top: 7,
            right: 7,
            bottom: 7
        };
    };
    return WhiteButton;
}());

var CloseButton = /** @class */ (function () {
    function CloseButton() {
    }
    CloseButton.getName = function () {
        return "common_clsBtn";
    };
    CloseButton.getPNG = function () {
        return resUtil_Url.getRes("ui/common/common_clsBtn.png");
    };
    CloseButton.getJSON = function () {
        return resUtil_Url.getRes("ui/common/common_clsBtn.json");
    };
    CloseButton.getFrameConfig = function () {
        return { frameWidth: 16, frameHeight: 16, startFrame: 1, endFrame: 3 };
    };
    return CloseButton;
}());

var Background = /** @class */ (function () {
    function Background() {
    }
    Background.getName = function () {
        return "common_background";
    };
    Background.getPNG = function () {
        return resUtil_Url.getRes("ui/common/common_panelBg.png");
    };
    Background.getColumns = function () {
        return [11, 9, 11];
    };
    Background.getRows = function () {
        return [14, 13, 14];
    };
    Background.getConfig = function () {
        return {
            left: 10,
            top: 15,
            right: 10,
            bottom: 15,
        };
    };
    return Background;
}());

var Border = /** @class */ (function () {
    function Border() {
    }
    Border.getName = function () {
        return "common_border";
    };
    Border.getPNG = function () {
        return resUtil_Url.getRes("ui/common/common_border.png");
    };
    Border.getColumns = function () {
        return [4, 2, 4];
    };
    Border.getRows = function () {
        return [4, 2, 4];
    };
    Border.getConfig = function () {
        return {
            left: 4,
            top: 4,
            right: 4,
            bottom: 4
        };
    };
    return Border;
}());

var TransparentButton = /** @class */ (function () {
    function TransparentButton() {
    }
    TransparentButton.getName = function () {
        return "button_transparent";
    };
    TransparentButton.getPNG = function () {
        return resUtil_Url.getRes("ui/common/button_transparent.png");
    };
    TransparentButton.getJSON = function () {
        return resUtil_Url.getRes("ui/common/button_transparent.json");
    };
    TransparentButton.getConfig = function () {
        return {
            left: 4,
            top: 4,
            right: 4,
            bottom: 4
        };
    };
    return TransparentButton;
}());



/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "BasePanel", function() { return /* binding */ BasePanel_BasePanel; });

// EXTERNAL MODULE: ./src/utils/resUtil.ts + 1 modules
var resUtil = __webpack_require__(104);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/tool/Tool.ts
var GetValue = Phaser.Utils.Objects.GetValue;
var Tool = /** @class */ (function () {
    function Tool() {
    }
    Tool.checkPointerContains = function (gameObject, pointer) {
        var left = -gameObject.width / 2;
        var right = gameObject.width / 2;
        var top = -gameObject.height / 2;
        var bottom = gameObject.height / 2;
        if (pointer) {
            var worldMatrix = gameObject.getWorldTransformMatrix();
            var x = pointer.x - worldMatrix.tx;
            var y = pointer.y - worldMatrix.ty;
            if (left <= x && right >= x && top <= y && bottom >= y) {
                return true;
            }
            return false;
        }
        return false;
    };
    Tool.getTransfrom = function (config) {
        return !config ? undefined : config.transform;
    };
    Tool.getPos = function (transform) {
        var pos = { x: 0, y: 0 };
        if (!transform) {
            return pos;
        }
        var tmpValue;
        var width = GetValue(transform, "width", 0);
        var height = GetValue(transform, "height", 0);
        if (transform.x === undefined) {
            transform.x = 0;
        }
        if (transform.y === undefined) {
            transform.y = 0;
        }
        if (typeof (transform.x) === "string") {
            tmpValue = GetValue(transform, "x", "100%");
            pos.x = Number(tmpValue.split("%")[0]) * width;
        }
        else {
            pos.x = GetValue(transform, "x", 0);
        }
        if (typeof (transform.y) === "string") {
            tmpValue = GetValue(transform, "y", "100%");
            pos.y = Number(tmpValue.split("%")[0]) * height;
        }
        else {
            pos.y = GetValue(transform, "y", 0);
        }
        return pos;
    };
    Tool.checkNinePatch = function (align) {
        if (align.top || align.bottom || align.right || align.left) {
            return true;
        }
        return false;
    };
    return Tool;
}());


// EXTERNAL MODULE: ./lib/rexui/lib/ui/baseUI/BaseUI.ts
var BaseUI = __webpack_require__(125);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/panel/Panel.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Panel_Panel = /** @class */ (function (_super) {
    __extends(Panel, _super);
    function Panel(scene, world, music) {
        var _this = _super.call(this, scene, world.dpr, world.uiScaleNew) || this;
        /**
         * 是否正在加载中，加载中的ui不走show流程
         */
        _this.mPreLoad = false;
        _this.mTweening = false;
        _this.mReloadTimes = 0;
        _this.mTweenBoo = true;
        _this.mMute = false;
        _this.mEnabled = true;
        _this.soundMap = new Map();
        _this.scene = scene;
        _this.mWorld = world;
        _this.soundGroup = music;
        _this.mInitialized = false;
        _this.setTween(false);
        return _this;
    }
    Panel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.removeListen();
        _super.prototype.addListen.call(this);
    };
    Panel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        _super.prototype.removeListen.call(this);
    };
    Panel.prototype.setFollow = function (gameObject, froscene, posFunc) {
        this.mFollow = gameObject;
        this.mFroscene = froscene;
        if (posFunc)
            this.posFunc = posFunc;
    };
    Panel.prototype.isShow = function () {
        return this.mShow;
    };
    Panel.prototype.hide = function () {
        if (this.soundGroup && this.soundGroup.close)
            this.playSound(this.soundGroup.close);
        if (!this.mTweening && this.mTweenBoo) {
            this.showTween(false);
        }
        else {
            this.destroy();
        }
    };
    Panel.prototype.destroy = function () {
        if (this.mPanelTween) {
            this.mPanelTween.stop();
            this.mPanelTween.remove();
            this.mPanelTween = undefined;
        }
        if (this.mResources) {
            this.mResources.clear();
            this.mResources = undefined;
        }
        this.mMute = false;
        this.mInitialized = false;
        this.mShow = false;
        this.width = 0;
        this.height = 0;
        this.mReloadTimes = 0;
        this.offLoad();
        _super.prototype.destroy.call(this);
    };
    Panel.prototype.resize = function (wid, hei) {
    };
    Panel.prototype.show = function (param) {
        this.mShowData = param;
        if (this.mPreLoad)
            return;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        if (this.mShow)
            return;
        if (this.soundGroup && this.soundGroup.open)
            this.playSound(this.soundGroup.open);
        if (!this.mTweening && this.mTweenBoo) {
            this.showTween(true);
        }
        else {
            this.mShow = true;
        }
        this.addListen();
    };
    Panel.prototype.update = function (param) {
        this.mShowData = param;
    };
    Panel.prototype.tweenExpand = function (tweenBoo) {
    };
    Panel.prototype.setTween = function (boo) {
        this.mTweenBoo = boo;
    };
    Object.defineProperty(Panel.prototype, "showData", {
        get: function () {
            return this.mShowData;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Panel.prototype, "interactive", {
        get: function () {
            return this.mEnabled;
        },
        enumerable: false,
        configurable: true
    });
    Panel.prototype.showTween = function (show) {
        var _this = this;
        this.mTweening = true;
        var scale = show ? this.scale : 0;
        this.scale = scale;
        if (this.mPanelTween) {
            this.mPanelTween.stop();
        }
        this.mPanelTween = this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Linear",
            props: {
                scaleX: { value: scale },
                scaleY: { value: scale },
            },
            onComplete: function () {
                _this.tweenComplete(show);
            },
            onCompleteParams: [this]
        });
    };
    Panel.prototype.tweenComplete = function (show) {
        this.mTweening = false;
        this.mPanelTween.stop();
        this.mShow = show;
        if (!show) {
            this.destroy();
        }
    };
    Panel.prototype.init = function () {
        this.mInitialized = true;
        if (this.mResources) {
            this.mResources.clear();
            this.mResources = null;
        }
        this.show(this.mShowData);
    };
    Panel.prototype.addAtlas = function (key, texture, data) {
        if (!this.mResources) {
            this.mResources = new Map();
        }
        this.mResources.set(key, {
            dpr: this.dpr,
            type: "atlas",
            texture: texture,
            data: data
        });
    };
    Panel.prototype.addImage = function (key, value) {
        if (!this.mResources) {
            this.mResources = new Map();
        }
        if (value === undefined)
            value = key;
        this.mResources.set(key, {
            dpr: this.dpr,
            type: "image",
            texture: value
        });
    };
    Panel.prototype.preload = function () {
        var _this = this;
        this.mPreLoad = true;
        if (!this.scene) {
            return;
        }
        if (this.mResources) {
            this.mResources.forEach(function (resource, key) {
                _this.addResources(key, resource);
            }, this);
        }
        this.startLoad();
    };
    Panel.prototype.loadComplete = function (loader, totalComplete, totalFailed) {
        this.mPreLoad = false;
        if (this.mInitialized) {
            return;
        }
        if (totalFailed > 0 && this.mResources && this.mResources.size > 0) {
            this.reload();
            return;
        }
        this.offLoad();
        this.init();
    };
    Panel.prototype.loadError = function (file) {
        if (!this.mResources) {
            return;
        }
        var resource = this.mResources.get(file.key);
        if (!resource) {
            return;
        }
        resource.dpr = 2;
        if (!this.mReLoadResources) {
            this.mReLoadResources = new Map();
        }
        this.mReLoadResources.set(file.key, resource);
    };
    Panel.prototype.onFileKeyComplete = function (key) {
        if (!this.mResources) {
            return;
        }
        if (this.mResources.has(key)) {
            this.mResources.delete(key);
        }
    };
    Panel.prototype.addResources = function (key, resource) {
        // TODO Add IResource interface
        if (!this.scene) {
            return;
        }
        // TODO add load type
        // if (resource.data) this.scene.load.atlas(key, Url.getUIRes(resource.dpr, resource.texture), Url.getUIRes(resource.dpr, resource.data));
    };
    Panel.prototype.reload = function () {
        var _this = this;
        if (!this.mReLoadResources || this.mReLoadResources.size <= 0) {
            return;
        }
        if (++this.mReloadTimes > 1) {
            return;
        }
        this.mReLoadResources.forEach(function (resource, key) {
            _this.addResources(key, resource);
        }, this);
        this.startLoad();
    };
    Panel.prototype.startLoad = function () {
        if (!this.scene) {
            return;
        }
        this.scene.load.on(Phaser.Loader.Events.FILE_KEY_COMPLETE, this.onFileKeyComplete, this);
        this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.loadComplete, this);
        this.scene.load.on(Phaser.Loader.Events.FILE_LOAD_ERROR, this.loadError, this);
        this.scene.load.start();
    };
    Panel.prototype.offLoad = function () {
        if (!this.scene) {
            return;
        }
        this.scene.load.off(Phaser.Loader.Events.FILE_KEY_COMPLETE, this.onFileKeyComplete, this);
        this.scene.load.off(Phaser.Loader.Events.COMPLETE, this.loadComplete, this);
        this.scene.load.off(Phaser.Loader.Events.FILE_LOAD_ERROR, this.loadError, this);
    };
    Panel.prototype.sceneClick = function (pointer) {
        if (Tool.checkPointerContains(this, pointer) && this.checkPointerDelection(pointer)) {
            this.emit("panelClick", pointer);
        }
    };
    Panel.prototype.uiClick = function (pointer) {
        if (this.checkPointerDelection(pointer)) {
            this.emit("panelClick", pointer);
        }
    };
    return Panel;
}(BaseUI["a" /* BaseUI */]));


// CONCATENATED MODULE: ./src/ui/components/BasePanel.ts
var BasePanel_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var BasePanel_BasePanel = /** @class */ (function (_super) {
    BasePanel_extends(BasePanel, _super);
    function BasePanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mTweening = false;
        _this.mWidth = 0;
        _this.mHeight = 0;
        _this.mReloadTimes = 0;
        _this.mScene = scene;
        _this.mWorld = world;
        _this.mInitialized = false;
        if (world) {
            _this.dpr = Math.round(world.uiRatio || 1);
            _this.scale = _this.mWorld.uiScale;
        }
        return _this;
    }
    BasePanel.prototype.addResources = function (key, resource) {
        _super.prototype.addResources.call(this, key, resource);
        if (resource.type) {
            if (this.scene.load[resource.type]) {
                this.scene.load[resource.type](key, resUtil["h" /* Url */].getUIRes(resource.dpr, resource.texture), resUtil["h" /* Url */].getUIRes(resource.dpr, resource.data));
            }
        }
    };
    Object.defineProperty(BasePanel.prototype, "scaleWidth", {
        get: function () {
            var width = this.scene.cameras.main.width / this.scale;
            return width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BasePanel.prototype, "scaleHeight", {
        get: function () {
            var height = this.scene.cameras.main.height / this.scale;
            return height;
        },
        enumerable: false,
        configurable: true
    });
    return BasePanel;
}(Panel_Panel));



/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseMediator; });
/* harmony import */ var _interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(115);

var BaseMediator = /** @class */ (function () {
    function BaseMediator() {
        /**
         * 面板处于打开状态
         */
        this.mShow = false;
        this.mUIType = _interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_0__[/* UIType */ "a"].None;
    }
    Object.defineProperty(BaseMediator.prototype, "UIType", {
        get: function () {
            return this.mUIType;
        },
        enumerable: false,
        configurable: true
    });
    BaseMediator.prototype.updateViewPos = function () {
        if (!this.mView)
            return;
        this.mView.updatePos();
    };
    BaseMediator.prototype.tweenExpand = function (show) {
        if (this.mView)
            this.mView.tweenExpand(show);
    };
    BaseMediator.prototype.getView = function () {
        return this.mView;
    };
    BaseMediator.prototype.hide = function () {
        this.mShow = false;
        var view = this.getView();
        if (view)
            view.hide();
    };
    BaseMediator.prototype.isSceneUI = function () {
        return false;
    };
    BaseMediator.prototype.isShow = function () {
        return this.mShow;
    };
    BaseMediator.prototype.resize = function (width, height) {
        var view = this.getView();
        if (view && view.isShow())
            view.resize(width, height);
    };
    BaseMediator.prototype.show = function (param) {
        this.mShow = true;
    };
    BaseMediator.prototype.update = function (param) {
        var view = this.getView();
        if (view)
            view.update(param);
    };
    BaseMediator.prototype.setParam = function (param) {
        this.mParam = param;
    };
    BaseMediator.prototype.getParam = function () {
        return this.mParam;
    };
    BaseMediator.prototype.destroy = function () {
        this.mShow = false;
        this.mParam = null;
        var view = this.getView();
        if (view) {
            view.destroy();
            view = undefined;
        }
    };
    return BaseMediator;
}());



/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Font; });
var Font = /** @class */ (function () {
    function Font() {
    }
    Font.YAHEI_14_BOLD = "bold 14px YaHei";
    Font.YAHEI_16_BOLD = "bold 16px YaHei";
    Font.YAHEI_18_BOLD = "bold 18px YaHei";
    Font.YAHEI_20_BOLD = "bold 20px YaHei";
    // static readonly DEFULT_FONT = "-apple-system, 'Noto Sans', 'Helvetica Neue', Helvetica, 'Nimbus Sans L', Arial, 'Liberation Sans', 'PingFang SC', 'Hiragino Sans GB', 'Noto Sans CJK SC', 'Source Han Sans SC', 'Source Han Sans CN', 'Microsoft YaHei'";
    Font.DEFULT_FONT = "'Source Han Sans'";
    return Font;
}());



/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var IsInValidKey = function (keys) {
    return (keys == null) || (keys === '') || (keys.length === 0);
};

var GetEntry = function (target, keys, defaultEntry) {
    var entry = target;
    if (IsInValidKey(keys)) {
        //entry = root;
    } else {
        if (typeof (keys) === 'string') {
            keys = keys.split('.');
        }

        var key;
        for (var i = 0, cnt = keys.length; i < cnt; i++) {
            key = keys[i];
            if ((entry[key] == null) || (typeof (entry[key]) !== 'object')) {
                var newEntry;
                if (i === cnt - 1) {
                    if (defaultEntry === undefined) {
                        newEntry = {};
                    } else {
                        newEntry = defaultEntry;
                    }
                } else {
                    newEntry = {};
                }

                entry[key] = newEntry;
            }

            entry = entry[key];
        }
    }

    return entry;
};

var SetValue = function (target, keys, value) {
    // no object
    if (typeof (target) !== 'object') {
        return;
    }

    // invalid key
    else if (IsInValidKey(keys)) {
        // don't erase target
        if (value == null) {
            return;
        }
        // set target to another object
        else if (typeof (value) === 'object') {
            target = value;
        }
    } else {
        if (typeof (keys) === 'string') {
            keys = keys.split('.');
        }

        var lastKey = keys.pop();
        var entry = GetEntry(target, keys);
        entry[lastKey] = value;
    }

    return target;
};

/* harmony default export */ __webpack_exports__["a"] = (SetValue);

/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MessageType; });
/**
 * 系统消息定义
 * author aaron
 */
var MessageType = /** @class */ (function () {
    function MessageType() {
    }
    MessageType.CREATE_ROLE = "create_role";
    MessageType.APP_START = "app_start";
    MessageType.EDITOR_CHANGE_MODE = "editor_change_mode";
    MessageType.CLIENT_RESIZE = "app_client_resize";
    MessageType.SCENE_INITIALIZED = "SCENE_INITIALIZED";
    MessageType.SCENE_CLEARED = "SCENE_CLEARED";
    MessageType.SCENE_CHANGE_TO = "SCENE_CHANGE_TO";
    MessageType.SCENE_MOVE_TO = "scene_move_to";
    MessageType.SCENE_MOVE_STOP = "scene_move_stop";
    MessageType.CHANGE_ELEMENT_ANIMATION = "change_element_animation";
    MessageType.CHANGE_CHARACTER_ANIMATION = "change_character_animation";
    MessageType.CHAT_TO = "chat_to";
    MessageType.SHOW_CHAT_BUBBLE = "show_chat_bubble";
    MessageType.REMOVE_CHAT_BUBBLE = "remove_chat_bubble";
    MessageType.PROMPT_ALERT = "prompt_alert";
    MessageType.CHARACTER_TALING = "characterTaling";
    MessageType.CHARACTER_SHUT_UP = "characterShutUp";
    /// never start
    MessageType.QCLOUD_AUTH = "qcloud_auth";
    MessageType.ENTER_SCENE = "enter_scene";
    /// never end
    MessageType.SCENE_ADD_PLAYER = "scene_add_player";
    MessageType.SCENE_REMOVE_PLAYER = "scene_remove_player";
    MessageType.SCENE_UPDATE_PLAYER = "scene_update_player";
    MessageType.SCENE_ADD_ELEMENT = "scene_add_element";
    MessageType.SCENE_ADD_TERRAIN = "scene_add_terrain";
    MessageType.SCENE_ADD_TERRAIN_END = "scene_add_terrain_end";
    MessageType.SCENE_ADD_ALL_TERRAIN = "scene_add_all_terrain";
    MessageType.SCENE_REMOVE_ELEMENT = "scene_remove_element";
    MessageType.SCENE_REMOVE_TERRAIN = "scene_remove_terrain";
    MessageType.SCENE_REMOVE_ALL_TERRAIN = "scene_remove_all_terrain";
    MessageType.SCENE_MOUSE_FOLLOW = "scene_mouse_follow";
    MessageType.SCENE_SELECT_ELEMENT = "scene_select_element";
    MessageType.SCENE_FIXED_TO_ELEMENT = "scene_fixed_to_element";
    MessageType.SCENE_UPDATE_ELEMENT = "sceneUpdateElement";
    MessageType.SCENE_SYNCHRO_PACKAGE = "sceneSynchroPackage";
    MessageType.SCENE_VISIBLE_GRID = "sceneVisibleGrid";
    MessageType.PLAYER_SELECT_CHARACTER = "player_select_character";
    MessageType.PLAYER_DATA_INITIALIZE = "player_data_initialize";
    MessageType.SCENE_DATA_INITIALIZE = "scene_data_initialize";
    MessageType.PACKAGE_ITEM_ADD = "package_item_add";
    MessageType.PACKAGE_ITEM_REMOVE = "package_item_remove";
    MessageType.PACKAGE_EXCHANGE_ITEM_POS = "package_exchange_item_pos";
    MessageType.SCENE_BACKGROUND_CLICK = "SCENE_BACKGROUND_CLICK";
    MessageType.CHANGE_SELF_AVATAR = "CHANGE_SELF_AVATAR";
    MessageType.DRAG_TO_DROP = "DRAG_TO_DROP";
    MessageType.DRAG_OVER_DROP = "DRAG_OVER_DROP";
    MessageType.QUERY_PACKAGE = "query_package";
    MessageType.SYNC_USER_BALANCE = "syncUserBalance";
    MessageType.UPDATED_CHARACTER_PACKAGE = "updatedCharacterPackage";
    MessageType.SHOW_EFFECT = "showEffect";
    MessageType.EDIT_MODE_QUERY_PACKAGE = "editModeQueryPackage";
    MessageType.PRESS_ELEMENT = "PRESS_ELEMENT";
    // 旋转物件
    MessageType.TURN_ELEMENT = "turnElement";
    // 回收
    MessageType.RECYCLE_ELEMENT = "recycleElement";
    // 放置
    MessageType.PUT_ELEMENT = "putElement";
    MessageType.CANCEL_PUT = "cancelPut";
    // 展开物件容器
    MessageType.EDIT_PACKAGE_EXPANED = "editPackageExpaned";
    // 收起物件容器
    MessageType.EDIT_PACKAGE_COLLAPSE = "editPackageCollapse";
    MessageType.SELECTED_DECORATE_ELEMENT = "selectedDecorateElement";
    MessageType.CANCEL_DECORATE_ELEMENT = "cancelDecorateElement";
    MessageType.ADD_ICON_TO_TOP = "addIconToTop";
    MessageType.REMOVE_ICON_FROM_TOP = "removeIconFromTop";
    MessageType.SHOW_UI = "showUI";
    MessageType.SHOW_NOTICE = "showNotice";
    return MessageType;
}());



/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NinePatch", function() { return NinePatch; });
/* harmony import */ var _patches_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(217);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var NinePatch = /** @class */ (function (_super) {
    __extends(NinePatch, _super);
    function NinePatch(scene, x, y, width, height, key, frame, config) {
        var _this = _super.call(this, scene, x, y) || this;
        _this.config = config || _this.scene.cache.custom.ninePatch.get(frame ? "" + frame : key);
        // 对于config进行取整
        _this.config.top = Math.round(_this.config.top);
        if (_this.config.right)
            _this.config.right = Math.round(_this.config.right);
        if (_this.config.bottom)
            _this.config.bottom = Math.round(_this.config.bottom);
        if (_this.config.left)
            _this.config.left = Math.round(_this.config.left);
        Object(_patches_config__WEBPACK_IMPORTED_MODULE_0__["normalizePatchesConfig"])(_this.config);
        _this.setSize(width, height);
        _this.setTexture(key, frame);
        return _this;
    }
    NinePatch.prototype.resize = function (width, height) {
        width = Math.round(width);
        height = Math.round(height);
        if (!this.config) {
            return this;
        }
        if (this.width === width && this.height === height) {
            return this;
        }
        // 增加中间区域尺寸 1
        width = Math.max(width, this.config.left + this.config.right + 1);
        height = Math.max(height, this.config.top + this.config.bottom + 1);
        this.setSize(width, height);
        this.drawPatches();
        return;
    };
    NinePatch.prototype.setTexture = function (key, frame) {
        this.originTexture = this.scene.textures.get(key);
        this.setFrame(frame);
        return this;
    };
    NinePatch.prototype.setFrame = function (frame) {
        this.originFrame = this.originTexture.frames[frame] || this.originTexture.frames[NinePatch.__BASE];
        this.createPatches();
        this.drawPatches();
        return this;
    };
    NinePatch.prototype.setSize = function (width, height) {
        _super.prototype.setSize.call(this, width, height);
        this.finalXs = [0, this.config.left, this.width - this.config.right, this.width];
        this.finalYs = [0, this.config.top, this.height - this.config.bottom, this.height];
        return this;
    };
    NinePatch.prototype.setTint = function (tint) {
        this.tint = tint;
        return this;
    };
    NinePatch.prototype.setTintFill = function (tint) {
        this.tint = tint;
        this.tintFill = true;
        return this;
    };
    Object.defineProperty(NinePatch.prototype, "tintFill", {
        get: function () {
            return this.first && this.first.tintFill;
        },
        set: function (value) {
            this.each(function (patch) { return patch.tintFill = value; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NinePatch.prototype, "tint", {
        set: function (value) {
            this.each(function (patch) { return patch.setTint(value); });
            this.internalTint = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NinePatch.prototype, "isTinted", {
        get: function () {
            return this.first && this.first.isTinted;
        },
        enumerable: false,
        configurable: true
    });
    NinePatch.prototype.clearTint = function () {
        this.each(function (patch) { return patch.clearTint(); });
    };
    NinePatch.prototype.createPatches = function () {
        // The positions we want from the base texture
        var textureXs = [0, this.config.left, this.originFrame.width - this.config.right, this.originFrame.width];
        var textureYs = [0, this.config.top, this.originFrame.height - this.config.bottom, this.originFrame.height];
        var patchIndex = 0;
        for (var yi = 0; yi < 3; yi++) {
            for (var xi = 0; xi < 3; xi++) {
                this.createPatchFrame(this.getPatchNameByIndex(patchIndex), textureXs[xi], // x
                textureYs[yi], // y
                textureXs[xi + 1] - textureXs[xi], // width
                textureYs[yi + 1] - textureYs[yi] // height
                );
                ++patchIndex;
            }
        }
    };
    // private drawPatches(): void {
    //     const tintFill = this.tintFill;
    //     this.removeAll(true);
    //     let patchIndex = 0;
    //     for (let yi = 0; yi < 3; yi++) {
    //         for (let xi = 0; xi < 3; xi++) {
    //             const patch: Phaser.Textures.Frame = this.originTexture.frames[this.getPatchNameByIndex(patchIndex)];
    //             const patchImg = new Phaser.GameObjects.Image(this.scene, 0, 0, patch.texture.key, patch.name);
    //             patchImg.setOrigin(0);
    //             patchImg.setPosition(this.finalXs[xi] - this.width * this.originX, this.finalYs[yi] - this.height * this.originY);
    //             patchImg.setScale(
    //                 (this.finalXs[xi + 1] - this.finalXs[xi]) / patch.width,
    //                 (this.finalYs[yi + 1] - this.finalYs[yi]) / patch.height
    //             );
    //             this.add(patchImg);
    //             patchImg.setTint(this.internalTint);
    //             patchImg.tintFill = tintFill;
    //             ++patchIndex;
    //         }
    //     }
    // }
    NinePatch.prototype.drawPatches = function () {
        var tintFill = this.tintFill;
        this.removeAll(true);
        var patchIndex = 0;
        // const info = [];
        for (var yi = 0; yi < 3; yi++) {
            for (var xi = 0; xi < 3; xi++) {
                var patch = this.originTexture.frames[this.getPatchNameByIndex(patchIndex)];
                var patchImg = new Phaser.GameObjects.Image(this.scene, 0, 0, patch.texture.key, patch.name);
                patchImg.setOrigin(0);
                patchImg.setPosition((this.finalXs[xi] * 1000 - this.width * this.originX * 1000) / 1000, (this.finalYs[yi] * 1000 - this.height * this.originY * 1000) / 1000);
                // patchImg.setScale(
                //     (this.finalXs[xi + 1] * 1000 - this.finalXs[xi] * 1000) / patch.width / 1000,
                //     (this.finalYs[yi + 1] * 1000 - this.finalYs[yi] * 1000) / patch.height / 1000
                // );
                // 直接设置displayWidth即最终显示宽度
                patchImg.displayWidth = this.finalXs[xi + 1] - this.finalXs[xi];
                patchImg.displayHeight = this.finalYs[yi + 1] - this.finalYs[yi];
                this.add(patchImg);
                patchImg.setTint(this.internalTint);
                patchImg.tintFill = tintFill;
                ++patchIndex;
                // info.push({ x: patchImg.x, y: patchImg.y, w: patchImg.width, h: patchImg.height, s: patchImg.scale, sx: patchImg.scaleX, sy: patchImg.scaleY });
            }
        }
        // Logger.getInstance().log("ZW-- drawPatches: ", info);
        // Logger.getInstance().log("ZW-- lines: " + (info[0].w * info[0].sx + info[0].x) + "; " + (info[1].w * info[1].sx + info[1].x));
    };
    NinePatch.prototype.createPatchFrame = function (patch, x, y, width, height) {
        if (this.originTexture.frames.hasOwnProperty(patch)) {
            return;
        }
        this.originTexture.add(patch, this.originFrame.sourceIndex, this.originFrame.cutX + x, this.originFrame.cutY + y, width, height);
    };
    NinePatch.prototype.getPatchNameByIndex = function (index) {
        return this.originFrame.name + "|" + NinePatch.patches[index];
    };
    NinePatch.__BASE = "__BASE";
    NinePatch.patches = ["[0][0]", "[1][0]", "[2][0]", "[0][1]", "[1][1]", "[2][1]", "[0][2]", "[1][2]", "[2][2]"];
    return NinePatch;
}(Phaser.GameObjects.Container));



/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Pos; });
var Pos = /** @class */ (function () {
    function Pos(x, y, z, depth) {
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
        this.depth = depth | 0;
    }
    Pos.prototype.add = function (x, y, z) {
        this.x += x;
        this.x += y;
        this.z += z ? z : 0;
        return this;
    };
    Pos.prototype.equal = function (p) {
        return p.x === this.x && p.y === this.y && p.z === this.z && p.depth === this.depth;
    };
    Pos.prototype.toString = function () {
        return "Pos >> x: " + this.x + ", y: " + this.y + ", z: " + this.z + ", depth: " + this.depth;
    };
    Pos.prototype.toPoint = function () {
        return new Phaser.Geom.Point(this.x, this.y);
    };
    return Pos;
}());



/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return GetDisplayWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GetDisplayHeight; });
var GetDisplayWidth = function (gameObject) {
    if (gameObject.displayWidth !== undefined) {
        return gameObject.displayWidth;
    } else {
        return gameObject.width;
    }
}

var GetDisplayHeight = function (gameObject) {
    if (gameObject.displayHeight !== undefined) {
        return gameObject.displayHeight;
    } else {
        return gameObject.height;
    }
}



/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicImage", function() { return DynamicImage; });
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var DynamicImage = /** @class */ (function (_super) {
    __extends(DynamicImage, _super);
    function DynamicImage(scene, x, y) {
        return _super.call(this, scene, x, y, undefined) || this;
    }
    DynamicImage.prototype.load = function (value, loadContext, completeCallBack, errorCallBack) {
        this.mLoadCompleteCallbak = completeCallBack;
        this.mLoadErrorCallback = errorCallBack;
        this.mLoadContext = loadContext;
        if (!this.scene) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().fatal(DynamicImage.name + " Create failed does not exist");
            return;
        }
        this.mUrl = value;
        if (this.scene.textures.exists(value)) {
            this.onLoadComplete(value);
        }
        else {
            this.scene.load.image(value, value);
            this.scene.load.on(Phaser.Loader.Events.FILE_COMPLETE, this.onLoadComplete, this);
            this.scene.load.on(Phaser.Loader.Events.FILE_LOAD_ERROR, this.onLoadError, this);
            this.scene.load.start();
        }
    };
    DynamicImage.prototype.destroy = function (fromScene) {
        if (fromScene === void 0) { fromScene = false; }
        this.mLoadCompleteCallbak = null;
        this.mLoadContext = null;
        this.mLoadErrorCallback = null;
        this.mUrl = "";
        if (this.scene) {
            this.scene.load.off(Phaser.Loader.Events.FILE_COMPLETE, this.onLoadComplete, this);
            this.scene.load.off(Phaser.Loader.Events.FILE_LOAD_ERROR, this.onLoadError, this);
        }
        _super.prototype.destroy.call(this, fromScene);
    };
    DynamicImage.prototype.onLoadComplete = function (file) {
        if (file === this.mUrl) {
            this.scene.load.off(Phaser.Loader.Events.FILE_COMPLETE, this.onLoadComplete, this);
            this.scene.load.off(Phaser.Loader.Events.FILE_LOAD_ERROR, this.onLoadError, this);
            this.setTexture(this.mUrl);
            if (this.mLoadCompleteCallbak) {
                var cb = this.mLoadCompleteCallbak;
                this.mLoadCompleteCallbak = null;
                cb.call(this.mLoadContext);
                this.mLoadContext = null;
            }
        }
    };
    DynamicImage.prototype.onLoadError = function (file) {
        if (this.mUrl === file.url) {
            if (this.mLoadErrorCallback) {
                var cb = this.mLoadErrorCallback;
                this.mLoadErrorCallback = null;
                cb.call(this.mLoadContext);
                this.mLoadContext = null;
            }
        }
    };
    return DynamicImage;
}(Phaser.GameObjects.Image));



/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NinePatchButton", function() { return NinePatchButton; });
/* harmony import */ var _nine_patch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(110);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var NinePatchButton = /** @class */ (function (_super) {
    __extends(NinePatchButton, _super);
    function NinePatchButton(scene, x, y, width, height, key, frame, text, config, data) {
        var _this = _super.call(this, scene, x, y) || this;
        _this.mScene = scene;
        _this.mKey = key;
        _this.mFrame = frame ? frame : "__BASE";
        _this.initFrame();
        _this.setSize(width, height);
        _this.mNingBg = new _nine_patch__WEBPACK_IMPORTED_MODULE_0__["NinePatch"](_this.scene, 0, 0, width, height, key, _this.mFrame_nrmal, config);
        _this.add(_this.mNingBg);
        if (data) {
            _this.btnData = data;
        }
        _this.mLabel = _this.scene.make.text(undefined, false)
            .setOrigin(0.5, 0.5)
            .setSize(_this.width, _this.height)
            .setAlign("center")
            .setText(text);
        _this.add(_this.mLabel);
        // this.setSize(this.mNingBg.width, this.mNingBg.height);
        _this.setInteractive(new Phaser.Geom.Rectangle(0, 0, width, height), Phaser.Geom.Rectangle.Contains);
        _this.on("pointerdown", _this.onPointerDown, _this);
        _this.on("pointerup", _this.onPointerUp, _this);
        return _this;
        // this.on("pointerout", this.changeNormal, this);
        // this.on("pointerover", this.changeOver, this);
    }
    Object.defineProperty(NinePatchButton.prototype, "enable", {
        set: function (value) {
            if (value) {
                this.mNingBg.clearTint();
                this.mLabel.clearTint();
                this.setInteractive();
            }
            else {
                this.mNingBg.setTintFill(0x666666);
                this.mLabel.setTintFill(0x777777);
                this.removeInteractive();
            }
        },
        enumerable: false,
        configurable: true
    });
    NinePatchButton.prototype.getBtnData = function () {
        return this.btnData;
    };
    NinePatchButton.prototype.setText = function (text) {
        this.mLabel.setText(text);
    };
    NinePatchButton.prototype.getText = function () {
        return this.mLabel.text;
    };
    NinePatchButton.prototype.setTextStyle = function (style) {
        this.mLabel.setStyle(style);
    };
    NinePatchButton.prototype.setFontStyle = function (val) {
        this.mLabel.setFontStyle(val);
    };
    NinePatchButton.prototype.setTextOffset = function (x, y) {
        this.mLabel.setPosition(x, y);
    };
    NinePatchButton.prototype.setFrame = function (frame) {
        this.mNingBg.setFrame(frame);
        return this;
    };
    NinePatchButton.prototype.destroy = function (fromScene) {
        if (this.mLabel)
            this.mLabel.destroy();
        _super.prototype.destroy.call(this, fromScene);
    };
    NinePatchButton.prototype.setFrameNormal = function (normal, down, over) {
        this.mFrame_nrmal = normal;
        this.mFrame_down = (down ? down : normal);
        this.mFrame_over = (over ? over : normal);
        this.changeNormal();
        return this;
    };
    // public setState(val: string) {
    // }
    NinePatchButton.prototype.changeNormal = function () {
        this.setFrame(this.mFrame_nrmal);
    };
    NinePatchButton.prototype.changeDown = function () {
        // this.scale = 0.9;
        this.setFrame(this.mFrame_down);
    };
    NinePatchButton.prototype.changeOver = function () {
        // this.setTexture()
        this.setFrame(this.mFrame_over);
    };
    NinePatchButton.prototype.isExists = function (frame) {
        var originTexture = this.scene.textures.get(this.mKey);
        if (originTexture && originTexture.has(frame))
            return true;
        return false;
    };
    NinePatchButton.prototype.onPointerDown = function (pointer) {
        this.changeDown();
    };
    NinePatchButton.prototype.onPointerUp = function (pointer) {
        this.changeNormal();
        this.emit("click", pointer, this);
    };
    Object.defineProperty(NinePatchButton.prototype, "label", {
        get: function () {
            return this.mLabel;
        },
        enumerable: false,
        configurable: true
    });
    NinePatchButton.prototype.scaleHandler = function () {
        this.mScene.tweens.add({
            targets: this,
            duration: 50,
            ease: "Linear",
            props: {
                scaleX: { value: .5 },
                scaleY: { value: .5 },
            },
            yoyo: true,
            repeat: 0,
        });
        this.scaleX = this.scaleY = 1;
    };
    NinePatchButton.prototype.initFrame = function () {
        var frame = this.mFrame ? this.mFrame : this.mKey;
        this.mFrame_nrmal = frame + "_normal";
        var down = frame + "_down";
        if (!this.isExists(down)) {
            down = frame + "_normal";
        }
        this.mFrame_down = down;
        var over = frame + "_over";
        if (!this.isExists(over)) {
            over = frame + "_normal";
        }
        this.mFrame_over = over;
    };
    return NinePatchButton;
}(Phaser.GameObjects.Container));



/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UIType; });
/*
 * @Author: gxm
 * @Date: 2020-03-06 13:53:28
 * @Last Modified by: gxm
 * @Last Modified time: 2020-03-26 18:13:14
 */
var UIType;
(function (UIType) {
    UIType[UIType["None"] = 0] = "None";
    UIType[UIType["Scene"] = 1] = "Scene";
    UIType[UIType["Normal"] = 2] = "Normal";
    UIType[UIType["Pop"] = 3] = "Pop";
    UIType[UIType["Tips"] = 4] = "Tips";
    UIType[UIType["Monopoly"] = 5] = "Monopoly";
    UIType[UIType["Activity"] = 6] = "Activity";
})(UIType || (UIType = {}));


/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/Text.js + 10 modules
var Text = __webpack_require__(386);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/textstyle/TextStyle.js + 1 modules
var TextStyle = __webpack_require__(332);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/bbcodetext/Parser.js


var GETPROP_RESULT = {
    plainText: null,
    prevProp: null
};

var STYLE_RESULT = new TextStyle["a" /* default */]();
var EMPTYPROP = {};

var parser = {
    splitText: function (text, mode) {
        var result = [];
        var arr, m, charIdx = 0,
            totalLen = text.length,
            matchStart = totalLen;

        while (true) {
            arr = RE_SPLITTEXT.exec(text);
            if (!arr) {
                break;
            }

            m = arr[0];
            matchStart = RE_SPLITTEXT.lastIndex - m.length;

            if (charIdx < matchStart) {
                result.push(text.substring(charIdx, matchStart));
            }

            if (mode === undefined) {
                result.push(m);
            }

            charIdx = RE_SPLITTEXT.lastIndex;
        }

        if (charIdx < totalLen) {
            result.push(text.substring(charIdx, totalLen));
        }
        return result; // [text,...]
    },

    tagTextToProp: function (text, prevProp) {
        var plainText, innerMatch;

        if (prevProp == null) {
            prevProp = {};
        }

        // close image tag
        if (prevProp.img) {
            updateProp(prevProp, PROP_REMOVE, 'img');
        }
        // Check if current fragment is a class tag
        if (RE_BLOD_OPEN.test(text)) {
            updateProp(prevProp, PROP_ADD, 'b', true);
            plainText = '';
        } else if (RE_BLOD_CLOSE.test(text)) {
            updateProp(prevProp, PROP_REMOVE, 'b');
            plainText = '';
        } else if (RE_ITALICS_OPEN.test(text)) {
            updateProp(prevProp, PROP_ADD, 'i', true);
            plainText = '';
        } else if (RE_ITALICS_CLOSE.test(text)) {
            updateProp(prevProp, PROP_REMOVE, 'i');
            plainText = '';
        } else if (RE_SIZE_OPEN.test(text)) {
            innerMatch = text.match(RE_SIZE_OPEN);
            updateProp(prevProp, PROP_ADD, 'size', innerMatch[1] + 'px');
            plainText = '';
        } else if (RE_SIZE_CLOSE.test(text)) {
            updateProp(prevProp, PROP_REMOVE, 'size');
            plainText = '';
        } else if (RE_COLOR_OPEN.test(text)) {
            innerMatch = text.match(RE_COLOR_OPEN);
            updateProp(prevProp, PROP_ADD, 'color', innerMatch[1]);
            plainText = '';
        } else if (RE_COLOR_CLOSE.test(text)) {
            updateProp(prevProp, PROP_REMOVE, 'color');
            plainText = '';
        } else if (RE_UNDERLINE_OPEN.test(text)) {
            innerMatch = text.match(RE_UNDERLINE_OPEN);
            updateProp(prevProp, PROP_ADD, 'u', true);
            plainText = '';
        } else if (RE_UNDERLINE_OPENC.test(text)) {
            innerMatch = text.match(RE_UNDERLINE_OPENC);
            updateProp(prevProp, PROP_ADD, 'u', innerMatch[1]);
            plainText = '';
        } else if (RE_UNDERLINE_CLOSE.test(text)) {
            updateProp(prevProp, PROP_REMOVE, 'u');
            plainText = '';
        } else if (RE_SHADOW_OPEN.test(text)) {
            updateProp(prevProp, PROP_ADD, 'shadow', true);
            plainText = '';
        } else if (RE_SHADOW_CLOSE.test(text)) {
            updateProp(prevProp, PROP_REMOVE, 'shadow');
            plainText = '';
        } else if (RE_STROKE_OPEN.test(text)) {
            updateProp(prevProp, PROP_ADD, 'stroke', true);
            plainText = '';
        } else if (RE_STROKE_OPENC.test(text)) {
            innerMatch = text.match(RE_STROKE_OPENC);
            updateProp(prevProp, PROP_ADD, 'stroke', innerMatch[1]);
            plainText = '';
        } else if (RE_STROKE_CLOSE.test(text)) {
            updateProp(prevProp, PROP_REMOVE, 'stroke');
            plainText = '';
        } else if (RE_IMAGE_OPEN.test(text)) {
            innerMatch = text.match(RE_IMAGE_OPEN);
            updateProp(prevProp, PROP_ADD, 'img', innerMatch[1]);
            plainText = '';
        } else if (RE_IMAGE_CLOSE.test(text)) {
            updateProp(prevProp, PROP_REMOVE, 'img');
            plainText = '';
        } else if (RE_AREA_OPEN.test(text)) {
            innerMatch = text.match(RE_AREA_OPEN);
            updateProp(prevProp, PROP_ADD, 'area', innerMatch[1]);
            plainText = '';
        } else if (RE_AREA_CLOSE.test(text)) {
            updateProp(prevProp, PROP_REMOVE, 'area');
            plainText = '';            
        } else {
            plainText = text
        }

        var result = GETPROP_RESULT;
        result.plainText = plainText;
        result.prop = prevProp;
        return result;
    },

    propToContextStyle: function (defaultStyle, prop) {
        var result = STYLE_RESULT;
        if (!prop.hasOwnProperty('img')) {
            result.image = null;

            if (prop.hasOwnProperty('family')) {
                result.fontFamily = prop.family;
            } else {
                result.fontFamily = defaultStyle.fontFamily;
            }

            if (prop.hasOwnProperty('size')) {
                var size = prop.size;
                if (typeof (size) === 'number') {
                    size = size.toString() + 'px';
                }
                result.fontSize = size;
            } else {
                result.fontSize = defaultStyle.fontSize;
            }
            result.fontStyle = getFontStyle(prop.b, prop.i);

            if (prop.hasOwnProperty('color')) {
                result.color = prop.color;
            } else {
                result.color = defaultStyle.color;
            }

            if (prop.hasOwnProperty('stroke')) {
                if (prop.stroke === true) {
                    result.stroke = defaultStyle.stroke;
                    result.strokeThickness = defaultStyle.strokeThickness;
                } else {
                    result.stroke = prop.stroke;
                    result.strokeThickness = defaultStyle.strokeThickness;
                }
            } else {
                result.stroke = defaultStyle.stroke;
                result.strokeThickness = 0;
            }
        } else {
            result.image = prop.img;
        }

        if (prop.hasOwnProperty('shadow')) {
            if (prop.shadow === true) {
                result.shadowColor = defaultStyle.shadowColor;
                result.shadowOffsetX = defaultStyle.shadowOffsetX;
                result.shadowOffsetY = defaultStyle.shadowOffsetY;
                result.shadowBlur = defaultStyle.shadowBlur;
                result.shadowStroke = true;
                result.shadowFill = true;
            } else {
                result.shadowColor = prop.shadow;
                result.shadowOffsetX = defaultStyle.shadowOffsetX;
                result.shadowOffsetY = defaultStyle.shadowOffsetY;
                result.shadowBlur = defaultStyle.shadowBlur;
                result.shadowStroke = true;
                result.shadowFill = true;
            }
        } else {
            result.shadowColor = '#000';
            result.shadowOffsetX = 0;
            result.shadowOffsetY = 0;
            result.shadowBlur = 0;
            result.shadowStroke = false;
            result.shadowFill = false;
        }

        if (prop.hasOwnProperty('u')) {
            if (prop.u === true) {
                result.underlineColor = defaultStyle.underlineColor;
                result.underlineThickness = defaultStyle.underlineThickness;
                result.underlineOffset = defaultStyle.underlineOffset;
            } else {
                result.underlineColor = prop.u;
                result.underlineThickness = defaultStyle.underlineThickness;
                result.underlineOffset = defaultStyle.underlineOffset;
            }
        } else {
            result.underlineColor = '#000';
            result.underlineThickness = 0;
            result.underlineOffset = 0;
        }

        return result;
    },

    propToTagText: function (text, prop, prevProp) {
        if (prevProp == null) {
            prevProp = EMPTYPROP;
        }

        for (var k in prevProp) {
            if (prop.hasOwnProperty(k)) {
                continue;
            }

            text = '[/' + k + ']' + text;
        }

        var header = '';
        for (var k in prop) {
            if (prevProp[k] === prop[k]) {
                continue;
            }

            if (k === 'size') {
                header += ('[size=' + prop[k].replace('px', '') + ']');
            } else if ((k === 'color') || (k === 'stroke') || (k === 'img')) {
                header += ('[' + k + '=' + prop[k] + ']');
            } else if (k === 'u') {
                if (prop[k] === true) {
                    header += '[u]';
                } else {
                    header += ('[u=' + prop[k] + ']');
                }
            } else {
                header += ('[' + k + ']');
            }
        }
        text = header + text;

        return text;
    }
};

var updateProp = function (prop, op, key, value) {
    if (op === PROP_ADD) {
        // PROP_ADD     
        prop[key] = value;
    } else {
        // PROP_REMOVE        
        if (prop.hasOwnProperty(key)) {
            delete prop[key];
        }
    }

    return prop;
};

var getFontStyle = function (isBold, isItalic) {
    if (isBold && isItalic) {
        return 'bold italic';
    } else if (isBold) {
        return 'bold';
    } else if (isItalic) {
        return 'italic';
    } else {
        return '';
    }
};

var RE_SPLITTEXT = /\[b\]|\[\/b\]|\[i\]|\[\/i\]|\[size=(\d+)\]|\[\/size\]|\[color=([a-z]+|#[0-9abcdef]+)\]|\[\/color\]|\[u\]|\[u=([a-z]+|#[0-9abcdef]+)\]|\[\/u\]|\[shadow\]|\[\/shadow\]|\[stroke\]|\[stroke=([a-z]+|#[0-9abcdef]+)\]|\[\/stroke\]|\[img=([^\]]+)\]|\[\/img\]|\[area=([^\]]+)\]|\[\/area\]/ig;

var RE_BLOD_OPEN = /\[b\]/i;
var RE_BLOD_CLOSE = /\[\/b\]/i;
var RE_ITALICS_OPEN = /\[i\]/i;
var RE_ITALICS_CLOSE = /\[\/i\]/i;
var RE_SIZE_OPEN = /\[size=(\d+)\]/i;
var RE_SIZE_CLOSE = /\[\/size\]/i;
var RE_COLOR_OPEN = /\[color=([a-z]+|#[0-9abcdef]+)\]/i;
var RE_COLOR_CLOSE = /\[\/color\]/i;
var RE_UNDERLINE_OPEN = /\[u\]/i;
var RE_UNDERLINE_OPENC = /\[u=([a-z]+|#[0-9abcdef]+)\]/i;
var RE_UNDERLINE_CLOSE = /\[\/u\]/i;
var RE_SHADOW_OPEN = /\[shadow\]/i;
var RE_SHADOW_CLOSE = /\[\/shadow\]/i;
var RE_STROKE_OPEN = /\[stroke\]/i;
var RE_STROKE_OPENC = /\[stroke=([a-z]+|#[0-9abcdef]+)\]/i;
var RE_STROKE_CLOSE = /\[\/stroke\]/i;
var RE_IMAGE_OPEN = /\[img=([^\]]+)\]/i;
var RE_IMAGE_CLOSE = /\[\/img\]/i;
var RE_AREA_OPEN = /\[area=([^\]]+)\]/i;
var RE_AREA_CLOSE = /\[\/area\]/i;
const PROP_REMOVE = false;
const PROP_ADD = true;

/* harmony default export */ var Parser = (parser);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/bbcodetext/BBCodeText.js



class BBCodeText_BBCodeText extends Text["a" /* default */] {
    constructor(scene, x, y, text, style) {
        super(scene, x, y, text, style, 'rexBBCodeText', Parser);
    }
}

/* harmony default export */ var bbcodetext_BBCodeText = __webpack_exports__["a"] = (BBCodeText_BBCodeText);

/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "d", function() { return /* binding */ PlayerState; });
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Direction; });
__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ InputEnable; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ element_Element; });

// EXTERNAL MODULE: ./src/rooms/display/dragonbones.display.ts + 1 modules
var dragonbones_display = __webpack_require__(192);

// EXTERNAL MODULE: ./src/rooms/display/frames.display.ts
var frames_display = __webpack_require__(160);

// EXTERNAL MODULE: ./node_modules/pixelpai_proto/protocols.js
var protocols = __webpack_require__(2);

// EXTERNAL MODULE: ./src/utils/log.ts
var log = __webpack_require__(0);

// EXTERNAL MODULE: ./src/utils/pos.ts
var utils_pos = __webpack_require__(111);

// EXTERNAL MODULE: ./src/rooms/cameras/block.object.ts
var block_object = __webpack_require__(200);

// EXTERNAL MODULE: ./src/ui/components/dynamic.ninepatch.ts
var dynamic_ninepatch = __webpack_require__(201);

// EXTERNAL MODULE: ./src/utils/resUtil.ts + 1 modules
var resUtil = __webpack_require__(104);

// EXTERNAL MODULE: ./src/utils/font.ts
var font = __webpack_require__(107);

// CONCATENATED MODULE: ./src/rooms/bubble/bubble.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var bubble_Bubble = /** @class */ (function (_super) {
    __extends(Bubble, _super);
    function Bubble(scene, scale) {
        var _this = _super.call(this, scene) || this;
        _this.mMinWidth = 0;
        _this.mMinHeight = 0;
        _this.mScale = scale;
        _this.x = -40 * scale;
        return _this;
    }
    Bubble.prototype.show = function (text, bubble) {
        this.mChatContent = this.scene.make.text({
            text: text,
            style: {
                x: 0,
                y: 4 * this.mScale,
                fontFamily: font["a" /* Font */].DEFULT_FONT,
                fontSize: 14 * this.mScale,
                color: "#000000",
                origin: { x: 0, y: 0 },
                wordWrap: { width: 300, useAdvancedWrap: true }
            }
        }, false);
        this.add(this.mChatContent);
        this.mMinHeight = this.mChatContent.height + 26;
        this.mMinHeight = this.mMinHeight < 54 ? 54 : this.mMinHeight;
        this.mMinWidth = this.mChatContent.width + 40;
        this.mMinWidth = this.mMinWidth < 69 ? 69 : this.mMinWidth;
        this.mBubbleBg = new dynamic_ninepatch["DynamicNinepatch"](this.scene, this);
        var res = resUtil["h" /* Url */].getOsdRes(bubble.bubbleResource || "platformitem/thumbnail/bubble_01.png");
        this.mBubbleBg.load(res, {
            width: this.mMinWidth,
            height: this.mMinHeight,
            key: res,
            columns: [34, 2, 32],
            rows: [42, 2, 9]
        }, this.onComplete, this);
    };
    Bubble.prototype.tweenTo = function (toY) {
        this.mToY = toY;
        this.scene.tweens.add({
            targets: this,
            y: toY,
            alpha: 1,
            duration: 200
        });
    };
    Bubble.prototype.durationRemove = function (duration, callback, callbackContext) {
        var _this = this;
        this.mTweenCompleteCallback = callback;
        this.mTweenCallContext = callbackContext;
        this.mRemoveDelay = setTimeout(function () {
            _this.removeTween();
        }, duration);
    };
    Bubble.prototype.removeTween = function () {
        var _this = this;
        var endY = this.mToY - 30;
        var tween = this.scene.tweens.add({
            targets: this,
            y: endY,
            alpha: 0,
            duration: 200,
            onComplete: function () {
                if (_this.mTweenCompleteCallback) {
                    _this.mTweenCompleteCallback.call(_this.mTweenCallContext, _this);
                }
            }
        });
    };
    Bubble.prototype.destroy = function () {
        if (this.mChatContent) {
            this.mChatContent.destroy(true);
        }
        this.mChatContent = null;
        this.mMinWidth = 0;
        this.mMinHeight = 0;
        this.mToY = 0;
        this.mTweenCompleteCallback = null;
        this.mTweenCallContext = null;
        if (this.mRemoveDelay) {
            clearTimeout(this.mRemoveDelay);
        }
        _super.prototype.destroy.call(this, true);
    };
    Bubble.prototype.onComplete = function (img) {
        if (img) {
            img.setOrigin(0, 0);
            this.addAt(img, 0);
            var bound = this.getBounds();
            this.mChatContent.x = this.mMinWidth - this.mChatContent.width >> 1;
            this.mChatContent.y = (this.mMinHeight - this.mChatContent.height >> 1) + 6;
        }
    };
    Object.defineProperty(Bubble.prototype, "minWidth", {
        get: function () {
            return this.mMinWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bubble.prototype, "minHeight", {
        get: function () {
            return this.mMinHeight;
        },
        enumerable: false,
        configurable: true
    });
    return Bubble;
}(Phaser.GameObjects.Container));


// EXTERNAL MODULE: ./src/ui/components/dynamic.image.ts
var dynamic_image = __webpack_require__(113);

// CONCATENATED MODULE: ./src/rooms/bubble/bubble.container.ts
var bubble_container_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var bubble_container_BubbleContainer = /** @class */ (function (_super) {
    bubble_container_extends(BubbleContainer, _super);
    function BubbleContainer(scene, scale) {
        var _this = _super.call(this, scene) || this;
        _this.mBubbles = [];
        _this.mScale = scale;
        _this.mArrow = new dynamic_image["DynamicImage"](_this.scene, 0, 0);
        _this.mArrow.scale = scale;
        _this.mArrow.load(resUtil["h" /* Url */].getRes("ui/chat/bubble_arrow.png"));
        _this.add(_this.mArrow);
        return _this;
    }
    BubbleContainer.prototype.addBubble = function (text, bubbleSetting) {
        var bubble = this.createBubble(bubbleSetting);
        var len = this.mBubbles.length;
        var bul = null;
        var h = 0;
        bubble.show(text, bubbleSetting);
        for (var i = len - 1; i >= 0; i--) {
            bul = this.mBubbles[i];
            h += bul.minHeight + 5 * this.mScale;
            bul.tweenTo(-h);
        }
        this.add(bubble);
        this.mArrow.y = 4 * this.mScale;
    };
    BubbleContainer.prototype.updatePos = function (x, y) {
        this.x = x * this.mScale;
        this.y = y * this.mScale;
    };
    BubbleContainer.prototype.destroy = function (fromScene) {
        if (!this.mBubbles)
            return;
        var len = this.mBubbles.length;
        var bul = null;
        for (var i = len - 1; i >= 0; i--) {
            bul = this.mBubbles[i];
            if (!bul)
                continue;
            bul.destroy();
        }
        this.mBubbles = null;
        this.removeFormParent();
        _super.prototype.destroy.call(this, fromScene);
    };
    BubbleContainer.prototype.removeFormParent = function () {
        if (this.parentContainer) {
            this.parentContainer.remove(this);
        }
    };
    BubbleContainer.prototype.createBubble = function (bubbleSetting) {
        if (!bubbleSetting)
            return;
        var bubble = new bubble_Bubble(this.scene, this.mScale);
        this.mBubbles.push(bubble);
        var duration = bubbleSetting.duration ? bubbleSetting.duration : 5000;
        bubble.durationRemove(duration, this.onRemoveBubble, this);
        return bubble;
    };
    BubbleContainer.prototype.onRemoveBubble = function (bubble) {
        if (!bubble) {
            return;
        }
        this.mBubbles = this.mBubbles.filter(function (val) { return bubble !== val; });
        this.remove(bubble);
        bubble.destroy();
        if (this.mBubbles.length === 0) {
            this.removeFormParent();
        }
    };
    return BubbleContainer;
}(Phaser.GameObjects.Container));


// EXTERNAL MODULE: ./node_modules/net-socket-packet/dist/index.js
var dist = __webpack_require__(103);

// CONCATENATED MODULE: ./src/rooms/element/shop/shop.model.ts
var ShopModel = /** @class */ (function () {
    function ShopModel() {
    }
    return ShopModel;
}());


// EXTERNAL MODULE: ./src/const/MessageType.ts
var MessageType = __webpack_require__(109);

// CONCATENATED MODULE: ./src/rooms/element/shop/shop.entity.ts
var shop_entity_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var shop_entity_ShopEntity = /** @class */ (function (_super) {
    shop_entity_extends(ShopEntity, _super);
    function ShopEntity(mWorld) {
        var _this = _super.call(this) || this;
        _this.mWorld = mWorld;
        _this.mInitialize = false;
        _this.mConnect = _this.mWorld.connection;
        _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_QUERY_PACKAGE, _this.handlerQueryPackage);
        _this.mShopModel = new ShopModel();
        return _this;
    }
    ShopEntity.prototype.initialize = function () {
        return this.mInitialize;
    };
    ShopEntity.prototype.register = function () {
        this.mConnect.addPacketListener(this);
    };
    ShopEntity.prototype.unRegister = function () {
        this.mConnect.removePacketListener(this);
    };
    ShopEntity.prototype.destroy = function () {
        this.unRegister();
        this.mShopModel = null;
        this.mInitialize = false;
        this.mConnect = null;
    };
    ShopEntity.prototype.handlerQueryPackage = function (packet) {
        var notice = packet.content;
        this.mWorld.emitter.emit(MessageType["a" /* MessageType */].QUERY_PACKAGE, notice);
    };
    ShopEntity.NAME = "ShopModel";
    return ShopEntity;
}(dist["PacketHandler"]));


// CONCATENATED MODULE: ./src/rooms/action/AIAction.ts
var AIAction = /** @class */ (function () {
    function AIAction() {
        this.isBreak = true;
        this.isEnd = false;
    }
    AIAction.prototype.nextAction = function () {
        this.isEnd = true;
        if (this.group) {
            this.group.nextAction();
        }
    };
    AIAction.prototype.destroy = function () {
        this.owner = null;
        this.group = null;
    };
    return AIAction;
}());


// CONCATENATED MODULE: ./src/rooms/action/ActionGroup.ts
var ActionGroup = /** @class */ (function () {
    function ActionGroup() {
    }
    ActionGroup.prototype.addAction = function (action) {
        if (!this.list)
            this.list = [];
        this.list.push(action);
    };
    ActionGroup.prototype.nextAction = function () {
        if (this.current) {
            this.current.destroy();
            this.current = null;
        }
        if (this.list && this.list.length > 0) {
            this.current = this.list.splice(0, 1)[0];
            this.current.isEnd = false;
            this.current.execute();
        }
    };
    ActionGroup.prototype.setComplHandler = function (handler) {
        this.compHandler = handler;
    };
    ActionGroup.prototype.clear = function () {
        if (this.list) {
            for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
                var action = _a[_i];
                action.destroy();
            }
            this.list.length = 0;
        }
        if (this.current) {
            this.current.destroy();
            this.current = null;
        }
    };
    ActionGroup.prototype.stopCurrentAction = function () {
        if (this.current) {
            this.current.destroy();
            this.current = null;
        }
    };
    ActionGroup.prototype.isExecuting = function () {
        if (this.current && !this.current.isEnd)
            return true;
        return false;
    };
    ActionGroup.prototype.hasLast = function () {
        if (!this.list || this.list.length === 0)
            return false;
        else
            return true;
    };
    ActionGroup.prototype.breakAction = function () {
        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
            var action = _a[_i];
            action.destroy();
        }
        this.list.length = 0;
        if (this.current && this.current.isBreak) {
            this.current.destroy();
            this.current = null;
        }
    };
    ActionGroup.prototype.destroy = function () {
        this.clear();
        this.list = null;
        if (this.sleepAction) {
            this.sleepAction.destroy();
            this.sleepAction = null;
        }
        if (this.compHandler) {
            this.compHandler.clear();
            this.compHandler = null;
        }
    };
    return ActionGroup;
}());


// CONCATENATED MODULE: ./src/rooms/action/AI.ts
var AI_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var AI_AI = /** @class */ (function (_super) {
    AI_extends(AI, _super);
    function AI(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        _this.group = new ActionGroup();
        return _this;
    }
    AI.prototype.execute = function () {
        this.group.nextAction();
    };
    AI.prototype.nextAction = function () {
        this.group.nextAction();
    };
    AI.prototype.addAction = function (action, isbreak) {
        if (isbreak === void 0) { isbreak = false; }
        action.group = this.group;
        action.owner = this.owner;
        if (isbreak && this.group.current && this.group.current.isBreak) {
            this.group.stopCurrentAction();
        }
        this.group.addAction(action);
        if (!this.group.isExecuting())
            this.group.nextAction();
    };
    AI.prototype.breakAction = function () {
        this.group.breakAction();
    };
    AI.prototype.destroy = function () {
        this.group.destroy();
        this.owner = null;
    };
    return AI;
}(AIAction));


// CONCATENATED MODULE: ./src/rooms/element/element.ts
var element_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var PlayerState;
(function (PlayerState) {
    PlayerState["IDLE"] = "idle";
    PlayerState["WALK"] = "walk";
    PlayerState["RUN"] = "run";
    PlayerState["ATTACK"] = "attack";
    PlayerState["JUMP"] = "jump";
    PlayerState["INJURED"] = "injured";
    PlayerState["FAILED"] = "failed";
    PlayerState["DANCE01"] = "dance01";
    PlayerState["DANCE02"] = "dance02";
    PlayerState["FISHING"] = "fishing";
    PlayerState["GREET01"] = "greet01";
    PlayerState["SIT"] = "sit";
    PlayerState["LIE"] = "lit";
    PlayerState["EMOTION01"] = "emotion01";
})(PlayerState || (PlayerState = {}));
var Direction;
(function (Direction) {
    Direction[Direction["north"] = 0] = "north";
    Direction[Direction["north_west"] = 1] = "north_west";
    Direction[Direction["west"] = 2] = "west";
    Direction[Direction["west_south"] = 3] = "west_south";
    Direction[Direction["south"] = 4] = "south";
    Direction[Direction["south_east"] = 5] = "south_east";
    Direction[Direction["east"] = 6] = "east";
    Direction[Direction["east_north"] = 7] = "east_north";
})(Direction || (Direction = {}));
var InputEnable;
(function (InputEnable) {
    InputEnable[InputEnable["Diasble"] = 0] = "Diasble";
    InputEnable[InputEnable["Enable"] = 1] = "Enable";
    InputEnable[InputEnable["Interactive"] = 2] = "Interactive";
})(InputEnable || (InputEnable = {}));
var element_Element = /** @class */ (function (_super) {
    element_extends(Element, _super);
    function Element(sprite, mElementManager) {
        var _this = _super.call(this, mElementManager.roomService) || this;
        _this.mElementManager = mElementManager;
        _this.mAnimationName = "";
        _this.mMoveData = {};
        _this.mCurState = PlayerState.IDLE;
        _this.mOffsetY = undefined;
        _this.mMoving = false;
        _this.mId = sprite.id;
        _this.model = sprite;
        _this.mAi = new AI_AI(_this);
        return _this;
    }
    Object.defineProperty(Element.prototype, "dir", {
        get: function () {
            return this.mDisplayInfo.avatarDir !== undefined ? this.mDisplayInfo.avatarDir : 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "roomService", {
        get: function () {
            if (!this.mElementManager) {
                // Logger.getInstance().error("element manager is undefined");
                return;
            }
            return this.mElementManager.roomService;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "id", {
        get: function () {
            return this.mId; // this.mDisplayInfo.id || 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "model", {
        get: function () {
            return this.mModel;
        },
        set: function (val) {
            this.setModel(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "scene", {
        get: function () {
            if (this.mElementManager) {
                return this.mElementManager.scene;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "ai", {
        get: function () {
            return this.mAi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "eleMgr", {
        get: function () {
            if (this.mElementManager) {
                return this.mElementManager;
            }
        },
        enumerable: false,
        configurable: true
    });
    Element.prototype.load = function (displayInfo) {
        this.mDisplayInfo = displayInfo;
        this.loadDisplayInfo();
    };
    Element.prototype.setModel = function (model) {
        this.mModel = model;
        if (!model) {
            return;
        }
        // this.mDisplayInfo = this.mModel.displayInfo;
        this.mQueueAnimations = undefined;
        this.load(this.mModel.displayInfo);
        if (!this.mDisplay) {
            return;
        }
        if (this.mModel.pos) {
            this.setPosition(this.mModel.pos);
        }
        this.mDisplay.changeAlpha(this.mModel.alpha);
        // todo 暂时不显示，后续添加显示名字的协议
        // this.mDisplay.showNickname(this.mModel.nickname);
        this.setDirection(this.mModel.direction);
        // this.setRenderable(true);
        var frameModel = this.mDisplayInfo;
        if (this.mInputEnable === InputEnable.Interactive) {
            this.setInputEnable(this.mInputEnable);
        }
        if (frameModel && frameModel.shops) {
            this.mShopEntity = new shop_entity_ShopEntity(this.mElementManager.roomService.world);
            this.mShopEntity.register();
        }
    };
    Element.prototype.updateModel = function (model) {
        if (this.mModel.id !== model.id) {
            return;
        }
        if (model.hasOwnProperty("avatar")) {
            this.mModel.updateAvatar(model.avatar);
            this.load(this.mModel.displayInfo);
        }
        if (model.display && model.animations) {
            this.mModel.updateDisplay(model.display, model.animations);
            this.load(this.mModel.displayInfo);
        }
        if (model.hasOwnProperty("point3f")) {
            var pos = model.point3f;
            this.setPosition(new utils_pos["a" /* Pos */](pos.x, pos.y, pos.z));
        }
        if (model.hasOwnProperty("currentAnimationName")) {
            this.play(model.currentAnimationName);
            this.setInputEnable(this.mInputEnable);
            this.mModel.setAnimationQueue(undefined);
        }
        if (model.hasOwnProperty("direction")) {
            this.setDirection(model.direction);
        }
    };
    Element.prototype.scaleTween = function () {
        if (!this.mDisplay) {
            return;
        }
        this.mDisplay.scaleTween();
    };
    Element.prototype.play = function (animationName) {
        if (!this.mModel) {
            log["a" /* Logger */].getInstance().error(Element.name + ": sprite is empty");
            return;
        }
        if (this.mModel.currentAnimationName !== animationName) {
            // this.mAnimationName = animationName;
            this.mModel.currentAnimationName = animationName;
            if (this.mDisplay) {
                this.mDisplay.play(this.model.currentAnimation);
            }
        }
    };
    Element.prototype.setQueue = function (animations) {
        var _this = this;
        if (!this.mModel) {
            return;
        }
        var queue = [];
        for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
            var animation = animations_1[_i];
            var aq = {
                name: animation.animationName,
                playTimes: animation.times,
            };
            if (animation.times > 0) {
                aq.complete = function () {
                    var anis = _this.model.animationQueue;
                    anis.shift();
                    var aniName = anis.length > 0 ? anis[0].name : PlayerState.IDLE;
                    _this.play(aniName);
                };
            }
            queue.push(aq);
        }
        this.mModel.setAnimationQueue(queue);
        if (queue.length > 0) {
            this.play(animations[0].animationName);
        }
    };
    Element.prototype.setDirection = function (val) {
        if (this.mDisplayInfo) {
            this.mDisplayInfo.avatarDir = val;
        }
        if (this.mDisplay && this.model) {
            this.model.direction = val;
            this.mDisplay.play(this.model.currentAnimation);
        }
    };
    Element.prototype.getDirection = function () {
        return this.mDisplayInfo && this.mDisplayInfo.avatarDir ? this.mDisplayInfo.avatarDir : 3;
    };
    Element.prototype.changeState = function (val) {
        if (this.mCurState === val)
            return;
        this.mCurState = val;
        if (!this.mDisplay) {
            return;
        }
        // if (!val) val = PlayerState.IDLE;
        if (!val) {
            val = PlayerState.IDLE;
        }
        this.play(this.mCurState);
        // this.mModel.currentAnimationName = this.mCurState;
        // this.mDisplay.play(this.mModel.currentAnimation);
    };
    Element.prototype.getState = function () {
        return this.mCurState;
    };
    Element.prototype.getRenderable = function () {
        return this.mRenderable;
    };
    Element.prototype.getDisplay = function () {
        return this.mDisplay;
    };
    Element.prototype.move = function (moveData) {
        if (!this.mElementManager) {
            return; // Logger.getInstance().error(`Element::move - Empty element-manager.`);
        }
        if (!this.mDisplay) {
            return; // Logger.getInstance().error("display is undefined");
        }
        this.mMoveData.arrivalTime = moveData.timestemp;
        // this.mMoveData.destPos = new Pos(
        //     Math.floor(moveData.destinationPoint3f.x),
        //     Math.floor(moveData.destinationPoint3f.y)
        // );
        this.mMoveData.posPath = [
            {
                x: moveData.destinationPoint3f.x,
                y: moveData.destinationPoint3f.y,
            },
        ];
        this._doMove();
    };
    Element.prototype.movePosition = function (pos, angel) {
        if (!this.mElementManager) {
            return;
        }
        if (!this.mDisplay) {
            return;
        }
        this.startMove();
        if (!pos.depth)
            pos.depth = this.getDepth();
        this.setPosition(pos);
        var direction = this.calculateDirectionByAngle(angel);
        if (direction !== -1 && direction !== this.model.direction) {
            this.setDirection(direction);
        }
    };
    Element.prototype.movePath = function (movePath) {
        var _this = this;
        if (!this.mElementManager) {
            return;
        }
        if (!this.mDisplay) {
            return;
        }
        var tmpPath = movePath.path;
        if (!tmpPath) {
            return;
        }
        this.mMoveData.arrivalTime = movePath.timestemp;
        var lastPos = new utils_pos["a" /* Pos */](this.mDisplay.x, this.mDisplay.y - this.offsetY);
        var paths = [];
        var angle = null;
        var point = null;
        var now = this.mElementManager.roomService.now();
        var duration = 0;
        var index = 0;
        for (var _i = 0, _a = movePath.path; _i < _a.length; _i++) {
            var path = _a[_i];
            point = path.point3f;
            if (!(point.y === lastPos.y && point.x === lastPos.x)) {
                angle = Math.atan2(point.y - lastPos.y, point.x - lastPos.x) * (180 / Math.PI);
            }
            now += duration;
            duration = path.timestemp - now;
            paths.push({
                x: point.x,
                y: point.y,
                duration: duration,
                onStartParams: angle,
                onStart: function (tween, target, params) {
                    _this.onCheckDirection(params);
                },
            });
            lastPos = new utils_pos["a" /* Pos */](point.x, point.y);
            index++;
        }
        this.mMoveData.posPath = paths;
        this._doMove();
    };
    Element.prototype.startMove = function () {
        this.changeState(PlayerState.WALK);
    };
    Element.prototype.stopMove = function () {
        this.mMoving = false;
        if (!this.mDisplay) {
            // Logger.getInstance().error(`can't stopMove, display does not exist`);
            return;
        }
        if (this.mMoveData && this.mMoveData.posPath) {
            // delete this.mMoveData.destPos;
            delete this.mMoveData.posPath;
            if (this.mMoveData.arrivalTime)
                this.mMoveData.arrivalTime = 0;
            if (this.mMoveData.tweenLineAnim) {
                this.mMoveData.tweenLineAnim.stop();
                this.mMoveData.tweenLineAnim.destroy();
            }
        }
        this.changeState(PlayerState.IDLE);
    };
    Element.prototype.setPosition = function (p) {
        if (this.mMoving) {
            this.stopMove();
        }
        if (this.mDisplay && p) {
            this.mDisplay.setPosition(p.x, p.y, p.z);
            this.mModel.setPosition(p.x, p.y);
            var depth = p.depth ? p.depth : 0;
            this.setDepth(depth);
        }
        this.updateBlock();
    };
    Element.prototype.getRootPosition = function () {
        return new utils_pos["a" /* Pos */](this.mDisplay.x, this.mDisplay.y, 0);
    };
    Element.prototype.showBubble = function (text, setting) {
        var scene = this.mElementManager.scene;
        if (!scene) {
            return;
        }
        if (!this.mBubble) {
            this.mBubble = new bubble_container_BubbleContainer(scene, this.roomService.world.scaleRatio);
        }
        this.mBubble.addBubble(text, setting);
        this.updateBubble();
        this.roomService.addToSceneUI(this.mBubble);
    };
    Element.prototype.clearBubble = function () {
        if (!this.mBubble) {
            return;
        }
        this.mBubble.destroy();
        this.mBubble = null;
    };
    Element.prototype.showNickName = function () {
        if (this.mDisplay && this.model) {
            this.mDisplay.showNickname(this.model.nickname);
        }
    };
    Element.prototype.showEffected = function () {
        if (this.mDisplay)
            this.mDisplay.showEffect();
    };
    Element.prototype.showNickname = function () {
        if (this.model && this.mDisplay) {
            this.mDisplay.showNickname(this.model.nickname);
        }
    };
    Element.prototype.toSprite = function () {
        var sprite = protocols["op_client"].Sprite.create();
        sprite.id = this.id;
        if (this.mDisplay) {
            sprite.point3f = protocols["op_def"].PBPoint3f.create();
            sprite.point3f.x = this.mDisplay.x;
            sprite.point3f.y = this.mDisplay.y;
            sprite.point3f.z = this.mDisplay.z;
        }
        return sprite;
    };
    Element.prototype.turn = function () {
        if (!this.mModel) {
            return;
        }
        this.mModel.turn();
        if (this.mDisplay)
            this.mDisplay.play(this.mModel.currentAnimation);
    };
    Element.prototype.setAlpha = function (val) {
        if (!this.mDisplay) {
            return;
        }
        this.mDisplay.setAlpha(val);
    };
    // public setConcomitant(ele: Element, isFollow: boolean = true) {
    //     if (!this.concomitants) this.concomitants = [];
    //     if (this.concomitants.indexOf(ele) !== -1) {
    //         this.concomitants.push(ele);
    //         if (isFollow)
    //             this.mDisplay.add(ele.mDisplay);
    //     }
    // }
    // public removeConcomitant(ele: Element, destroy: boolean = true) {
    //     if (this.concomitants) {
    //         const index = this.concomitants.indexOf(ele);
    //         if (index !== -1) {
    //             this.concomitants.slice(index, 1);
    //             if (destroy)
    //                 ele.destroy();
    //         }
    //     }
    // }
    Element.prototype.getDepth = function () {
        var depth = 0;
        if (this.model && this.model.pos) {
            depth = this.model.pos.depth ? this.model.pos.depth : 0;
        }
        return depth;
    };
    Element.prototype.destroy = function () {
        if (this.mMoveData && this.mMoveData.tweenAnim) {
            this.mMoveData.tweenAnim.stop();
            this.mMoveData.tweenAnim.remove();
            this.mMoveData.tweenAnim = null;
            this.mMoveData = null;
        }
        if (this.mDisplay) {
            if (this.mBlockable) {
                this.roomService.removeBlockObject(this);
            }
            this.mDisplay.destroy();
            this.mDisplay = null;
        }
        if (this.mBubble) {
            this.mBubble.destroy();
            this.mBubble = undefined;
        }
        if (this.mShopEntity) {
            this.mShopEntity.destroy();
            this.mShopEntity = null;
        }
        if (this.mAi) {
            this.mAi.destroy();
            this.mAi = null;
        }
        // if (this.concomitants) {
        //     for (const ele of this.concomitants) {
        //         ele.destroy();
        //     }
        //     this.concomitants.length = 0;
        //     this.concomitants = null;
        // }
        _super.prototype.destroy.call(this);
    };
    Element.prototype._doMove = function () {
        var _this = this;
        if (!this.mMoveData.posPath) {
            return;
        }
        // const tw: Tweens.Tween = this.mMoveData.tweenAnim;
        // if (tw) {
        //     tw.stop();
        //     tw.remove();
        // }
        // const time: number = this.mMoveData.arrivalTime - this.roomService.now();
        // this.mMoveData.tweenAnim = this.mElementManager.scene.tweens.add({
        //     targets: this.mDisplay,
        //     duration: time,
        //     ease: "Linear",
        //     props: {
        //         x: { value: this.mMoveData.destPos.x },
        //         y: { value: this.mMoveData.destPos.y }
        //     },
        //     onStart: () => {
        //         this.onMoveStart();
        //     },
        //     onComplete: (tween, targets, element) => {
        //         this.onMoveComplete();
        //     },
        //     onUpdate: (tween, targets, element) => {
        //         this.onMoving();
        //     },
        //     onCompleteParams: [this]
        // });
        var line = this.mMoveData.tweenLineAnim;
        if (line) {
            line.stop();
            line.destroy();
        }
        var posPath = this.mMoveData.posPath;
        // for (const path of posPath) {
        //     path.onStart = () => {
        //         this.onMoveStart();
        //     }
        // }
        // const time: number = (this.mMoveData.arrivalTime - this.roomService.now());
        this.mMoveData.tweenLineAnim = this.mElementManager.scene.tweens.timeline({
            targets: this.mDisplay,
            ease: "Linear",
            tweens: posPath,
            onStart: function () {
                _this.onMoveStart();
            },
            onComplete: function () {
                _this.onMoveComplete();
            },
            onUpdate: function () {
                _this.onMoving();
            },
            onCompleteParams: [this],
        });
    };
    Element.prototype.createDisplay = function () {
        if (!this.mDisplayInfo) {
            log["a" /* Logger */].getInstance().error("displayinfo does not exist, Create " + this.model.nickname + " failed");
            return;
        }
        if (this.mDisplay) {
            return this.mDisplay;
        }
        var scene = this.mElementManager.scene;
        if (scene) {
            if (this.mDisplayInfo.discriminator === "DragonbonesModel") {
                this.mDisplay = new dragonbones_display["a" /* DragonbonesDisplay */](scene, this.mElementManager.roomService, this);
            }
            else {
                this.mDisplay = new frames_display["a" /* FramesDisplay */](scene, this.mElementManager.roomService, this);
            }
            var pos = this.mModel.pos;
            if (pos)
                this.mDisplay.setPosition(pos.x, pos.y, pos.z);
            this.addToBlock();
        }
        return this.mDisplay;
    };
    Element.prototype.loadDisplayInfo = function () {
        if (!this.mDisplayInfo) {
            return;
        }
        if (!this.mDisplay) {
            this.createDisplay();
        }
        this.mDisplay.once("initialized", this.onDisplayReady, this);
        this.mDisplay.load(this.mDisplayInfo);
    };
    Element.prototype.addDisplay = function () {
        this.createDisplay();
        var room = this.roomService;
        if (!room || !this.mDisplay) {
            // Logger.getInstance().error("roomService is undefined");
            return;
        }
        room.addToSurface(this.mDisplay);
        var depth = 0;
        if (this.model && this.model.pos) {
            depth = this.model.pos.depth ? this.model.pos.depth : 0;
        }
        this.setDepth(depth);
    };
    Element.prototype.setDepth = function (depth) {
        if (this.mDisplay) {
            this.mDisplay.setDepth(depth);
            if (!this.roomService) {
                throw new Error("roomService is undefined");
            }
            var layerManager = this.roomService.layerManager;
            if (!layerManager) {
                throw new Error("layerManager is undefined");
            }
            layerManager.depthSurfaceDirty = true;
        }
    };
    Element.prototype.onDisplayReady = function () {
        if (this.mDisplay) {
            this.setInputEnable(this.mInputEnable);
            this.mDisplay.play(this.model.currentAnimation);
            var depth = 0;
            if (this.model && this.model.pos) {
                depth = this.model.pos.depth ? this.model.pos.depth : 0;
            }
            this.setDepth(depth);
            // this.mDisplay.showRefernceArea();
        }
    };
    Element.prototype.updateBubble = function () {
        if (!this.mBubble) {
            return;
        }
        var position = this.getPosition();
        if (!position) {
            return;
        }
        this.mBubble.updatePos(position.x, position.y - 80);
    };
    Element.prototype.onMoveStart = function () {
        this.mMoving = true;
    };
    Element.prototype.onMoveComplete = function () {
        // if (this.mMoveData.tweenLineAnim) this.mMoveData.tweenLineAnim.stop();
        this.stopMove();
    };
    Element.prototype.onMoving = function () {
        var now = this.roomService.now();
        if (now - (this.mMoveData.tweenLastUpdate || 0) >= 50) {
            var depth = 0;
            if (this.model && this.model.pos) {
                depth = this.model.pos.depth ? this.model.pos.depth : 0;
            }
            this.setDepth(depth);
            this.mMoveData.tweenLastUpdate = now;
            this.updateBubble();
            if (this.mDisplay)
                this.mDisplay.emit("posChange", this.scene);
            if (this.mBlockable) {
                this.roomService.updateBlockObject(this);
                // this.roomService.addBlockObject()
            }
        }
    };
    Object.defineProperty(Element.prototype, "offsetY", {
        get: function () {
            if (this.mOffsetY === undefined) {
                if (!this.mElementManager ||
                    !this.mElementManager.roomService ||
                    !this.mElementManager.roomService.roomSize) {
                    return 0;
                }
                // this.mOffsetY = 0;
                this.mOffsetY = this.mElementManager.roomService.roomSize.tileHeight >> 2;
            }
            return 0; // this.mOffsetY;
        },
        enumerable: false,
        configurable: true
    });
    Element.prototype.onCheckDirection = function (params) {
        if (typeof params !== "number") {
            return;
        }
        var direction = this.calculateDirectionByAngle(params);
        if (direction !== -1) {
            this.setDirection(direction);
        }
    };
    Element.prototype.calculateDirectionByAngle = function (angle) {
        var direction = -1;
        if (angle > 90) {
            direction = 3;
        }
        else if (angle >= 0) {
            direction = 5;
        }
        else if (angle >= -90) {
            direction = 7;
        }
        else {
            direction = 1;
        }
        return direction;
    };
    return Element;
}(block_object["a" /* BlockObject */]));



/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/input/StopPropagationTouchEvents.js
var StopPropagationTouchEvents = function (element) {
    // Don't propagate touch/mouse events to parent(game canvas)
    element.addEventListener("touchstart", callback, false);
    element.addEventListener("touchmove", callback, false);
    element.addEventListener("touchend", callback, false);
    element.addEventListener("mousedown", callback, false);
    element.addEventListener("mouseup", callback, false);
    element.addEventListener("mousemove", callback, false);
}

var callback = function (e) {
    e.stopPropagation();
}
/* harmony default export */ var input_StopPropagationTouchEvents = (StopPropagationTouchEvents);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/inputtext/InputText.js


const DOMElement = Phaser.GameObjects.DOMElement;
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;

class InputText_InputText extends DOMElement {
    constructor(scene, x, y, width, height, config) {
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, 'x', 0);
            y = GetValue(config, 'y', 0);
            width = GetValue(config, 'width', undefined);
            height = GetValue(config, 'height', undefined);
        } else if (IsPlainObject(width)) {
            config = width;
            width = GetValue(config, 'width', undefined);
            height = GetValue(config, 'height', undefined);
        }

        if (config === undefined) {
            config = {};
        }
        var autoRound = scene.scale.autoRound;
        if (width !== undefined) {
            if (autoRound) {
                width = Math.floor(width);
            }
            config.width = width + 'px';
        }
        if (height !== undefined) {
            if (autoRound) {
                height = Math.floor(height);
            }
            config.height = height + 'px';
        }

        var element;
        var textType = GetValue(config, 'type', 'text');
        if (textType === 'textarea') {
            element = document.createElement("textarea");
            element.style.resize = 'none';
        } else {
            element = document.createElement("input");
            element.type = textType;
        }

        // Apply registed style properties
        var elemProp, elemPropValue;
        for (var key in ElementProperties) {
            elemProp = ElementProperties[key];
            elemPropValue = GetValue(config, key, elemProp[1]);
            if (elemPropValue !== undefined) {
                element[elemProp[0]] = elemPropValue;
            }
        }

        var style = GetValue(config, 'style', undefined);
        if (style === undefined) {
            style = {};
        }
        // Apply registed style properties
        var styleProp, stylePropValue;
        for (var key in StyleProperties) {
            styleProp = StyleProperties[key];
            stylePropValue = GetValue(config, key, styleProp[1]);
            if (stylePropValue !== undefined) {
                style[styleProp[0]] = stylePropValue;
            }
        }
        // Apply other style properties
        var elementStyle = element.style;
        for (var key in config) {
            if ((key in ElementProperties) || (key in StyleProperties)) {
                continue;
            } else if (key in elementStyle) {
                style[key] = config[key];
            }
        }
        style['box-sizing'] = 'border-box';
        super(scene, x, y, element, style);
        this.type = 'rexInputText';

        // Apply events
        for (let eventName in ElementEvents) { // Note: Don't use `var` here
            this.node[ElementEvents[eventName]] = (function () {
                this.emit(eventName, this);
            }).bind(this);
        }

        // Don't propagate touch/mouse events to parent(game canvas)
        input_StopPropagationTouchEvents(this.node);
    }

    resize(width, height) {
        var style = this.node.style;
        style.width = width + 'px';
        style.height = height + 'px';
        this.updateSize();
        return this;
    }

    get text() {
        return this.node.value;
    }

    set text(value) {
        this.node.value = value;
    }

    setText(value) { // Override
        this.text = value;
        return this;
    }

    selectText() {
        this.node.select();
        return this;
    }

    get placeholder() {
        return this.node.placeholder;
    }

    set placeholder(value) {
        this.node.placeholder = value;
    }

    setPlaceholder(value) {
        this.placeholder = value;
        return this;
    }

    get tooltip() {
        return this.node.title;
    }

    set tooltip(value) {
        this.node.title = value;
    }

    setTooltip(value) {
        this.tooltip = value;
        return this;
    }

    setTextChangedCallback(callback) {
        this.onTextChanged = callback;
        return this;
    }

    get readOnly() {
        return this.node.readOnly;
    }

    set readOnly(value) {
        this.node.readOnly = value;
    }

    setReadOnly(value) {
        if (value === undefined) {
            value = true;
        }
        this.readOnly = value;
        return this;
    }

    get spellCheck() {
        return this.node.spellcheck;
    }

    set spellCheck(value) {
        this.node.spellcheck = value;
    }

    setSpellCheck(value) {
        this.spellCheck = value;
        return this;
    }

    setStyle(key, value) {
        this.node.style[key] = value;
        return this;
    }

    getStyle(key) {
        return this.node.style[key];
    }

    scrollToBottom() {
        this.node.scrollTop = this.node.scrollHeight;
        return this;
    }

    setEnabled(enabled) {
        if (enabled === undefined) {
            enabled = true;
        }
        this.node.disabled = !enabled;
        return this;
    }

    setBlur() {
        this.node.blur();
        return this;
    }

    setFocus() {
        this.node.focus();
        return this;
    }
}

const ElementProperties = {
    id: ['id', undefined],
    text: ['value', undefined],
    placeholder: ['placeholder', undefined],
    tooltip: ['title', undefined],
    readOnly: ['readonly', false],
    spellCheck: ['spellcheck', false],
    autoComplete: ['autocomplete', 'off'],
};

const StyleProperties = {
    align: ['textAlign', undefined],
    width: ['width', undefined],
    height: ['height', undefined],
    fontFamily: ['fontFamily', undefined],
    fontSize: ['font-size', undefined],
    color: ['color', '#ffffff'],
    backgroundColor: ['backgroundColor', 'transparent'],
    borderColor: ['borderColor', 'transparent'],
    outline: ['outline', 'none'],
};

const ElementEvents = {
    textchange: 'oninput',
    click: 'onclick',
    dblclick: 'ondblclick',
    focus: 'onfocus',
    blur: 'onblur',
};

/* harmony default export */ var inputtext_InputText = __webpack_exports__["a"] = (InputText_InputText);

/***/ }),
/* 119 */,
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ButtonState; });
/* unused harmony export ButtonSoundKey */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Button; });
/* harmony import */ var _baseUI_BaseUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(125);
/* harmony import */ var _interface_event_MouseEvent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(344);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ButtonState;
(function (ButtonState) {
    ButtonState["Normal"] = "normal";
    ButtonState["Over"] = "over";
    ButtonState["Select"] = "select";
    ButtonState["Disable"] = "disable";
})(ButtonState || (ButtonState = {}));
var ButtonSoundKey;
(function (ButtonSoundKey) {
})(ButtonSoundKey || (ButtonSoundKey = {}));
var GetValue = Phaser.Utils.Objects.GetValue;
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button(scene, key, frame, downFrame, text, music) {
        var _this = _super.call(this, scene) || this;
        _this.mDownTime = 0;
        _this.mPressDelay = 1000;
        _this.mIsMove = false;
        _this.soundGroup = {
            up: {
                key: "click",
            }
        };
        Object.assign(_this.soundGroup, music);
        _this.mKey = key;
        _this.mFrame = frame;
        _this.mDownFrame = downFrame;
        _this.createBackground();
        if (text) {
            _this.mText = _this.scene.make.text(undefined, false)
                .setOrigin(0.5, 0.5)
                .setText(text)
                .setSize(_this.mBackground.width, _this.mBackground.height);
            _this.add(_this.mText);
        }
        _this.setInteractive();
        _this.addListen();
        return _this;
    }
    Object.defineProperty(Button.prototype, "background", {
        get: function () {
            return this.mBackground;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "text", {
        get: function () {
            return this.mText;
        },
        enumerable: false,
        configurable: true
    });
    Button.prototype.addListen = function () {
        this.removeListen();
        this.on("pointerdown", this.onPointerDownHandler, this);
        this.on("pointerup", this.onPointerUpHandler, this);
        this.on("pointermove", this.onPointerMoveHandler, this);
    };
    Button.prototype.removeListen = function () {
        this.off("pointerdown", this.onPointerDownHandler, this);
        this.off("pointerup", this.onPointerUpHandler, this);
        this.off("pointermove", this.onPointerMoveHandler, this);
    };
    Button.prototype.mute = function (boo) {
        this.silent = boo;
    };
    Button.prototype.changeNormal = function () {
        this.setBgFrame(this.mFrame);
    };
    Button.prototype.changeDown = function () {
        if (this.mDownFrame) {
            this.setBgFrame(this.mDownFrame);
        }
    };
    Button.prototype.setFrame = function (frame) {
        if (this.mBackground) {
            this.setBgFrame(frame);
        }
    };
    Button.prototype.setText = function (val) {
        if (this.mText) {
            this.mText.setText(val);
        }
    };
    Button.prototype.setTextStyle = function (style) {
        if (this.mText) {
            this.mText.setStyle(style);
        }
    };
    Button.prototype.setFontStyle = function (val) {
        if (this.mText) {
            this.mText.setFontStyle(val);
        }
    };
    Button.prototype.setTextOffset = function (x, y) {
        if (this.mText) {
            this.mText.setPosition(x, y);
        }
    };
    Button.prototype.setTextColor = function (color) {
        if (this.mText) {
            this.mText.setColor(color);
        }
    };
    Button.prototype.createBackground = function () {
        this.mBackground = this.scene.make.image({
            key: this.mKey,
            frame: this.mFrame
        }, false);
        this.setSize(this.mBackground.width, this.mBackground.height);
        this.add(this.mBackground);
    };
    Button.prototype.setBgFrame = function (frame) {
        this.mBackground.setFrame(frame);
        this.setSize(this.mBackground.width, this.mBackground.height);
    };
    Button.prototype.buttonStateChange = function (state) {
        switch (state) {
            case ButtonState.Normal:
                this.changeNormal();
                break;
            case ButtonState.Over:
                break;
            case ButtonState.Select:
                this.changeDown();
                break;
            case ButtonState.Disable:
                break;
        }
    };
    Button.prototype.onPointerMoveHandler = function (pointer) {
        if (this.soundGroup && this.soundGroup.move)
            this.playSound(this.soundGroup.move);
        if (!this.interactiveBoo)
            return;
        this.mIsMove = true;
        this.emit(_interface_event_MouseEvent__WEBPACK_IMPORTED_MODULE_1__[/* CoreUI */ "a"].MouseEvent.Move);
    };
    Button.prototype.onPointerUpHandler = function (pointer) {
        if (!this.interactiveBoo) {
            if (this.soundGroup && this.soundGroup.disabled)
                this.playSound(this.soundGroup.disabled);
            return;
        }
        this.buttonStateChange(ButtonState.Normal);
        if (!this.mIsMove || (Date.now() - this.mDownTime > this.mPressTime)) {
            if (Math.abs(pointer.downX - pointer.upX) < 30 && Math.abs(pointer.downY - pointer.upY) < 30) {
                if (this.soundGroup && this.soundGroup.up)
                    this.playSound(this.soundGroup.up);
                this.emit(_interface_event_MouseEvent__WEBPACK_IMPORTED_MODULE_1__[/* CoreUI */ "a"].MouseEvent.Tap, pointer, this);
            }
        }
        clearTimeout(this.mPressDelay);
        this.mIsMove = false;
        this.mDownTime = 0;
    };
    Button.prototype.onPointerDownHandler = function (pointer) {
        var _this = this;
        if (!this.interactiveBoo) {
            if (this.soundGroup && this.soundGroup.disabled)
                this.playSound(this.soundGroup.disabled);
            return;
        }
        if (this.soundGroup && this.soundGroup.down)
            this.playSound(this.soundGroup.down);
        this.buttonStateChange(ButtonState.Select);
        this.mDownTime = Date.now();
        this.mPressTime = setTimeout(function () {
            _this.emit(_interface_event_MouseEvent__WEBPACK_IMPORTED_MODULE_1__[/* CoreUI */ "a"].MouseEvent.Hold, _this);
        }, this.mPressTime);
        this.emit(_interface_event_MouseEvent__WEBPACK_IMPORTED_MODULE_1__[/* CoreUI */ "a"].MouseEvent.Down, this);
    };
    return Button;
}(_baseUI_BaseUI__WEBPACK_IMPORTED_MODULE_0__[/* BaseUI */ "a"]));



/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconBtn", function() { return IconBtn; });
/* harmony import */ var _utils_pos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(111);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * 多帧资源按钮
 */
var IconBtn = /** @class */ (function (_super) {
    __extends(IconBtn, _super);
    // // 按钮打开模块的name，用于打开和关闭此模块及模块更新时，主界面按钮的更新（显示和隐藏）
    // private medName: string;
    function IconBtn(scene, world, data) {
        var _this = _super.call(this, scene) || this;
        _this.mScene = scene;
        _this.mWorld = world;
        _this.mBtnBg = scene.make.image(undefined, false);
        _this.mBgResKey = data.bgResKey;
        _this.mBgTexture = data.bgTextures;
        _this.mData = data;
        if (!_this.mScene.textures.exists(_this.mBgResKey) && data.pngUrl && data.jsonUrl) {
            _this.mScene.load.atlas(data.key, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes(data.pngUrl), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes(data.jsonUrl));
            _this.mScene.load.once(Phaser.Loader.Events.COMPLETE, _this.loadComplete, _this);
            _this.mScene.load.start();
            return _this;
        }
        _this.loadComplete();
        return _this;
    }
    // public setMedName(name: string) {
    //     this.medName = name;
    // }
    IconBtn.prototype.getKey = function () {
        return this.mData.key;
    };
    IconBtn.prototype.setPos = function (x, y) {
        if (!this.mBasePos) {
            this.mBasePos = new _utils_pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"]();
        }
        this.mBasePos.x = x;
        this.mBasePos.y = y;
    };
    /**
     * 获取按钮的初始化时的位置，用于tween时，按钮来回切换位置用
     */
    IconBtn.prototype.getPos = function () {
        return this.mBasePos;
    };
    IconBtn.prototype.setBtnData = function (value) {
        this.mBtnData = value;
    };
    IconBtn.prototype.getBtnData = function () {
        return this.mBtnData;
    };
    IconBtn.prototype.setClick = function (func) {
        this.monClick = func;
    };
    IconBtn.prototype.destroy = function () {
        if (this.mBtnBg) {
            this.mBtnBg.destroy(true);
        }
        if (this.mBtnIcon) {
            this.mBtnIcon.destroy(true);
        }
        this.monClick = null;
        this.mBtnBg = null;
        this.mBtnIcon = null;
        this.mBtnData = null;
        this.mScene = null;
        _super.prototype.destroy.call(this);
    };
    IconBtn.prototype.loadComplete = function () {
        this.mBtnBg.setTexture(this.mBgResKey, this.mBgTexture[0]);
        this.mBtnBg.scaleX = this.mBtnBg.scaleY = this.mData.scale;
        this.addAt(this.mBtnBg, 0);
        if (this.mData.iconResKey && this.mData.iconTexture && this.mData.iconTexture.length > 0) {
            this.mBtnIcon = this.mScene.make.image(undefined, false);
            this.mBtnIcon.setTexture(this.mData.iconResKey, this.mData.iconTexture);
            this.add(this.mBtnIcon);
        }
        this.setSize(this.mBtnBg.width, this.mBtnBg.height);
        this.setInteractive();
        this.on("pointerup", this.upHandler, this);
        this.on("pointerdown", this.downHandler, this);
        this.on("pointerover", this.overHandler, this);
        this.on("pointerout", this.outHandler, this);
    };
    IconBtn.prototype.overHandler = function (pointer) {
        if (this.mBgTexture.length < 2) {
            return;
        }
        this.mBtnBg.setTexture(this.mBgResKey, this.mBgTexture[1]);
    };
    IconBtn.prototype.outHandler = function (pointer) {
        if (this.mBgTexture.length < 2) {
            return;
        }
        this.mBtnBg.setTexture(this.mBgResKey, this.mBgTexture[0]);
    };
    IconBtn.prototype.upHandler = function () {
        if (this.monClick) {
            this.monClick();
        }
        if (this.mData && this.mData.callBack) {
            this.mData.callBack.apply(this);
        }
        this.emit("click", this);
        if (this.mBgTexture.length < 3) {
            return;
        }
        this.mBtnBg.setTexture(this.mBgResKey, this.mBgTexture[2]);
    };
    IconBtn.prototype.downHandler = function () {
        // this.scaleHandler();
        if (this.mBgTexture.length < 4) {
            return;
        }
        this.mBtnBg.setTexture(this.mBgResKey, this.mBgTexture[3]);
    };
    IconBtn.prototype.scaleHandler = function () {
        this.mScene.tweens.add({
            targets: this,
            duration: 50,
            ease: "Linear",
            props: {
                scaleX: { value: .5 },
                scaleY: { value: .5 },
            },
            yoyo: true,
            repeat: 0,
        });
        this.scaleX = this.scaleY = 1;
    };
    return IconBtn;
}(Phaser.GameObjects.Container));



/***/ }),
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIMediatorType", function() { return UIMediatorType; });
var UIMediatorType = /** @class */ (function () {
    function UIMediatorType() {
    }
    UIMediatorType.BagMediator = "BagMediator"; // 角色背包
    UIMediatorType.ChatMediator = "ChatMediator"; // 场景聊天框
    UIMediatorType.NOTICE = "Notice";
    UIMediatorType.DIALOGO = "DIALOGO";
    UIMediatorType.Turn_Btn_Top = "Turn_Btn_Top";
    UIMediatorType.Turn_Btn_Bottom = "Turn_Btn_Bottom";
    UIMediatorType.App_Back = "App_Back";
    UIMediatorType.Editor_Save = "Editor_Save";
    UIMediatorType.Editor_Cancel = "Editor_Cancel";
    UIMediatorType.Close_Btn = "Close_Btn";
    UIMediatorType.ControlF = "ControlF"; // 展示框
    UIMediatorType.Storage = "Storage"; // 物件背包
    UIMediatorType.UserInfo = "UserInfo"; // 人物信息
    UIMediatorType.UserMenu = "UserMenu"; // 人物菜单
    UIMediatorType.MessageBox = "MessageBox"; // 消息框
    UIMediatorType.ComponentRank = "ComponentRank"; // 常驻固定排行榜
    UIMediatorType.Rank = "Rank"; // 排行榜
    UIMediatorType.VoteResult = "VoteResult"; // 投票界面
    UIMediatorType.Shop = "Shop"; // 内购商城
    UIMediatorType.MineSettle = "MineSettle"; // 矿洞结算
    UIMediatorType.EquipUpgrade = "EquipUpgrade"; // 装备升级
    return UIMediatorType;
}());



/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Sprite; });
/* harmony import */ var _utils_pos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(111);
/* harmony import */ var _display_dragonbones_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(161);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _display_frames_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(162);
/* harmony import */ var _display_animation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(204);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(203);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(117);








var Sprite = /** @class */ (function () {
    function Sprite(obj, nodeType) {
        this.mID = obj.id;
        if (obj.point3f) {
            var point = obj.point3f;
            this.mPos = new _utils_pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"](point.x, point.y, point.z);
        }
        this.mAttrs = obj.attrs;
        if (obj.avatar) {
            this.updateAvatar(obj.avatar);
            // if (attrs && attrs.length > 0) {
            //     for (const att of attrs) {
            //         if (att.key === "minecart") {
            //             this.mAvatar.stalkerId = att.value;
            //         }
            //     }
            // }
        }
        if (obj.display) {
            this.updateDisplay(obj.display, obj.animations, obj.currentAnimationName);
        }
        if (obj.sn) {
            this.mSn = obj.sn;
        }
        this.tryRegisterAnimation(obj.animationRegistrationMap);
        this.mCurrentAnimationName = obj.currentAnimationName || "idle";
        this.direction = obj.direction || 3;
        this.mNickname = obj.nickname;
        this.mBindID = obj.bindId;
        this.mAlpha = obj.opacity === undefined ? 1 : obj.opacity / 100;
        this.mDisplayBadgeCards = obj.displayBadgeCards;
        this.mNodeType = nodeType;
        if (obj.version) {
            this.mVersion = obj.version;
        }
        if (obj.isMoss !== undefined) {
            this.isMoss = obj.isMoss;
        }
    }
    Sprite.prototype.toSprite = function () {
        var sprite = pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_client"].Sprite.create();
        sprite.id = this.id;
        sprite.nickname = this.mNickname;
        if (this.mDisplayInfo instanceof _display_frames_model__WEBPACK_IMPORTED_MODULE_3__[/* FramesModel */ "a"]) {
            sprite.display = this.mDisplayInfo.display;
            sprite.currentAnimationName = this.currentAnimationName;
            var point3f = pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].PBPoint3f.create();
            point3f.x = this.pos.x;
            point3f.y = this.pos.y;
            point3f.z = this.pos.z;
            sprite.point3f = point3f;
            sprite.animations = this.displayInfo.toClient();
        }
        sprite.direction = this.direction;
        sprite.bindId = this.bindID;
        sprite.sn = this.sn;
        sprite.version = this.mVersion;
        return sprite;
    };
    Sprite.prototype.newID = function () {
        this.mID = _utils_helpers__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].genId();
    };
    Sprite.prototype.setPosition = function (x, y) {
        if (!this.mPos) {
            this.mPos = new _utils_pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"]();
        }
        this.mPos.x = x;
        this.mPos.y = y;
    };
    Sprite.prototype.turn = function () {
        if (!this.mDisplayInfo) {
            return;
        }
        var dirable = this.dirable(this.mCurrentAnimationName);
        var index = dirable.indexOf(this.mDirection);
        if (index > -1) {
            this.direction = dirable[(index + 1) % dirable.length];
        }
        else {
            _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().error(Sprite.name + ": error dir " + this.mDirection);
        }
        return this;
    };
    Sprite.prototype.updateAvatar = function (avatar) {
        if (this.mDisplayInfo) {
            this.mDisplayInfo.destroy();
        }
        this.mAvatar = { id: avatar.id };
        this.mAvatar = Object.assign(this.mAvatar, avatar);
        this.mDisplayInfo = new _display_dragonbones_model__WEBPACK_IMPORTED_MODULE_1__[/* DragonbonesModel */ "a"](this);
    };
    Sprite.prototype.updateDisplay = function (display, animations, defAnimation) {
        if (!display || !animations) {
            return;
        }
        if (this.mDisplayInfo) {
            this.mDisplayInfo.destroy();
        }
        if (display) {
            var anis = [];
            var objAnis = animations;
            for (var _i = 0, objAnis_1 = objAnis; _i < objAnis_1.length; _i++) {
                var ani = objAnis_1[_i];
                anis.push(new _display_animation__WEBPACK_IMPORTED_MODULE_4__[/* Animation */ "a"](ani));
            }
            defAnimation = defAnimation || this.mCurrentAnimationName || "";
            this.mDisplayInfo = new _display_frames_model__WEBPACK_IMPORTED_MODULE_3__[/* FramesModel */ "a"]({
                animations: {
                    defaultAnimationName: defAnimation,
                    display: display,
                    animationData: anis,
                },
            });
            if (defAnimation) {
                this.currentAnimationName = defAnimation;
            }
        }
    };
    Sprite.prototype.setAnimationQueue = function (queue) {
        this.mAnimationQueue = queue;
    };
    Sprite.prototype.updateAttr = function (attrs) {
        this.mAttrs = attrs;
    };
    Sprite.prototype.setAnimationName = function (name) {
        if (this.mDisplayInfo) {
            this.mDisplayInfo.animationName = name;
        }
        this.mCurrentAnimationName = name;
        var ani = this.setAnimationData(name, this.direction);
        return ani;
    };
    Object.defineProperty(Sprite.prototype, "id", {
        get: function () {
            return this.mID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "pos", {
        get: function () {
            return this.mPos;
        },
        set: function (pos) {
            this.mPos = pos;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "avatar", {
        get: function () {
            return this.mAvatar;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "currentAnimationName", {
        get: function () {
            return this.mCurrentAnimationName;
        },
        set: function (animationName) {
            if (this.mDisplayInfo) {
                this.mDisplayInfo.animationName = animationName;
            }
            this.mCurrentAnimationName = animationName;
            this.setAnimationData(animationName, this.direction);
            // this.mCurrentAnimation = this.findAnimation(animationName, this.mDirection);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "direction", {
        get: function () {
            return this.mDirection;
        },
        set: function (val) {
            this.mDirection = val;
            if (!this.mDisplayInfo) {
                return;
            }
            this.setAnimationData(this.mCurrentAnimationName, val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "nickname", {
        get: function () {
            return this.mNickname;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "bindID", {
        get: function () {
            return this.mBindID;
        },
        set: function (id) {
            this.mBindID = id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "sn", {
        get: function () {
            return this.mSn;
        },
        set: function (value) {
            this.mSn = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "alpha", {
        get: function () {
            return this.mAlpha;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "package", {
        get: function () {
            return this.mPackage;
        },
        set: function (value) {
            this.mPackage = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "sceneId", {
        get: function () {
            return this.mSceneId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "uuid", {
        get: function () {
            return this.mUuid;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "displayBadgeCards", {
        get: function () {
            return this.mDisplayBadgeCards;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "platformId", {
        get: function () {
            return this.mPlatformId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "displayInfo", {
        get: function () {
            return this.mDisplayInfo;
        },
        set: function (displayInfo) {
            this.mDisplayInfo = displayInfo;
            if (this.currentAnimationName) {
                this.mDisplayInfo.animationName = this.currentAnimationName;
                this.setAnimationData(this.currentAnimationName, this.direction);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "isMoss", {
        get: function () {
            return this.mIsMoss;
        },
        set: function (val) {
            this.mIsMoss = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "animationQueue", {
        get: function () {
            return this.mAnimationQueue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "nodeType", {
        get: function () {
            return this.mNodeType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "currentAnimation", {
        get: function () {
            return this.mCurrentAnimation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "currentCollisionArea", {
        get: function () {
            if (!this.mCurrentCollisionArea) {
                this.mCurrentCollisionArea = this.getCollisionArea();
            }
            return this.mCurrentCollisionArea;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "currentWalkableArea", {
        get: function () {
            if (!this.mCurrentWalkableArea) {
                this.mCurrentWalkableArea = this.getWalkableArea();
            }
            return this.mCurrentWalkableArea;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "currentCollisionPoint", {
        get: function () {
            if (!this.mCurrentCollisionPoint) {
                this.mCurrentCollisionPoint = this.getOriginPoint();
            }
            return this.mCurrentCollisionPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "hasInteractive", {
        get: function () {
            if (!this.mDisplayInfo || !this.mCurrentAnimation) {
                return false;
            }
            var animationName = this.mCurrentAnimation.animationName;
            var area = this.mDisplayInfo.getInteractiveArea(animationName);
            if (area && area.length > 0) {
                return true;
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "animationMap", {
        get: function () {
            if (!this.mRegisterAnimation) {
                this.mRegisterAnimation = new Map();
            }
            return this.mRegisterAnimation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "originCollisionPoint", {
        get: function () {
            return this._originCollisionPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "originWalkPoint", {
        get: function () {
            return this._originWalkPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "attrs", {
        get: function () {
            return this.mAttrs;
        },
        enumerable: false,
        configurable: true
    });
    Sprite.prototype.setOriginCollisionPoint = function (value) {
        if (this._originCollisionPoint === undefined) {
            this._originCollisionPoint = new Phaser.Geom.Point();
        }
        if (value && value.length > 1) {
            this._originCollisionPoint.x = value[0];
            this._originCollisionPoint.y = value[1];
        }
    };
    Sprite.prototype.setOriginWalkPoint = function (value) {
        if (this._originWalkPoint === undefined) {
            this._originWalkPoint = new Phaser.Geom.Point();
        }
        if (value && value.length > 1) {
            this._originWalkPoint.x = value[0];
            this._originWalkPoint.y = value[1];
        }
    };
    Sprite.prototype.getInteracviveArea = function () {
        if (!this.mDisplayInfo || !this.mCurrentAnimation) {
            return;
        }
        var animationName = this.mCurrentAnimation.animationName;
        return this.mDisplayInfo.getInteractiveArea(animationName);
    };
    Sprite.prototype.setAnimationData = function (animationName, direction) {
        if (!this.displayInfo) {
            return;
        }
        var baseAniName = animationName.split("_")[0];
        if (this.mRegisterAnimation) {
            if (this.mRegisterAnimation.has(baseAniName)) {
                baseAniName = this.mRegisterAnimation.get(baseAniName);
            }
        }
        this.mCurrentAnimation = this.displayInfo.findAnimation(baseAniName, direction);
        if (this.mAnimationQueue && this.mAnimationQueue.length > 0)
            this.mCurrentAnimation.playingQueue = this.mAnimationQueue[0];
        if (this.mCurrentCollisionArea) {
            this.setArea();
        }
        return this.mCurrentAnimation;
        // Logger.getInstance().log("play animation name: ", this.mCurrentAnimation.animationName, this.mCurrentAnimation.flip, this.mDirection);
        // if (animationName !== this.mCurrentAnimation.animationName) {
        //     Logger.getInstance().error(`${Sprite.name}: play animationName: ${this.mCurrentAnimation.animationName}, recieve: ${this.mCurrentAnimationName}, direction: ${direction}`);
        // }
    };
    Sprite.prototype.checkDirectionAnimation = function (baseAniName, dir) {
        var aniName = baseAniName + "_" + dir;
        if (this.mDisplayInfo.existAnimation(aniName)) {
            return aniName;
        }
        return null;
    };
    Sprite.prototype.setArea = function () {
        this.mCurrentCollisionArea = this.getCollisionArea();
        this.mCurrentWalkableArea = this.getWalkableArea();
        this.mCurrentCollisionPoint = this.getOriginPoint();
    };
    Sprite.prototype.getCollisionArea = function () {
        if (!this.mDisplayInfo || !this.mCurrentAnimation) {
            return;
        }
        var _a = this.mCurrentAnimation, animationName = _a.animationName, flip = _a.flip;
        return this.mDisplayInfo.getCollisionArea(animationName, flip);
    };
    Sprite.prototype.getWalkableArea = function () {
        if (!this.mDisplayInfo || !this.mCurrentAnimation) {
            return;
        }
        var _a = this.mCurrentAnimation, animationName = _a.animationName, flip = _a.flip;
        return this.mDisplayInfo.getWalkableArea(animationName, flip);
    };
    Sprite.prototype.getOriginPoint = function () {
        if (!this.mDisplayInfo || !this.mCurrentAnimation) {
            return;
        }
        var _a = this.mCurrentAnimation, animationName = _a.animationName, flip = _a.flip;
        return this.mDisplayInfo.getOriginPoint(animationName, flip);
    };
    Sprite.prototype.dirable = function (aniName) {
        var baseAniName = aniName.split("_")[0];
        var dirs = [3, 5];
        if (this.checkDirectionAnimation(baseAniName, _element__WEBPACK_IMPORTED_MODULE_7__[/* Direction */ "a"].east_north)) {
            dirs.push(7, 1);
            // dirs = [1, 3, 5, 7];
        }
        return dirs;
    };
    Sprite.prototype.tryRegisterAnimation = function (anis) {
        if (!anis || anis.length < 1) {
            return;
        }
        this.mRegisterAnimation = new Map();
        for (var _i = 0, anis_1 = anis; _i < anis_1.length; _i++) {
            var ani = anis_1[_i];
            this.mRegisterAnimation.set(ani.key, ani.value);
        }
    };
    return Sprite;
}());



/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return initLocales; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return i18n; });
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(437);
/* harmony import */ var i18next_xhr_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(425);
/* harmony import */ var i18next_browser_languagedetector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(426);



function initLocales(path) {
    return i18next__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]
        .use(i18next_xhr_backend__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])
        .use(i18next_browser_languagedetector__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])
        .init({
        fallbackLng: "en",
        backend: {
            loadPath: path,
            crossDomain: true
        }
    });
}
var i18n = i18next__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"];


/***/ }),
/* 125 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseUI; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BaseUI = /** @class */ (function (_super) {
    __extends(BaseUI, _super);
    function BaseUI(scene, dpr, scale) {
        var _this = _super.call(this, scene) || this;
        /**
         * 是否静音
         */
        _this.silent = false;
        /**
         * 移动端像素密度
         */
        _this.dpr = 1;
        /**
         * 是否初始化
         */
        _this.mInitialized = false;
        _this.interactiveBoo = false;
        _this.mShow = false;
        _this.scene = scene;
        _this.dpr = dpr || 1;
        _this.scale = scale || 1;
        _this.soundMap = new Map();
        _this.disInteractive();
        return _this;
    }
    BaseUI.prototype.setFollow = function (gameObject, froscene, posFunc) {
        this.mFollow = gameObject;
        this.mFroscene = froscene;
        if (posFunc)
            this.posFunc = posFunc;
    };
    BaseUI.prototype.updatePos = function () {
        if (!this.mShow)
            return;
        if (this.posFunc) {
            this.posFunc({
                scene: this.mFroscene,
                followX: this.mFollow.x,
                followY: this.mFollow.y,
                baseX: this.x,
                baseY: this.y
            });
        }
        else {
            var camera = this.mFroscene.cameras.main;
            var px = this.x - camera.scrollX;
            var py = this.y - camera.scrollY;
            this.x = px;
            this.y = py;
        }
    };
    BaseUI.prototype.setInteractive = function (shape, callback, dropZone) {
        this.interactiveBoo = true;
        _super.prototype.setInteractive.call(this, shape, callback, dropZone);
        return this;
    };
    BaseUI.prototype.disInteractive = function () {
        this.interactiveBoo = false;
        _super.prototype.disableInteractive.call(this);
    };
    BaseUI.prototype.addListen = function () {
        // if (!this.mInitialized) return;
        // let sizeBoo: boolean = true;
        // if (this.width === 0 || this.height === 0) {
        //     sizeBoo = false;
        // }
        // if (this.interactiveBoo) {
        //     if (sizeBoo) {
        //         this.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.width, this.height), Phaser.Geom.Rectangle.Contains);
        //         this.on("pointerup", this.uiClick, this);
        //     }
        //     this.scene.input.off("pointerup", this.sceneClick, this);
        // } else {
        //     if (sizeBoo) {
        //         this.disableInteractive();
        //         this.off("pointerup", this.uiClick, this);
        //     }
        //     this.scene.input.on("pointerup", this.sceneClick, this);
        // }
    };
    BaseUI.prototype.removeListen = function () {
        // if (!this.mInitialized) return;
        // this.scene.input.off("pointerup", this.sceneClick, this);
        // this.off("pointerup", this.uiClick, this);
    };
    BaseUI.prototype.playSound = function (config) {
        if (this.silent)
            return;
        // if (config.key === undefined) {
        //     if (typeof config.urls === "string") {
        //         config.key = config.urls;
        //     } else {
        //         config.key = config.urls[0];
        //     }
        // }
        var key = config.key;
        // const urls = config.urls;
        if (this.scene.cache.audio.exists(key)) {
            this.startPlay(config);
        }
        else {
            // this.scene.load.once(`filecomplete-audio-${key}`, () => {
            //     this.startPlay(config);
            // }, this);
            // this.scene.load.audio(key, urls);
            // this.scene.load.start();
        }
    };
    BaseUI.prototype.startPlay = function (config) {
        if (this.silent)
            return;
        var key = config.key;
        var sound = this.soundMap.get(key);
        if (!sound) {
            sound = this.scene.sound.add(key, config.soundConfig);
            this.soundMap.set(key, sound);
        }
        if (sound.isPlaying) {
            return;
        }
        sound.play();
    };
    BaseUI.prototype.stopSound = function () {
        if (this.silent)
            return;
        this.soundMap.forEach(function (sound) {
            if (sound.isPlaying)
                sound.stop();
        });
    };
    BaseUI.prototype.pauseSound = function () {
        if (this.silent)
            return;
        this.soundMap.forEach(function (sound) {
            if (!sound.isPaused)
                sound.pause();
        });
    };
    BaseUI.prototype.resumeSound = function () {
        if (this.silent)
            return;
        this.soundMap.forEach(function (sound) {
            if (sound.isPaused)
                sound.resume();
        });
    };
    BaseUI.prototype.setSilent = function (boo) {
        this.silent = boo;
    };
    BaseUI.prototype.destroy = function () {
        this.soundMap.forEach(function (sound) {
            if (sound.isPlaying)
                sound.stop();
        });
        this.mInitialized = false;
        this.interactiveBoo = false;
        this.silent = false;
        this.removeListen();
        _super.prototype.destroy.call(this);
    };
    // protected sceneClick(pointer: Phaser.Input.Pointer) {
    //     if (Tool.checkPointerContains(this, pointer) && this.checkPointerDelection(pointer)) {
    //         this.emit("uiClick");
    //     }
    // }
    // protected uiClick(pointer: Phaser.Input.Pointer) {
    //     if (this.checkPointerDelection(pointer)) {
    //         this.emit("uiClick");
    //     }
    // }
    BaseUI.prototype.checkPointerDelection = function (pointer) {
        if (!this.scene)
            return true;
        return Math.abs(pointer.downX - pointer.upX) < 10 * this.dpr * this.scale ||
            Math.abs(pointer.downY - pointer.upY) < 10 * this.dpr * this.scale;
    };
    return BaseUI;
}(Phaser.GameObjects.Container));



/***/ }),
/* 126 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/basesizer/BaseSizer.js + 31 modules
var BaseSizer = __webpack_require__(187);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/GetDisplaySize.js
var GetDisplaySize = __webpack_require__(112);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/GetChildrenWidth.js


var GetChildrenWidth = function (minimumMode) {
    if (this.rexSizer.hidden) {
        return 0;
    }

    if (minimumMode === undefined) {
        minimumMode = true;
    }

    var result = 0;
    var children = this.sizerChildren;
    var child, padding, childWidth;
    if (this.orientation === 0) { // x
        // Get summation of minimum width
        for (var i = 0, cnt = children.length; i < cnt; i++) {
            child = children[i];
            if (child.rexSizer.hidden) {
                continue;
            }

            if (
                (child.rexSizer.proportion === 0) ||
                (minimumMode && (!child.isRexSpace) && (child.rexSizer.proportion > 0))
            ) {
                childWidth = (child.isRexSizer) ?
                    Math.max(child.minWidth, child.childrenWidth) :
                    Object(GetDisplaySize["b" /* GetDisplayWidth */])(child);
            } else {
                childWidth = 0;
            }
            padding = child.rexSizer.padding;
            childWidth += (padding.left + padding.right);
            result += childWidth;
        }
    } else {
        // Get maximun width
        for (var i = 0, cnt = children.length; i < cnt; i++) {
            child = children[i];
            if (!child.hasOwnProperty('rexSizer')) {
                continue;
            }
            if (child.rexSizer.hidden) {
                continue;
            }

            childWidth = (child.isRexSizer) ?
                Math.max(child.minWidth, child.childrenWidth) :
                Object(GetDisplaySize["b" /* GetDisplayWidth */])(child);

            padding = child.rexSizer.padding;
            childWidth += (padding.left + padding.right);
            result = Math.max(childWidth, result);
        }
    }
    return result;
}

/* harmony default export */ var sizer_GetChildrenWidth = (GetChildrenWidth);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/GetChildrenHeight.js


var GetChildrenHeight = function (minimumMode) {
    if (this.rexSizer.hidden) {
        return 0;
    }

    if (minimumMode === undefined) {
        minimumMode = true;
    }

    var result = 0;
    var children = this.sizerChildren;
    var child, padding, childHeight;
    if (this.orientation === 0) { // x
        // Get maximun height
        for (var i = 0, cnt = children.length; i < cnt; i++) {
            child = children[i];
            if (child.rexSizer.hidden) {
                continue;
            }

            childHeight = (child.isRexSizer) ?
                Math.max(child.minHeight, child.childrenHeight) :
                Object(GetDisplaySize["a" /* GetDisplayHeight */])(child);

            padding = child.rexSizer.padding;
            childHeight += (padding.top + padding.bottom);
            result = Math.max(childHeight, result);
        }
    } else {
        // Get summation of minimum height
        for (var i = 0, cnt = children.length; i < cnt; i++) {
            child = children[i];
            if (!child.hasOwnProperty('rexSizer')) {
                continue;
            }
            if (child.rexSizer.hidden) {
                continue;
            }

            if (
                (child.rexSizer.proportion === 0) ||
                (minimumMode && (!child.isRexSpace) && (child.rexSizer.proportion > 0))
            ) {
                childHeight = (child.isRexSizer) ?
                    Math.max(child.minHeight, child.childrenHeight) :
                    Object(GetDisplaySize["a" /* GetDisplayHeight */])(child);
            } else {
                childHeight = 0;
            }
            padding = child.rexSizer.padding;
            childHeight += (padding.top + padding.bottom);
            result += childHeight;
        }
    }
    return result;
}

/* harmony default export */ var sizer_GetChildrenHeight = (GetChildrenHeight);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/GetChildrenProportion.js
var GetChildrenProportion = function () {
    var result = 0;
    var children = this.sizerChildren;
    var child, proportion;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
        child = children[i];
        if (child.rexSizer.hidden) {
            continue;
        }
        proportion = child.rexSizer.proportion;
        if (proportion > 0) {
            result += proportion;
        }
    }
    return result;
}
/* harmony default export */ var sizer_GetChildrenProportion = (GetChildrenProportion);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/GetChildrenSizers.js
var GetChildrenSizers = function(out) {
    if (out === undefined) {
        out = [];
    }
    var children = this.sizerChildren,
        child;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
        child = children[i];
        if (child.isRexSizer) {
            out.push(child);
        }
    }
    return out;
}
/* harmony default export */ var sizer_GetChildrenSizers = (GetChildrenSizers);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/GetExpandedChildWidth.js
var GetExpandedChildWidth = function (parent, child) {
    var newWidth;
    var childConfig = child.rexSizer;
    var padding = childConfig.padding;
    if (parent.orientation === 0) { // x
        if ((childConfig.proportion > 0) && (parent.proportionLength > 0)) {
            newWidth = (childConfig.proportion * parent.proportionLength);
        }
    } else { // y
        if (childConfig.expand) {
            newWidth = parent.width - padding.left - padding.right;
        }
    }
    return newWidth;
}

/* harmony default export */ var sizer_GetExpandedChildWidth = (GetExpandedChildWidth);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/GetExpandedChildHeight.js
var GetExpandedChildHeight = function (parent, child) {
    var newHeight;
    var childConfig = child.rexSizer;
    var padding = childConfig.padding;
    if (parent.orientation === 0) { // x
        if (childConfig.expand) {
            newHeight = parent.height - padding.top - padding.bottom;
        }
    } else { // y
        if ((childConfig.proportion > 0) && (parent.proportionLength > 0)) {
            newHeight = (childConfig.proportion * parent.proportionLength);
        }
    }
    return newHeight;
}

/* harmony default export */ var sizer_GetExpandedChildHeight = (GetExpandedChildHeight);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/ResizeGameObject.js
var ResizeGameObject = __webpack_require__(130);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/actions/GlobZone.js
var GlobZone = __webpack_require__(150);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/QuickSet.js + 23 modules
var QuickSet = __webpack_require__(135);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/Layout.js







var Layout = function (parent, newWidth, newHeight) {
    // Skip invisible sizer
    if (this.rexSizer.hidden) {
        return this;
    }

    this.preLayout(parent);

    // Set size
    if (newWidth === undefined) {
        newWidth = Math.max(this.childrenWidth, this.minWidth);
    }
    if (newHeight === undefined) {
        newHeight = Math.max(this.childrenHeight, this.minHeight);
    }
    this.resize(newWidth, newHeight);

    var proportionLength;
    if (this.childrenProportion > 0) {
        var remainder = (this.orientation === 0) ?
            (this.width - this.childrenWidth) :
            (this.height - this.childrenHeight);

        if (remainder > 0) {
            remainder = (this.orientation === 0) ?
                (this.width - this.getChildrenWidth(false)) :
                (this.height - this.getChildrenHeight(false));
            proportionLength = remainder / this.childrenProportion;
        } else {
            proportionLength = 0;
        }
    } else {
        proportionLength = 0;
    }
    this.proportionLength = proportionLength;

    // Layout children    
    var children = this.sizerChildren;
    var child, childConfig, padding;
    var startX = this.left,
        startY = this.top;
    var itemX = startX,
        itemY = startY;
    var x, y, width, height; // Align zone
    var childWidth, childHeight;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
        child = children[i];
        if (child.rexSizer.hidden) {
            continue;
        }

        childConfig = child.rexSizer;
        padding = childConfig.padding;

        // Set size
        childWidth = sizer_GetExpandedChildWidth(this, child);
        childHeight = sizer_GetExpandedChildHeight(this, child);
        if (child.isRexSizer) {
            child.layout(this, childWidth, childHeight);
        } else {
            Object(ResizeGameObject["a" /* default */])(child, childWidth, childHeight);
        }

        if (childWidth === undefined) {
            childWidth = Object(GetDisplaySize["b" /* GetDisplayWidth */])(child);
        }
        if (childHeight === undefined) {
            childHeight = Object(GetDisplaySize["a" /* GetDisplayHeight */])(child);
        }

        // Set position
        if (this.orientation === 0) { // x
            x = (itemX + padding.left);
            if ((childConfig.proportion === 0) || (proportionLength === 0)) {
                width = childWidth;
            } else {
                width = (childConfig.proportion * proportionLength);
            }

            y = (itemY + padding.top);
            height = (this.height - padding.top - padding.bottom);
        } else { // y
            x = (itemX + padding.left);
            width = (this.width - padding.left - padding.right);

            y = (itemY + padding.top);
            if ((childConfig.proportion === 0) || (proportionLength === 0)) {
                height = childHeight;
            } else {
                height = (childConfig.proportion * proportionLength);
            }
        }

        GlobZone["a" /* default */].setPosition(x, y).setSize(width, height);
        Object(QuickSet["a" /* default */])(child, GlobZone["a" /* default */], childConfig.align);
        this.resetChildPositionState(child);

        if (this.orientation === 0) { // x
            itemX += (width + padding.left + padding.right);
        } else { // y
            itemY += (height + padding.top + padding.bottom);
        }
    }

    // Layout background children
    this.layoutBackgrounds();

    return this.postLayout();
}

/* harmony default export */ var sizer_Layout = (Layout);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/_layoutInit.js
var LayoutInitChild = function () {
    this._childrenWidth = undefined;
    this._childrenHeight = undefined;
    this._childrenProportion = undefined;
}
/* harmony default export */ var _layoutInit = (LayoutInitChild);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/Methods.js







/* harmony default export */ var Methods = ({
    getChildrenWidth: sizer_GetChildrenWidth,
    getChildrenHeight: sizer_GetChildrenHeight,
    getChildrenProportion: sizer_GetChildrenProportion,
    getChildrenSizers: sizer_GetChildrenSizers,
    layout: sizer_Layout,
    _layoutInit: _layoutInit,
});
// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetBoundsConfig.js
var GetBoundsConfig = __webpack_require__(216);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/utils/OrientationConst.js
/* harmony default export */ var OrientationConst = ({
    x: 0,
    h: 0,
    horizontal: 0,
    'left-to-right': 0,
    y: 1,
    v: 1,
    vertical: 1,
    'top-to-bottom': 1
});
// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/AlignConst.js
var AlignConst = __webpack_require__(214);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/utils/Space.js
var Space = function (scene) {
    var gameObject = scene.add.zone(0, 0, 1, 1);
    gameObject.isRexSpace = true;
    return gameObject;
}
/* harmony default export */ var utils_Space = (Space);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/Sizer.js







const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const RemoveItem = Phaser.Utils.Array.Remove;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;

class Sizer_Sizer extends BaseSizer["a" /* default */] {
    constructor(scene, x, y, minWidth, minHeight, orientation, config) {
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, 'x', 0);
            y = GetValue(config, 'y', 0);
            minWidth = GetValue(config, 'width', undefined);
            minHeight = GetValue(config, 'height', undefined);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = GetValue(config, 'width', undefined);
            minHeight = GetValue(config, 'height', undefined);
        } else if (IsPlainObject(orientation)) {
            config = orientation;
        }

        if (config !== undefined) {
            orientation = GetValue(config, 'orientation', 0);
        }
        if (orientation === undefined) {
            orientation = 0;
        }
        super(scene, x, y, minWidth, minHeight, config);

        this.type = 'rexSizer';
        this.sizerChildren = [];
        this.setOrientation(orientation);
    }

    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene) {
            return;
        }
        this.sizerChildren.length = 0;
        super.destroy(fromScene);
    }

    setOrientation(orientation) {
        if (typeof (orientation) === 'string') {
            orientation = OrientationConst[orientation];
        }
        this.orientation = orientation;
        return this;
    }

    add(gameObject, proportion, align, paddingConfig, expand, childKey) {
        super.add(gameObject);

        var proportionType = typeof (proportion);
        if (proportion === null) {
            return this;
        } else if (proportionType === 'number') {

        } else if (proportionType === 'string') {
            proportion = PROPORTIONMODE[proportion];
        } else if (IsPlainObject(proportion)) {
            var config = proportion;
            proportion = GetValue(config, 'proportion', 0);
            align = GetValue(config, 'align', ALIGN_CENTER);
            paddingConfig = GetValue(config, 'padding', 0);
            expand = GetValue(config, 'expand', false);
            childKey = GetValue(config, 'key', undefined);
        }

        if (typeof (align) === 'string') {
            align = AlignConst["a" /* default */][align];
        }

        if (proportion === undefined) {
            proportion = 0;
        }
        if (align === undefined) {
            align = ALIGN_CENTER;
        }
        if (paddingConfig === undefined) {
            paddingConfig = 0;
        }
        if (expand === undefined) {
            expand = false;
        }

        var config = this.getSizerConfig(gameObject);
        config.parent = this;
        config.proportion = proportion;
        config.align = align;
        config.padding = Object(GetBoundsConfig["a" /* default */])(paddingConfig);
        config.expand = expand;
        this.sizerChildren.push(gameObject);

        if (childKey !== undefined) {
            this.addChildrenMap(childKey, gameObject)
        }
        return this;
    }

    addSpace(proportion) {
        if (proportion === undefined) {
            proportion = 1;
        }
        this.add(utils_Space(this.scene), proportion);
        return this;
    }

    insert(index, gameObject, proportion, align, paddingConfig, expand) {
        this.add(gameObject, proportion, align, paddingConfig, expand);
        this.moveTo(gameObject, index);
        return this;
    }

    remove(gameObject) {
        var config = this.getSizerConfig(gameObject);
        if (config.parent !== this) {
            return this;
        }
        config.parent = undefined;
        RemoveItem(this.sizerChildren, gameObject);
        super.remove(gameObject);
        return this;
    }

    clear(destroyChild) {
        for (var i = 0, cnt = this.sizerChildren.length; i < cnt; i++) {
            this.getSizerConfig(this.sizerChildren[i]).parent = undefined;
        }
        this.sizerChildren.length = 0;
        super.clear(destroyChild);
        return this;
    }

    get childrenProportion() {
        if (this._childrenProportion === undefined) {
            this._childrenProportion = this.getChildrenProportion();
        }
        return this._childrenProportion;
    }
}

Object.assign(
    Sizer_Sizer.prototype,
    Methods
);

const PROPORTIONMODE = {
    min: 0,
    full: -1,
}
/* harmony default export */ var sizer_Sizer = __webpack_exports__["a"] = (Sizer_Sizer);

/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/scrollable/Scrollable.js + 4 modules
var Scrollable = __webpack_require__(320);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/textblock/TextBlock.js + 11 modules
var TextBlock = __webpack_require__(188);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/textarea/InjectProperties.js
var InjectProperties = function(textBlock) {
    Object.defineProperty(textBlock, 'childOY', {
        configurable: true,
        get: function () {
            return textBlock.textOY;
        },
        set: function (value) {
            textBlock.textOY = value;
        }
    });
    Object.defineProperty(textBlock, 'topChildOY', {
        get: function () {
            return textBlock.topTextOY;
        }
    });
    Object.defineProperty(textBlock, 'bottomChildOY', {
        get: function () {
            return textBlock.bottomTextOY;
        }
    });
};
/* harmony default export */ var textarea_InjectProperties = (InjectProperties);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textarea/SetText.js
var SetText = function (text) {
    var textBlock = this.childrenMap.child;
    textBlock.setText(text);

    this.resizeController();
    return this;
}
/* harmony default export */ var textarea_SetText = (SetText);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textarea/AppendText.js
var AppendText = function (text) {
    this.setText(this.text + text);
    return this;
}
/* harmony default export */ var textarea_AppendText = (AppendText);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textarea/TextArea.js






const GetValue = Phaser.Utils.Objects.GetValue;

class TextArea_TextArea extends Scrollable["a" /* default */] {
    constructor(scene, config) {
        if (config === undefined) {
            config = {};
        }

        // Create text-block
        var textObject = GetValue(config, 'text', undefined);
        var textWidth = GetValue(config, 'textWidth', undefined);
        var textHeight = GetValue(config, 'textHeight', undefined);
        var textMask = GetValue(config, 'textMask', true);
        var content = GetValue(config, 'content', '');
        var textBlock = new TextBlock["a" /* default */](scene, {
            width: textWidth,
            height: textHeight,
            text: textObject,
            textMask: textMask,
            content: content,
            clamplTextOY: GetValue(config, 'clamplChildOY', false),
        });
        var proportion = (textWidth === undefined) ? 1 : 0;
        var expand = (textHeight === undefined);
        // Inject properties for scrollable interface
        textarea_InjectProperties(textBlock);

        // Fill config of scrollable
        config.scrollMode = 0; // Vertical
        config.type = 'rexTextArea';
        config.child = {
            gameObject: textBlock,
            proportion: proportion,
            expand: expand,
        };
        var spaceConfig = GetValue(config, 'space', undefined);
        if (spaceConfig) {
            spaceConfig.child = spaceConfig.text;
        }
        super(scene, config);

        this.addChildrenMap('text', textObject);
    }

    get text() {
        return this.childrenMap.child.text;
    }

    get linesCount() {
        return this.childrenMap.child.linesCount;
    }
}

var methods = {
    setText: textarea_SetText,
    appendText: textarea_AppendText,
}
Object.assign(
    TextArea_TextArea.prototype,
    methods
);

/* harmony default export */ var textarea_TextArea = __webpack_exports__["a"] = (TextArea_TextArea);

/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BasicScene; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var BasicScene = /** @class */ (function (_super) {
    __extends(BasicScene, _super);
    function BasicScene(config) {
        return _super.call(this, config) || this;
    }
    BasicScene.prototype.setViewPort = function (x, y, width, height) {
        this.cameras.main.setViewport(x, y, width, height);
    };
    return BasicScene;
}(Phaser.Scene));



/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
    setEventEmitter(eventEmitter, EventEmitterClass) {
        if (EventEmitterClass === undefined) {
            EventEmitterClass = Phaser.Events.EventEmitter; // Use built-in EventEmitter class by default
        }
        this._privateEE = (eventEmitter === undefined);
        this._eventEmitter = (this._privateEE) ? (new EventEmitterClass()) : eventEmitter;
        return this;
    },

    destroyEventEmitter() {
        if (this._eventEmitter && this._privateEE) {
            this._eventEmitter.shutdown();
        }
        return this;
    },

    getEventEmitter() {
        return this._eventEmitter;
    },

    on: function () {
        if (this._eventEmitter) {
            this._eventEmitter.on.apply(this._eventEmitter, arguments);
        }
        return this;
    },

    once: function () {
        if (this._eventEmitter) {
            this._eventEmitter.once.apply(this._eventEmitter, arguments);
        }
        return this;
    },

    off: function () {
        if (this._eventEmitter) {
            this._eventEmitter.off.apply(this._eventEmitter, arguments);
        }
        return this;
    },

    emit: function (event) {
        if (this._eventEmitter && event) {
            this._eventEmitter.emit.apply(this._eventEmitter, arguments);
        }
        return this;
    },

    addListener: function () {
        if (this._eventEmitter) {
            this._eventEmitter.addListener.apply(this._eventEmitter, arguments);
        }
        return this;
    },

    removeListener: function () {
        if (this._eventEmitter) {
            this._eventEmitter.removeListener.apply(this._eventEmitter, arguments);
        }
        return this;
    },

    removeAllListeners: function () {
        if (this._eventEmitter) {
            this._eventEmitter.removeAllListeners.apply(this._eventEmitter, arguments);
        }
        return this;
    },

    listenerCount: function () {
        if (this._eventEmitter) {
            return this._eventEmitter.listenerCount.apply(this._eventEmitter, arguments);
        }
        return 0;
    },

    listeners: function () {
        if (this._eventEmitter) {
            return this._eventEmitter.listeners.apply(this._eventEmitter, arguments);
        }
        return [];
    }
});

/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var ResizeGameObject = function (gameObject, newWidth, newHeight) {
    if (!gameObject || ((newWidth === undefined) && (newHeight === undefined))) {
        return;
    }
    if (gameObject.resize) { // Has `resize` method
        if (newWidth === undefined) {
            newWidth = gameObject.width;
        }
        if (newHeight === undefined) {
            newHeight = gameObject.height;
        }
        gameObject.resize(newWidth, newHeight);
    } else { // Set display width/height
        if (newWidth !== undefined) {
            gameObject.displayWidth = newWidth;
        }
        if (newHeight !== undefined) {
            gameObject.displayHeight = newHeight;
        }
    }
}

/* harmony default export */ __webpack_exports__["a"] = (ResizeGameObject);

/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragType", function() { return DragType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropType", function() { return DropType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BagMediator", function() { return BagMediator; });
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(109);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var _bagPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(226);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(118);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var DragType;
(function (DragType) {
    DragType[DragType["DRAG_TYPE_SHORTCUT"] = 1] = "DRAG_TYPE_SHORTCUT";
    DragType[DragType["DRAG_TYPE_BAG"] = 2] = "DRAG_TYPE_BAG";
})(DragType || (DragType = {}));
var DropType;
(function (DropType) {
    DropType[DropType["DROP_TYPE_SHORTCUT"] = 1] = "DROP_TYPE_SHORTCUT";
    DropType[DropType["DROP_TYPE_BAG"] = 2] = "DROP_TYPE_BAG";
})(DropType || (DropType = {}));
var BagMediator = /** @class */ (function (_super) {
    __extends(BagMediator, _super);
    function BagMediator(layerManager, mworld, scene) {
        var _this = _super.call(this) || this;
        _this.mPageNum = 0;
        _this.mLayerManager = layerManager;
        _this.world = mworld;
        _this.mScene = scene;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__[/* UIType */ "a"].Normal;
        return _this;
    }
    BagMediator.prototype.resize = function (width, height) {
        if (this.mView)
            this.mView.resize(width, height);
    };
    BagMediator.prototype.isSceneUI = function () {
        return false;
    };
    BagMediator.prototype.isShow = function () {
        if (this.mView)
            return this.mView.isShow();
    };
    BagMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        if (!this.mView) {
            this.mView = new _bagPanel__WEBPACK_IMPORTED_MODULE_2__["BagPanel"](this.mScene, this.world);
        }
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].SCENE_SYNCHRO_PACKAGE, this.handleSynchroPackage, this);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].UPDATED_CHARACTER_PACKAGE, this.onUpdatePackageHandler, this);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].QUERY_PACKAGE, this.handleSynchroPackage, this);
        this.mScene.input.on("gameobjectdown", this.onBtnHandler, this);
        if (param) {
            this.world.roomManager.currentRoom.playerManager.actor.getBag().requestVirtualWorldQueryPackage(param[0].id, 1, _bagPanel__WEBPACK_IMPORTED_MODULE_2__["BagPanel"].PageMaxCount);
        }
        else {
            this.world.roomManager.currentRoom.playerManager.actor.getBag().requestVirtualWorldQueryPackage(this.world.roomManager.currentRoom.playerManager.actor.package.id, 1, _bagPanel__WEBPACK_IMPORTED_MODULE_2__["BagPanel"].PageMaxCount);
        }
        this.mView.show(param);
        this.mLayerManager.addToUILayer(this.mView);
        this.world.uiManager.checkUIState(BagMediator.NAME, false);
        this.refrehView();
        _super.prototype.show.call(this, param);
    };
    BagMediator.prototype.update = function (param) {
        if (!this.mView)
            return;
        this.mView.update(param);
    };
    BagMediator.prototype.hide = function () {
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].DRAG_TO_DROP, this.handleDrop, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].SCENE_SYNCHRO_PACKAGE, this.handleSynchroPackage, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].UPDATED_CHARACTER_PACKAGE, this.onUpdatePackageHandler, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].QUERY_PACKAGE, this.handleSynchroPackage, this);
        this.mScene.input.off("gameobjectdown", this.onBtnHandler, this);
        if (!this.mView)
            return;
        this.mView.hide();
        this.mView = null;
        this.world.uiManager.checkUIState(BagMediator.NAME, true);
    };
    BagMediator.prototype.destroy = function () {
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].DRAG_TO_DROP, this.handleDrop, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].SCENE_SYNCHRO_PACKAGE, this.handleSynchroPackage, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].UPDATED_CHARACTER_PACKAGE, this.onUpdatePackageHandler, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].QUERY_PACKAGE, this.handleSynchroPackage, this);
        this.mScene.input.off("gameobjectdown", this.onBtnHandler, this);
        if (this.mView) {
            this.mView.destroy();
            this.mView = null;
        }
        this.mPageNum = 0;
        this.mScene = null;
        this.world = null;
    };
    BagMediator.prototype.handleDrop = function (value) {
        var drag = value[0];
        var drop = value[1];
        if (drop.getDropType() === DropType.DROP_TYPE_BAG && drag.getDragType() === DragType.DRAG_TYPE_SHORTCUT) {
            _utils_log__WEBPACK_IMPORTED_MODULE_1__[/* Logger */ "a"].getInstance().debug("背包拖到快捷栏了！！！");
        }
    };
    BagMediator.prototype.refrehView = function (mItems) {
        var items;
        if (!mItems) {
            var packs = this.world.roomManager.currentRoom.playerManager.actor.package;
            if (packs == null) {
                return;
            }
            items = packs.items;
        }
        else {
            items = mItems;
        }
        this.setListData(items);
    };
    BagMediator.prototype.onBtnHandler = function (pointer, gameobject) {
        if (gameobject instanceof _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])
            return;
        if (this.mView)
            this.mView.setBlur();
    };
    BagMediator.prototype.setListData = function (value) {
        this.mView.setDataList();
    };
    BagMediator.prototype.handleSynchroPackage = function () {
        var itemList = this.world.roomManager.currentRoom.playerManager.actor.package.items;
        this.refrehView(itemList);
    };
    BagMediator.prototype.onUpdatePackageHandler = function () {
        var itemList = this.world.roomManager.currentRoom.playerManager.actor.package.items;
        this.refrehView(itemList);
    };
    BagMediator.NAME = "BagMediator";
    return BagMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__[/* BaseMediator */ "a"]));



/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemSlot", function() { return ItemSlot; });
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _dragDropIcon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(154);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);
/* harmony import */ var _tips_toolTip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(171);





var ItemSlot = /** @class */ (function () {
    function ItemSlot(scene, world, parentCon, x, y, resStr, respng, resjson, resSlot, selectRes, subscriptRes) {
        this.minitialize = false;
        this.mWid = 0;
        this.mHei = 0;
        this.isTipBoo = true;
        this.mScene = scene;
        this.mWorld = world;
        this.toolTipCon = scene.make.container(undefined, false); // new ToolTipContainer(this.mScene, world);
        this.toolTipCon.x = x;
        this.toolTipCon.y = y;
        parentCon.add(this.toolTipCon);
        this.mResStr = resStr;
        this.mResPng = respng;
        this.mResJson = resjson;
        this.mResSlot = resSlot;
        this.mSubScriptRes = subscriptRes;
        this.mSelectRes = selectRes;
    }
    Object.defineProperty(ItemSlot.prototype, "hasTip", {
        get: function () {
            return this.isTipBoo;
        },
        set: function (value) {
            this.isTipBoo = value;
        },
        enumerable: false,
        configurable: true
    });
    ItemSlot.prototype.createUI = function () {
        this.onLoadCompleteHandler();
    };
    ItemSlot.prototype.getView = function () {
        return this.toolTipCon;
    };
    ItemSlot.prototype.getBg = function () {
        return this.itemBG;
    };
    ItemSlot.prototype.getIcon = function () {
        return this.mIcon;
    };
    ItemSlot.prototype.dataChange = function (val) {
        var _this = this;
        if (!this.minitialize)
            return;
        this.mData = val;
        if (this.mIcon) {
            var url = void 0;
            if (this.mData && this.mData.display) {
                url = this.mData.display.texturePath;
                var des = this.mData.des ? "\n" + this.mData.des : "";
                this.setToolTipData(this.mData.name + this.mData.des);
            }
            else {
                this.mIcon.icon.visible = false;
            }
            if (!url)
                return;
            if (this.mScene.textures.exists(_utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getOsdRes(url))) {
                if (this.mData) {
                    this.mIcon.icon.setTexture(_utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getOsdRes(url));
                    this.mIcon.icon.visible = true;
                }
            }
            else {
                this.mIcon.load(url, this, function () {
                    if (_this.mData) {
                        _this.mIcon.icon.visible = true;
                    }
                });
            }
        }
        else {
            this.mIcon.icon.visible = false;
        }
    };
    ItemSlot.prototype.destroy = function () {
        if (this.mSubScriptSprite) {
            this.mSubScriptSprite.destroy(true);
            this.mSubScriptSprite = null;
        }
        if (this.mSelectSprite) {
            this.mSelectSprite.destroy(true);
            this.mSelectSprite = null;
        }
        if (this.mIcon) {
            this.mIcon.destroy();
        }
        if (this.toolTipCon) {
            this.toolTipCon.destroy();
            this.toolTipCon = null;
        }
        if (this.toolTip) {
            this.toolTip.destroy();
            this.toolTip = null;
        }
        if (this.mAnimationCon) {
            this.mAnimationCon.destroy(true);
            this.mAnimationCon = null;
        }
        if (this.itemBG) {
            this.itemBG.destroy(true);
            this.itemBG = null;
        }
        this.index = 0;
        this.mData = null;
        this.mScene = null;
        this.mWorld = null;
        this.mResStr = null;
        this.mResPng = null;
        this.mResSlot = null;
        this.mResJson = null;
        this.mSubScriptRes = null;
        this.mSelectRes = null;
        this.mWorld = null;
        this.minitialize = false;
        this.mWid = 0;
        this.mHei = 0;
        this.mData = null;
        this.isTipBoo = true;
    };
    ItemSlot.prototype.setToolTipData = function (text) {
        if (this.toolTip) {
            this.toolTip.setToolTipData(text);
        }
    };
    ItemSlot.prototype.onLoadCompleteHandler = function () {
        this.itemBG = this.mScene.make.sprite(undefined, false);
        this.itemBG.setTexture(this.mResStr, this.mResSlot);
        this.toolTipCon.addAt(this.itemBG, 0);
        this.toolTipCon.setSize(this.itemBG.width, this.itemBG.height);
        this.mIcon = new _dragDropIcon__WEBPACK_IMPORTED_MODULE_1__["DragDropIcon"](this.mScene, 0, 0);
        this.toolTipCon.addAt(this.mIcon, 1);
        if (this.mSubScriptRes) {
            this.mSubScriptSprite = this.mScene.make.sprite(undefined, false);
            this.mSubScriptSprite.setTexture(this.mResStr, this.mSubScriptRes);
            this.mSubScriptSprite.x = this.mSubScriptSprite.width - this.itemBG.width >> 1;
            this.mSubScriptSprite.y = this.mSubScriptSprite.height - this.itemBG.height >> 1;
            // this.con.addAt(this.mSubScriptSprite, 2);
        }
        if (this.isTipBoo) {
            this.toolTip = new _tips_toolTip__WEBPACK_IMPORTED_MODULE_4__["ToolTip"](this.mScene, "itemSlotTip", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/toolTip/toolTip.json"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/toolTip/toolTip.png"), this.mWorld.uiScale);
        }
        this.toolTipCon.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.itemBG.width, 56), Phaser.Geom.Rectangle.Contains);
        this.toolTipCon.on("pointerover", this.overHandler, this);
        this.toolTipCon.on("pointerout", this.outHandler, this);
        this.toolTipCon.on("pointerdown", this.downHandler, this);
        this.toolTipCon.on("pointerup", this.outHandler, this);
        this.minitialize = true;
        if (this.mData) {
            this.dataChange(this.mData);
        }
        this.mWid += this.itemBG.width;
        this.mHei += this.itemBG.height;
        // this.toolTipCon.setToolTip("itemSlotTip", Url.getRes("ui/toolTip/toolTip.json"), Url.getRes("ui/toolTip/toolTip.png"));
    };
    ItemSlot.prototype.downHandler = function (pointer) {
        if (!this.mData || !this.mWorld.roomManager.currentRoom.playerManager.actor || !this.mWorld.roomManager.currentRoom || !this.mWorld.roomManager.currentRoom.playerManager)
            return;
        // if (this.mWorld.game.device.os.desktop) {
        var pack = this.mWorld.roomManager.currentRoom.playerManager.actor.package;
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_TARGET_UI);
        var content = pkt.content;
        content.uiId = pack.id;
        content.componentId = this.mData.id;
        this.mWorld.connection.send(pkt);
        // } else {
        //     // this.overHandler(pointer);
        // }
    };
    ItemSlot.prototype.overHandler = function (pointer) {
        if (this.toolTip && this.mData) {
            this.mWorld.uiManager.getUILayerManager().addToToolTipsLayer(this.toolTip);
            this.toolTip.setToolTipData(this.mData.name + this.mData.des);
            this.toolTip.x = pointer.x;
            this.toolTip.y = pointer.y;
        }
        if (this.mSelectRes && this.mSelectRes.length > 0) {
            this.mSelectSprite = this.mScene.make.sprite(undefined, false);
            this.mSelectSprite.play(this.mSelectRes);
            this.toolTipCon.add(this.mSelectSprite);
        }
    };
    ItemSlot.prototype.outHandler = function (pointer) {
        if (this.toolTip) {
            if (this.toolTip.parentContainer) {
                this.toolTip.parentContainer.remove(this.toolTip);
            }
        }
        if (this.mSelectSprite && this.mSelectSprite.parentContainer) {
            this.mSelectSprite.parentContainer.remove(this.mSelectSprite);
            this.mSelectSprite.destroy(true);
            this.mSelectSprite = null;
        }
    };
    return ItemSlot;
}());



/***/ }),
/* 133 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseFaceMediator", function() { return BaseFaceMediator; });
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * 场景UImediator
 */
var BaseFaceMediator = /** @class */ (function (_super) {
    __extends(BaseFaceMediator, _super);
    function BaseFaceMediator(world, scene) {
        var _this = _super.call(this) || this;
        _this.mScene = scene;
        _this.world = world;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_1__[/* UIType */ "a"].Scene;
        return _this;
    }
    BaseFaceMediator.prototype.getView = function () {
        return this.mView;
    };
    BaseFaceMediator.prototype.isSceneUI = function () {
        return true;
    };
    BaseFaceMediator.prototype.isShow = function () {
        if (!this.mView)
            return false;
        return this.mView.isShow();
    };
    BaseFaceMediator.prototype.resize = function () {
        var size = this.world.getSize();
        var view = this.getView();
        if (this.mView && view.isShow()) {
            return this.mView.resize(size.width, size.height);
        }
    };
    BaseFaceMediator.prototype.hide = function () {
        this.mShow = false;
        if (this.mView)
            this.mView.hide();
    };
    BaseFaceMediator.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    return BaseFaceMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__[/* BaseMediator */ "a"]));



/***/ }),
/* 134 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GameGridTable; });
/* harmony import */ var _GridTable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(186);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var GetValue = Phaser.Utils.Objects.GetValue;
var GameGridTable = /** @class */ (function (_super) {
    __extends(GameGridTable, _super);
    function GameGridTable(scene, config) {
        var _this = _super.call(this) || this;
        _this.mGridTable = new _GridTable_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](scene, config);
        _this.mConfig = config;
        _this.addListen();
        return _this;
    }
    GameGridTable.prototype.adjustScrollMode = function (mode) {
        // // Pre-process cell size
        // this.mConfig.scrollMode = mode;
        // const tableCoreConfig: GridTableCoreConfig;
        // let cellWidth: number;
        // let cellHeight: number;
        // if (mode === 0) { // scroll y
        //     cellWidth = GetValue(tableCoreConfig, "cellWidth", undefined);
        //     this.expandCellSize = (cellWidth === undefined);
        //     if (cellWidth === undefined) {
        //         var columns = GetValue(tableCoreConfig, "columns", 1);
        //         this.mConfig.cellWidth = this.width / columns;
        //     }
        // } else { // scroll x
        //     // Swap cell width and cell height
        //     cellWidth = GetValue(tableCoreConfig, "cellHeight", undefined);
        //     cellHeight = GetValue(tableCoreConfig, 'cellWidth', undefined);
        //     this.expandCellSize = (cellWidth === undefined);
        //     config.cellWidth = cellWidth;
        //     config.cellHeight = cellHeight;
        // }
        // this.table = new Table(this, config);
    };
    /**
     * 调整gridtable遮照范围
     * @param width
     * @param height
     * @param x
     * @param y
     */
    GameGridTable.prototype.adjustMask = function (x, y, width, height) {
        if (x === void 0) { x = this.mConfig.x; }
        if (y === void 0) { y = this.mConfig.y; }
        if (!this.mGridTable)
            return;
        this.mGridTable.x = x;
        this.mGridTable.y = y;
        if (width !== this.mGridTable.width || height !== this.mGridTable.height) {
            this.mGridTable.resize(width, height);
        }
    };
    Object.defineProperty(GameGridTable.prototype, "gridTable", {
        get: function () {
            return this.mGridTable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GameGridTable.prototype, "childrenMap", {
        get: function () {
            if (this.mGridTable)
                return this.mGridTable.childrenMap;
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GameGridTable.prototype, "table", {
        get: function () {
            if (this.mGridTable)
                return this.mGridTable.getElement("table");
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Only worked when scrollMode is 0
     * @param hei
     */
    GameGridTable.prototype.adjustCellHeight = function (hei) {
        if (!this.mGridTable)
            return;
        var cells = this.mGridTable.getCells();
        for (var i = 0, len = cells.length; i < len; i++) {
            this.mGridTable.setCellHeight(i, hei);
        }
    };
    /**
     * Only worked when scrollMode is 1
     * @param wid
     */
    GameGridTable.prototype.adjusetCellWidth = function (wid) {
        if (!this.mGridTable)
            return;
        var cells = this.mGridTable.getCells();
        for (var i = 0, len = cells.length; i < len; i++) {
            this.mGridTable.setCellWidth(i, wid);
        }
    };
    Object.defineProperty(GameGridTable.prototype, "items", {
        get: function () {
            if (!this.mGridTable)
                return null;
            return this.mGridTable.items;
        },
        enumerable: false,
        configurable: true
    });
    GameGridTable.prototype.setItems = function (items) {
        if (this.mGridTable) {
            this.mGridTable.setItems(items);
            this.mGridTable.layout();
        }
    };
    GameGridTable.prototype.setColumnCount = function (cnt) {
        this.mGridTable.setColumnCount(cnt);
        return this;
    };
    GameGridTable.prototype.setT = function (value) {
        if (this.mGridTable)
            this.mGridTable.setT(value);
    };
    GameGridTable.prototype.addListen = function () {
        if (this.mGridTable) {
            this.mGridTable.on("cell.1tap", this.cellTapHandler, this);
        }
    };
    GameGridTable.prototype.removeListen = function () {
        if (this.mGridTable) {
            this.mGridTable.off("cell.1tap", this.cellTapHandler, this);
        }
    };
    Object.defineProperty(GameGridTable.prototype, "x", {
        get: function () {
            if (!this.mGridTable)
                return 0;
            return this.mGridTable.x;
        },
        set: function (value) {
            if (this.mGridTable)
                this.mGridTable.x = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GameGridTable.prototype, "y", {
        get: function () {
            if (!this.mGridTable)
                return 0;
            return this.mGridTable.y;
        },
        set: function (value) {
            if (this.mGridTable)
                this.mGridTable.y = value;
        },
        enumerable: false,
        configurable: true
    });
    GameGridTable.prototype.refresh = function () {
        if (this.mGridTable)
            this.mGridTable.refresh();
    };
    GameGridTable.prototype.layout = function () {
        if (this.mGridTable)
            this.mGridTable.layout();
    };
    GameGridTable.prototype.refreshPos = function (x, y, conx, cony) {
        if (!this.mGridTable)
            return;
        this.mGridTable.x = x;
        this.mGridTable.y = y;
        if (this.table && conx !== undefined && cony !== undefined) {
            this.table.tableOX = conx;
            this.table.tableOY = cony;
        }
        this.adjustMask(x, y);
        this.mGridTable.layout();
    };
    GameGridTable.prototype.destroy = function () {
        if (this.mGridTable) {
            this.removeListen();
            this.mGridTable.destroy();
        }
    };
    GameGridTable.prototype.cellTapHandler = function (cell) {
        this.emit("cellTap", cell);
    };
    return GameGridTable;
}(Phaser.Events.EventEmitter));



/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/const.js
var ALIGN_CONST = {

    /**
    * A constant representing a top-left alignment or position.
    * @constant
    * @name Phaser.Display.Align.TOP_LEFT
    * @since 3.0.0
    * @type {integer}
    */
    TOP_LEFT: 0,

    /**
    * A constant representing a top-center alignment or position.
    * @constant
    * @name Phaser.Display.Align.TOP_CENTER
    * @since 3.0.0
    * @type {integer}
    */
    TOP_CENTER: 1,

    /**
    * A constant representing a top-right alignment or position.
    * @constant
    * @name Phaser.Display.Align.TOP_RIGHT
    * @since 3.0.0
    * @type {integer}
    */
    TOP_RIGHT: 2,

    /**
    * A constant representing a left-top alignment or position.
    * @constant
    * @name Phaser.Display.Align.LEFT_TOP
    * @since 3.0.0
    * @type {integer}
    */
    LEFT_TOP: 3,

    /**
    * A constant representing a left-center alignment or position.
    * @constant
    * @name Phaser.Display.Align.LEFT_CENTER
    * @since 3.0.0
    * @type {integer}
    */
    LEFT_CENTER: 4,

    /**
    * A constant representing a left-bottom alignment or position.
    * @constant
    * @name Phaser.Display.Align.LEFT_BOTTOM
    * @since 3.0.0
    * @type {integer}
    */
    LEFT_BOTTOM: 5,

    /**
    * A constant representing a center alignment or position.
    * @constant
    * @name Phaser.Display.Align.CENTER
    * @since 3.0.0
    * @type {integer}
    */
    CENTER: 6,

    /**
    * A constant representing a right-top alignment or position.
    * @constant
    * @name Phaser.Display.Align.RIGHT_TOP
    * @since 3.0.0
    * @type {integer}
    */
    RIGHT_TOP: 7,

    /**
    * A constant representing a right-center alignment or position.
    * @constant
    * @name Phaser.Display.Align.RIGHT_CENTER
    * @since 3.0.0
    * @type {integer}
    */
    RIGHT_CENTER: 8,

    /**
    * A constant representing a right-bottom alignment or position.
    * @constant
    * @name Phaser.Display.Align.RIGHT_BOTTOM
    * @since 3.0.0
    * @type {integer}
    */
    RIGHT_BOTTOM: 9,

    /**
    * A constant representing a bottom-left alignment or position.
    * @constant
    * @name Phaser.Display.Align.BOTTOM_LEFT
    * @since 3.0.0
    * @type {integer}
    */
    BOTTOM_LEFT: 10,

    /**
    * A constant representing a bottom-center alignment or position.
    * @constant
    * @name Phaser.Display.Align.BOTTOM_CENTER
    * @since 3.0.0
    * @type {integer}
    */
    BOTTOM_CENTER: 11,

    /**
    * A constant representing a bottom-right alignment or position.
    * @constant
    * @name Phaser.Display.Align.BOTTOM_RIGHT
    * @since 3.0.0
    * @type {integer}
    */
    BOTTOM_RIGHT: 12

};

/* harmony default export */ var align_const = (ALIGN_CONST);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/GetDisplaySize.js
var GetDisplaySize = __webpack_require__(112);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/GetBottom.js


var GetBottom = function (gameObject) {
    var height = Object(GetDisplaySize["a" /* GetDisplayHeight */])(gameObject);
    return (gameObject.y + height) - (height * gameObject.originY);
};

/* harmony default export */ var bounds_GetBottom = (GetBottom);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/GetCenterX.js


var GetCenterX = function (gameObject) {
    var width = Object(GetDisplaySize["b" /* GetDisplayWidth */])(gameObject);
    return gameObject.x - (width * gameObject.originX) + (width * 0.5);
};

/* harmony default export */ var bounds_GetCenterX = (GetCenterX);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/SetBottom.js


var SetBottom = function (gameObject, value) {
    var height = Object(GetDisplaySize["a" /* GetDisplayHeight */])(gameObject);
    gameObject.y = (value - height) + (height * gameObject.originY);
    return gameObject;
};

/* harmony default export */ var bounds_SetBottom = (SetBottom);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/SetCenterX.js


var SetCenterX = function (gameObject, x) {
    var width = Object(GetDisplaySize["b" /* GetDisplayWidth */])(gameObject);
    var offsetX = width * gameObject.originX;
    gameObject.x = (x + offsetX) - (width * 0.5);

    return gameObject;
};

/* harmony default export */ var bounds_SetCenterX = (SetCenterX);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/BottomCenter.js





var BottomCenter = function (gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) { offsetX = 0; }
    if (offsetY === undefined) { offsetY = 0; }

    bounds_SetCenterX(gameObject, bounds_GetCenterX(alignIn) + offsetX);
    bounds_SetBottom(gameObject, bounds_GetBottom(alignIn) + offsetY);

    return gameObject;
};

/* harmony default export */ var in_BottomCenter = (BottomCenter);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/GetLeft.js


var GetLeft = function (gameObject) {
    var width = Object(GetDisplaySize["b" /* GetDisplayWidth */])(gameObject);
    return gameObject.x - (width * gameObject.originX);
};

/* harmony default export */ var bounds_GetLeft = (GetLeft);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/SetLeft.js


var SetLeft = function (gameObject, value) {
    var width = Object(GetDisplaySize["b" /* GetDisplayWidth */])(gameObject);
    gameObject.x = value + (width * gameObject.originX);
    return gameObject;
};

/* harmony default export */ var bounds_SetLeft = (SetLeft);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/BottomLeft.js





var BottomLeft = function (gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) { offsetX = 0; }
    if (offsetY === undefined) { offsetY = 0; }

    bounds_SetLeft(gameObject, bounds_GetLeft(alignIn) - offsetX);
    bounds_SetBottom(gameObject, bounds_GetBottom(alignIn) + offsetY);

    return gameObject;
};

/* harmony default export */ var in_BottomLeft = (BottomLeft);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/GetRight.js


var GetRight = function (gameObject) {
    var width = Object(GetDisplaySize["b" /* GetDisplayWidth */])(gameObject);
    return (gameObject.x + width) - (width * gameObject.originX);
};

/* harmony default export */ var bounds_GetRight = (GetRight);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/SetRight.js


var SetRight = function (gameObject, value) {
    var width = Object(GetDisplaySize["b" /* GetDisplayWidth */])(gameObject);
    gameObject.x = (value - width) + (width * gameObject.originX);

    return gameObject;
};

/* harmony default export */ var bounds_SetRight = (SetRight);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/BottomRight.js





var BottomRight = function (gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) { offsetX = 0; }
    if (offsetY === undefined) { offsetY = 0; }

    bounds_SetRight(gameObject, bounds_GetRight(alignIn) + offsetX);
    bounds_SetBottom(gameObject, bounds_GetBottom(alignIn) + offsetY);

    return gameObject;
};

/* harmony default export */ var in_BottomRight = (BottomRight);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/SetCenterY.js


var SetCenterY = function (gameObject, y) {
    var height = Object(GetDisplaySize["a" /* GetDisplayHeight */])(gameObject);
    var offsetY = height * gameObject.originY;
    gameObject.y = (y + offsetY) - (height * 0.5);

    return gameObject;
};

/* harmony default export */ var bounds_SetCenterY = (SetCenterY);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/CenterOn.js



var CenterOn = function (gameObject, x, y) {
    bounds_SetCenterX(gameObject, x);
    return bounds_SetCenterY(gameObject, y);
};

/* harmony default export */ var bounds_CenterOn = (CenterOn);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/GetCenterY.js


var GetCenterY = function (gameObject) {
    var height = Object(GetDisplaySize["a" /* GetDisplayHeight */])(gameObject);
    return gameObject.y - (height * gameObject.originY) + (height * 0.5);
};

/* harmony default export */ var bounds_GetCenterY = (GetCenterY);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/Center.js




var Center = function (gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) { offsetX = 0; }
    if (offsetY === undefined) { offsetY = 0; }

    bounds_CenterOn(gameObject, bounds_GetCenterX(alignIn) + offsetX, bounds_GetCenterY(alignIn) + offsetY);

    return gameObject;
};

/* harmony default export */ var in_Center = (Center);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/LeftCenter.js





var LeftCenter = function (gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) { offsetX = 0; }
    if (offsetY === undefined) { offsetY = 0; }

    bounds_SetLeft(gameObject, bounds_GetLeft(alignIn) - offsetX);
    bounds_SetCenterY(gameObject, bounds_GetCenterY(alignIn) + offsetY);

    return gameObject;
};

/* harmony default export */ var in_LeftCenter = (LeftCenter);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/RightCenter.js





var RightCenter = function (gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) { offsetX = 0; }
    if (offsetY === undefined) { offsetY = 0; }

    bounds_SetRight(gameObject, bounds_GetRight(alignIn) + offsetX);
    bounds_SetCenterY(gameObject, bounds_GetCenterY(alignIn) + offsetY);

    return gameObject;
};

/* harmony default export */ var in_RightCenter = (RightCenter);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/GetTop.js


var GetTop = function (gameObject) {
    var height = Object(GetDisplaySize["a" /* GetDisplayHeight */])(gameObject);
    return gameObject.y - (height * gameObject.originY);
};

/* harmony default export */ var bounds_GetTop = (GetTop);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/bounds/SetTop.js


var SetTop = function (gameObject, value) {
    var height = Object(GetDisplaySize["a" /* GetDisplayHeight */])(gameObject);
    gameObject.y = value + (height * gameObject.originY);
    return gameObject;
};

/* harmony default export */ var bounds_SetTop = (SetTop);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/TopCenter.js





var TopCenter = function (gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) { offsetX = 0; }
    if (offsetY === undefined) { offsetY = 0; }

    bounds_SetCenterX(gameObject, bounds_GetCenterX(alignIn) + offsetX);
    bounds_SetTop(gameObject, bounds_GetTop(alignIn) - offsetY);

    return gameObject;
};

/* harmony default export */ var in_TopCenter = (TopCenter);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/TopLeft.js





var TopLeft = function (gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) { offsetX = 0; }
    if (offsetY === undefined) { offsetY = 0; }

    bounds_SetLeft(gameObject, bounds_GetLeft(alignIn) - offsetX);
    bounds_SetTop(gameObject, bounds_GetTop(alignIn) - offsetY);

    return gameObject;
};

/* harmony default export */ var in_TopLeft = (TopLeft);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/TopRight.js





var TopRight = function (gameObject, alignIn, offsetX, offsetY) {
    if (offsetX === undefined) { offsetX = 0; }
    if (offsetY === undefined) { offsetY = 0; }

    bounds_SetRight(gameObject, bounds_GetRight(alignIn) + offsetX);
    bounds_SetTop(gameObject, bounds_GetTop(alignIn) - offsetY);

    return gameObject;
};

/* harmony default export */ var in_TopRight = (TopRight);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/QuickSet.js











var AlignInMap = [];

AlignInMap[align_const.BOTTOM_CENTER] = in_BottomCenter;
AlignInMap[align_const.BOTTOM_LEFT] = in_BottomLeft;
AlignInMap[align_const.BOTTOM_RIGHT] = in_BottomRight;
AlignInMap[align_const.CENTER] = in_Center;
AlignInMap[align_const.LEFT_CENTER] = in_LeftCenter;
AlignInMap[align_const.RIGHT_CENTER] = in_RightCenter;
AlignInMap[align_const.TOP_CENTER] = in_TopCenter;
AlignInMap[align_const.TOP_LEFT] = in_TopLeft;
AlignInMap[align_const.TOP_RIGHT] = in_TopRight;

var QuickSet = function (child, alignIn, position, offsetX, offsetY) {
    return AlignInMap[position](child, alignIn, offsetX, offsetY);
};

/* harmony default export */ var in_QuickSet = __webpack_exports__["a"] = (QuickSet);


/***/ }),
/* 136 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/IsArray.js
var IsArray = __webpack_require__(202);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/texture/SetTexture.js


var SetTexture = function (key, baseFrameName, columns, rows) {
    if (Object(IsArray["a" /* default */])(baseFrameName)) {
        rows = columns;
        columns = baseFrameName;
        baseFrameName = undefined;
    }

    if (baseFrameName === undefined) {
        baseFrameName = '__BASE';
    }

    this.textureKey = key;
    this.baseFrameName = baseFrameName;
    this.columns.data = columns;
    this.columns.count = (columns) ? columns.length : 0;
    this.columns.stretch = 0;
    this.columns.minWidth = 0;
    this.rows.data = rows;
    this.rows.count = (rows) ? rows.length : 0;
    this.rows.stretch = 0;
    this.rows.minHeight = 0;

    var texture = this.scene.textures.get(key);
    if (!texture) {
        this.clear();
        return this;
    }
    if (!columns || !rows) {
        this.clear();
        return this;
    }

    // Get remainder width/height for unknown width/height
    var baseFrame = texture.frames[baseFrameName];
    var remainderTextureWidth = baseFrame.width;
    var unknownColumnWidthCount = 0;
    for (var i = 0, cnt = columns.length; i < cnt; i++) {
        if (columns[i] === undefined) {
            unknownColumnWidthCount++;
        } else if (typeof (columns[i]) === 'number') {
            remainderTextureWidth -= columns[i];
        } else {
            remainderTextureWidth -= columns[i].width;
        }
    }
    var unknownColumnWidth = remainderTextureWidth / unknownColumnWidthCount;

    var remainderTextureHeight = baseFrame.height;
    var unknownRowHeightCount = 0;
    for (var i = 0, cnt = rows.length; i < cnt; i++) {
        if (rows[i] === undefined) {
            unknownRowHeightCount++;
        } else if (typeof (rows[i]) === 'number') {
            remainderTextureHeight -= rows[i];
        } else {
            remainderTextureHeight -= rows[i].width;
        }
    }
    var unknownRowHeight = remainderTextureHeight / unknownRowHeightCount;

    var row, col, rowHeight, colWidth, frameName;
    var offsetX = 0, offsetY = 0;
    for (var j = 0, jcnt = rows.length; j < jcnt; j++) {
        // Unknown height
        if (rows[j] === undefined) {
            rows[j] = unknownRowHeight;
        }

        if (typeof (rows[j]) === 'number') {
            rows[j] = {
                height: rows[j],
                stretch: (j % 2),
            }
        }

        row = rows[j];
        rowHeight = row.height;

        this.rows.stretch += (row.stretch | 0);
        this.rows.minHeight += (row.stretch > 0) ? 0 : rowHeight;

        offsetX = 0;
        for (var i = 0, icnt = columns.length; i < icnt; i++) {
            // Unknown width
            if (columns[i] === undefined) {
                columns[i] = unknownColumnWidth;
            }

            if (typeof (columns[i]) === 'number') {
                columns[i] = {
                    width: columns[i],
                    stretch: (i % 2),
                }
            }

            col = columns[i];
            colWidth = col.width;

            if (j === 0) {
                this.columns.stretch += (col.stretch | 0);
                this.columns.minWidth += (col.stretch > 0) ? 0 : colWidth;
            }

            if ((colWidth >= 1) && (rowHeight >= 1)) {
                frameName = this.getFrameNameCallback(i, j, baseFrameName);
                if (frameName) {
                    texture.add(
                        frameName, 0,
                        (offsetX + baseFrame.cutX), (offsetY + baseFrame.cutY),
                        colWidth, rowHeight
                    );
                    // Do nothing if frameName is existed
                }
            } else {
                console.warn(`Size of Grid(${i},${j}) = ${colWidth}x${rowHeight}, which is invalid`);
            }
            offsetX += colWidth;
        }
        offsetY += rowHeight;
    }

    this.updateTexture();
    return this;
}

/* harmony default export */ var texture_SetTexture = (SetTexture);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/renderTexture/MakeChildImageGameObject.js
var MakeChildImageGameObject = function (parent, key, className) {
    if (className === undefined) {
        className = 'image';
    }
    if (!parent[key]) {
        parent[key] = parent.scene.make[className]({
            add: false,
            origin: { x: 0, y: 0 },
        });
        parent.on('destroy', function () {
            if (parent[key]) {
                parent[key].destroy();
                parent[key] = undefined;
            }
        })
    }
    return parent[key];
}
/* harmony default export */ var renderTexture_MakeChildImageGameObject = (MakeChildImageGameObject);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/texture/UpdateTexture.js


var UpdateTexture = function () {
    this.clear();

    if (this.textureKey === undefined) {
        return this;
    }
    var texture = this.scene.textures.get(this.textureKey);
    if (!texture) {
        return this;
    }

    var stretchWidth = this.width - this.columns.minWidth;
    var proportionWidth, fixedPartScaleX;
    if (stretchWidth >= 0) {
        proportionWidth = (this.columns.stretch > 0) ? (stretchWidth / this.columns.stretch) : 0;
        fixedPartScaleX = 1;
    } else {
        proportionWidth = 0;
        fixedPartScaleX = (this.width / this.columns.minWidth);
    }

    var stretchHeight = this.height - this.rows.minHeight;
    var proportionHeight, fixedPartScaleY;
    if (stretchHeight >= 0) {
        proportionHeight = (this.rows.stretch > 0) ? (stretchHeight / this.rows.stretch) : 0;
        fixedPartScaleY = 1;
    } else {
        proportionHeight = 0;
        fixedPartScaleY = (this.height / this.rows.minHeight);
    }

    var frameName, col, row, colWidth, rowHeight;
    var offsetX = 0, offsetY = 0;
    var gameObject, imageType;
    for (var j = 0, jcnt = this.rows.count; j < jcnt; j++) {
        row = this.rows.data[j];
        rowHeight = (row.stretch === 0) ? (row.height * fixedPartScaleY) : (proportionHeight * row.stretch);

        offsetX = 0;
        for (var i = 0, icnt = this.columns.count; i < icnt; i++) {
            col = this.columns.data[i];
            colWidth = (col.stretch === 0) ? (col.width * fixedPartScaleX) : (proportionWidth * col.stretch);

            frameName = this.getFrameNameCallback(i, j, this.baseFrameName);
            if (frameName && (colWidth > 0) && (rowHeight > 0) && texture.has(frameName)) {
                if ((row.stretch === 0) && (col.stretch === 0)) { // Fixed parts
                    imageType = 0; // Draw image
                } else { // Stretchable parts
                    if (this.getStretchMode(i, j) === 0) { // Scaled image
                        imageType = 0; // Draw scaled image
                    } else { // Repeat tile-sprite
                        imageType = 1; // Draw tile-sprite
                    }
                }

                if (imageType === 0) {
                    gameObject = renderTexture_MakeChildImageGameObject(this, '_image', 'image');
                    gameObject
                        .setTexture(this.textureKey, frameName)
                        .setDisplaySize(colWidth, rowHeight);
                } else {
                    gameObject = renderTexture_MakeChildImageGameObject(this, '_tileSprite', 'tileSprite');
                    gameObject
                        .setTexture(this.textureKey, frameName)
                        .setSize(colWidth, rowHeight);
                }
            }

            if (gameObject) {
                this.draw(gameObject, offsetX, offsetY);
                gameObject = undefined;
            }
            offsetX += colWidth;
        }

        offsetY += rowHeight;
    }
}

/* harmony default export */ var texture_UpdateTexture = (UpdateTexture);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/texture/SetStretchMode.js
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;

var SetStretchMode = function(mode) {
    if (IsPlainObject(mode)) {
        this.stretchMode.edge = parseMode(GetValue(mode, 'edge', 0));
        this.stretchMode.internal = parseMode(GetValue(mode, 'internal', 0));
    } else {
        mode = parseMode(mode);
        this.stretchMode.edge = mode;
        this.stretchMode.internal = mode;
    }
    return this;
};

var parseMode = function (mode) {
    if (typeof (mode) === 'string') {
        mode = EXTENDMODE[mode];
    }
    return mode;
}

const EXTENDMODE = {
    scale: 0,
    repeat: 1,
}

/* harmony default export */ var texture_SetStretchMode = (SetStretchMode);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/utils/IsEdge.js
var IsEdge = function (colIndex, rowIndex) {
    return (colIndex === 0) || (colIndex === (this.columns.count - 1)) ||
        (rowIndex === 0) || (rowIndex === (this.rows.count - 1));
}

/* harmony default export */ var utils_IsEdge = (IsEdge);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/texture/GetStretchMode.js


var GetStretchMode = function(colIndex, rowIndex) {
    return (utils_IsEdge.call(this, colIndex, rowIndex)) ? this.stretchMode.edge : this.stretchMode.internal;
};

/* harmony default export */ var texture_GetStretchMode = (GetStretchMode);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/texture/TextureMethods.js





/* harmony default export */ var TextureMethods = ({
    setTexture: texture_SetTexture,
    updateTexture: texture_UpdateTexture,
    setStretchMode: texture_SetStretchMode,
    getStretchMode: texture_GetStretchMode,
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/utils/DefaultGetFrameNameCallback.js
const DefaultBaseFrameName = '__BASE';

var GetFrameNameCallback = function (colIndex, rowIndex, baseFrameName) {
    if (baseFrameName === DefaultBaseFrameName) {
        return `${colIndex},${rowIndex}`;
    } else {
        return `${baseFrameName}_${colIndex},${rowIndex}`;
    }
}

/* harmony default export */ var DefaultGetFrameNameCallback = (GetFrameNameCallback);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/NinePatch.js




const RenderTexture = Phaser.GameObjects.RenderTexture;
const NinePatch_IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const NinePatch_GetValue = Phaser.Utils.Objects.GetValue;

class NinePatch_NinePatch extends RenderTexture {
    constructor(scene, x, y, width, height, key, baseFrame, columns, rows, config) {
        if (NinePatch_IsPlainObject(x)) {
            config = x;
            x = NinePatch_GetValue(config, 'x', 0);
            y = NinePatch_GetValue(config, 'y', 0);
            width = NinePatch_GetValue(config, 'width', 1);
            height = NinePatch_GetValue(config, 'height', 1);
            key = NinePatch_GetValue(config, 'key', undefined);
            baseFrame = NinePatch_GetValue(config, 'baseFrame', undefined);
            columns = NinePatch_GetValue(config, 'columns', undefined);
            rows = NinePatch_GetValue(config, 'rows', undefined);
        } else if (NinePatch_IsPlainObject(width)) {
            config = width;
            width = NinePatch_GetValue(config, 'width', 1);
            height = NinePatch_GetValue(config, 'height', 1);
            key = NinePatch_GetValue(config, 'key', undefined);
            baseFrame = NinePatch_GetValue(config, 'baseFrame', undefined);
            columns = NinePatch_GetValue(config, 'columns', undefined);
            rows = NinePatch_GetValue(config, 'rows', undefined);
        } else if (NinePatch_IsPlainObject(key)) {
            config = key;
            key = NinePatch_GetValue(config, 'key', undefined);
            baseFrame = NinePatch_GetValue(config, 'baseFrame', undefined);
            columns = NinePatch_GetValue(config, 'columns', undefined);
            rows = NinePatch_GetValue(config, 'rows', undefined);
        } else if (NinePatch_IsPlainObject(baseFrame)) {
            config = baseFrame;
            baseFrame = NinePatch_GetValue(config, 'baseFrame', undefined);
            columns = NinePatch_GetValue(config, 'columns', undefined);
            rows = NinePatch_GetValue(config, 'rows', undefined);
        } else if (Object(IsArray["a" /* default */])(baseFrame)) {
            config = rows;
            rows = columns;
            columns = baseFrame;
            baseFrame = NinePatch_GetValue(config, 'baseFrame', undefined);
        } else if (NinePatch_IsPlainObject(columns)) {
            config = columns;
            columns = NinePatch_GetValue(config, 'columns', undefined);
            rows = NinePatch_GetValue(config, 'rows', undefined);
        }

        super(scene, x, y, width, height);
        this.columns = {};
        this.rows = {};
        this.stretchMode = {};
        this._tileSprite = undefined; // Reserved for drawing image
        this._image = undefined; // Reserved for drawing image

        this.setOrigin(0.5, 0.5);
        this.setGetFrameNameCallback(NinePatch_GetValue(config, 'getFrameNameCallback', undefined));
        this.setStretchMode(NinePatch_GetValue(config, 'stretchMode', 0));
        this.setTexture(key, baseFrame, columns, rows); // Also update render texture
    }

    setGetFrameNameCallback(callback) {
        if (callback === undefined) {
            callback = DefaultGetFrameNameCallback;
        }
        this.getFrameNameCallback = callback;
        return this;
    }

    get minWidth() {
        return this.columns.minWidth;
    }

    get minHeight() {
        return this.rows.minHeight;
    }

    resize(width, height) {
        if ((this.width === width) && (this.height === height)) {
            return this;
        }

        super.resize(width, height);
        this.updateTexture();
        return this;
    }
}

Object.assign(
    NinePatch_NinePatch.prototype,
    TextureMethods
);

/* harmony default export */ var ninepatch_NinePatch = __webpack_exports__["a"] = (NinePatch_NinePatch);

/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/eventemitter/EventEmitterMethods.js
var EventEmitterMethods = __webpack_require__(129);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/GetValue.js
var GetValue = __webpack_require__(348);
var GetValue_default = /*#__PURE__*/__webpack_require__.n(GetValue);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/logic/fsm/FSM.js



class FSM_FSM {
    /*
    var config = {
        start: 'A',   // default: undefined
        states: {
            A: {
                next: 'B',  // function() { return 'B'; }
                enter: function() {},
                exit: function() {}
            },
            // ...
        },        
        extend: {
            i: 0,
            name: 'abc'
            // ...
        },
        init: function() {},
        enable: true,
        eventEmitter: true,
    };
    */
    constructor(config) {
        // Attach get-next-state function
        var states = GetValue_default()(config, 'states', undefined);
        if (states) {
            this.addStates(states);
        }

        // Attach extend members
        var extend = GetValue_default()(config, 'extend', undefined);
        if (extend) {
            for (var name in extend) {
                if (!this.hasOwnProperty(name) || this[name] === undefined) {
                    this[name] = extend[name];
                }
            }
        }

        // Event emitter
        var eventEmitter = GetValue_default()(config, 'eventEmitter', undefined);
        var EventEmitterClass = GetValue_default()(config, 'EventEmitterClass', undefined);
        this.setEventEmitter(eventEmitter, EventEmitterClass);

        this._stateLock = false;
        this.resetFromJSON(config);
    }

    shutdown() {
        this.destroyEventEmitter();
    }

    destroy() {
        this.shutdown();
    }

    resetFromJSON(o) {
        this.setEnable(GetValue_default()(o, 'enable', true));
        this.start(GetValue_default()(o, 'start', undefined));
        var init = GetValue_default()(o, 'init', undefined);
        if (init) {
            init.call(this);
        }
        return this;
    }

    toJSON() {
        return {
            curState: this.state,
            prevState: this.prevState,

            enable: this.enable,
            start: this._start
        };
    }

    setEnable(e) {
        if (e === undefined) {
            e = true;
        }
        this.enable = e;
        return this;
    }

    set state(newState) {
        if (!this.enable || this._stateLock) {
            return;
        }
        if (this._state === newState) {
            return;
        }
        this._prevState = this._state;
        this._state = newState;

        this._stateLock = true; // lock state

        this.emit('statechange', this);

        if (this._prevState != null) {
            var exitEventName = 'exit_' + this._prevState;
            var exitCallback = this[exitEventName];
            if (exitCallback) {
                exitCallback.call(this);
            }
            this.emit(exitEventName, this);
        }

        this._stateLock = false;

        if (this._state != null) {
            var enterEventName = 'enter_' + this._state;
            var enterCallback = this[enterEventName];
            if (enterCallback) {
                enterCallback.call(this);
            }
            this.emit(enterEventName, this);
        }
    }

    get state() {
        return this._state;
    }

    get prevState() {
        return this._prevState;
    }

    start(state) {
        this._start = state;
        this._prevState = undefined;
        this._state = state; // Won't fire statechange events
        return this;
    }

    goto(nextState) {
        if (nextState != null) {
            this.state = nextState;
        }
        return this;
    }

    next() {
        var nextState;
        var getNextState = this['next_' + this.state];
        if (getNextState) {
            if (typeof (getNextState) === 'string') {
                nextState = getNextState;
            } else {
                nextState = getNextState.call(this);
            }
        }

        this.goto(nextState);
        return this;
    }

    addState(name, config) {
        var getNextStateCallback = GetValue_default()(config, 'next', undefined);
        if (getNextStateCallback) {
            this['next_' + name] = getNextStateCallback;
        }

        var exitCallback = GetValue_default()(config, 'exit', undefined);
        if (exitCallback) {
            this['exit_' + name] = exitCallback;
        }

        var enterCallback = GetValue_default()(config, 'enter', undefined);
        if (enterCallback) {
            this['enter_' + name] = enterCallback;
        }
        return this;
    }

    addStates(states) {
        for (var name in states) {
            this.addState(name, states[name]);
        }
        return this;
    }

    update(time, delta, key) {
        if (key === undefined) {
            key = 'update';
        }
        var fn = this[key + '_' + this.state];
        if (fn) {
            fn.call(this, time, delta);
        }
    }

    preupdate(time, delta) {
        this.update(time, delta, 'preupdate');
    }

    postupdate(time, delta) {
        this.update(time, delta, 'postupdate');
    }
}

Object.assign(
    FSM_FSM.prototype,
    EventEmitterMethods["a" /* default */]
);

/* harmony default export */ var fsm_FSM = (FSM_FSM);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/fsm.js

/* harmony default export */ var fsm = __webpack_exports__["a"] = (fsm_FSM);

/***/ }),
/* 138 */,
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Position45; });
/* harmony import */ var _pos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(111);

var Position45 = /** @class */ (function () {
    function Position45() {
    }
    Position45.transformTo90 = function (point, position) {
        var offsetX = position.rows * (position.tileWidth / 2); // + position.tileWidth / 2;
        return new _pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"]((point.x - point.y) * (position.tileWidth / 2) + offsetX, ((point.x + point.y)) * (position.tileHeight / 2));
    };
    Position45.transformTo45 = function (point3, position) {
        var offsetX = position.rows * (position.tileWidth / 2);
        // const offsetX = position.sceneWidth / 2; // - position.tileWidth / 2;
        return new _pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"](Math.floor((point3.y + point3.z) / position.tileHeight + (point3.x - offsetX) / position.tileWidth), Math.floor((point3.y + point3.z) / position.tileHeight - (point3.x - offsetX) / position.tileWidth));
    };
    return Position45;
}());



/***/ }),
/* 140 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Handler; });
var Handler = /** @class */ (function () {
    /**
     * 根据指定的属性值，创建一个 <code>Handler</code> 类的实例。
     * @param	caller 执行域。
     * @param	method 处理函数。
     * @param	args 函数参数。
     * @param	once 是否只执行一次。
     */
    function Handler(caller, method, args, once) {
        if (caller === void 0) { caller = null; }
        if (method === void 0) { method = null; }
        if (args === void 0) { args = null; }
        if (once === void 0) { once = false; }
        this.once = false;
        this._id = 0;
        this.setTo(caller, method, args, once);
    }
    /**
     * 从对象池内创建一个Handler，默认会执行一次并立即回收，如果不需要自动回收，设置once参数为false。
     * @param	caller 执行域(this)。
     * @param	method 回调方法。
     * @param	args 携带的参数。
     * @param	once 是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。
     * @return  返回创建的handler实例。
     */
    Handler.create = function (caller, method, args, once) {
        if (args === void 0) { args = null; }
        if (once === void 0) { once = true; }
        if (Handler._pool.length)
            return Handler._pool.pop().setTo(caller, method, args, once);
        return new Handler(caller, method, args, once);
    };
    /**
     * 设置此对象的指定属性值。
     * @param	caller 执行域(this)。
     * @param	method 回调方法。
     * @param	args 携带的参数。
     * @param	once 是否只执行一次，如果为true，执行后执行recover()进行回收。
     * @return  返回 handler 本身。
     */
    Handler.prototype.setTo = function (caller, method, args, once) {
        this._id = Handler._gid++;
        this.caller = caller;
        this.method = method;
        this.args = args;
        this.once = once;
        return this;
    };
    /**
     * 执行处理器。
     */
    Handler.prototype.run = function () {
        if (this.method == null)
            return null;
        var id = this._id;
        var result = this.method.apply(this.caller, this.args);
        // tslint:disable-next-line: no-unused-expression
        this._id === id && this.once && this.recover();
        return result;
    };
    /**
     * 执行处理器，携带额外数据。
     * @param	data 附加的回调数据，可以是单数据或者Array(作为多参)。
     */
    Handler.prototype.runWith = function (data) {
        if (this.method == null)
            return null;
        var id = this._id;
        if (data == null)
            // tslint:disable-next-line: no-var-keyword
            var result = this.method.apply(this.caller, this.args);
        else if (!this.args && !(data instanceof Array))
            result = this.method.call(this.caller, data);
        // tslint:disable-next-line: comment-format
        else if (this.args)
            result = this.method.apply(this.caller, this.args.concat(data));
        else
            result = this.method.apply(this.caller, data);
        // tslint:disable-next-line: no-unused-expression
        this._id === id && this.once && this.recover();
        return result;
    };
    /**
     * 清理对象引用。
     */
    Handler.prototype.clear = function () {
        this.caller = null;
        this.method = null;
        this.args = null;
        return this;
    };
    /**
     * 清理并回收到 Handler 对象池内。
     */
    Handler.prototype.recover = function () {
        if (this._id > 0) {
            this._id = 0;
            Handler._pool.push(this.clear());
        }
    };
    /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/
    Handler._pool = [];
    Handler._gid = 1;
    return Handler;
}());



/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var NOOP = function () {
    //  NOOP
};

/* harmony default export */ __webpack_exports__["a"] = (NOOP);

/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _IsSceneObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(346);


var GetSceneObject = function (object) {
    if (Object(_IsSceneObject_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(object)) { // object = scene
        return object;
    } else if (object.scene && Object(_IsSceneObject_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(object.scene)) { // object = game object
        return object.scene;
    } else if (object.parent && object.parent.scene && Object(_IsSceneObject_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(object.parent.scene)) { // parent = bob object
        return object.parent.scene;
    }
}

/* harmony default export */ __webpack_exports__["a"] = (GetSceneObject);

/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var CONST = {
    // new line mode
    NO_NEWLINE: 0,
    RAW_NEWLINE: 1,
    WRAPPED_NEWLINE: 2,

    // wrap mode
    NO_WRAP: 0,
    WORD_WRAP: 1,
    CHAR_WRAP: 2,

    // split lines
    SPLITREGEXP: /(?:\r\n|\r|\n)/
};

/* harmony default export */ __webpack_exports__["a"] = (CONST);

/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return Show; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Hide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return IsShown; });
/* harmony import */ var _GetSizerConfig_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(213);


var Show = function (gameObject) {
    _hide(gameObject, false);
};

var Hide = function (gameObject) {
    _hide(gameObject, true);
};

var IsShown = function(gameObject) {
    if (!gameObject) {
        return false;
    }
    var config = Object(_GetSizerConfig_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(gameObject);
    return !config.hidden;
}

var _hide = function (gameObject, hidden) {
    if (!gameObject) {
        return;
    }
    var config = Object(_GetSizerConfig_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(gameObject);
    config.hidden = hidden;
    gameObject.setVisible(!hidden);
};



/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DetailDisplay", function() { return DetailDisplay; });
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(104);
/* harmony import */ var _rooms_display_dragonbones_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(192);
/* harmony import */ var _rooms_display_dragonbones_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(161);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var DetailDisplay = /** @class */ (function (_super) {
    __extends(DetailDisplay, _super);
    function DetailDisplay(scene) {
        return _super.call(this, scene) || this;
    }
    DetailDisplay.prototype.loadDisplay = function (content) {
        this.mDisplay = content;
        if (this.mDragonboneDisplay) {
            this.mDragonboneDisplay.destroy();
            this.mDragonboneDisplay = undefined;
        }
        if (content.display) {
            var display = content.display;
            if (this.scene.textures.exists(display.texturePath)) {
                this.onCompleteHandler();
            }
            else {
                this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onCompleteHandler, this);
                this.scene.load.atlas(display.texturePath, _utils_resUtil__WEBPACK_IMPORTED_MODULE_0__[/* Url */ "h"].getOsdRes(display.texturePath), _utils_resUtil__WEBPACK_IMPORTED_MODULE_0__[/* Url */ "h"].getOsdRes(display.dataPath));
                this.scene.load.start();
            }
        }
    };
    DetailDisplay.prototype.loadAvatar = function (content) {
        if (!this.mDragonboneDisplay) {
            this.mDragonboneDisplay = new _rooms_display_dragonbones_display__WEBPACK_IMPORTED_MODULE_1__[/* DragonbonesDisplay */ "a"](this.scene, undefined);
        }
        if (this.mImage) {
            this.remove(this.mImage);
        }
        this.mDragonboneDisplay.load(new _rooms_display_dragonbones_model__WEBPACK_IMPORTED_MODULE_2__[/* DragonbonesModel */ "a"]({
            id: 0,
            avatar: content.avatar
        }));
        this.add(this.mDragonboneDisplay);
    };
    DetailDisplay.prototype.loadUrl = function (url) {
        this.mUrl = url;
        if (this.mDisplay)
            this.mDisplay = null;
        if (this.mDragonboneDisplay) {
            this.mDragonboneDisplay.destroy();
        }
        if (this.scene.textures.exists(url)) {
            this.onCompleteHandler();
        }
        else {
            this.scene.load.image(url, _utils_resUtil__WEBPACK_IMPORTED_MODULE_0__[/* Url */ "h"].getOsdRes(url));
            this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onCompleteHandler, this);
            this.scene.load.start();
        }
    };
    DetailDisplay.prototype.setTexture = function (key, frame) {
        if (!this.mImage) {
            this.mImage = this.scene.make.image({
                key: key,
                frame: frame
            }, false);
        }
        this.setSize(this.mImage.width * this.scale, this.mImage.height * this.scale);
        this.add(this.mImage);
        this.emit("show", this.mImage);
    };
    DetailDisplay.prototype.setNearest = function () {
        if (this.mImage) {
            this.mImage.texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
        }
    };
    Object.defineProperty(DetailDisplay.prototype, "display", {
        get: function () {
            return this.mDisplay;
        },
        enumerable: false,
        configurable: true
    });
    DetailDisplay.prototype.onCompleteHandler = function () {
        if (!this.scene) {
            return;
        }
        if (!this.mImage) {
            this.mImage = this.scene.make.image(undefined, false);
        }
        if (this.mDisplay) {
            var display = this.mDisplay.display;
            var ani = this.mDisplay.animations;
            if (!ani || ani.length <= 0) {
                return;
            }
            this.mImage.setTexture(this.mDisplay.display.texturePath, ani[0].frameName[0]);
        }
        else {
            this.mImage.setTexture(this.mUrl);
        }
        this.setNearest();
        this.setSize(this.mImage.width * this.scale, this.mImage.height * this.scale);
        this.add(this.mImage);
        this.emit("show", this.mImage);
    };
    return DetailDisplay;
}(Phaser.GameObjects.Container));



/***/ }),
/* 146 */,
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoadingScene; });
/* harmony import */ var _utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(198);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/* harmony import */ var _basic_scene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(128);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var LoadingScene = /** @class */ (function (_super) {
    __extends(LoadingScene, _super);
    function LoadingScene() {
        var _this = _super.call(this, { key: LoadingScene.name }) || this;
        _this.mRequestCom = false;
        return _this;
    }
    LoadingScene.prototype.preload = function () {
        // atlas可以用于webgl渲染，和canvas渲染，spritesheet只能用于canvas
        // this.load.image("loading_bg", Url.getRes(""))
        var dpr = 2;
        if (this.mWorld) {
            dpr = this.mWorld.uiRatio || 2;
        }
        _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().log("has Texture: ", this.game.textures.exists("loading_bg"));
        if (this.game.device.os.desktop === false) {
            this.load.image("loading_bg", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getUIRes(dpr, "loading/loading_bg.jpg"));
        }
        this.load.atlas("loading", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getUIRes(dpr, "loading/loading.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getUIRes(dpr, "loading/loading.json"));
        this.load.script("webfont", "./resources/scripts/webfont/1.6.26/webfont.js");
        // this.load.spritesheet("rabbit00.png", "./resources/rabbit00.png", { frameWidth: 150, frameHeight: 150 });
    };
    LoadingScene.prototype.init = function (data) {
        var element = document.createElement("style");
        document.head.appendChild(element);
        var sheet = element.sheet;
        var styles = "@font-face { font-family: 'Source Han Sans'; src: url('./resources/fonts/otf/SourceHanSansTC-Regular.otf') format('opentype'); }\n";
        sheet.insertRule(styles, 0);
        this.mWorld = data.world;
        this.mRoom = data.room;
        this.mRequestCom = false;
        this.mCallback = data.callBack;
    };
    LoadingScene.prototype.create = function () {
        try {
            WebFont.load({
                custom: {
                    families: ["Source Han Sans"]
                },
            });
        }
        catch (error) {
            _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().warn("webfont failed to load");
        }
        if (this.mRoom)
            this.mRoom.startLoad();
        var width = this.scale.gameSize.width;
        var height = this.scale.gameSize.height;
        // this.bg = this.add.graphics();
        // this.bg.fillStyle(0x616161);
        // this.bg.fillRect(0, 0, width, height);
        // const framesObj: {} = this.textures.get("loading").frames;
        // const tmpFrames: any[] = [];
        // for (const key in framesObj) {
        //   if (key === "__BASE") continue;
        //   const frame = framesObj[key];
        //   if (!frame) continue;
        //   tmpFrames.push(key);
        // }
        // 手动把json配置中的frames给予anims
        this.anims.create({
            key: "loading_anmis",
            // frames: this.anims.generateFrameNumbers("loading", { start: 0, end: 59, frames: tmpFrames }),
            frames: this.anims.generateFrameNames("loading", { prefix: "loading_", start: 1, end: 59, zeroPad: 3, suffix: ".png" }),
            frameRate: 16,
            yoyo: false,
            repeat: -1
        });
        this.bg = this.add.image(width / 2, height / 2, "loading_bg");
        this.bg.scale = this.mWorld.uiScale;
        this.lo = this.add.sprite(0, 0, "loading");
        // this.lo.setScale(this.mWorld.uiScale);
        this.scale.on("resize", this.checkSize, this);
        this.lo.play("loading_anmis");
        this.checkSize(new _utils_size__WEBPACK_IMPORTED_MODULE_0__[/* Size */ "a"](width, height));
        if (this.mCallback) {
            this.mCallback.call(this, this);
            this.mCallback = undefined;
        }
        // this.mLoadingManager.startup();
    };
    // update() {
    // if (this.mRoom) {
    //   if (this.mRoom.world.clock.clockSync && !this.mRequestCom) {
    //     this.mRequestCom = true;
    //     this.mRoom.completeLoad();
    //   }
    // }
    // }
    LoadingScene.prototype.awake = function () {
        this.scale.on("resize", this.checkSize, this);
        this.scene.wake();
    };
    LoadingScene.prototype.sleep = function () {
        this.scale.off("resize", this.checkSize, this);
        this.scene.sleep();
    };
    LoadingScene.prototype.getKey = function () {
        return this.sys.config.key;
    };
    LoadingScene.prototype.checkSize = function (size) {
        var width = size.width, height = size.height;
        this.lo.x = width / 2;
        this.lo.y = height / 2;
    };
    return LoadingScene;
}(_basic_scene__WEBPACK_IMPORTED_MODULE_3__[/* BasicScene */ "a"]));



/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export DisplayField */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DisplayObject; });
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(107);
/* harmony import */ var _ui_components_dynamic_sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(199);
/* harmony import */ var _ui_components_dynamic_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(113);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);
/* harmony import */ var _editor_reference_area__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(338);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var DisplayField;
(function (DisplayField) {
    DisplayField[DisplayField["BACKEND"] = 1] = "BACKEND";
    DisplayField[DisplayField["STAGE"] = 2] = "STAGE";
    DisplayField[DisplayField["FRONTEND"] = 3] = "FRONTEND";
    DisplayField[DisplayField["FLAG"] = 4] = "FLAG";
})(DisplayField || (DisplayField = {}));
var DisplayObject = /** @class */ (function (_super) {
    __extends(DisplayObject, _super);
    function DisplayObject(scene, roomService, element, antial) {
        if (antial === void 0) { antial = false; }
        var _this = _super.call(this, scene) || this;
        /**
         * 实际透明度，避免和tween混淆
         */
        _this.mAlpha = 1;
        _this.mDirection = 3;
        _this.mAntial = false;
        _this.mElement = element;
        _this.mRoomService = roomService;
        _this.mAntial = antial;
        return _this;
    }
    DisplayObject.prototype.changeAlpha = function (val) {
        if (this.mAlpha === val) {
            return;
        }
        this.alpha = val;
        this.mAlpha = val;
    };
    DisplayObject.prototype.removeFromParent = function () {
        if (this.parentContainer) {
            this.parentContainer.remove(this);
        }
    };
    DisplayObject.prototype.fadeIn = function (callback) {
    };
    DisplayObject.prototype.fadeOut = function (callback) {
    };
    DisplayObject.prototype.load = function (data, field) {
    };
    DisplayObject.prototype.play = function (animationName, field) {
    };
    DisplayObject.prototype.setDirection = function (val) {
        if (this.mDirection !== val) {
            this.mDirection = val;
            if (val === 5 || val === 7) {
                this.scaleX = -1;
            }
            else {
                this.scaleX = 1;
            }
        }
    };
    DisplayObject.prototype.destroy = function (fromScene) {
        if (this.mFlagContainer) {
            if (this.mNickname) {
                this.mNickname.destroy();
                this.mNickname = undefined;
            }
            if (this.mBackEffect) {
                this.mBackEffect.destroy();
                this.mBackEffect = undefined;
            }
            if (this.mFrontEffect) {
                this.mFrontEffect.destroy();
                this.mFrontEffect = undefined;
            }
            this.clearBadges();
            this.mFlagContainer.destroy();
            this.mFlagContainer = undefined;
        }
        if (this.mReferenceArea) {
            this.mReferenceArea.destroy();
            this.mReferenceArea = undefined;
        }
        if (this.mChildMap) {
            this.mChildMap.clear();
            this.mChildMap = null;
        }
        // this.removeAll(true);
        _super.prototype.destroy.call(this, fromScene);
    };
    DisplayObject.prototype.showNickname = function (val) {
        if (!this.mNickname) {
            this.mNickname = this.scene.make.text({ style: { font: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].YAHEI_14_BOLD } }, false).setOrigin(0.5, 0.5);
            this.mNickname.setStroke("#0", 2);
            if (this.mAntial) {
                this.mNickname.setShadow(2, 2, "#0", 4, true, true);
            }
            this.flagContainer.add(this.mNickname);
        }
        this.mNickname.setText(val);
        this.layouFlag();
    };
    DisplayObject.prototype.setDisplayBadges = function (cards) {
        if (!this.mBadges)
            this.mBadges = [];
        else
            this.clearBadges();
        for (var _i = 0, cards_1 = cards; _i < cards_1.length; _i++) {
            var card = cards_1[_i];
            var badge = new _ui_components_dynamic_image__WEBPACK_IMPORTED_MODULE_2__["DynamicImage"](this.scene, 0, 0);
            badge.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getOsdRes(card.thumbnail), this, this.layouFlag);
            this.flagContainer.add(badge);
            this.mBadges.push(badge);
        }
    };
    DisplayObject.prototype.showRefernceArea = function () {
        if (!this.mReferenceArea) {
            this.mReferenceArea = new _editor_reference_area__WEBPACK_IMPORTED_MODULE_4__[/* ReferenceArea */ "a"](this.scene, this.mRoomService);
            this.addChildMap("reference", this.mReferenceArea);
        }
        if (!this.mCollisionArea || this.mCollisionArea.length <= 0)
            return;
        this.mReferenceArea.draw(this.mCollisionArea, this.mOriginPoint);
        this.addAt(this.mReferenceArea, 0);
    };
    DisplayObject.prototype.hideRefernceArea = function () {
        if (this.mReferenceArea) {
            this.mReferenceArea.destroy();
            this.mReferenceArea = undefined;
        }
    };
    DisplayObject.prototype.scaleTween = function () { };
    DisplayObject.prototype.showEffect = function () {
        this.addEffect(this.mBackEffect, _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/vip/vip_effect_back.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/vip/vip_effect_back.json"), true, 15, false, true);
        this.addEffect(this.mFrontEffect, _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/vip/vip_effect_front.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/vip/vip_effect_front.json"), true, 15, false, true);
    };
    DisplayObject.prototype.getElement = function (key) {
        if (!this.mChildMap) {
            return;
        }
        return this.mChildMap.get(key);
    };
    DisplayObject.prototype.addEffect = function (target, textureURL, atlasURL, isBack, framerate, loop, killComplete) {
        if (!target) {
            target = new _ui_components_dynamic_sprite__WEBPACK_IMPORTED_MODULE_1__["DynamicSprite"](this.scene, 0, 0);
        }
        target.load(textureURL, atlasURL);
        target.y = -20;
        if (isBack) {
            this.addAt(target, DisplayField.BACKEND);
        }
        else {
            this.addAt(target, DisplayField.FRONTEND);
        }
        // target.play(textureURL + atlasURL);
        target.once(Phaser.Animations.Events.SPRITE_ANIMATION_COMPLETE, function () {
            target.destroy();
        });
    };
    DisplayObject.prototype.layouFlag = function (offset) {
        if (offset === void 0) { offset = 4; }
        if (!this.mFlagContainer)
            return;
        this.mFlagContainer.y = -96;
        this.bringToTop(this.mNickname);
        var children = this.mFlagContainer.list;
        var _x = 0;
        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
            var child = children_1[_i];
            child["x"] = _x;
            if (child["width"])
                _x = child["width"];
        }
    };
    DisplayObject.prototype.clearBadges = function () {
        if (!this.mBadges)
            return;
        for (var _i = 0, _a = this.mBadges; _i < _a.length; _i++) {
            var badge = _a[_i];
            badge.destroy();
        }
        this.mBadges.length = 0;
    };
    Object.defineProperty(DisplayObject.prototype, "flagContainer", {
        get: function () {
            if (this.mFlagContainer)
                return this.mFlagContainer;
            this.mFlagContainer = this.scene.make.container(undefined, false);
            this.addAt(this.mFlagContainer, DisplayField.FLAG);
            return this.mFlagContainer;
        },
        enumerable: false,
        configurable: true
    });
    DisplayObject.prototype.addChildMap = function (key, display) {
        if (!this.mChildMap) {
            this.mChildMap = new Map();
        }
        this.mChildMap.set(key, display);
    };
    DisplayObject.prototype.removeChildMap = function (key) {
        if (!this.mChildMap) {
            return;
        }
        this.mChildMap.delete(key);
    };
    Object.defineProperty(DisplayObject.prototype, "baseLoc", {
        get: function () {
            return this.mBaseLoc || new Phaser.Geom.Point();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "sortX", {
        get: function () {
            return this.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "sortY", {
        get: function () {
            return this.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "sortZ", {
        get: function () {
            return this.z || 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "element", {
        get: function () {
            return this.mElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "collisionArea", {
        get: function () {
            return this.mCollisionArea;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DisplayObject.prototype, "originPoint", {
        get: function () {
            return this.mOriginPoint;
        },
        enumerable: false,
        configurable: true
    });
    return DisplayObject;
}(Phaser.GameObjects.Container));



/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChatMediator", function() { return ChatMediator; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/* harmony import */ var _chatPanel_pc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(212);
/* harmony import */ var _mobile_chatPanel_mobile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(220);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(106);
/* harmony import */ var _Chat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(221);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








var ChatMediator = /** @class */ (function (_super) {
    __extends(ChatMediator, _super);
    function ChatMediator(world, scene) {
        var _this = _super.call(this) || this;
        _this.mInRoom = false;
        _this.mAllMessage = [];
        _this.mMaxMessageNum = 50;
        _this.world = world;
        _this.mScene = scene;
        _this.chat = new _Chat__WEBPACK_IMPORTED_MODULE_6__["Chat"](world);
        _this.mUIType = _this.world.game.device.os.desktop ? _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_7__[/* UIType */ "a"].Scene : _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_7__[/* UIType */ "a"].Normal;
        return _this;
    }
    ChatMediator.prototype.getUIType = function () {
        return this.mUIType;
    };
    ChatMediator.prototype.enterRoom = function () {
        if (!this.room)
            return;
        if (!this.room.playerManager.actor)
            return;
        if (!this.mGMEApi)
            return;
        var playerID = this.room.playerManager.actor.id;
        var roomID = this.room.id;
        this.mGMEApi.EnterRoom(roomID.toString(), 1, this.mQCLoudAuth);
        this.mInRoom = true;
        this.sendVoiceRoomStatus(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].ChatChannel.CurrentScene, roomID, pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].VoiceRoomStatus.InVoiceRoom);
    };
    ChatMediator.prototype.exitRoom = function () {
        if (!this.mGMEApi)
            return;
        this.mGMEApi.EnableMic(false);
        this.mGMEApi.ExitRoom();
        this.mInRoom = false;
        if (!this.room) {
            return;
        }
        this.sendVoiceRoomStatus(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].ChatChannel.CurrentScene, this.room.id, pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].VoiceRoomStatus.OutsideVoiceRoom);
    };
    ChatMediator.prototype.isSceneUI = function () {
        return true;
    };
    ChatMediator.prototype.tweenView = function (show) {
        if (!this.mView)
            return;
        this.mView.tweenExpand(show);
    };
    ChatMediator.prototype.isShow = function () {
        if (!this.mView) {
            return false;
        }
        return this.mView.isShow();
    };
    ChatMediator.prototype.showing = function () {
        return true;
    };
    ChatMediator.prototype.resize = function () {
        var size = this.world.getSize();
        if (this.mView) {
            this.mView.resize(size.width, size.height);
        }
    };
    ChatMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        if (this.world.game.device.os.desktop) {
            this.mView = new _chatPanel_pc__WEBPACK_IMPORTED_MODULE_3__["ChatPanelPC"](this.mScene, this.world);
        }
        else {
            this.mView = new _mobile_chatPanel_mobile__WEBPACK_IMPORTED_MODULE_4__["ChatPanelMobile"](this.mScene, this.world);
            this.world.uiManager.checkUIState(ChatMediator.NAME, false);
        }
        this.world.uiManager.getUILayerManager().addToUILayer(this.mView);
        this.addListen();
        this.mView.show();
        this.mView.scale = this.world.uiScale;
    };
    ChatMediator.prototype.update = function (param) {
        this.mView.update(param);
        this.mParam = param;
    };
    ChatMediator.prototype.hide = function () {
        this.removeListen();
        this.mView.hide();
        if (!this.world.game.device.os.desktop)
            this.world.uiManager.checkUIState(ChatMediator.NAME, true);
    };
    ChatMediator.prototype.setParam = function (param) {
        this.mParam = param;
    };
    ChatMediator.prototype.getParam = function () {
        return this.mParam;
    };
    ChatMediator.prototype.destroy = function () {
        this.removeListen();
        if (this.chat) {
            this.chat.unregister();
            this.chat = null;
        }
        if (this.mGMEApi) {
            this.mGMEApi = null;
        }
        this.mScene = null;
        this.world = null;
        this.mInRoom = false;
        this.mQCLoudAuth = null;
        this.mAllMessage.forEach(function (message) {
            if (message)
                message = null;
        });
        this.mAllMessage = null;
        _super.prototype.destroy.call(this);
    };
    ChatMediator.prototype.addListen = function () {
        this.chat.on("characterChat", this.handleCharacterChat, this);
        this.chat.on("QCLoundGME", this.handleQCLoudGME, this);
        this.mView.on("sendChat", this.onSendChatHandler, this);
        this.mView.on("selectedVoice", this.onSelectedVoiceHandler, this);
        this.mView.on("selectedMic", this.onSelectedMicHandler, this);
        this.chat.register();
    };
    ChatMediator.prototype.removeListen = function () {
        this.chat.off("characterChat", this.handleCharacterChat, this);
        this.chat.off("QCLoundGME", this.handleQCLoudGME, this);
        this.mView.off("sendChat", this.onSendChatHandler, this);
        this.mView.off("selectedVoice", this.onSelectedVoiceHandler, this);
        this.mView.off("selectedMic", this.onSelectedMicHandler, this);
        this.chat.unregister();
    };
    ChatMediator.prototype.initGME = function () {
        var _this = this;
        // TODO just for test, need get sdkAppId from settings
        var sdkAppId = "1400209172";
        if (!this.room.playerManager.actor)
            return;
        var playerID = this.room.playerManager.actor.id;
        this.mGMEApi = new WebGMEAPI();
        this.mGMEApi.Init(document, sdkAppId, playerID.toString());
        this.mGMEApi.SetTMGDelegate(function (event, result) {
            switch (event) {
                case _this.mGMEApi.event.ITMG_MAIN_EVENT_TYPE_ENTER_ROOM:
                    _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().log("[GME]: EnterRoom: " + result);
                    break;
                case _this.mGMEApi.event.ITMG_MAIN_EVNET_TYPE_USER_UPDATE:
                    break;
                case _this.mGMEApi.event.ITMG_MAIN_EVENT_TYPE_EXIT_ROOM:
                    _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().log("[GME]: ExitRoom");
                    break;
                case _this.mGMEApi.event.ITMG_MAIN_EVENT_TYPE_ROOM_DISCONNECT:
                    _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().log("[GME]: Room Disconnect!!!");
                    break;
                default:
                    _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().log("[GME]: Sth wrong...");
                    break;
            }
        });
    };
    ChatMediator.prototype.appendMessage = function (messages, message) {
        messages.push(message);
        if (messages.length > this.mMaxMessageNum) {
            messages.shift();
        }
    };
    ChatMediator.prototype.changeMessageChannel = function () {
        var _this = this;
        if (!this.mView)
            return;
        var showMessages = this.mAllMessage.filter(function (msg) { return msg.channel === _this.mView.outChannel || msg.channel === pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].ChatChannel.System || _this.mView.outChannel === null; });
        var len = showMessages.length;
        var message = null;
        var wrapStr = "\n";
        for (var i = 0; i < len; i++) {
            message = showMessages[i];
            if (i === len - 1)
                wrapStr = "";
            this.mView.appendChat(message.chat + wrapStr);
        }
    };
    ChatMediator.prototype.handleCharacterChat = function (packet) {
        var content = packet.content;
        if (!this.world || !this.world.emitter || !this.room || !this.mView) {
            return;
        }
        var playerManager = this.world.roomManager.currentRoom.playerManager;
        if (!playerManager) {
            return;
        }
        var player = playerManager.get(content.chatSenderid);
        // const chatSendName = player ? player.name : "";
        // this.mChatPanel.appendChat(content.chatContext);
        var nickname = player ? player.model.nickname + ":" : "";
        var color = content.chatSetting && content.chatSetting.textColor ? content.chatSetting.textColor : "#FFFFFF";
        this.appendMessage(this.mAllMessage, { chat: "[color=" + color + "]" + nickname + ":" + content.chatContext + "[/color]", channel: content.chatChannel });
        this.mView.appendChat("[b][color=" + color + "]" + nickname + content.chatContext + "[/color][/b]\n");
    };
    ChatMediator.prototype.onSendChatHandler = function (text) {
        if (this.world.connection) {
            var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_GATEWAY_REQ_VIRTUAL_WORLD_CHAT);
            var content = pkt.content;
            content.chatChannel = 0;
            content.chatContext = text;
            this.world.connection.send(pkt);
        }
    };
    ChatMediator.prototype.sendVoiceRoomStatus = function (voiceChannel, voiceRoomId, voiceRoomStatus) {
        if (!this.room.connection) {
            return;
        }
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_VOICE_ROOM_STATUS);
        var context = pkt.content;
        context.voiceChannel = voiceChannel;
        context.voiceRoomId = voiceRoomId;
        context.voiceRoomStatus = voiceRoomStatus;
        this.room.connection.send(pkt);
    };
    ChatMediator.prototype.handleQCLoudGME = function (packet) {
        var authBuffer = packet.content;
        this.mQCLoudAuth = authBuffer.signature;
        this.initGME();
    };
    ChatMediator.prototype.onSelectedVoiceHandler = function (val) {
        if (val) {
            this.enterRoom();
        }
        else {
            this.exitRoom();
        }
    };
    ChatMediator.prototype.onSelectedMicHandler = function (val) {
        if (!this.mGMEApi) {
            return;
        }
        if (this.mInRoom) {
            this.mGMEApi.EnableMic(val);
        }
        if (this.world.connection) {
            var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"]((pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_VOICE_ROOM_STATUS));
            this.world.connection.send(pkt);
        }
    };
    Object.defineProperty(ChatMediator.prototype, "room", {
        get: function () {
            if (!this.world) {
                return;
            }
            if (!this.world.roomManager) {
                return;
            }
            return this.world.roomManager.currentRoom;
        },
        enumerable: false,
        configurable: true
    });
    ChatMediator.NAME = "ChatMediator";
    return ChatMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_5__[/* BaseMediator */ "a"]));



/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _object_NOOP_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(141);

var globZone = new Phaser.GameObjects.Zone({
    sys: {
        queueDepthSort: _object_NOOP_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"],
        events: {
            once: _object_NOOP_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]
        }
    }
}, 0, 0, 1, 1);
globZone.setOrigin(0);

/* harmony default export */ __webpack_exports__["a"] = (globZone);

/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const GameObjectClass = Phaser.GameObjects.GameObject;
var IsGameObject = function (object) {
    return (object instanceof GameObjectClass);
}
/* harmony default export */ __webpack_exports__["a"] = (IsGameObject);

/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return WaitEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WaitComplete; });
var WaitEvent = function (eventEmitter, eventName) {
    return new Promise(function (resolve, reject) {
        eventEmitter.once(eventName, function () {
            resolve();
        });
    });
}

var WaitComplete = function (eventEmitter) {
    return WaitEvent(eventEmitter, 'complete');
}



/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _GetSizerConfig_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(213);


var GetParentSizer = function (gameObject) {
    return Object(_GetSizerConfig_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(gameObject).parent;
}

/* harmony default export */ __webpack_exports__["a"] = (GetParentSizer);

/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropIcon", function() { return DragDropIcon; });
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(104);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var DragDropIcon = /** @class */ (function (_super) {
    __extends(DragDropIcon, _super);
    function DragDropIcon(mScene, x, y, texture) {
        var _this = _super.call(this, mScene, x, y) || this;
        _this.mScene = mScene;
        _this.mIcon = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__["DynamicImage"](_this.mScene, 0, 0); // this.mScene.make.image(undefined, false);
        _this.add(_this.mIcon);
        return _this;
    }
    DragDropIcon.prototype.load = function (value, thisArg, onLoadComplete) {
        var _this = this;
        this.mUrl = value;
        var key = this.resKey;
        this.mIcon.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_0__[/* Url */ "h"].getOsdRes(this.mUrl), function () {
            if (_this.mCallBack)
                _this.mCallBack();
        });
        // if (!this.mScene.cache.obj.has(key)) {
        //     this.mScene.load.image(key, Url.getOsdRes(this.mUrl));
        //     this.mScene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadCompleteHandler, this);
        //     this.mScene.load.start();
        // } else {
        //     this.onLoadCompleteHandler();
        // }
        this.mCallBack = onLoadComplete;
    };
    DragDropIcon.prototype.dragStart = function () {
    };
    DragDropIcon.prototype.dragStop = function (acceptDrag) {
    };
    DragDropIcon.prototype.dragDrop = function (dragable) {
    };
    DragDropIcon.prototype.dragOver = function (dragable) {
    };
    DragDropIcon.prototype.getDragData = function () {
    };
    DragDropIcon.prototype.getDropData = function () {
    };
    DragDropIcon.prototype.getDragImage = function () {
        return this.mIcon;
    };
    DragDropIcon.prototype.getVisualDisplay = function () {
        return undefined;
    };
    DragDropIcon.prototype.getBound = function () {
        var bound = this.getBounds();
        return new Phaser.Geom.Rectangle(bound.x, bound.y, bound.width, bound.height);
    };
    Object.defineProperty(DragDropIcon.prototype, "resKey", {
        get: function () {
            if (this.mUrl === undefined)
                return "";
            var key = _utils_resUtil__WEBPACK_IMPORTED_MODULE_0__[/* Url */ "h"].getOsdRes((this.mUrl)); // Load.Image.getKey(this.mUrl);
            return key;
        },
        enumerable: false,
        configurable: true
    });
    DragDropIcon.prototype.destroy = function () {
        this.mCallBack = null;
        _super.prototype.destroy.call(this, true);
    };
    Object.defineProperty(DragDropIcon.prototype, "icon", {
        get: function () {
            return this.mIcon;
        },
        enumerable: false,
        configurable: true
    });
    DragDropIcon.prototype.setDragType = function (value) {
        this.mDragType = value;
    };
    DragDropIcon.prototype.setDropType = function (value) {
        this.mDropType = value;
    };
    DragDropIcon.prototype.getDropType = function () {
        return this.mDropType;
    };
    DragDropIcon.prototype.getDragType = function () {
        return this.mDragType;
    };
    return DragDropIcon;
}(Phaser.GameObjects.Container));



/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Tool; });
/* harmony import */ var _pos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(111);

var Tool = /** @class */ (function () {
    function Tool() {
    }
    /**
     * scene之间坐标转换
     * @param fromScene 当前所在scene
     * @param pos 需要转换去scene上的position
     */
    Tool.getPosByScenes = function (fromScene, pos) {
        var camera = fromScene.cameras.main;
        var px = pos.x - camera.scrollX;
        var py = pos.y - camera.scrollY;
        return new _pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"](px, py);
    };
    /*
    * 两点之间距离公式
    */
    Tool.twoPointDistance = function (p1, p2) {
        var dis = Math.sqrt(Math.pow((p1.x - p2.x), 2) + Math.pow((p1.y - p2.y), 2));
        return dis;
    };
    /**
     * 两点之间弧度
     * @param baseP
     * @param moveP
     */
    Tool.twoPointRadin = function (baseP, moveP) {
        var x = baseP.x - moveP.x;
        var y = baseP.y - moveP.y;
        var dis = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
        var rad = Math.acos(x / dis);
        // 注意：当触屏的位置Y坐标<摇杆的Y坐标，我们要去反值-0~-180
        if (moveP.y < baseP.y) {
            rad = -rad;
        }
        return rad;
    };
    Tool.formatChineseString = function (context, fontSize, lineWidth) {
        if (typeof fontSize === "string")
            fontSize = parseInt(fontSize, 10);
        var wrapWidth = Math.floor(lineWidth / fontSize);
        return this.chunk(context, wrapWidth).join(" ");
    };
    Tool.checkChinese = function (name) {
        var pattern = /[\u4e00-\u9fa5]+/;
        var arr = name.split("");
        for (var i = 0, len = arr.length; i < len; i++) {
            if (pattern.test(arr[i])) {
                return true;
            }
        }
        return false;
    };
    Tool.checkItemName = function (name, checkStr) {
        var checkStrList = checkStr.split("") || [];
        var checkBoo = false;
        checkStrList.forEach(function (str) {
            if (str) {
                var pattern = new RegExp(str);
                var arr = name.split("");
                for (var i = 0, len = arr.length; i < len; i++) {
                    if (pattern.test(arr[i])) {
                        checkBoo = true;
                        break;
                    }
                }
            }
        });
        return checkBoo;
    };
    Tool.checkPointerContains = function (gameObject, pointer) {
        if (!gameObject)
            return false;
        var left = -gameObject.width / 2;
        var right = gameObject.width / 2;
        var top = -gameObject.height / 2;
        var bottom = gameObject.height / 2;
        if (pointer) {
            var worldMatrix = gameObject.getWorldTransformMatrix();
            var x = pointer.x - worldMatrix.tx - gameObject.x;
            var y = pointer.y - worldMatrix.ty - gameObject.y;
            if (left <= x && right >= x && top <= y && bottom >= y) {
                return true;
            }
            return false;
        }
        return false;
    };
    Tool.baseName = function (str) {
        var base = new String(str).substring(str.lastIndexOf("/") + 1);
        if (base.lastIndexOf(".") !== -1)
            base = base.substring(0, base.lastIndexOf("."));
        return base;
    };
    Tool.chunk = function (str, n) {
        var result = [];
        for (var i = 0; i < str.length; i += n) {
            result.push(str.substr(i, n));
        }
        return result;
    };
    return Tool;
}());



/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RankMediator", function() { return RankMediator; });
/* harmony import */ var _RankPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(228);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var RankMediator = /** @class */ (function (_super) {
    __extends(RankMediator, _super);
    function RankMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mScene = scene;
        _this.mlayerManager = layerManager;
        _this.mUIType = _this.world.game.device.os.desktop ? _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__[/* UIType */ "a"].Scene : _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__[/* UIType */ "a"].Normal;
        return _this;
    }
    RankMediator.prototype.tweenView = function (show) {
        if (!this.mView || !this.world.game.device.os.desktop)
            return;
        this.mView.tweenView(show);
    };
    RankMediator.prototype.getName = function () {
        return "";
    };
    RankMediator.prototype.getView = function () {
        return this.mView;
    };
    RankMediator.prototype.hide = function () {
        this.mShow = false;
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
            if (!this.world.game.device.os.desktop) {
                this.world.uiManager.checkUIState(RankMediator.NAME, true);
            }
        }
    };
    RankMediator.prototype.isSceneUI = function () {
        return false;
    };
    RankMediator.prototype.isShow = function () {
        return false;
    };
    RankMediator.prototype.resize = function () {
        if (this.mView)
            this.mView.resize();
    };
    RankMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        this.mView = new _RankPanel__WEBPACK_IMPORTED_MODULE_0__["RankPanel"](this.mScene, this.world);
        this.mlayerManager.addToUILayer(this.mView);
        if (param && param.length > 0) {
            this.mView.addItem(param[0]);
        }
        this.mView.show();
        if (!this.world.game.device.os.desktop) {
            this.world.uiManager.checkUIState(RankMediator.NAME, false);
        }
        _super.prototype.show.call(this, param);
    };
    RankMediator.prototype.update = function (param) {
        if (!this.mView)
            return;
        if (param && param.length > 0) {
            this.mView.update(param[0]);
        }
    };
    RankMediator.prototype.destroy = function () {
        if (this.mView) {
            if (this.mView.parentContainer) {
                this.mView.parentContainer.remove(this.mView);
            }
            this.mView.destroy();
            this.mView = null;
        }
        this.mScene = null;
    };
    RankMediator.NAME = "RankMediator";
    return RankMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckboxGroup", function() { return CheckboxGroup; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CheckboxGroup = /** @class */ (function (_super) {
    __extends(CheckboxGroup, _super);
    function CheckboxGroup() {
        var _this = _super.call(this) || this;
        _this.mList = [];
        return _this;
    }
    CheckboxGroup.prototype.appendItem = function (item) {
        this.mList.push(item);
        item.on("Tap", this.onGameObjectUpHandler, this);
        return this;
    };
    CheckboxGroup.prototype.appendItemAll = function (items) {
        this.mList = this.mList.concat(items);
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            item.on("Tap", this.onGameObjectUpHandler, this);
        }
        return this;
    };
    CheckboxGroup.prototype.removeItem = function (item) {
        this.mList = this.mList.filter(function (button) { return button !== item; });
        item.removeAllListeners();
        return this;
    };
    CheckboxGroup.prototype.selectIndex = function (index) {
        if (index < 0) {
            index = 0;
        }
        if (index >= this.mList.length) {
            index = this.mList.length - 1;
        }
        if (this.mList.length > 0) {
            this.select(this.mList[index]);
        }
        return this;
    };
    CheckboxGroup.prototype.select = function (item) {
        if (this.mPrevButton === item) {
            return;
        }
        if (this.mPrevButton) {
            this.mPrevButton.changeNormal();
        }
        item.changeDown();
        this.emit("selected", item, this.mPrevButton);
        this.mPrevButton = item;
    };
    CheckboxGroup.prototype.reset = function () {
        var _this = this;
        if (this.mList) {
            this.mList.forEach(function (item) {
                _this.removeItem(item);
            });
        }
    };
    CheckboxGroup.prototype.destroy = function () {
        var _this = this;
        if (this.mList) {
            this.mList.forEach(function (item) {
                _this.removeItem(item);
                item.destroy();
            });
        }
        _super.prototype.destroy.call(this);
    };
    CheckboxGroup.prototype.onGameObjectUpHandler = function (pointer, gameobject) {
        this.select(gameobject);
    };
    return CheckboxGroup;
}(Phaser.Events.EventEmitter));



/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/struct/Stack.js
class Stack {
    constructor() {
        this.items = [];
    }

    destroy() {
        this.clear();
        this.items = undefined;
    }

    pop() {
        return (this.items.length > 0) ? this.items.pop() : null;
    }

    push(l) {
        this.items.push(l);
        return this;
    }

    pushMultiple(arr) {
        this.items.push.apply(this.items, arr);
        arr.length = 0;
        return this;
    }

    clear() {
        this.items.length = 0;
        return this;
    }
}

/* harmony default export */ var struct_Stack = (Stack);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/pool.js

/* harmony default export */ var pool = __webpack_exports__["a"] = (struct_Stack);

/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ElementManager; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(117);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);
/* harmony import */ var _utils_pos__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(111);
/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(123);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var NodeType = pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].NodeType;
var ElementManager = /** @class */ (function (_super) {
    __extends(ElementManager, _super);
    function ElementManager(mRoom) {
        var _this = _super.call(this) || this;
        _this.mRoom = mRoom;
        _this.hasAddComplete = false;
        _this.mElements = new Map();
        if (_this.connection) {
            _this.connection.addPacketListener(_this);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ADD_SPRITE, _this.onAdd);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ADD_SPRITE_END, _this.addComplete);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_DELETE_SPRITE, _this.onRemove);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE, _this.onMove);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ADJUST_POSITION, _this.onAdjust);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_SYNC_SPRITE, _this.onSync);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_ONLY_BUBBLE, _this.onShowBubble);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_ONLY_BUBBLE_CLEAN, _this.onClearBubbleHandler);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_CHANGE_SPRITE_ANIMATION, _this.onChangeAnimation);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_SET_SPRITE_POSITION, _this.onSetPosition);
        }
        if (_this.mRoom && _this.mRoom.world) {
            _this.mGameConfig = _this.mRoom.world.elementStorage;
        }
        var size = _this.mRoom.miniSize;
        _this.mMap = new Array(size.cols);
        for (var i = 0; i < _this.mMap.length; i++) {
            _this.mMap[i] = new Array(size.rows).fill(-1);
        }
        return _this;
    }
    ElementManager.prototype.init = function () {
        // this.destroy();
    };
    ElementManager.prototype.get = function (id) {
        var element = this.mElements.get(id);
        if (!element) {
            return;
        }
        return element;
    };
    ElementManager.prototype.remove = function (id) {
        var element = this.mElements.get(id);
        if (element) {
            this.mElements.delete(id);
            element.destroy();
            this.removeMap(element.model);
        }
        return element;
    };
    ElementManager.prototype.getElements = function () {
        return Array.from(this.mElements.values());
    };
    ElementManager.prototype.add = function (sprites, addMap) {
        for (var _i = 0, sprites_1 = sprites; _i < sprites_1.length; _i++) {
            var sprite = sprites_1[_i];
            this._add(sprite, addMap);
        }
    };
    ElementManager.prototype.destroy = function () {
        var _this = this;
        if (this.connection) {
            this.connection.removePacketListener(this);
        }
        if (!this.mElements)
            return;
        this.mElements.forEach(function (element) { return _this.remove(element.id); });
        this.mElements.clear();
    };
    ElementManager.prototype.update = function (time, delta) { };
    ElementManager.prototype.addMap = function (sprite) { };
    ElementManager.prototype.removeMap = function (sprite) { };
    Object.defineProperty(ElementManager.prototype, "camera", {
        get: function () {
            return this.mRoom.cameraService.camera;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElementManager.prototype, "connection", {
        get: function () {
            if (this.mRoom) {
                return this.mRoom.connection;
            }
            _utils_log__WEBPACK_IMPORTED_MODULE_3__[/* Logger */ "a"].getInstance().log("roomManager is undefined");
            return;
        },
        enumerable: false,
        configurable: true
    });
    ElementManager.prototype.onAdjust = function (packet) {
        var content = packet.content;
        var sprites = content.spritePositions;
        var type = content.nodeType;
        if (type !== NodeType.ElementNodeType) {
            return;
        }
        var ele;
        var point;
        for (var _i = 0, sprites_2 = sprites; _i < sprites_2.length; _i++) {
            var sprite = sprites_2[_i];
            ele = this.mElements.get(sprite.id);
            if (!ele) {
                continue;
            }
            point = sprite.point3f;
            ele.setPosition(new _utils_pos__WEBPACK_IMPORTED_MODULE_4__[/* Pos */ "a"](point.x || 0, point.y || 0, point.z || 0));
        }
    };
    ElementManager.prototype.onAdd = function (packet) {
        if (!this.mRoom.layerManager) {
            _utils_log__WEBPACK_IMPORTED_MODULE_3__[/* Logger */ "a"].getInstance().error("layer manager does not exist");
            return;
        }
        if (!this.mGameConfig) {
            _utils_log__WEBPACK_IMPORTED_MODULE_3__[/* Logger */ "a"].getInstance().error("gameConfig does not exist");
            return;
        }
        var content = packet.content;
        var objs = content.sprites;
        if (!objs)
            return;
        var type = content.nodeType;
        if (type !== NodeType.ElementNodeType) {
            return;
        }
        var point;
        var sprite = null;
        var ids = [];
        for (var _i = 0, objs_1 = objs; _i < objs_1.length; _i++) {
            var obj = objs_1[_i];
            point = obj.point3f;
            if (point) {
                sprite = new _sprite__WEBPACK_IMPORTED_MODULE_5__[/* Sprite */ "a"](obj, content.nodeType);
                if (!sprite.displayInfo) {
                    if (!this.checkDisplay(sprite)) {
                        ids.push(sprite.id);
                    }
                }
                this._add(sprite);
            }
        }
        this.fetchDisplay(ids);
    };
    ElementManager.prototype._add = function (sprite, addMap) {
        if (addMap === undefined)
            addMap = true;
        var ele = this.mElements.get(sprite.id);
        if (ele) {
            ele.model = sprite;
        }
        else {
            ele = new _element__WEBPACK_IMPORTED_MODULE_2__[/* Element */ "b"](sprite, this);
            ele.setInputEnable(_element__WEBPACK_IMPORTED_MODULE_2__[/* InputEnable */ "c"].Interactive);
        }
        // if (!ele) ele = new Element(sprite, this);
        if (addMap)
            this.addMap(sprite);
        this.mElements.set(ele.id || 0, ele);
        return ele;
    };
    ElementManager.prototype.addComplete = function (packet) {
        this.hasAddComplete = true;
    };
    ElementManager.prototype.checkDisplay = function (sprite) {
        if (!sprite.displayInfo) {
            var displayInfo = this.roomService.world.elementStorage.getDisplayModel(sprite.bindID || sprite.id);
            if (displayInfo) {
                sprite.displayInfo = displayInfo;
                return displayInfo;
            }
        }
    };
    ElementManager.prototype.fetchDisplay = function (ids) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_REQ_VIRTUAL_WORLD_QUERY_SPRITE_RESOURCE);
        var content = packet.content;
        content.ids = ids;
        this.connection.send(packet);
    };
    Object.defineProperty(ElementManager.prototype, "roomService", {
        get: function () {
            return this.mRoom;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElementManager.prototype, "scene", {
        get: function () {
            if (this.mRoom) {
                return this.mRoom.scene;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElementManager.prototype, "map", {
        get: function () {
            return this.mMap;
        },
        enumerable: false,
        configurable: true
    });
    ElementManager.prototype.onSetPosition = function (packet) {
        var content = packet.content;
        var type = content.nodeType;
        var id = content.id;
        if (type !== NodeType.ElementNodeType) {
            return;
        }
        var ele = this.get(id);
        ele.setPosition(new _utils_pos__WEBPACK_IMPORTED_MODULE_4__[/* Pos */ "a"](content.position.x, content.position.y, content.position.z));
    };
    ElementManager.prototype.onRemove = function (packet) {
        var content = packet.content;
        var type = content.nodeType;
        var ids = content.ids;
        if (type !== NodeType.ElementNodeType) {
            return;
        }
        for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
            var id = ids_1[_i];
            this.remove(id);
        }
    };
    ElementManager.prototype.onSync = function (packet) {
        var content = packet.content;
        if (content.nodeType !== NodeType.ElementNodeType) {
            return;
        }
        var element = null;
        var sprites = content.sprites;
        var command = content.command;
        for (var _i = 0, sprites_3 = sprites; _i < sprites_3.length; _i++) {
            var sprite = sprites_3[_i];
            element = this.get(sprite.id);
            if (element) {
                if (command === pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].OpCommand.OP_COMMAND_UPDATE) {
                    element.model = new _sprite__WEBPACK_IMPORTED_MODULE_5__[/* Sprite */ "a"](sprite);
                }
                else if (command === pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].OpCommand.OP_COMMAND_PATCH) {
                    element.updateModel(sprite);
                }
                // const sp = new Sprite(sprite, content.nodeType);
                // element.model = sp;
                // this.addMap(sp);
            }
        }
    };
    ElementManager.prototype.onMove = function (packet) {
        var content = packet.content;
        if (content.moveData) {
            var moveDataList = content.moveData;
            var len = moveDataList.length;
            var type = content.nodeType || null;
            var moveData = void 0;
            var elementID = void 0;
            var element = void 0;
            for (var i = 0; i < len; i++) {
                moveData = moveDataList[i];
                elementID = moveData.moveObjectId;
                element = this.get(elementID);
                // Console.log(player.x + "," + player.y + ":" + moveData.destinationPoint3f.x + "," + moveData.destinationPoint3f.y + ":" + moveData.timeSpan);
                if (!element) {
                    continue;
                }
                element.move(moveData);
            }
        }
    };
    ElementManager.prototype.onShowBubble = function (packet) {
        var content = packet.content;
        var element = this.get(content.receiverid);
        if (element) {
            element.showBubble(content.context, content.chatsetting);
        }
    };
    ElementManager.prototype.onClearBubbleHandler = function (packet) {
        var content = packet.content;
        var element = this.get(content.receiverid);
        if (element) {
            element.clearBubble();
        }
    };
    ElementManager.prototype.onChangeAnimation = function (packet) {
        var content = packet.content;
        if (content.nodeType !== NodeType.ElementNodeType) {
            return;
        }
        var ele = null;
        var ids = content.ids;
        for (var _i = 0, ids_2 = ids; _i < ids_2.length; _i++) {
            var id = ids_2[_i];
            ele = this.get(id);
            if (ele) {
                ele.setQueue(content.changeAnimation);
            }
        }
    };
    return ElementManager;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export DisplayField */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FramesDisplay; });
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _display_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(148);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(104);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var DisplayField;
(function (DisplayField) {
    DisplayField[DisplayField["BACKEND"] = 1] = "BACKEND";
    DisplayField[DisplayField["STAGE"] = 2] = "STAGE";
    DisplayField[DisplayField["FRONTEND"] = 3] = "FRONTEND";
})(DisplayField || (DisplayField = {}));
/**
 * 序列帧显示对象
 */
var FramesDisplay = /** @class */ (function (_super) {
    __extends(FramesDisplay, _super);
    function FramesDisplay() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mDisplayDatas = new Map();
        _this.mSprites = new Map();
        _this.mHasAnimation = false;
        return _this;
    }
    // private mAnimations: Map<DisplayField, Map<string, Phaser.Types.Animations.Animation>> = new Map<DisplayField, Map<string, Phaser.Types.Animations.Animation>>();
    FramesDisplay.prototype.setPosition = function (x, y, z) {
        _super.prototype.setPosition.call(this, x, y, z);
        this.setDepth(this.x + this.baseLoc.x + this.y + this.baseLoc.y);
        return this;
    };
    FramesDisplay.prototype.load = function (displayInfo, field) {
        field = !field ? DisplayField.STAGE : field;
        var data = displayInfo;
        if (!data || !data.gene)
            return;
        var currentDisplay = this.mDisplayDatas.get(field);
        if (currentDisplay && currentDisplay.gene === displayInfo.gene) {
            return;
        }
        this.mDisplayDatas.set(field, data);
        if (this.scene.textures.exists(data.gene)) {
            this.onLoadCompleted(field);
        }
        else {
            var display = data.display;
            if (!display) {
                _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().error("display is undefined");
            }
            this.scene.load.atlas(data.gene, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].OSD_PATH + display.texturePath, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].OSD_PATH + display.dataPath);
            // this.scene.load.once(Phaser.Loader.Events.FILE_LOAD_ERROR, (imageFile: ImageFile) => {
            //     Logger.error(`Loading Error: key = ${imageFile} >> ${imageFile.url}`);
            // }, this);
            this.scene.textures.on(Phaser.Textures.Events.ADD, this.onAddTextureHandler, this);
            this.scene.load.start();
        }
    };
    FramesDisplay.prototype.play = function (animation, field) {
        this.mActionName = animation;
        if (!animation)
            return;
        field = !field ? DisplayField.STAGE : field;
        var data = this.mDisplayDatas.get(field);
        var sprite = this.mSprites.get(field);
        var ani = data.getAnimations(animation.animationName);
        if (!ani) {
            return;
        }
        if (sprite) {
            if (sprite instanceof Phaser.GameObjects.Sprite) {
                sprite.off(Phaser.Animations.Events.ANIMATION_REPEAT, this.onAnimationRepeatHander, this);
                if (ani.frameName.length > 1) {
                    sprite.play(data.gene + "_" + animation.animationName);
                    // if (animation.playTimes !== undefined) {
                    //     sprite.anims.setRepeat(animation.playTimes);
                    if (animation.playingQueue && animation.playingQueue.complete) {
                        sprite.on(Phaser.Animations.Events.ANIMATION_REPEAT, this.onAnimationRepeatHander, this);
                    }
                    // }
                }
                else {
                    sprite.anims.stop();
                    sprite.setTexture(data.gene, ani.frameName[0]);
                }
            }
            else {
                sprite.setTexture(data.gene, ani.frameName[0]);
            }
            this.scaleX = animation.flip ? -1 : 1;
            // this.flipX = animation.flip;
        }
        this.initBaseLoc(field, animation.animationName);
    };
    FramesDisplay.prototype.fadeIn = function (callback) {
        if (this.mAlpha === 0) {
            return;
        }
        this.alpha = 0;
        this.clearFadeTween();
        this.mFadeTween = this.scene.tweens.add({
            targets: this,
            alpha: this.mAlpha,
            duration: 1200,
            onComplete: function () {
                if (callback)
                    callback();
            },
        });
    };
    FramesDisplay.prototype.fadeOut = function (callback) {
        this.clearFadeTween();
        this.mFadeTween = this.scene.tweens.add({
            targets: this,
            alpha: 0,
            duration: 1200,
            onComplete: function () {
                if (callback)
                    callback();
            },
        });
    };
    FramesDisplay.prototype.scaleTween = function () {
        var _this = this;
        var display = this.mSprites.get(DisplayField.STAGE);
        if (!display) {
            return;
        }
        if (this.mScaleTween) {
            return;
        }
        var tmp = display.scale;
        this.mScaleTween = this.scene.tweens.add({
            targets: display,
            duration: 100,
            scale: tmp * 1.25,
            yoyo: true,
            repeat: 0,
            onComplete: function () {
                display.scale = 1;
                if (_this.mScaleTween) {
                    // this.mScaleTween.destroy();
                    _this.mScaleTween = undefined;
                }
            },
        });
    };
    FramesDisplay.prototype.setInteractive = function (shape, callback, dropZone) {
        // super.setInteractive(shape, callback, dropZone);
        this.mSprites.forEach(function (sprite) {
            sprite.setInteractive({ pixelPerfect: true });
        });
        return this;
    };
    FramesDisplay.prototype.disableInteractive = function () {
        // super.disableInteractive();
        this.mSprites.forEach(function (sprite) {
            sprite.disableInteractive();
        });
        return this;
    };
    FramesDisplay.prototype.destroy = function () {
        this.mSprites.forEach(function (sprite) { return sprite.destroy(); });
        this.mSprites.clear();
        if (this.mFadeTween) {
            this.clearFadeTween();
            this.mFadeTween = undefined;
        }
        if (this.mScaleTween) {
            this.mScaleTween.stop();
            this.mScaleTween = undefined;
        }
        this.mDisplayDatas.clear();
        _super.prototype.destroy.call(this);
    };
    FramesDisplay.prototype.clearFadeTween = function () {
        if (this.mFadeTween) {
            this.mFadeTween.stop();
            this.mFadeTween.remove();
        }
    };
    FramesDisplay.prototype.onAddTextureHandler = function (key) {
        var data = this.mDisplayDatas.get(DisplayField.STAGE);
        if (data && data.gene === key) {
            this.scene.textures.off(Phaser.Textures.Events.ADD, this.onAddTextureHandler, this);
            this.onLoadCompleted(DisplayField.STAGE);
        }
    };
    FramesDisplay.prototype.onLoadCompleted = function (field) {
        var data = this.mDisplayDatas.get(field);
        if (!data) {
            return;
        }
        if (this.scene.textures.exists(data.gene)) {
            this.makeAnimations(field);
            this.createDisplay(field);
        }
    };
    FramesDisplay.prototype.makeAnimations = function (field) {
        var data = this.mDisplayDatas.get(field);
        if (!data)
            return;
        var animations = Array.from(data.animations.values());
        for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
            var ani = animations_1[_i];
            this.makeAnimation(field, ani);
        }
    };
    FramesDisplay.prototype.makeAnimation = function (field, animation) {
        var data = this.mDisplayDatas.get(field);
        if (!animation || !data || !data.gene)
            return;
        if (animation.frameName.length <= 1)
            return;
        // Didn't find a good way to create an animation with frame names without a pattern.
        var frames = [];
        animation.frameName.forEach(function (frame) {
            frames.push({ key: data.gene, frame: frame });
        });
        var key = data.gene + "_" + animation.name;
        var config = {
            key: key,
            frames: frames,
            frameRate: animation.frameRate,
            repeat: animation.loop ? -1 : 0,
        };
        this.mHasAnimation = true;
        this.scene.anims.create(config);
    };
    FramesDisplay.prototype.initBaseLoc = function (field, aniName) {
        var data = this.mDisplayDatas.get(field);
        var sprite = this.mSprites.get(field);
        if (!sprite || !data || !data.animations)
            return;
        var animations = data.getAnimations(aniName);
        if (!animations)
            return;
        this.mBaseLoc = animations.baseLoc;
        this.mCollisionArea = animations.collisionArea;
        this.mOriginPoint = animations.originPoint;
        sprite.x = this.baseLoc.x + sprite.width / 2;
        sprite.y = this.baseLoc.y + sprite.height / 2;
    };
    FramesDisplay.prototype.createDisplay = function (field) {
        var data = this.mDisplayDatas.get(field);
        if (!data || !data.gene)
            return;
        var sprite = this.mSprites.get(field);
        // Create Sprite
        if (!sprite) {
            if (this.mHasAnimation) {
                sprite = this.scene.make.sprite(undefined, false);
            }
            else {
                sprite = this.scene.make.image(undefined, false);
                // sprite.setTexture(data.gene);
            }
            this.mSprites.set(field, sprite);
        }
        this.play({ animationName: data.animationName, flip: false }, field);
        sprite.x = this.baseLoc.x + sprite.width / 2;
        sprite.y = this.baseLoc.y + sprite.height / 2;
        if (this.mAntial) {
            sprite.texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
        }
        this.addAt(sprite, field);
        // sprite.setInteractive({ pixelPerfect: true });
        this.setData("id", data.id);
        // this.mSprites.set(field, sprite);
        this.emit("initialized", this);
    };
    FramesDisplay.prototype.onAnimationRepeatHander = function () {
        var queue = this.mActionName.playingQueue;
        if (queue.playedTimes === undefined) {
            queue.playedTimes = 1;
        }
        else {
            queue.playedTimes++;
        }
        if (queue.playedTimes >= queue.playTimes) {
            var sprite = this.mSprites.get(DisplayField.STAGE);
            if (sprite) {
                sprite.off(Phaser.Animations.Events.ANIMATION_REPEAT, this.onAnimationRepeatHander, this);
            }
            // this.emit("animationComplete");
            if (queue.complete) {
                queue.complete.call(this);
                delete queue.complete;
            }
        }
    };
    Object.defineProperty(FramesDisplay.prototype, "spriteWidth", {
        get: function () {
            var sprite = this.mSprites.get(DisplayField.STAGE);
            if (sprite) {
                return sprite.width;
            }
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FramesDisplay.prototype, "spriteHeight", {
        get: function () {
            var sprite = this.mSprites.get(DisplayField.STAGE);
            if (sprite) {
                return sprite.height;
            }
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    return FramesDisplay;
}(_display_object__WEBPACK_IMPORTED_MODULE_1__[/* DisplayObject */ "a"]));



/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DragonbonesModel; });
/* harmony import */ var _element_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(117);

var DragonbonesModel = /** @class */ (function () {
    function DragonbonesModel(data) {
        this.discriminator = "DragonbonesModel";
        // this.id = id;
        // this.avatar = avatar;
        if (data) {
            this.id = data.id;
            this.avatar = data.avatar;
        }
    }
    DragonbonesModel.prototype.setInfo = function (val) {
        for (var key in val) {
            if (val.hasOwnProperty(key)) {
                this[key] = val[key];
            }
        }
    };
    DragonbonesModel.prototype.destroy = function () {
    };
    DragonbonesModel.prototype.getCollisionArea = function (aniName) {
        return [[1, 1], [1, 1]];
    };
    DragonbonesModel.prototype.getWalkableArea = function () {
        return [[1, 1], [1, 1]];
    };
    DragonbonesModel.prototype.getOriginPoint = function (aniName) {
        return new Phaser.Geom.Point(1, 1);
    };
    DragonbonesModel.prototype.getInteractiveArea = function () {
        return undefined;
    };
    DragonbonesModel.prototype.existAnimation = function (aniName) {
        return true;
    };
    DragonbonesModel.prototype.findAnimation = function (baseName, dir) {
        var flip = false;
        switch (dir) {
            case _element_element__WEBPACK_IMPORTED_MODULE_0__[/* Direction */ "a"].south_east:
                flip = true;
                dir = _element_element__WEBPACK_IMPORTED_MODULE_0__[/* Direction */ "a"].west_south;
                break;
            case _element_element__WEBPACK_IMPORTED_MODULE_0__[/* Direction */ "a"].east_north:
                flip = true;
                dir = _element_element__WEBPACK_IMPORTED_MODULE_0__[/* Direction */ "a"].north_west;
                break;
        }
        var addName = "";
        if ((dir >= _element_element__WEBPACK_IMPORTED_MODULE_0__[/* Direction */ "a"].north && dir < _element_element__WEBPACK_IMPORTED_MODULE_0__[/* Direction */ "a"].west) || dir > _element_element__WEBPACK_IMPORTED_MODULE_0__[/* Direction */ "a"].east && dir <= _element_element__WEBPACK_IMPORTED_MODULE_0__[/* Direction */ "a"].east_north)
            addName = "_back";
        return { animationName: "" + baseName + addName, flip: flip };
    };
    return DragonbonesModel;
}());



/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FramesModel; });
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var simple_sha1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(407);
/* harmony import */ var simple_sha1__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(simple_sha1__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(203);
/* harmony import */ var _element_sprite__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(123);
/* harmony import */ var _element_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(117);






var FramesModel = /** @class */ (function () {
    function FramesModel(data) {
        this.discriminator = "FramesModel";
        // TODO 定义IElement接口
        this.id = data.id || 0;
        this.type = data.sn || "";
        var anis = data.animations;
        if (anis) {
            this.animationName = anis.defaultAnimationName;
            this.setDisplay(anis.display);
            this.setAnimationData(anis.animationData);
        }
    }
    FramesModel.prototype.setInfo = function (val) {
        for (var key in val) {
            if (val.hasOwnProperty(key)) {
                this[key] = val[key];
            }
        }
    };
    FramesModel.prototype.getAnimationData = function () {
        return this.animations;
    };
    FramesModel.prototype.existAnimation = function (aniName) {
        if (!this.animations)
            return false;
        return this.animations.has(aniName);
    };
    FramesModel.prototype.getAnimations = function (name) {
        if (!this.animations)
            return;
        return this.animations.get(name);
    };
    FramesModel.prototype.destroy = function () {
        if (this.animations)
            this.animations.clear();
    };
    Object.defineProperty(FramesModel.prototype, "gene", {
        get: function () {
            return this.mGen;
        },
        enumerable: false,
        configurable: true
    });
    FramesModel.prototype.toClient = function () {
        var anis = [];
        this.animations.forEach(function (ani) {
            anis.push(ani.toClient());
        }, this);
        return anis;
    };
    FramesModel.prototype.getCollisionArea = function (aniName, flip) {
        if (flip === void 0) { flip = false; }
        var ani = this.getAnimations(aniName);
        if (ani) {
            if (flip) {
                return _utils_helpers__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].flipArray(ani.collisionArea);
            }
            return ani.collisionArea;
        }
    };
    FramesModel.prototype.getWalkableArea = function (aniName, flip) {
        if (flip === void 0) { flip = false; }
        var ani = this.getAnimations(aniName);
        if (flip) {
            return _utils_helpers__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].flipArray(ani.walkableArea);
        }
        return ani.walkableArea;
    };
    FramesModel.prototype.getInteractiveArea = function (aniName) {
        var ani = this.getAnimations(aniName);
        return ani ? ani.interactiveArea : undefined;
    };
    FramesModel.prototype.getOriginPoint = function (aniName, flip) {
        if (flip === void 0) { flip = false; }
        var ani = this.getAnimations(aniName);
        if (ani) {
            var originPoint = ani.originPoint;
            if (flip) {
                return new Phaser.Geom.Point(originPoint.y, originPoint.x);
            }
            return originPoint;
        }
    };
    FramesModel.prototype.getDirable = function () { };
    FramesModel.prototype.createSprite = function (properties) {
        var nodeType = properties.nodeType, x = properties.x, y = properties.y, z = properties.z, id = properties.id, dir = properties.dir, isMoss = properties.isMoss;
        var spr = pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__["op_client"].Sprite.create();
        if (id) {
            spr.id = id;
        }
        else {
            spr.id = _utils_helpers__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].genId();
        }
        spr.display = this.display;
        spr.currentAnimationName = this.animationName;
        var point3f = pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__["op_def"].PBPoint3f.create();
        point3f.x = x;
        point3f.y = y;
        if (z) {
            point3f.z = z;
        }
        spr.point3f = point3f;
        spr.animations = this.toClient();
        if (dir) {
            spr.direction = dir;
        }
        if (isMoss !== undefined) {
            spr.isMoss = isMoss;
        }
        return new _element_sprite__WEBPACK_IMPORTED_MODULE_4__[/* Sprite */ "a"](spr, nodeType);
    };
    FramesModel.prototype.findAnimation = function (baseName, dir) {
        var animationName = this.checkDirectionAnimation(baseName, dir);
        var flip = false;
        if (animationName) {
            return { animationName: animationName, flip: flip };
        }
        switch (dir) {
            case _element_element__WEBPACK_IMPORTED_MODULE_5__[/* Direction */ "a"].west_south:
            case _element_element__WEBPACK_IMPORTED_MODULE_5__[/* Direction */ "a"].east_north:
                animationName = this.getDefaultAnimation(baseName);
                break;
            case _element_element__WEBPACK_IMPORTED_MODULE_5__[/* Direction */ "a"].south_east:
                animationName = this.getDefaultAnimation(baseName);
                flip = true;
                break;
            case _element_element__WEBPACK_IMPORTED_MODULE_5__[/* Direction */ "a"].north_west:
                animationName = this.checkDirectionAnimation(baseName, _element_element__WEBPACK_IMPORTED_MODULE_5__[/* Direction */ "a"].east_north);
                if (animationName === null) {
                    animationName = this.getDefaultAnimation(baseName);
                }
                flip = true;
                break;
        }
        return { animationName: animationName, flip: flip };
    };
    FramesModel.prototype.setDisplay = function (display) {
        if (!display) {
            _utils_log__WEBPACK_IMPORTED_MODULE_1__[/* Logger */ "a"].getInstance().error(this.type + " display does not exist");
            return;
        }
        this.display = {
            dataPath: display.dataPath,
            texturePath: display.texturePath,
        };
        this.mGen = simple_sha1__WEBPACK_IMPORTED_MODULE_2__["sync"](display.dataPath + display.texturePath);
    };
    FramesModel.prototype.setAnimationData = function (aniDatas) {
        if (!aniDatas) {
            _utils_log__WEBPACK_IMPORTED_MODULE_1__[/* Logger */ "a"].getInstance().error(this.id + " animationData does not exist");
            return;
        }
        this.animations = new Map();
        // let ani: IAnimationData;
        for (var _i = 0, aniDatas_1 = aniDatas; _i < aniDatas_1.length; _i++) {
            var aniData = aniDatas_1[_i];
            // const baseLoc = aniData.baseLoc;
            // ani = {
            //     name: aniData.name,
            //     frameName: aniData.frameName,
            //     frameRate: aniData.frameRate,
            //     loop: aniData.loop,
            //     baseLoc: new Phaser.Geom.Point(baseLoc.x, baseLoc.y),
            //     // walkableArea: aniData.walkableArea || [],
            //     collisionArea: aniData.collisionArea || [],
            //     originPoint: aniData.originPoint
            // };
            this.animations.set(aniData.name, aniData);
            // this.animations.set(aniData.name + "_7", aniData);
            // this.animations.set(aniData.name + "_1", aniData);
            // this.animations.set(aniData.name + "_5", aniData);
        }
    };
    FramesModel.prototype.checkDirectionAnimation = function (baseAniName, dir) {
        var aniName = baseAniName + "_" + dir;
        if (this.existAnimation(aniName)) {
            return aniName;
        }
        return null;
    };
    FramesModel.prototype.getDefaultAnimation = function (baseName) {
        var animationName = this.checkDirectionAnimation(baseName, _element_element__WEBPACK_IMPORTED_MODULE_5__[/* Direction */ "a"].west_south);
        if (animationName === null) {
            if (this.existAnimation(baseName)) {
                animationName = baseName;
            }
            else {
                _utils_log__WEBPACK_IMPORTED_MODULE_1__[/* Logger */ "a"].getInstance().warn(FramesModel.name + ": can't find animation " + baseName);
                animationName = "idle";
            }
        }
        return animationName;
    };
    return FramesModel;
}());



/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PlayScene; });
/* harmony import */ var _main_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(341);
/* harmony import */ var _basic_scene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(128);
/* harmony import */ var _rooms_cameras_play_camera__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(342);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



// 游戏正式运行用 Phaser.Scene
var PlayScene = /** @class */ (function (_super) {
    __extends(PlayScene, _super);
    function PlayScene(config) {
        return _super.call(this, config || { key: PlayScene.name }) || this;
    }
    PlayScene.prototype.preload = function () { };
    PlayScene.prototype.init = function (data) {
        if (data) {
            this.mRoom = data.room;
        }
    };
    PlayScene.prototype.create = function () {
        var scene = this.game.scene.getScene(_main_ui__WEBPACK_IMPORTED_MODULE_0__[/* MainUIScene */ "a"].name);
        var oldCamera = this.cameras.main;
        this.cameras.addExisting(new _rooms_cameras_play_camera__WEBPACK_IMPORTED_MODULE_2__[/* PlayCamera */ "a"](0, 0, this.sys.scale.width, this.sys.scale.height, this.mRoom.world.scaleRatio), true);
        this.cameras.remove(oldCamera);
        if (!scene.scene.isActive()) {
            this.scene.launch(_main_ui__WEBPACK_IMPORTED_MODULE_0__[/* MainUIScene */ "a"].name, {
                room: this.mRoom,
            });
        }
        this.scene.sendToBack();
        this.scale.on("orientationchange", this.checkOriention, this);
        this.scale.on("resize", this.checkSize, this);
        if (this.mRoom)
            this.mRoom.startPlay();
    };
    PlayScene.prototype.update = function (time, delta) {
        // if (this.cameras.main) {
        //   this.cameras.main.emit("renderer", this.cameras.main);
        // }
        if (this.mRoom) {
            this.mRoom.update(time, delta);
        }
    };
    PlayScene.prototype.setViewPort = function (x, y, width, height) {
        _super.prototype.setViewPort.call(this, x, y, width, height);
        this.cameras.main.zoom = Math.ceil(window.devicePixelRatio);
    };
    PlayScene.prototype.getKey = function () {
        return this.sys.config.key;
    };
    PlayScene.prototype.checkOriention = function (orientation) {
        if (orientation === Phaser.Scale.PORTRAIT) {
        }
        else if (orientation === Phaser.Scale.LANDSCAPE) {
        }
    };
    PlayScene.prototype.checkSize = function (size) {
        var width = size.width;
        var height = size.height;
    };
    return PlayScene;
}(_basic_scene__WEBPACK_IMPORTED_MODULE_1__[/* BasicScene */ "a"]));



/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _plugins_gameobjects_containerlite_ContainerLite_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(385);

/* harmony default export */ __webpack_exports__["a"] = (_plugins_gameobjects_containerlite_ContainerLite_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);

/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var IsPointerInBounds = function (gameObject, pointer, preTest, postTest) {
    if (globRect === undefined) {
        globRect = new Phaser.Geom.Rectangle();
    }
    gameObject.getBounds(globRect);

    if (pointer) {
        if (preTest && !preTest(gameObject, pointer)) {
            return false;
        }
        if (!globRect.contains(pointer.x, pointer.y)) {
            return false;
        }
        if (postTest && !postTest(gameObject, pointer)) {
            return false;
        }
        return true;

    } else {
        var inputManager = gameObject.scene.input.manager;
        var pointersTotal = inputManager.pointersTotal;
        var pointers = inputManager.pointers;
        for (var i = 0; i < pointersTotal; i++) {
            pointer = pointers[i];
            if (preTest && !preTest(gameObject, pointer)) {
                continue;
            }
            if (!globRect.contains(pointer.x, pointer.y)) {
                continue;
            }
            if (postTest && !postTest(gameObject, pointer)) {
                continue;
            }
            return true;
        }
        return false;

    }

}

var globRect = undefined;

/* harmony default export */ __webpack_exports__["a"] = (IsPointerInBounds);

/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _GetParentSizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(153);


var GetTopmostSizer = function (gameObject) {
    var parent = Object(_GetParentSizer_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(gameObject);
    while (parent) {
        gameObject = parent;
        parent = Object(_GetParentSizer_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(parent);
    }
    return gameObject;
}

/* harmony default export */ __webpack_exports__["a"] = (GetTopmostSizer);

/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _ScrollModeConst_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(347);


const GetValue = Phaser.Utils.Objects.GetValue;

var GetScrollMode = function (config, key) {
    if (key === undefined) {
        key = 'scrollMode';
    }
    var scrollMode = GetValue(config, 'scrollMode', 0); // Vertical
    if (typeof (scrollMode) === 'string') {
        scrollMode = _ScrollModeConst_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"][scrollMode];
    }
    return scrollMode;
}
/* harmony default export */ __webpack_exports__["a"] = (GetScrollMode);

/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const Graphics = Phaser.GameObjects.Graphics;

class DefaultMask extends Graphics {
    constructor(parent, shape, padding) {
        if (shape === undefined) {
            shape = 0;
        }
        if (typeof (shape) === 'string') {
            shaep = SHAPEMODE[shape];
        }
        if (padding === undefined) {
            padding = 0;
        }

        super(parent.scene);
        this.parent = parent;
        this.shape = shape;
        this.padding = padding;
        this.setPosition().resize();
        // Don't add it to display list
        // Graphics does not have origin, bounds
    }

    destroy() {
        this.parent = undefined;
        super.destroy();
        return this;
    }

    setPosition(x, y) {
        var parent = this.parent;
        if (x === undefined) {
            x = parent.x;
        }
        if (y === undefined) {
            y = parent.y;
        }
        super.setPosition(x, y);
        return this;
    }

    resize(width, height, padding) {
        var parent = this.parent;
        if (width === undefined) {
            width = parent.width;
        }
        if (height === undefined) {
            height = parent.height;
        }
        if (padding === undefined) {
            padding = this.padding;
        }
        if ((this.widthSave === width) && (this.heightSave === height) && (this.paddingSave === padding)) {
            return this;
        }

        this.clear().fillStyle(0xffffff);
        switch (this.shape) {
            case 1: // circle
                var radius = Math.min(width, height) / 2;
                this.fillCircle(
                    0,
                    0,
                    radius + padding
                );
                break;
            default: // 0|'rectangle'
                this.fillRect(
                    -(width * parent.originX) - padding,
                    -(height * parent.originY) - padding,
                    width + (2 * padding),
                    height + (2 * padding)
                );
                break;
        }
        this.widthSave = width;
        this.heightSave = height;
        this.paddingSave = padding;
        return this;
    }
}

const SHAPEMODE = {
    rectangle: 0,
    circle: 1,
}
/* harmony default export */ __webpack_exports__["a"] = (DefaultMask);

/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckButton", function() { return CheckButton; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CheckButton = /** @class */ (function (_super) {
    __extends(CheckButton, _super);
    function CheckButton(scene, x, y, key, normalFrames, selectFrame) {
        var _this = _super.call(this, scene, x, y, key, normalFrames) || this;
        _this.mSelected = false;
        _this.mNormalFrame = normalFrames;
        _this.mSelectFrame = selectFrame;
        _this.setInteractive(new Phaser.Geom.Rectangle(0, 0, _this.width, _this.height), Phaser.Geom.Rectangle.Contains);
        _this.on("pointerup", _this.onSelected, _this);
        return _this;
    }
    CheckButton.prototype.onSelected = function () {
        this.selected = !this.mSelected;
        this.emit("selected", this.mSelected);
    };
    Object.defineProperty(CheckButton.prototype, "selected", {
        get: function () {
            return this.mSelected;
        },
        set: function (val) {
            if (this.mSelected !== val) {
                this.mSelected = val;
                var frame = val ? this.mSelectFrame : this.mNormalFrame;
                this.setFrame(frame);
            }
        },
        enumerable: false,
        configurable: true
    });
    return CheckButton;
}(Phaser.GameObjects.Image));



/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseChatPanel", function() { return BaseChatPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BaseChatPanel = /** @class */ (function (_super) {
    __extends(BaseChatPanel, _super);
    function BaseChatPanel(scene, world) {
        return _super.call(this, scene, world) || this;
    }
    BaseChatPanel.prototype.appendChat = function (val) {
    };
    Object.defineProperty(BaseChatPanel.prototype, "outChannel", {
        get: function () {
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    return BaseChatPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolTip", function() { return ToolTip; });
/* harmony import */ var _utils_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(155);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ToolTip = /** @class */ (function (_super) {
    __extends(ToolTip, _super);
    function ToolTip(mScene, resStr, resJson, resUrl, uiScale) {
        var _this = _super.call(this, mScene) || this;
        _this.mScene = mScene;
        _this.resStr = resStr;
        _this.resJson = resJson;
        _this.resUrl = resUrl;
        _this.uiScale = uiScale;
        _this.mWidth = 0;
        _this.mHeight = 0;
        _this.mBaseMidHeight = 0;
        _this.preLoad();
        return _this;
    }
    ToolTip.prototype.setToolTipData = function (value) {
        if (!this.mText)
            return;
        var str = _utils_tool__WEBPACK_IMPORTED_MODULE_0__[/* Tool */ "a"].formatChineseString(value, this.mText.style.fontSize, this.mWidth - 20);
        this.mText.setText(str);
        this.refreshTip();
    };
    ToolTip.prototype.destroy = function () {
        if (this.topImage)
            this.topImage.destroy(true);
        if (this.midImage)
            this.midImage.destroy(true);
        if (this.botImage)
            this.botImage.destroy(true);
        if (this.mText)
            this.mText.destroy(true);
        this.mWidth = 0;
        this.mHeight = 0;
        this.removeAllListeners();
        this.removeAll();
        _super.prototype.destroy.call(this, true);
    };
    ToolTip.prototype.preLoad = function () {
        this.scene.load.atlas(this.resStr, this.resUrl, this.resJson);
        this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadComplete, this);
        this.scene.load.start();
    };
    ToolTip.prototype.init = function () {
        this.topImage = this.scene.make.image(undefined, false);
        this.topImage.setOrigin(0, 0);
        this.topImage.setTexture(this.resStr, ToolTip.TOP);
        this.midImage = this.scene.make.image(undefined, false);
        this.midImage.setOrigin(0, 0);
        this.midImage.setTexture(this.resStr, ToolTip.MID);
        this.botImage = this.scene.make.image(undefined, false);
        this.botImage.setOrigin(0, 0);
        this.botImage.setTexture(this.resStr, ToolTip.BOT);
        this.mText = this.scene.make.text(undefined, false);
        this.mText.setFontFamily("YaHei");
        this.mText.setFontStyle("bold");
        this.mText.setFontSize(14);
        this.mText.style.align = "center";
        this.mText.lineSpacing = 15;
        this.mWidth = this.topImage.width;
        this.mBaseMidHeight = this.midImage.height;
        this.mText.style.fixedWidth = this.mWidth - 20;
        this.mText.style.setWordWrapWidth(this.mWidth - 20, true);
        // this.mText.style.setMaxLines(10);
        this.add(this.topImage);
        this.add(this.midImage);
        this.add(this.botImage);
        this.add(this.mText);
    };
    ToolTip.prototype.refreshTip = function () {
        this.midImage.scaleY = (this.mText.height + 20) / this.mBaseMidHeight;
        this.mHeight = this.topImage.height + this.midImage.height * this.midImage.scaleY + this.botImage.height;
        this.topImage.y = -this.topImage.height >> 1;
        this.midImage.y = this.topImage.y + this.topImage.height;
        this.botImage.y = this.midImage.y + this.midImage.height * this.midImage.scaleY;
        this.mText.x = this.mWidth - this.mText.style.fixedWidth >> 1;
        this.mText.y = this.mHeight - this.mText.height - 10 >> 1;
        this.setSize(this.mWidth, this.mHeight);
    };
    ToolTip.prototype.onLoadComplete = function () {
        this.init();
    };
    ToolTip.TOP = "tip_top.png";
    ToolTip.MID = "tip_mid.png";
    ToolTip.BOT = "tip_bot.png";
    return ToolTip;
}(Phaser.GameObjects.Container));



/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FriendMediator", function() { return FriendMediator; });
/* harmony import */ var _friend_panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(227);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var FriendMediator = /** @class */ (function (_super) {
    __extends(FriendMediator, _super);
    function FriendMediator(scene, world) {
        var _this = _super.call(this) || this;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__[/* UIType */ "a"].Normal;
        _this.mScene = scene;
        _this.world = world;
        return _this;
    }
    FriendMediator.prototype.isShow = function () {
        if (!this.mView)
            return false;
        return this.mView.isShow();
    };
    FriendMediator.prototype.isSceneUI = function () {
        return false;
    };
    FriendMediator.prototype.resize = function () {
        if (this.mView)
            return this.mView.resize();
    };
    FriendMediator.prototype.show = function (param) {
        var friendMed = this;
        if (this.mView && this.isShow()) {
            return;
        }
        this.mView = new _friend_panel__WEBPACK_IMPORTED_MODULE_0__["FriendPanel"](this.mScene, this.world);
        this.mView.show(param);
        _super.prototype.show.call(this, param);
    };
    FriendMediator.prototype.hide = function () {
        this.mShow = false;
        if (this.mView)
            this.mView = null;
    };
    FriendMediator.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    FriendMediator.NAME = "FriendMediator";
    return FriendMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicRankPanel", function() { return BasicRankPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(110);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var BasicRankPanel = /** @class */ (function (_super) {
    __extends(BasicRankPanel, _super);
    function BasicRankPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mTexts = [];
        _this.disInteractive();
        return _this;
    }
    BasicRankPanel.prototype.addItem = function (items) {
        this.setData("data", items);
        if (!this.mInitialized)
            return;
        this.clearText();
        var texts = items.text;
        if (!texts || texts.length < 1)
            return;
        if (this.mTitleLabel) {
            this.mTitleLabel.setText(texts[0].text);
            this.mTitleLabel.setData("node", texts[0].node);
        }
        var locX = [-this.width / 2 + 15, -this.width / 2 + 63, -this.width / 2 + 241];
        var tmpY = 0;
        for (var i = 1; i < 4; i++) {
            var text = this.scene.make.text({
                x: locX[i - 1],
                y: -this.height / 2 + 22,
                text: texts ? texts[i].text : "123",
                style: { font: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].YAHEI_16_BOLD }
            }, false);
            tmpY = text.y;
            text.setData("node", texts[i].node);
            text.setStroke("#000000", 2);
            this.mChildContainer.add(text);
            this.mTexts.push(text);
        }
        tmpY += 20;
        for (var i = 4; i < texts.length; i++) {
            var t = texts[i];
            var x = (i - 4) % 3;
            var y = Math.floor((i - 4) / 3) * 22; // Math.floor((i - 4) / 3) * (-this.height / 2 + 42);
            var text = this.scene.make.text({
                x: locX[x],
                y: tmpY + y,
                text: t ? t.text : "123",
                style: { font: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].YAHEI_14_BOLD }
            }, false);
            if (x === 0) {
                // todo center
            }
            text.setData("node", t.node);
            text.setStroke("#000000", 2);
            this.mChildContainer.add(text);
            this.mTexts.push(text);
        }
    };
    BasicRankPanel.prototype.tweenView = function (show) {
    };
    BasicRankPanel.prototype.update = function (param) {
        this.addItem(param);
    };
    BasicRankPanel.prototype.destroy = function () {
        if (this.mBackground)
            this.mBackground.destroy();
        var len = this.mTexts.length;
        for (var i = 0; i < len; i++) {
            var text = this.mTexts[i];
            if (!text)
                continue;
            text.destroy(true);
            text = null;
        }
        if (this.mTitleLabel)
            this.mTitleLabel.destroy(true);
        this.mTexts = [];
        this.mBackground = null;
        this.mTitleLabel = null;
        _super.prototype.destroy.call(this);
    };
    BasicRankPanel.prototype.preload = function () {
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getPNG());
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getPNG());
        this.scene.load.atlas("clsBtn", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.json"));
        this.scene.load.atlas("rank_atlas", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/rank/rank_atlas.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/rank/rank_atlas.json"));
        _super.prototype.preload.call(this);
    };
    BasicRankPanel.prototype.init = function () {
        if (this.mInitialized)
            return;
        this.setSize(328, 361);
        this.mBackground = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__["NinePatch"](this.scene, 0, 0, 328, 361, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getConfig());
        this.add(this.mBackground);
        this.mChildContainer = this.scene.make.container({}, false);
        this.add(this.mChildContainer);
        var border = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__["NinePatch"](this.scene, 0, 0, 315, 318, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getConfig());
        this.mChildContainer.add(border);
        var titleIcon = this.scene.make.image({
            x: -this.width / 2 + 20,
            y: -this.height / 2 - 12,
            key: "rank_atlas",
            frame: "icon.png",
        }, false).setOrigin(0, 0);
        this.add(titleIcon);
        this.mTitleLabel = this.scene.make.text({
            x: -this.width / 2 + 54,
            y: -this.height / 2 - 10,
            text: "排行榜",
            style: { font: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].YAHEI_20_BOLD }
        })
            .setOrigin(0, 0)
            .setStroke("#000000", 2);
        this.add(this.mTitleLabel);
        _super.prototype.init.call(this);
    };
    BasicRankPanel.prototype.clearText = function () {
        for (var _i = 0, _a = this.mTexts; _i < _a.length; _i++) {
            var text = _a[_i];
            text.destroy();
        }
        this.mTexts.length = 0;
    };
    return BasicRankPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightMediator", function() { return RightMediator; });
/* harmony import */ var _baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(133);
/* harmony import */ var _right_btn_group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(229);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(109);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var RightMediator = /** @class */ (function (_super) {
    __extends(RightMediator, _super);
    function RightMediator(mWorld, scene) {
        return _super.call(this, mWorld, scene) || this;
    }
    RightMediator.prototype.tweenView = function (show) {
        if (this.mView)
            this.mView.tweenView(show);
    };
    RightMediator.prototype.show = function (param) {
        if (this.mView && this.isShow()) {
            return;
        }
        this.mView = new _right_btn_group__WEBPACK_IMPORTED_MODULE_1__["RightBtnGroup"](this.mScene, this.world);
        this.mView.show(param);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].UPDATED_CHARACTER_PACKAGE, this.heroItemChange, this);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].PACKAGE_ITEM_ADD, this.heroItemChange, this);
        _super.prototype.show.call(this, param);
    };
    RightMediator.prototype.hide = function () {
        this.mShow = false;
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].UPDATED_CHARACTER_PACKAGE, this.heroItemChange, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].PACKAGE_ITEM_ADD, this.heroItemChange, this);
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
        }
    };
    RightMediator.prototype.heroItemChange = function () {
        if (!this.world.roomManager.currentRoom || !this.world.roomManager.currentRoom.playerManager || !this.world.roomManager.currentRoom.playerManager.actor)
            return;
        if (this.mView) {
            if (this.mView)
                this.mView.refreshSlot();
        }
    };
    RightMediator.NAME = "RightMediator";
    return RightMediator;
}(_baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__["BaseFaceMediator"]));



/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BottomMediator", function() { return BottomMediator; });
/* harmony import */ var _baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(133);
/* harmony import */ var _bottom_btn_group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(230);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var BottomMediator = /** @class */ (function (_super) {
    __extends(BottomMediator, _super);
    function BottomMediator(mWorld, scene) {
        return _super.call(this, mWorld, scene) || this;
    }
    BottomMediator.prototype.show = function (param) {
        if (this.mView && this.isShow()) {
            return;
        }
        this.mView = new _bottom_btn_group__WEBPACK_IMPORTED_MODULE_1__["BottomBtnGroup"](this.mScene, this.world);
        this.mView.show(param);
        _super.prototype.show.call(this, param);
    };
    BottomMediator.NAME = "BottomMediator";
    return BottomMediator;
}(_baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__["BaseFaceMediator"]));



/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementStorageMediator", function() { return ElementStorageMediator; });
/* harmony import */ var _ElementStoragePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(231);
/* harmony import */ var _ElementStorate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(233);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(109);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var ElementStorageMediator = /** @class */ (function (_super) {
    __extends(ElementStorageMediator, _super);
    function ElementStorageMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mStorage = new _ElementStorate__WEBPACK_IMPORTED_MODULE_1__["ElementStorage"](world);
        _this.mLayerManager = layerManager;
        _this.mScene = scene;
        _this.register();
        return _this;
    }
    ElementStorageMediator.prototype.show = function (param) {
        this.mParam = param;
        if (this.mView && this.mView.isShow() || this.mShow) {
            return;
        }
        this.mView = new _ElementStoragePanel__WEBPACK_IMPORTED_MODULE_0__["ElementStoragePanel"](this.mScene, this.world);
        this.mStorage.register();
        this.mStorage.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].EDIT_MODE_QUERY_PACKAGE, this.onEditModeQueryPackageHandler, this);
        this.mLayerManager.addToUILayer(this.mView);
        this.mView.on("queryElement", this.onQueryElementHandler, this);
        this.mView.on("selectedElement", this.onSelectedElement, this);
        this.mView.show(param);
    };
    ElementStorageMediator.prototype.hide = function () {
        this.mParam = undefined;
        _super.prototype.hide.call(this);
    };
    ElementStorageMediator.prototype.isSceneUI = function () {
        return true;
    };
    /**
     * 展开
     */
    ElementStorageMediator.prototype.expand = function () {
        var view = this.getView();
        if (view) {
            view.expand();
        }
    };
    /**
     * 收起
     */
    ElementStorageMediator.prototype.collapse = function () {
        var view = this.getView();
        if (view) {
            view.collapse();
        }
    };
    ElementStorageMediator.prototype.destroy = function () {
        this.unregister();
        if (this.mStorage) {
            this.mStorage.unregister();
            this.mStorage = undefined;
        }
        _super.prototype.destroy.call(this);
    };
    ElementStorageMediator.prototype.getView = function () {
        return this.mView;
    };
    ElementStorageMediator.prototype.onQueryElementHandler = function (page, perPage) {
        if (this.mParam) {
            this.mStorage.queryMarketPackage(page, perPage);
            return;
        }
        this.mStorage.queryPackage(page, perPage);
    };
    ElementStorageMediator.prototype.register = function () {
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].EDIT_PACKAGE_EXPANED, this.onExpanedHandler, this);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].EDIT_PACKAGE_COLLAPSE, this.onCollapseHandler, this);
    };
    ElementStorageMediator.prototype.unregister = function () {
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].EDIT_PACKAGE_EXPANED, this.onExpanedHandler, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].EDIT_PACKAGE_COLLAPSE, this.onCollapseHandler, this);
    };
    ElementStorageMediator.prototype.onEditModeQueryPackageHandler = function (items) {
        if (!items) {
            return;
        }
        this.getView().setProps(items);
    };
    ElementStorageMediator.prototype.onSelectedElement = function (prop) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_3__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_SELECTED_SPRITE);
        var content = packet.content;
        content.id = prop.id;
        this.world.connection.send(packet);
    };
    ElementStorageMediator.prototype.onExpanedHandler = function () {
        this.expand();
    };
    ElementStorageMediator.prototype.onCollapseHandler = function () {
        this.collapse();
    };
    ElementStorageMediator.NAME = "ElementStorageMediator";
    return ElementStorageMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_5__[/* BaseMediator */ "a"]));



/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Radio", function() { return Radio; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioItemRender", function() { return RadioItemRender; });
/* harmony import */ var _nine_patch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(110);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(116);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var Radio = /** @class */ (function (_super) {
    __extends(Radio, _super);
    // private mArrow: Phaser.GameObjects.Image;
    function Radio(scene, config) {
        var _this = _super.call(this, scene) || this;
        _this.mIsShow = false;
        _this.mInit = false;
        _this.mScene = scene;
        _this.mConfig = config;
        _this.init();
        return _this;
    }
    Radio.prototype.setRadioData = function (value) {
        this.clearRadioData();
        this.itemList = [];
        var len = value.length;
        for (var i = 0; i < len; i++) {
            var item = new RadioItemRender(this.mScene, this, this.mConfig.wid + 10, 20, this.mConfig.resKey, this.mConfig.resArrow);
            var renderData = value[i];
            item.itemData = {
                index: i,
                text: renderData.text,
                data: renderData.node.id,
                selected: false,
                enabled: true,
            };
            item.x = this.mConfig.wid / 2 + 25;
            item.y = i * 33 + 23;
            this.add(item);
            this.itemList.push(item);
        }
        // 默認选择第0個
        //  this.selectCall(this.itemList[0].itemData);
    };
    Radio.prototype.clearRadioData = function () {
        if (this.itemList) {
            var itemLen = this.itemList.length;
            for (var i = 0; i < itemLen; i++) {
                var item = this.itemList[i];
                if (!item)
                    continue;
                item.destroy();
                item = null;
            }
            this.itemList.length = 0;
        }
    };
    Object.defineProperty(Radio.prototype, "isShow", {
        get: function () {
            return this.mIsShow;
        },
        set: function (value) {
            this.mIsShow = value;
        },
        enumerable: false,
        configurable: true
    });
    Radio.prototype.selectCall = function (itemData) {
        if (this.mConfig.clickCallBack) {
            this.mConfig.clickCallBack.call(this, itemData);
        }
    };
    Radio.prototype.destroy = function () {
        if (this.itemList) {
            var len = this.itemList.length;
            for (var i = 0; i < len; i++) {
                var item = this.itemList[i];
                if (!item)
                    continue;
                item.destroy();
            }
            this.itemList.length = 0;
            this.itemList = null;
        }
        this.removeAll();
        this.removeAllListeners();
        if (this.parentContainer) {
            this.parentContainer.remove(this);
        }
        _super.prototype.destroy.call(this, true);
    };
    Radio.prototype.init = function () {
        var resKey = this.mConfig.resKey;
        var resPng = this.mConfig.resPng;
        var resJson = this.mConfig.resJson;
        if (!this.mScene.cache.obj.has(resKey)) {
            this.mScene.load.atlas(resKey, resPng, resJson);
            this.mScene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadCompleteHandler, this);
            this.mScene.load.start();
        }
        else {
            this.onLoadCompleteHandler();
        }
    };
    Radio.prototype.onLoadCompleteHandler = function () {
        this.mInit = true;
        var resKey = this.mConfig.resKey;
        this.mBg = new _nine_patch__WEBPACK_IMPORTED_MODULE_0__["NinePatch"](this.scene, 0, 0, this.mConfig.wid + 20, this.mConfig.hei, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getConfig());
        this.mBg.setTexture(resKey, this.mConfig.resBg);
        this.mBg.x = this.mConfig.wid / 2 - 2;
        this.mBg.y = this.mConfig.hei / 2;
        this.addAt(this.mBg, 0);
        this.setSize(this.mConfig.wid, this.mConfig.hei);
        if (this.mConfig.completeBack) {
            this.mConfig.completeBack();
        }
    };
    return Radio;
}(Phaser.GameObjects.Container));

var RadioItemRender = /** @class */ (function (_super) {
    __extends(RadioItemRender, _super);
    function RadioItemRender(scene, selectCallUI, wid, hei, resKey, arrowRes) {
        var _this = _super.call(this, scene) || this;
        _this.mSelectCallUI = selectCallUI;
        _this.mText = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](scene, 0, 0, "", {
            fontSize: "20px",
            wrap: {
                mode: "char",
                width: wid
            },
        });
        // this.mText = this.scene.make.text({
        //     x: -wid >> 1, y: -hei >> 1,
        //     style: { font: "bold 20px YaHei", fill: "#F7EDED" }
        // }, false);
        // this.mText.style.align = "left";
        var COLOR = 0xffcc00;
        _this.mSelectBG = scene.make.graphics(undefined, false);
        _this.mSelectBG.fillStyle(COLOR, .8);
        _this.mSelectBG.fillRect(-wid >> 1, -hei >> 1, wid - 36, hei);
        _this.mSelectBG.visible = false;
        _this.setSize(wid, hei);
        _this.setInteractive(new Phaser.Geom.Rectangle(0, 0, wid, hei), Phaser.Geom.Rectangle.Contains);
        _this.addListen();
        _this.mArrow = scene.make.image(undefined, false);
        _this.mArrow.setTexture(resKey, arrowRes);
        _this.mArrow.x = -wid / 2 - 10;
        _this.mArrow.y = 0;
        _this.mArrow.visible = false;
        _this.add([_this.mSelectBG, _this.mText, _this.mArrow]);
        return _this;
    }
    RadioItemRender.prototype.addListen = function () {
        this.on("pointerover", this.overHandler, this);
        this.on("pointerout", this.outHandler, this);
        this.on("pointerdown", this.selectHandler, this);
    };
    RadioItemRender.prototype.removeListen = function () {
        this.off("pointerover", this.overHandler, this);
        this.off("pointerout", this.outHandler, this);
        this.off("pointerdown", this.selectHandler, this);
    };
    Object.defineProperty(RadioItemRender.prototype, "itemData", {
        get: function () {
            return this.mData;
        },
        set: function (val) {
            this.mData = val;
            this.mText.text = this.mData.text;
            this.mText.x = -this.width >> 1;
            this.mText.y = -this.height / 2 + (this.height - this.mText.height >> 1);
        },
        enumerable: false,
        configurable: true
    });
    RadioItemRender.prototype.destroy = function () {
        this.removeListen();
        this.mText.destroy(true);
        this.mSelectBG.destroy(true);
        this.mArrow.destroy(true);
        this.mText = null;
        this.mData = null;
        this.mSelectCallUI = null;
        this.mArrow = null;
        _super.prototype.destroy.call(this, true);
    };
    RadioItemRender.prototype.setSelected = function (val) {
        this.mSelectBG.visible = val;
        this.mArrow.visible = val;
        if (this.mSelectCallUI)
            this.mSelectCallUI.selectCall(this.itemData);
    };
    RadioItemRender.prototype.overHandler = function () {
        this.mSelectBG.visible = true;
        this.mArrow.visible = true;
    };
    RadioItemRender.prototype.outHandler = function () {
        this.mSelectBG.visible = false;
        this.mArrow.visible = false;
    };
    RadioItemRender.prototype.selectHandler = function () {
        this.overHandler();
        this.mSelectCallUI.selectCall(this.itemData);
    };
    return RadioItemRender;
}(Phaser.GameObjects.Container));



/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputTextFactory", function() { return InputTextFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputTextFieldEvent", function() { return InputTextFieldEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputTextField", function() { return InputTextField; });
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(118);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var InputTextFactory = /** @class */ (function () {
    function InputTextFactory(world) {
        this.mWorld = world;
    }
    InputTextFactory.prototype.getInputText = function (scene, style) {
        var inputtext = new InputTextField(scene, this.mWorld, style);
        return inputtext;
    };
    return InputTextFactory;
}());

var InputTextFieldEvent = {
    textchange: "textchange",
    textclick: "textclick",
    textdblclick: "textdblclick",
    textfocus: "textfocus",
    textblur: "textblur",
    textExit: "textExit",
};
var InputTextField = /** @class */ (function (_super) {
    __extends(InputTextField, _super);
    function InputTextField(scene, world, config) {
        var _this = _super.call(this) || this;
        _this.mDelayTime = 300;
        _this.mScene = scene;
        _this.mWorld = world;
        _this.textConfig = config;
        _this.mTextField = scene.make.text({
            x: config.x || 0,
            y: config.y || 0,
            stroke: "#000000",
            strokeThickness: 2,
            align: config.align || "left",
            style: {
                color: config.color || "#fff",
                font: config.font || "16px YaHei",
                wordWrap: {
                    width: config.textWidt || null,
                }
            }
        }, false).setInteractive(new Phaser.Geom.Rectangle(0, 0, config.textWidth, config.textHeight), Phaser.Geom.Rectangle.Contains);
        _this.mTextField.setOrigin(0.5, 0.5);
        _this.mTextField.setAlign(config.align);
        _this.mTextField.setText(config.text || "");
        _this.mTextField.on("pointerdown", _this.showText, _this);
        return _this;
    }
    InputTextField.prototype.onBlur = function () {
        this.mInputText.onBlur();
    };
    InputTextField.prototype.onFocus = function () {
        this.mInputText.onFocus();
    };
    InputTextField.prototype.getText = function () {
        return this.mTextField.text;
    };
    InputTextField.prototype.getSkin = function () {
        return this.mTextField;
    };
    InputTextField.prototype.destroy = function () {
        if (this.mInputText) {
            this.mInputText.destroy();
        }
        this.mInputText = null;
    };
    InputTextField.prototype.showText = function () {
        var _this = this;
        var textX = this.textConfig.posType === 1 ? -this.textConfig.textWidth >> 1 : -this.mWorld.getSize().width >> 1;
        var defaultText = this.mTextField.text && this.mTextField.text.length > 0 ?
            this.mTextField.text : this.textConfig.minNum;
        if (!this.mInputText) {
            this.mInputText = new _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](this.mScene, {
                id: this.textConfig.id || "input",
                x: textX || 0,
                y: this.textConfig.y || 0,
                width: this.textConfig.textWidth || 100,
                height: this.textConfig.textHeight || 100,
                type: this.textConfig.type || "",
                fontSize: this.textConfig.font || "16px YaHei",
                color: this.textConfig.color || "#fff",
                "z-index": 999,
                align: "left",
                text: defaultText,
                posType: this.textConfig.posType
            });
            this.mInputText.setOrigin(0, 0.6);
        }
        else {
            this.mInputText.setText(defaultText);
        }
        // 0 顶部 1 当前文本位置
        if (this.textConfig.posType === 1) {
            this.mTextField.visible = false;
            if (!this.mInputText.parentContainer)
                this.mTextField.parentContainer.add(this.mInputText);
        }
        this.mInputText.visible = true;
        this.mInputText.on("textchange", this.onTextchange, this);
        this.mInputText.on("onclick", this.onTextClick, this);
        this.mInputText.on("ondblclick", this.onTextDbclick, this);
        this.mInputText.on("focus", this.onTextFocus, this);
        this.mInputText.on("blur", this.onTextBlur, this);
        // 监听键盘enter事件，移动端会监听软件盘的enter事件
        this.mInputText.node.addEventListener("keypress", function (e) {
            var keycode = e.keyCode || e.which;
            if (keycode === 13) {
                _this.emit(InputTextFieldEvent.textExit);
                _this.hideText();
            }
        });
        this.mScene.input.on("gameobjectdown", this.sceneDown, this);
        if (this.mWorld.game.device.os.iOS && !this.mWorld.game.device.os.desktop) {
            this.setInputFocus();
        }
        else {
            this.mInputTimeID = this.mScene.setTimeout(function () {
                _this.setInputFocus();
            }, this.mDelayTime);
        }
    };
    InputTextField.prototype.hideText = function () {
        this.mTextField.visible = true;
        if (!this.mInputText)
            return;
        this.mInputText.off("textchange", this.onTextchange, this);
        this.mInputText.off("onclick", this.onTextClick, this);
        this.mInputText.off("ondblclick", this.onTextDbclick, this);
        this.mInputText.off("focus", this.onTextFocus, this);
        this.mInputText.off("blur", this.onTextBlur, this);
        this.mScene.input.off("gameobjectdown", this.sceneDown, this);
        var text = this.mInputText.text;
        if (text.length > 0) {
            this.mTextField.setText(text);
        }
        this.mInputText.setText("");
        this.mInputText.setBlur();
        this.mInputText.visible = false;
        if (this.mInputTimeID) {
            this.mScene.clearTimeout(this.mInputTimeID);
        }
        if (this.textConfig.posType === 1) {
            this.mTextField.visible = true;
        }
    };
    InputTextField.prototype.setInputFocus = function () {
        // 从dom中获取对应id的输入文本
        var input = document.all.namedItem(this.textConfig.id);
        if (input) {
            input.focus();
        }
    };
    InputTextField.prototype.sceneDown = function (pointer, gameobject) {
        if (gameobject && gameobject === this.mTextField) {
            return;
        }
        this.onTextBlur();
    };
    InputTextField.prototype.onTextchange = function () {
        if (this.textConfig.type === "number") {
            var num = Number(this.mInputText.text);
            if (isNaN(num)) {
                num = 0;
            }
            if (this.textConfig.minNum && this.textConfig.maxNum) {
                if (num < this.textConfig.minNum) {
                    num = this.textConfig.minNum;
                }
                else if (num > this.textConfig.maxNum) {
                    num = this.textConfig.maxNum;
                }
            }
            this.mInputText.text = num + "";
        }
        this.emit(InputTextFieldEvent.textchange);
    };
    InputTextField.prototype.onTextClick = function () {
        this.emit(InputTextFieldEvent.textclick);
    };
    InputTextField.prototype.onTextDbclick = function () {
        this.emit(InputTextFieldEvent.textdblclick);
    };
    InputTextField.prototype.onTextFocus = function () {
        this.onFocus();
        this.emit(InputTextFieldEvent.textfocus);
    };
    InputTextField.prototype.onTextBlur = function () {
        this.onBlur();
        this.hideText();
        this.emit(InputTextFieldEvent.textblur);
    };
    return InputTextField;
}(Phaser.Events.EventEmitter));



/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaChatMediator", function() { return PicaChatMediator; });
/* harmony import */ var _PicaChatPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(248);
/* harmony import */ var _PicaNavigate_PicaNavigateMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(181);
/* harmony import */ var _PicaChat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(250);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var PicaChatMediator = /** @class */ (function (_super) {
    __extends(PicaChatMediator, _super);
    function PicaChatMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.world = worldService;
        _this.scene = _this.layerManager.scene;
        return _this;
    }
    PicaChatMediator.prototype.show = function () {
        if ((this.mView && this.mView.isShow()) || this.mShow) {
            this.mView.show();
            this.layerManager.addToUILayer(this.mView);
            return;
        }
        if (!this.mChat) {
            this.mChat = new _PicaChat__WEBPACK_IMPORTED_MODULE_2__["PicaChat"](this.world);
            this.mChat.on("chat", this.onChatHandler, this);
            this.mChat.register();
        }
        if (!this.mView) {
            this.mView = new _PicaChatPanel__WEBPACK_IMPORTED_MODULE_0__["PicaChatPanel"](this.scene, this.world);
            this.mView.on("showNavigate", this.onShowNavigateHandler, this);
            this.mView.on("chat", this.onSendChatHandler, this);
        }
        this.mView.show();
        this.layerManager.addToUILayer(this.mView);
    };
    PicaChatMediator.prototype.isSceneUI = function () {
        return true;
    };
    PicaChatMediator.prototype.destroy = function () {
        if (this.mChat) {
            this.mChat.destroy();
            this.mChat = undefined;
        }
        _super.prototype.destroy.call(this);
    };
    PicaChatMediator.prototype.onShowNavigateHandler = function () {
        if (!this.world) {
            return;
        }
        var uiManager = this.world.uiManager;
        var mediator = uiManager.getMediator(_PicaNavigate_PicaNavigateMediator__WEBPACK_IMPORTED_MODULE_1__["PicaNavigateMediator"].name);
        if (mediator) {
            mediator.show();
            this.mView.hide();
            this.mView.removeListen();
            this.layerManager.removeToUILayer(this.mView);
        }
    };
    PicaChatMediator.prototype.onChatHandler = function (content) {
        if (!this.mView || !this.world || !this.world.roomManager || !this.world.roomManager.currentRoom) {
            return;
        }
        var playerManager = this.world.roomManager.currentRoom.playerManager;
        var player = playerManager.get(content.chatSenderid);
        if (player) {
            this.mView.appendChat("[color=#ffffff][\u5F53\u524D]" + player.model.nickname + ": " + content.chatContext + "[/color]\n");
        }
    };
    PicaChatMediator.prototype.onSendChatHandler = function (val) {
        if (!this.mChat) {
            return;
        }
        if (val === "whosyourdaddy") {
            this.world.uiManager.showMed("DebugLogger");
        }
        this.mChat.sendMessage(val);
    };
    PicaChatMediator.NAME = "PicaChatMediator";
    return PicaChatMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__[/* BaseMediator */ "a"]));



/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputPanel", function() { return InputPanel; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var InputPanel = /** @class */ (function (_super) {
    __extends(InputPanel, _super);
    function InputPanel(scene, world, text) {
        var _this = _super.call(this) || this;
        var width = scene.cameras.main.width;
        var height = scene.cameras.main.height;
        _this.mBackground = scene.add.graphics();
        _this.mBackground.fillStyle(0x0, 0.6);
        _this.mBackground.fillRect(0, 0, width, height).setInteractive(new Phaser.Geom.Rectangle(0, 0, width, height), Phaser.Geom.Rectangle.Contains);
        _this.mInput = scene.add.rexInputText(6 * world.uiRatio, 6 * world.uiRatio, width - 12 * world.uiRatio, 40 * world.uiRatio, {
            fontSize: 20 * world.uiRatio + "px",
            color: "#0",
            text: text,
            backgroundColor: "#FFFFFF",
            borderColor: "#FF9900"
        }).setOrigin(0, 0).setFocus();
        // this.mInput.y = -height / 2;
        _this.mInput.node.addEventListener("keypress", function (e) {
            var keycode = e.keyCode || e.which;
            if (keycode === 13) {
                _this.onCloseHandler();
            }
        });
        return _this;
    }
    InputPanel.prototype.onCloseHandler = function () {
        this.emit("close", this.mInput.text);
        this.mBackground.destroy();
        this.mInput.destroy();
        this.destroy();
    };
    return InputPanel;
}(Phaser.Events.EventEmitter));



/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaNavigateMediator", function() { return PicaNavigateMediator; });
/* harmony import */ var _PicaNavigatePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(249);
/* harmony import */ var _PicaChat_PicaChatMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(179);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var PicaNavigateMediator = /** @class */ (function (_super) {
    __extends(PicaNavigateMediator, _super);
    function PicaNavigateMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.world = worldService;
        _this.scene = _this.layerManager.scene;
        return _this;
    }
    PicaNavigateMediator.prototype.show = function () {
        if ((this.mView && this.mView.isShow()) || this.mShow) {
            this.mView.show();
            this.layerManager.addToUILayer(this.mView);
            return;
        }
        if (!this.mView) {
            this.mView = new _PicaNavigatePanel__WEBPACK_IMPORTED_MODULE_0__["PicaNavigatePanel"](this.scene, this.world);
            this.mView.on("showPanel", this.onShowPanelHandler, this);
            this.mView.on("close", this.onCloseHandler, this);
        }
        this.mView.show();
        this.layerManager.addToUILayer(this.mView);
    };
    PicaNavigateMediator.prototype.isSceneUI = function () {
        return false;
    };
    PicaNavigateMediator.prototype.onCloseHandler = function () {
        if (!this.world) {
            return;
        }
        var uiManager = this.world.uiManager;
        var mediator = uiManager.getMediator(_PicaChat_PicaChatMediator__WEBPACK_IMPORTED_MODULE_1__["PicaChatMediator"].name);
        if (mediator) {
            mediator.show();
            this.mView.hide();
            this.mView.removeListen();
            this.layerManager.removeToUILayer(this.mView);
        }
    };
    PicaNavigateMediator.prototype.onShowPanelHandler = function (panel, data) {
        if (!panel || !this.world) {
            return;
        }
        var uiManager = this.world.uiManager;
        if (data)
            uiManager.showMed(panel, data);
        else
            uiManager.showMed(panel);
    };
    PicaNavigateMediator.NAME = "PicaNavigateMediator";
    return PicaNavigateMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__[/* BaseMediator */ "a"]));



/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TabButton; });
/* harmony import */ var _button_Button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(120);
/* harmony import */ var _interface_event_MouseEvent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(344);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var TabButton = /** @class */ (function (_super) {
    __extends(TabButton, _super);
    function TabButton(scene, key, frame, downFrame, text, music) {
        var _this = _super.call(this, scene, key, frame, downFrame, text, music) || this;
        _this.mSelected = false;
        return _this;
    }
    Object.defineProperty(TabButton.prototype, "selected", {
        get: function () {
            return this.mSelected;
        },
        set: function (value) {
            this.mSelected = value;
            var buttonState = value ? _button_Button__WEBPACK_IMPORTED_MODULE_0__[/* ButtonState */ "b"].Select : _button_Button__WEBPACK_IMPORTED_MODULE_0__[/* ButtonState */ "b"].Normal;
            this.buttonStateChange(buttonState);
            this.emit("selectChange", value);
        },
        enumerable: false,
        configurable: true
    });
    TabButton.prototype.destroy = function () {
        this.selected = false;
        _super.prototype.destroy.call(this);
    };
    TabButton.prototype.onPointerUpHandler = function (pointer) {
        if (!this.interactiveBoo) {
            if (this.soundGroup && this.soundGroup.disabled)
                this.playSound(this.soundGroup.disabled);
            return;
        }
        if (!this.mIsMove || (Date.now() - this.mDownTime > this.mPressTime)) {
            if (Math.abs(pointer.downX - pointer.upX) < 30 && Math.abs(pointer.downY - pointer.upY) < 30) {
                if (this.soundGroup && this.soundGroup.up)
                    this.playSound(this.soundGroup.up);
                this.emit(_interface_event_MouseEvent__WEBPACK_IMPORTED_MODULE_1__[/* CoreUI */ "a"].MouseEvent.Tap, pointer, this);
                this.selected = true;
            }
        }
        clearTimeout(this.mPressDelay);
        this.mIsMove = false;
        this.mDownTime = 0;
    };
    TabButton.prototype.onPointerDownHandler = function (pointer) {
        var _this = this;
        if (!this.interactiveBoo) {
            if (this.soundGroup && this.soundGroup.disabled)
                this.playSound(this.soundGroup.disabled);
            return;
        }
        if (this.soundGroup && this.soundGroup.down)
            this.playSound(this.soundGroup.down);
        this.mDownTime = Date.now();
        this.mPressTime = setTimeout(function () {
            _this.emit(_interface_event_MouseEvent__WEBPACK_IMPORTED_MODULE_1__[/* CoreUI */ "a"].MouseEvent.Hold, _this);
        }, this.mPressTime);
        this.emit(_interface_event_MouseEvent__WEBPACK_IMPORTED_MODULE_1__[/* CoreUI */ "a"].MouseEvent.Down, this);
    };
    return TabButton;
}(_button_Button__WEBPACK_IMPORTED_MODULE_0__[/* Button */ "a"]));



/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _plugins_utils_promise_WaitEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(152);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "b", function() { return _plugins_utils_promise_WaitEvent_js__WEBPACK_IMPORTED_MODULE_0__["b"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _plugins_utils_promise_WaitEvent_js__WEBPACK_IMPORTED_MODULE_0__["a"]; });




/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugLoggerMediator", function() { return DebugLoggerMediator; });
/* harmony import */ var _DebugLoggerPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(282);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var DebugLoggerMediator = /** @class */ (function (_super) {
    __extends(DebugLoggerMediator, _super);
    function DebugLoggerMediator(uiManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__[/* UIType */ "a"].Scene;
        _this.mScene = scene;
        _this.world = world;
        return _this;
    }
    DebugLoggerMediator.prototype.resize = function () {
        if (this.mView)
            return this.mView.resize();
    };
    DebugLoggerMediator.prototype.isShow = function () {
        return this.mView ? this.mView.isShow() : false;
    };
    DebugLoggerMediator.prototype.show = function (param) {
        if (this.mView && this.isShow()) {
            return;
        }
        this.mView = new _DebugLoggerPanel__WEBPACK_IMPORTED_MODULE_0__["DebugLogger"](this.mScene, this.world);
        this.mView.show(param);
        _super.prototype.show.call(this, param);
    };
    DebugLoggerMediator.prototype.hide = function () {
        this.mShow = false;
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
        }
    };
    DebugLoggerMediator.prototype.destroy = function () {
        this.mScene = null;
        _super.prototype.destroy.call(this);
    };
    DebugLoggerMediator.NAME = "DebugLoggerMediator";
    return DebugLoggerMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextButton", function() { return TextButton; });
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(107);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var TextButton = /** @class */ (function (_super) {
    __extends(TextButton, _super);
    function TextButton(scene, dpr, scale, text, x, y) {
        if (scale === void 0) { scale = 1; }
        var _this = _super.call(this, scene, x, y) || this;
        _this.normalColor = "#FFFFFF";
        _this.changeColor = "#0099cc";
        _this.mText = _this.scene.make.text({
            text: text,
            style: {
                fontSize: 15 * window.devicePixelRatio,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT
            }
        }, false);
        _this.add(_this.mText);
        return _this;
        // this.on("pointerup", this.onPointerUpHandler, this);
    }
    TextButton.prototype.setText = function (val) {
        this.mText.text = val;
    };
    TextButton.prototype.setFontSize = function (size) {
        this.mText.setFontSize(size);
    };
    TextButton.prototype.setFontStyle = function (val) {
        this.mText.setFontStyle(val);
    };
    TextButton.prototype.setStyle = function (style) {
        this.mText.setStyle(style);
    };
    TextButton.prototype.setNormalColor = function (color) {
        this.normalColor = color;
    };
    TextButton.prototype.setChangeColor = function (color) {
        this.changeColor = color;
    };
    TextButton.prototype.changeDown = function () {
        this.mText.setFill(this.changeColor);
    };
    TextButton.prototype.changeNormal = function () {
        this.mText.setFill(this.normalColor);
    };
    TextButton.prototype.onPointerUpHandler = function (pointer) {
        this.emit("click", pointer, this);
    };
    Object.defineProperty(TextButton.prototype, "text", {
        get: function () {
            return this.mText;
        },
        enumerable: false,
        configurable: true
    });
    return TextButton;
}(Phaser.GameObjects.Container));



/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/scrollable/Scrollable.js + 4 modules
var Scrollable = __webpack_require__(320);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetScrollMode.js
var GetScrollMode = __webpack_require__(167);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/ContainerLite.js + 13 modules
var ContainerLite = __webpack_require__(385);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/GetValue.js
var GetValue = __webpack_require__(348);
var GetValue_default = /*#__PURE__*/__webpack_require__.n(GetValue);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/Clear.js
var Clear = __webpack_require__(219);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/Clone.js
var Clone = __webpack_require__(218);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/data/DataMethods.js




/* harmony default export */ var DataMethods = ({
    enableData() {
        if (this.data === undefined) {
            this.data = {};
        }
        return this;
    },

    getData(key, defaultValue) {
        this.enableData();
        return (key === undefined) ? this.data : GetValue_default()(this.data, key, defaultValue);
    },

    setData(key, value) {
        this.enableData();
        this.data[key] = value;
        return this;
    },

    incData(key, inc, defaultValue) {
        if (defaultValue === undefined) {
            defaultValue = 0;
        }
        this.enableData();
        this.setData(key, this.getData(key, defaultValue) + inc);
        return this;
    },

    mulData(key, mul, defaultValue) {
        if (defaultValue === undefined) {
            defaultValue = 0;
        }
        this.enableData();
        this.setData(key, this.getData(key, defaultValue) * mul);
        return this;
    },

    clearData() {
        if (this.data) {
            Object(Clear["a" /* default */])(this.data);
        }
        return this;
    },

    resetData(data) {
        this.clearData();

        if (data) {
            this.enableData();
            for (var key in data) {
                this.data[key] = data[key];
            }
        }
        return this;
    },

    cloneData() {
        if (this.data) {
            return Object(Clone["a" /* default */])(this.data);
        } else {
            return {};
        }
    }
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/Cell.js


class Cell {
    constructor(parent, config) {
        this.container = null;
        this.setParent(parent);
        this._deltaHeight = 0;
        // this.resetFromJSON(config);
    }

    setParent(parent) {
        this.parent = parent; // parent: table
        this.parentContainer = parent.getParentContainer();
    }

    // resetFromJSON(o) {
    //     return this;
    // }

    destroy(fromScene) {
        if (fromScene === undefined) {
            fromScene = false;
        }

        if (!fromScene) {
            var table = this.parent;
            if (this.deltaHeight !== 0) {
                table.nonZeroDeltaHeightCount--;
            }
            this.destroyContainer();
        }

        this.data = undefined;
        this.container = null;
        this.parent = undefined;
        this.parentContainer = undefined;
    }

    get table() {
        return this.parent;
    }

    get scrollMode() {
        return this.parentContainer.scrollMode;
    }

    get colIndx() {
        return this.parent.cellIndxeToColIndex(this.index);
    }

    get rowIndx() {
        return this.parent.cellIndxeToRowIndex(this.index);
    }

    getContainer() {
        return this.container;
    }

    setContainer(container) {
        if (!container) {
            this.destroyContainer();
            return this;
        }

        if (this.container) {
            this.container.destroy();
        }
        this.container = container;
        this.parentContainer.add(container);
        return this;
    }

    destroyContainer() {
        if (this.container) {
            this.container.destroy();
            this.container = null;
        }
        return this;
    }

    popContainer() {
        if (this.container) {
            var container = this.container;
            this.container = null;
            this.parentContainer.remove(container);
            return container;
        } else {
            return null;
        }
    }

    setXY(x, y) {
        if (this.container) {
            this.parentContainer.setChildLocalPosition(this.container, x, y);
        }
        return this;
    }

    get deltaHeight() {
        return this._deltaHeight;
    }

    set deltaHeight(deltaHeight) {
        if (deltaHeight == null) {
            deltaHeight = 0;
        }
        var table = this.parent;
        if ((this._deltaHeight === 0) && (deltaHeight !== 0)) {
            table.nonZeroDeltaHeightCount++;
        } else if ((this._deltaHeight !== 0) && (deltaHeight === 0)) {
            table.nonZeroDeltaHeightCount--;
        }

        this._deltaHeight = deltaHeight;
    }

    setDeltaHeight(deltaHeight) {
        this.deltaHeight = deltaHeight;
        return this;
    }

    get height() {
        if (this.scrollMode === 0) {
            return this.deltaHeight + this.parent.defaultCellHeight;
        } else {
            return this.parent.defaultCellWidth;
        }
    }

    set height(height) {
        // Only worked when scrollMode is 0
        if (this.scrollMode === 1) {
            return;
        }
        this.setDeltaHeight(height - this.parent.defaultCellHeight);
    }

    setHeight(height) {
        // Only worked when scrollMode is 0
        this.height = height;
        return this;
    }

    get width() {
        if (this.scrollMode === 0) {
            return this.parent.defaultCellWidth;
        } else {
            return this.deltaHeight + this.parent.defaultCellHeight;
        }
    }

    set width(width) {
        // Only worked when scrollMode is 1
        if (this.scrollMode === 0) {
            return;
        }
        this.setDeltaHeight(width - this.parent.defaultCellHeight);
    }

    setWidth(width) {
        this.width = width;
        return this;
    }

    get scene() {
        return this.parentContainer.scene;
    }
};


Object.assign(
    Cell.prototype,
    DataMethods
);


/* harmony default export */ var gridtable_Cell = (Cell);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/pool.js + 1 modules
var pool = __webpack_require__(158);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/Table.js



const Table_GetValue = Phaser.Utils.Objects.GetValue;
const SpliceOne = Phaser.Utils.Array.SpliceOne;

class Table_Table {
    constructor(parent, config) {
        this.parent = parent; // parent: GridTable game object (Container)
        this.cells = [];
        this.cellPool = new pool["a" /* default */]();
        this.resetFromJSON(config);
    }

    resetFromJSON(o) {
        this.colCount = undefined;
        this._nonZeroDeltaHeightCount = 0;
        this.resetTotalRowsHeight();
        this.zoom = Table_GetValue(o, 'zoom', 1);
        this.dpr = Table_GetValue(o, 'dpr', 1);
        this.cellOriginX = Table_GetValue(o, "cellOriginX", 0.5);
        this.cellOriginY = Table_GetValue(o, "cellOriginY", 0.5);
        this.padX = Table_GetValue(o, "cellPadX", 0);
        this.padY = Table_GetValue(0, "cellPadY", 0);
        this.setDefaultCellHeight(Table_GetValue(o, 'cellHeight', 30));
        this.setDefaultCellWidth(Table_GetValue(o, 'cellWidth', 30));
        this.initCells(Table_GetValue(o, 'cellsCount', 0));
        this.setColumnCount(Table_GetValue(o, 'columns', 1));
        return this;
    }

    destroy(fromScene) {
        for (var i = 0, cnt = this.cells.length; i < cnt; i++) {
            this.freeCell(this.cells[i], fromScene);
        }
        this.cellPool.destroy();
        this.cells = undefined;
        this.parent = undefined;
    }

    get nonZeroDeltaHeightCount() {
        return this._nonZeroDeltaHeightCount;
    }

    set nonZeroDeltaHeightCount(count) {
        if (this._nonZeroDeltaHeightCount === count) {
            return;
        }
        this._nonZeroDeltaHeightCount = count;
        this.resetTotalRowsHeight();
    }

    get defaultCellHeightMode() {
        return (this.nonZeroDeltaHeightCount === 0);
    }

    setDefaultCellHeight(height) {
        this.defaultCellHeight = height;
        return this;
    }

    setDefaultCellWidth(width) {
        this.defaultCellWidth = width;
        return this;
    }

    initCells(size) {
        var cells = this.cells;
        cells.length = size;
        for (var i = 0; i < size; i++) {
            cells[i] = null;
        }
        return this;
    }

    insertNewCells(cellIdx, count) {
        var cells = this.cells;
        if (cellIdx === cells.length) {
            // append at end of array
            var endIdx = cellIdx + count;
            cells.length = endIdx;
            for (var i = cellIdx; i < endIdx; i++) {
                cells[i] = null;
            }
        } else {
            var newCells = [];
            newCells.length = count;
            for (var i = 0; i < count; i++) {
                newCells[i] = null;
            }
            this.cells.splice(cellIdx, 0, ...newCells);
        }

        this.resetTotalRowsHeight();
        return this;
    }

    removeCells(cellIdx, count) {
        var endIdx = cellIdx + count;
        for (var i = cellIdx; i < endIdx; i++) {
            this.freeCell(i);
        }

        if (endIdx === this.cells.length) {
            // remove until end of array
            this.cells.length = cellIdx;
        } else {
            if (count === 1) {
                SpliceOne(this.cells, cellIdx);
            } else {
                this.cells.splice(cellIdx, count);
            }
            this.buildCellIndex(cellIdx);
        }

        this.resetTotalRowsHeight();
        return this;
    }

    setColumnCount(cnt) {
        this.colCount = cnt;
        this.resetTotalRowsHeight();
        return this;
    }

    get rowCount() {
        return Math.ceil(this.cells.length / this.colCount);
    }

    get cellsCount() {
        return this.cells.length;
    }

    isValidCellIdx(idx) {
        return ((idx >= 0) && (idx < this.cells.length));
    }

    heightToRowIndex(height, isCeil) {
        // defaultCellHeightMode
        if (this.defaultCellHeightMode) {
            var rowIdx = height / this.defaultCellHeight;
            if (isCeil) {
                rowIdx = Math.ceil(rowIdx);
            } else {
                rowIdx = Math.floor(rowIdx);
            }

            return rowIdx;
        }

        // count cell height one by one
        var rowCount = this.rowCount;
        var remainder = height,
            isValidIdx;
        var cell, rowHeight, rowIdx = 0;

        while (1) {
            rowHeight = this.getRowHeight(rowIdx);
            remainder -= rowHeight;

            isValidIdx = (rowIdx >= 0) && (rowIdx < rowCount);
            if ((remainder > 0) && isValidIdx) {
                rowIdx += 1;
            } else if (remainder === 0) {
                return rowIdx;
            } else {
                if (isCeil) {
                    var preRowIdx = rowIdx;
                    rowIdx += 1;
                    isValidIdx = (rowIdx >= 0) && (rowIdx < rowCount);

                    if (!isValidIdx)
                        rowIdx = preRowIdx;
                }

                return rowIdx;
            }
        }

    }

    widthToColIndex(width, isCeil) {
        var colIdx = width / this.defaultCellWidth;
        if (isCeil) {
            colIdx = Math.ceil(colIdx);
        } else {
            colIdx = Math.floor(colIdx);
        }

        return colIdx;
    }

    colRowToCellIndex(colIdx, rowIdx) {
        if (colIdx >= this.colCount) {
            return null;
        }
        return (rowIdx * this.colCount) + colIdx;
    }

    rowIndexToHeight(start, end) {
        // defaultCellHeightMode
        if (this.defaultCellHeightMode) {
            return (end - start + 1) * this.defaultCellHeight + this.defaultCellHeight * this.cellOriginY + this.padY;
        }

        var h, sum = 0;
        for (var i = start; i <= end; i++) {
            h = this.getRowHeight(i);
            sum += h;
        }
        return sum;
    }

    colIndexToWidth(start, end) {
        return (end - start + 1) * this.defaultCellWidth + this.defaultCellWidth * this.cellOriginX + this.padX;
    };

    getRowHeight(rowIdx) {
        var cnt = this.colCount;
        // single column
        if (cnt <= 1) {
            return this.getCellHeight(this.colRowToCellIndex(0, rowIdx));
        }

        // multiple columns, get the maximum height
        var maxHeight = 0,
            cellHeight;
        for (var i = 0; i < cnt; i++) {
            cellHeight = this.getCellHeight(this.colRowToCellIndex(i, rowIdx));
            if (maxHeight < cellHeight)
                maxHeight = cellHeight;
        }
        return maxHeight;
    }

    getColWidth(idx) {
        return this.defaultCellWidth;
    }

    getCellHeight(cellIdx) {
        if (!this.isValidCellIdx(cellIdx)) {
            return 0;
        }

        var cellHeight;
        if (this.defaultCellHeightMode)
            cellHeight = this.defaultCellHeight;
        else {
            var cell = this.getCell(cellIdx, false);
            var deltaHeight = (cell) ? cell.deltaHeight : 0;
            cellHeight = this.defaultCellHeight + deltaHeight;
        }

        return cellHeight;
    }

    resetTotalRowsHeight() {
        this._totalRowsHeight = null;
    }

    get totalRowsHeight() {
        if (this._totalRowsHeight === null) {
            this._totalRowsHeight = this.rowIndexToHeight(0, this.rowCount - 1);
        }

        return this._totalRowsHeight;
    }

    get totalColumnWidth() {
        return this.colCount * this.defaultCellWidth + this.cellOriginX * this.defaultCellWidth + this.padX;
    }

    cellIndxeToColIndex(cellIdx) {
        return cellIdx % this.colCount;
    }

    cellIndxeToRowIndex(cellIdx) {
        return Math.floor(cellIdx / this.colCount);
    }

    getCell(cellIdx, createNewCell) {
        if (!this.isValidCellIdx(cellIdx)) {
            return null;
        }

        if (createNewCell === undefined) {
            createNewCell = true;
        }
        if ((this.cells[cellIdx] === null) && createNewCell) {
            var cell = this.newCell(cellIdx);
            this.cells[cellIdx] = cell;
        }

        return this.cells[cellIdx];
    }

    newCell(cellIdx) {
        var cell = this.cellPool.pop();
        if (cell === null) {
            cell = new gridtable_Cell(this);
        } else {
            cell.setParent(this);
        }
        cell.index = cellIdx;

        return cell;
    }

    buildCellIndex(startIdx) {
        if (startIdx === undefined) {
            startIdx = 0;
        }
        var cells = this.cells,
            cell;
        for (var i = startIdx, len = cells.length; i < len; i++) {
            cell = cells[i];
            if (cell) {
                cell.index = i;
            }
        }
        return this;
    }

    getParentContainer() {
        return this.parent;
    }

    freeCell(cell, fromScene) {
        if (typeof (cell) === 'number') {
            cell = this.cells[cell];
        }

        if (!cell) {
            return this;
        }

        cell.destroy(fromScene);
        if (!fromScene) {
            this.cellPool.push(cell);
        }
        return this;
    }
}

/* harmony default export */ var gridtable_Table = (Table_Table);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/mask/DefaultMask.js
var DefaultMask = __webpack_require__(168);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/ResizeGameObject.js
var ResizeGameObject = __webpack_require__(130);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/mask/MaskToGameObject.js
var MaskToGameObject = __webpack_require__(254);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/SetTableOY.js
var SetTableOY = function (oy) {
    var table = this.table;
    var topTableOY = this.topTableOY;
    var bottomTableOY = this.bottomTableOY;
    var tableOYExceedTop = (oy > this.topTableOY);
    var tableOYExeceedBottom = (oy < this.bottomTableOY);
    if (this.clampTableOXYMode) {
        var rowCount = table.rowCount;
        var visibleRowCount = table.heightToRowIndex(this.instHeight, true);

        // less then 1 page            
        if (rowCount < visibleRowCount) {
            oy = 0;
        } else if (tableOYExceedTop) {
            oy = topTableOY
        } else if (tableOYExeceedBottom) {
            oy = bottomTableOY;
        }
    }

    if (this._tableOY !== oy) {
        this._tableOY = oy;
    }


    if (tableOYExceedTop) {
        if (!this.execeedTopState) {
            this.emit('execeedtop', this, oy, topTableOY);
        }
    }
    this.execeedTopState = tableOYExceedTop;

    if (tableOYExeceedBottom) {
        if (!this.execeedBottomState) {
            this.emit('execeedbottom', this, oy, bottomTableOY);
        }
    }
    this.execeedBottomState = tableOYExeceedBottom;
    return this;
}

/* harmony default export */ var methods_SetTableOY = (SetTableOY);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/SetTableOX.js
var SetTableOX = function (ox) {
    var table = this.table;
    var leftTableOX = this.leftTableOX;
    var rightTableOX = this.rightTableOX;
    var tableOXExeceedLeft = (ox > this.leftTableOX);
    var tableOXExeceedRight = (ox < this.rightTableOX);
    if (this.clampTableOXYMode) {
        var colCount = table.colCount;
        var visibleColCount = table.widthToColIndex(this.instWidth, true);

        // less then 1 page            
        if (colCount < visibleColCount) {
            ox = 0;
        } else if (tableOXExeceedLeft) {
            ox = leftTableOX
        } else {
            // var tableVisibleWidth = this.tableVisibleWidth;
            if (tableOXExeceedRight)
                ox = rightTableOX;
        }
    }

    if (this._tableOX !== ox) {
        this._tableOX = ox;
    }

    if (tableOXExeceedLeft) {
        if (!this.execeedLeftState) {
            this.emit('execeedleft', this, ox, leftTableOX);
        }
    }
    this.execeedLeftState = tableOXExeceedLeft;

    if (tableOXExeceedRight) {
        if (!this.execeedRightState) {
            this.emit('execeedright', this, ox, rightTableOX);
        }
    }
    this.execeedRightState = tableOXExeceedRight;
    return this;
}

/* harmony default export */ var methods_SetTableOX = (SetTableOX);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/updatetable/HideCell.js
var HideCell = function (cell) {
    // Option: pop container of cell by cell.popContainer() under this event 
    this.emit('cellinvisible', cell);

    if (this.cellContainersPool) {
        var cellContainer = cell.popContainer(); // null if already been removed
        if (cellContainer) {
            this.cellContainersPool.killAndHide(cellContainer);
        }
    }

    cell.destroyContainer(); // Destroy container of cell
}

/* harmony default export */ var updatetable_HideCell = (HideCell);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/updatetable/HideCells.js


var HideCells = function () {
    var preList = this.preVisibleCells;
    var curList = this.visibleCells;
    preList.iterate(function (cell) {
        if (!curList.contains(cell)) {
            updatetable_HideCell.call(this, cell);
        }
    }, this);
}

/* harmony default export */ var updatetable_HideCells = (HideCells);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/updatetable/ShowCell.js
var ShowCell = function (cell) {
    // Attach container to cell by cell.setContainer(container) under this event
    var reusedCellContainer = null;
    if (this.cellContainersPool) {
        reusedCellContainer = this.cellContainersPool.getFirstDead();
        if (reusedCellContainer !== null) { // Reuse this game object
            reusedCellContainer.setActive(true).setVisible(true);
        }
    }

    this.emit('cellvisible', cell, reusedCellContainer);

    if (this.cellContainersPool) {
        var cellContainer = cell.getContainer();
        if (cellContainer) {
            if (reusedCellContainer === null) {
                this.cellContainersPool.add(cellContainer); // New cell container, add to pool
            } else if (reusedCellContainer !== cellContainer) {
                // Why reusedCellContainer is not equal to cellContainer?
                this.cellContainersPool.add(cellContainer); // New cell container, add to pool
                this.cellContainersPool.killAndHide(reusedCellContainer); // Unused cell container, put back to pool
            }
        } else { // No cell container added
            if (reusedCellContainer !== null) {
                this.cellContainersPool.killAndHide(reusedCellContainer); // Unused cell container, put back to pool
            }
        }
    }
}

/* harmony default export */ var updatetable_ShowCell = (ShowCell);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/updatetable/ShowCells.js


var ShowCells = function () {
    if (this.cellsCount === 0) {
        return;
    }
    var table = this.table;
    var rowIdx = table.heightToRowIndex(-this.tableOY);
    if (rowIdx < 0) {
        rowIdx = 0;
    }

    var colIdx = table.widthToColIndex(-this.tableOX);
    if (colIdx < 0) {
        colIdx = 0;
    }

    var cellIdx = table.colRowToCellIndex(colIdx, rowIdx);
    var bottomBound = this.bottomBound;
    var rightBound = this.rightBound;
    var lastIdx = table.cellsCount - 1;
    var lastColIdx = table.colCount - 1;

    var cellTLX0 = GetCellTLX.call(this, colIdx),
        cellTLX = cellTLX0;
    var cellTLY = GetCellTLY.call(this, rowIdx);
    this.visibleStartY = null;
    this.visibleEndY = null;
    this.visibleStartX = null;
    this.visibleEndX = null;
    this.lastVisibleCellIdx = null;
    while ((cellTLY < bottomBound) && (cellIdx <= lastIdx)) {
        if (this.table.isValidCellIdx(cellIdx)) {
            if (this.visibleStartY === null) {
                this.visibleStartY = rowIdx;
                this.visibleEndY = rowIdx;
            }
            if (this.visibleStartX === null) {
                this.visibleStartX = colIdx;
                this.visibleEndX = colIdx;
            }

            if (this.lastVisibleCellIdx === null) {
                this.lastVisibleCellIdx = cellIdx;
            }

            if (this.visibleEndY < rowIdx) {
                this.visibleEndY = rowIdx;
            }

            if (this.visibleEndX < colIdx) {
                this.visibleEndX = colIdx;
            }

            if (this.lastVisibleCellIdx < cellIdx) {
                this.lastVisibleCellIdx = cellIdx;
            }

            var cell = table.getCell(cellIdx, true);
            this.visibleCells.set(cell);
            if (!this.preVisibleCells.contains(cell)) {
                updatetable_ShowCell.call(this, cell);
            }
            if (this.scrollMode === 0) {
                cell.setXY(cellTLX, cellTLY);
            } else {
                cell.setXY(cellTLY, cellTLX);
            }
        }

        if ((cellTLX < rightBound) && (colIdx < lastColIdx)) {
            cellTLX += table.getColWidth(colIdx);
            colIdx += 1;
        } else {
            cellTLX = cellTLX0;
            cellTLY += table.getRowHeight(rowIdx);

            colIdx = this.visibleStartX;
            rowIdx += 1;
        }

        cellIdx = table.colRowToCellIndex(colIdx, rowIdx);
    }
}

var GetCellTLX = function (colIdx) {
    var ox = (this.scrollMode === 0) ? this.topLeftX : this.topLeftY;
    var x = this.tableOX + this.table.colIndexToWidth(0, colIdx - 1) + ox;
    return x;
}

var GetCellTLY = function (rowIdx) {
    var oy = (this.scrollMode === 0) ? this.topLeftY : this.topLeftX;
    var y = this.tableOY + this.table.rowIndexToHeight(0, rowIdx - 1) + oy;
    return y;
}

/* harmony default export */ var updatetable_ShowCells = (ShowCells);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/MaskChildren.js
var MaskChildren = __webpack_require__(349);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/updatetable/MaskCells.js


var MaskCells = function () {
    var children = [];
    var cells = this.visibleCells.entries, container;
    for (var i = 0, cnt = cells.length; i < cnt; i++) {
        container = cells[i].getContainer();
        if (container) {
            if (container.isRexContainerLite) { // ContainerLite
                container.getAllChildren(children);
            } else { // Others
                children.push(container);
            }
        }
    }
    Object(MaskChildren["a" /* default */])(this, this.cellsMask, children);
}

/* harmony default export */ var updatetable_MaskCells = (MaskCells);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/updatetable/UpdateTable.js




var UpdateTable = function (refresh) {
    if (refresh === undefined) {
        refresh = false;
    }
    if (refresh) {
        ClearVisibleCellIndexes.call(this);
        updatetable_HideCells.call(this);
    }
    ClearVisibleCellIndexes.call(this);
    updatetable_ShowCells.call(this);
    updatetable_HideCells.call(this);
    updatetable_MaskCells.call(this);
    return this;
}

var ClearVisibleCellIndexes = function () {
    var tmp = this.preVisibleCells;
    this.preVisibleCells = this.visibleCells;
    this.visibleCells = tmp;
    this.visibleCells.clear();
}

/* harmony default export */ var updatetable_UpdateTable = (UpdateTable);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/IsCellVisible.js
var IsCellVisible = function (cellIdx) {
    var cell = this.table.getCell(cellIdx, false);
    return cell && this.visibleCells.contains(cell);
}

/* harmony default export */ var methods_IsCellVisible = (IsCellVisible);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/PointerToCell.js
var PointerToCellIndex = function (x, y) {
    y -= (this.y + this.topLeftY);
    x -= (this.x + this.topLeftX);
    var offsetTableOY = this.tableOY - ((this.scrollMode === 0) ? y : x);
    var offsetTableOX = this.tableOX - ((this.scrollMode === 0) ? x : y);

    var table = this.table;
    var rowIdx = table.heightToRowIndex(-offsetTableOY);
    var colIdx = table.widthToColIndex(-offsetTableOX);
    var cellIdx = table.colRowToCellIndex(colIdx, rowIdx);
    if (cellIdx === null) {
        return null;
    }
    if (!this.isCellVisible(cellIdx)) {
        return null;
    }
    return cellIdx;
}

var PointerToCellContainer = function (x, y) {
    var cellIdx = PointerToCellIndex.call(this, x, y);
    if (cellIdx === null) {
        return undefined;
    }
    return this.getCellContainer(cellIdx);
}


// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/EachCell.js
// For when you know this Set will be modified during the iteration
var EachVisibleCell = function (callback, scope) {
    this.visibleCells.each(callback, scope);
    return this;
}

// For when you absolutely know this Set won't be modified during the iteration
var IterateVisibleCell = function (callback, scope) {
    this.visibleCells.iterate(callback, scope);
    return this;
}

var EachCell = function (callback, scope) {
    this.table.cells.slice().forEach(callback, scope);
    return this;
}

var IterateCell = function (callback, scope) {
    this.table.cells.forEach(callback, scope);
    return this;
}


// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/SetCellsCount.js
var SetCellsCount = function (count) {
    var cellsCount = this.cellsCount;
    if (cellsCount === count) {
        return this;
    }

    if (cellsCount > count) {
        this.removeCells(count, cellsCount - count);
    } else { // cellsCount < count
        this.insertNewCells(cellsCount, count - cellsCount);
    }
    return this;
}

/* harmony default export */ var methods_SetCellsCount = (SetCellsCount);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/InsertNewCells.js
const Clamp = Phaser.Math.Clamp;

var InsertNewCells = function (cellIdx, count) {
    if (typeof (cellIdx) === 'object') {
        cellIdx = cellIdx.index;
    }
    if (count === undefined) {
        count = 1;
    }
    if (count <= 0) {
        return this;
    }
    cellIdx = Clamp(cellIdx, 0, this.cellsCount);
    this.table.insertNewCells(cellIdx, count);
    return this;
}

/* harmony default export */ var methods_InsertNewCells = (InsertNewCells);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/RemoveCells.js


var RemoveCells = function (cellIdx, count) {
    if (typeof (cellIdx) === 'object') {
        cellIdx = cellIdx.index;
    }
    if (count === undefined) {
        count = 1;
    }
    if (cellIdx < 0) {
        count += cellIdx;
        cellIdx = 0;
    }
    if (count <= 0) {
        return this;
    }
    // out-of-range
    if (cellIdx > this.cellsCount) {
        return this;
    }

    if (cellIdx <= this.lastVisibleCellIdx) {
        var preList = this.preVisibleCells;
        var curList = this.visibleCells;
        var cell;
        for (var i = cellIdx, endIdx = cellIdx + count; i < endIdx; i++) {
            cell = this.getCell(i, false);
            if (cell) {
                if (curList.contains(cell)) {
                    updatetable_HideCell.call(this, cell);
                    curList.delete(cell);
                }
                preList.delete(cell);
            }
        }
    }

    this.table.removeCells(cellIdx, count);
    return this;
}

/* harmony default export */ var methods_RemoveCells = (RemoveCells);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/SetColumnCount.js
var SetColumnCount = function (count) {
    if (this.table.colCount === count) {
        return this;
    }
    this.table.setColumnCount(count);
    return this;
}

/* harmony default export */ var methods_SetColumnCount = (SetColumnCount);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/SetGridSize.js
var SetGridSize = function (colCount, rowCount) {
    this.setCellsCount(colCount * rowCount);
    this.table.setColumnCount(colCount);
    return this;
}

/* harmony default export */ var methods_SetGridSize = (SetGridSize);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/methods/Methods.js













/* harmony default export */ var Methods = ({
    setTableOY: methods_SetTableOY,
    setTableOX: methods_SetTableOX,
    updateTable: updatetable_UpdateTable,
    isCellVisible: methods_IsCellVisible,
    pointerToCellIndex: PointerToCellIndex,
    pointerToCellContainer: PointerToCellContainer,
    eachVisibleCell: EachVisibleCell,
    iterateVisibleCell: IterateVisibleCell,
    eachCell: EachCell,
    iterateCell: IterateCell,

    setCellsCount: methods_SetCellsCount,
    insertNewCells: methods_InsertNewCells,
    removeCells: methods_RemoveCells,
    setColumnCount: methods_SetColumnCount,
    setGridSize: methods_SetGridSize
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/gridtable/GridTable.js







const Container = ContainerLite["a" /* default */];
const Components = Phaser.GameObjects.Components;
const Set = Phaser.Structs.Set;
const GridTable_GetValue = Phaser.Utils.Objects.GetValue;
class GridTable_GridTable extends Container {
    constructor(scene, x, y, width, height, config) {
        if (config === undefined) {
            config = {};
        }
        super(scene, x, y, width, height);
        this.type = "rexGridTable";
        this._tableOX = GridTable_GetValue(config, "tableOX", 0);
        this._tableOY = GridTable_GetValue(config, "tableOY", 0);
        this.visibleCells = new Set();
        this.preVisibleCells = new Set();
        this.visibleStartX = null;
        this.visibleEndX = null;
        this.visibleStartY = null;
        this.visibleEndY = null;
        this.lastVisibleCellIdx = null;
        this.execeedTopState = false;
        this.execeedBottomState = false;
        this.execeedLeftState = false;
        this.execeedRightState = false;

        var reuseCellContainer = GridTable_GetValue(config, "reuseCellContainer", false);
        this.cellContainersPool = reuseCellContainer
            ? scene.add.group()
            : undefined;
        var callback = GridTable_GetValue(config, "cellVisibleCallback", null);
        if (callback !== null) {
            var scope = GridTable_GetValue(config, "cellVisibleCallbackScope", undefined);
            this.on("cellvisible", callback, scope);
        }
        callback = GridTable_GetValue(config, "cellInvisibleCallback", null);
        if (callback !== null) {
            var scope = GridTable_GetValue(
                config,
                "cellInvisibleCallbackScope",
                undefined
            );
            this.on("cellinvisible", callback, scope);
        }

        this.cellsMask = undefined;
        this.setCellsMask(GridTable_GetValue(config, "mask", true));
        this.cellsMaskGameObject = undefined;

        this.setScrollMode(GridTable_GetValue(config, "scrollMode", 0));
        this.setClampMode(GridTable_GetValue(config, "clamplTableOXY", true));
        // var cellOriginX = GetValue(config, "cellOriginX", 0.5);
        // var cellOriginY = GetValue(config, "cellOriginY", 0.5);
        // var padX = 0;
        // var padY = 0;
        // Pre-process cell size
        if (this.scrollMode === 0) {
            // scroll y 垂直滚动
            var cellWidth = GridTable_GetValue(config, "cellWidth", undefined);
            this.expandCellSize = cellWidth === undefined;
            if (cellWidth === undefined) {
                var columns = GridTable_GetValue(config, "columns", 1);
                config.cellWidth = this.width / columns;
            }
            // padY = cellOriginY * cellHeight;
        } else {
            // scroll x 水平滚动
            // Swap cell width and cell height
            var cellWidth = GridTable_GetValue(config, "cellHeight", undefined);
            var cellHeight = GridTable_GetValue(config, "cellWidth", undefined);
            this.expandCellSize = cellWidth === undefined;
            config.cellWidth = cellWidth;
            config.cellHeight = cellHeight;
            // padX = cellOriginX * cellWidth;
        }
        var originX = this.scrollMode ? 0.5 : 0;

        const cellOriginX = GridTable_GetValue(config, "cellOriginX", 0.5);
        if (cellOriginX > 0 && this.scrollMode) {
            // 水平：宽高取值相反； 垂直：宽高取值正常
            config.cellOriginX = 0;
        }
        const cellOriginY = GridTable_GetValue(config, "cellOriginY", 0.5);
        if (cellOriginY > 0 && !this.scrollMode) {
            // 水平：宽高取值相反； 垂直：宽高取值正常
            config.cellOriginY = 0;
        }
        this.table = new gridtable_Table(this, config);

        this.updateTable();
    }

    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene) {
            return;
        }

        this.table.destroy(fromScene);
        this.table = undefined;
        if (this.cellContainersPool) {
            this.cellContainersPool.destroy(true);
            this.cellContainersPool = undefined;
        }
        super.destroy(fromScene);
    }

    setScrollMode(mode) {
        if (typeof mode === "string") {
            mode = SCROLLMODE[mode.toLowerCase()];
        }
        this.scrollMode = mode;
        return this;
    }

    setClampMode(mode) {
        this.clampTableOXYMode = mode;
        return this;
    }
    setColumnCount(cnt) {
        this.table.setColumnCount(cnt);
        return this;
    }
    get tableOY() {
        return this._tableOY;
    }

    get tableOX() {
        return this._tableOX;
    }

    set tableOY(oy) {
        this.setTableOY(oy).updateTable(true);
    }

    set tableOX(ox) {
        this.setTableOX(ox).updateTable(true);
    }

    setTableOXY(ox, oy) {
        this.setTableOY(oy).setTableOX(ox);
        return this;
    }

    addTableOY(dy) {
        this.setTableOY(this.tableOY + dy);
        return this;
    }

    addTableOX(dx) {
        this.setTableOX(this.tableOX + dx);
        return this;
    }

    addTableOXY(dx, dy) {
        this.addTableOY(dy).addTableOX(dx);
        return this;
    }

    setTableOYByPercentage(percentage) {
        this.setTableOY(-this.tableVisibleHeight * percentage);
        return this;
    }

    getTableOYPercentage() {
        var tableVisibleHeight = this.tableVisibleHeight;
        if (tableVisibleHeight === 0) {
            return 0;
        }
        return this.tableOY / -tableVisibleHeight;
    }

    set t(value) {
        this.setTableOYByPercentage(value).updateTable();
    }

    get t() {
        return this.getTableOYPercentage();
    }

    getCells() {
        return this.table.cells;
    }

    getCell(cellIdx) {
        return this.table.getCell(cellIdx, true);
    }

    getCellContainer(cellIdx) {
        var cell = this.table.getCell(cellIdx, false);
        var container;
        if (cell) {
            container = cell.getContainer();
        }
        return container;
    }

    get cellsCount() {
        return this.table.cellsCount;
    }

    get columnCount() {
        return this.table.colCount;
    }

    setCellHeight(cellIdx, height) {
        var cell;
        if (typeof cellIdx === "number") {
            cell = this.table.getCell(cellIdx, true);
        } else {
            cell = cellIdx;
        }
        cell.height = height; // Only worked when scrollMode is 0
        return this;
    }

    setCellWidth(cellIdx, width) {
        var cell;
        if (typeof cellIdx === "number") {
            cell = this.table.getCell(cellIdx, true);
        } else {
            cell = cellIdx;
        }
        cell.width = width; // Only worked when scrollMode is 1
        return this;
    }

    setCellsMask(maskConfig) {
        var maskEnable, maskPadding;
        if (maskConfig === true) {
            maskEnable = true;
            maskPadding = 0;
        } else if (maskConfig === false) {
            maskEnable = false;
        } else {
            maskEnable = GridTable_GetValue(maskConfig, "mask", true);
            maskPadding = GridTable_GetValue(maskConfig, "padding", 0);
        }
        if (maskEnable) {
            this.cellsMaskGameObject = new DefaultMask["a" /* default */](this, 0, maskPadding);
            this.cellsMask = this.cellsMaskGameObject.createGeometryMask();
            this.add(this.cellsMaskGameObject);
        }
        return this;
    }

    getCellsMaskGameObject() {
        return this.cellsMaskGameObject;
    }

    get instHeight() {
        return this.scrollMode === 0 ? this.height : this.width;
    }

    get instWidth() {
        return this.scrollMode === 0 ? this.width : this.height;
    }

    get tableHeight() {
        return this.table.totalRowsHeight;
    }

    get tableWidth() {
        return this.table.totalColumnWidth;
    }

    get topTableOY() {
        return 0;
    }

    get bottomTableOY() {
        return -this.tableVisibleHeight;
    }

    get leftTableOX() {
        return 0;
    }

    get rightTableOX() {
        return -this.tableVisibleWidth;
    }

    get tableVisibleHeight() {
        var h;
        var tableHeight = this.tableHeight;
        var instHeight = this.instHeight;
        if (tableHeight > instHeight) {
            h = tableHeight - instHeight;
        } else {
            h = 0;
        }

        return h;
    }

    get tableVisibleWidth() {
        var w;
        var tableWidth = this.tableWidth;
        var instWidth = this.instWidth;
        if (tableWidth > instWidth) {
            w = tableWidth - instWidth;
        } else {
            w = 0;
        }
        return w;
    }

    get bottomLeftY() {
        return -(this.displayHeight * this.originY) + this.displayHeight;
    }

    get topRightX() {
        return -(this.displayWidth * this.originX) + this.displayWidth;
    }

    get topLeftX() {
        return -(this.displayWidth * this.originX);
    }

    get topLeftY() {
        return -(this.displayHeight * this.originY);
    }

    get bottomBound() {
        if (this.scrollMode === 0) {
            return this.bottomLeftY;
        } else {
            return this.topRightX;
        }
    }

    get rightBound() {
        if (this.scrollMode === 0) {
            return this.topRightX;
        } else {
            return this.bottomLeftY;
        }
    }

    resize(width, height) {
        if (this.width === width && this.height === height) {
            return this;
        }

        super.resize(width, height);
        if (this.cellsMask) {
            Object(ResizeGameObject["a" /* default */])(Object(MaskToGameObject["a" /* default */])(this.cellsMask), width, height);
        }

        if (this.expandCellSize) {
            this.table.setDefaultCellWidth(
                this.instWidth / this.table.colCount
            );
        }
        this.updateTable(true);
        return this;
    }
}

// mixin
Object.assign(GridTable_GridTable.prototype, Components.GetBounds, Methods);

const SCROLLMODE = {
    v: 0,
    vertical: 0,
    h: 1,
    horizontal: 1,
};

/* harmony default export */ var gridtable_GridTable = (GridTable_GridTable);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/InjectProperties.js
var InjectProperties = function (table) {
    Object.defineProperty(table, 'childOY', {
        configurable: true,
        get: function () {
            return table.tableOY;
        },
        set: function (value) {
            table.tableOY = value;
        }
    });
    Object.defineProperty(table, 'topChildOY', {
        get: function () {
            return table.topTableOY;
        }
    });
    Object.defineProperty(table, 'bottomChildOY', {
        get: function () {
            return table.bottomTableOY;
        }
    });
};
/* harmony default export */ var gridtable_InjectProperties = (InjectProperties);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/TableOnCellVisible.js
var TableOnCellVisible = function (table) {
    table.on('cellvisible', function (cell, cellContainer) {
        var callback = this.createCellContainerCallback;
        var scope = this.createCellContainerCallbackScope;
        cell.item = this.items[cell.index];
        var cellContainer;
        if (scope) {
            cellContainer = callback.call(scope, cell, cellContainer);
        } else {
            cellContainer = callback(cell, cellContainer);
        }
        if (cellContainer) {
            if (cellContainer.setOrigin) {
                cellContainer.setOrigin(0);
            }
            if (cellContainer.isRexSizer) {
                cellContainer.layout(); // Use original size
            }
        }

        cell.item = undefined;
        cell.setContainer(cellContainer);
    }, this);
}
/* harmony default export */ var gridtable_TableOnCellVisible = (TableOnCellVisible);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/button/Button.js
var Button = __webpack_require__(255);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/input/EmitCellEvent.js
var EmitCellEvent = function (eventEmitter, eventName, table, x, y) {
    var cellIndex;
    if (y === undefined) {
        cellIndex = x;
    } else {
        cellIndex = table.pointerToCellIndex(x, y);
    }
    if ((cellIndex === null) || (cellIndex === undefined)) {
        return;
    }
    var cellContainer = table.getCellContainer(cellIndex);
    eventEmitter.emit(eventName, cellContainer, cellIndex);
}

/* harmony default export */ var input_EmitCellEvent = (EmitCellEvent);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/input/ClickCell.js



var ClickCell = function (table, tableConfig) {
    table._click = new Button["a" /* default */](table, {
        threshold: 10
    });
    table._click.on('click', function (button, gameObject, pointer) {
        input_EmitCellEvent(this.eventEmitter, 'cell.click', gameObject, pointer.x, pointer.y);
    }, this);
};

/* harmony default export */ var input_ClickCell = (ClickCell);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/input/OverCell.js


var OverCell = function (table, tableConfig) {
    table
        .on('pointermove', OnMove, this)
        .on('pointerover', OnMove, this)
        .on('pointerup', OnOut, this)
        .on('pointerout', OnOut, this);
}

var OnMove = function (pointer) {
    if (pointer.isDown) {
        return;
    }
    var table = this.childrenMap.child;
    var cellIndex = table.pointerToCellIndex(pointer.x, pointer.y);
    if (cellIndex === this._lastOverCellIndex) {
        return;
    }

    var preCellIndex = this._lastOverCellIndex;
    this._lastOverCellIndex = cellIndex;
    input_EmitCellEvent(this.eventEmitter, 'cell.out', table, preCellIndex);
    input_EmitCellEvent(this.eventEmitter, 'cell.over', table, cellIndex);
}

var OnOut = function () {
    var table = this.childrenMap.child;
    var cellIndxe = this._lastOverCellIndex;
    this._lastOverCellIndex = undefined;
    input_EmitCellEvent(this.eventEmitter, 'cell.out', table, cellIndxe);
}

/* harmony default export */ var input_OverCell = (OverCell);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/tap/Tap.js + 1 modules
var Tap = __webpack_require__(193);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/input/TapCell.js



const TapCell_GetValue = Phaser.Utils.Objects.GetValue;

var TapCell = function (table, tableConfig) {
    var tapConfig = TapCell_GetValue(tableConfig, 'press', undefined);
    table._tap = new Tap["a" /* default */](table, tapConfig);
    table._tap
        .on('tap', function (tap) {
            var eventName = `cell.${tap.tapsCount}tap`
            input_EmitCellEvent(this.eventEmitter, eventName, tap.gameObject, tap.x, tap.y);
        }, this)
};

/* harmony default export */ var input_TapCell = (TapCell);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/press/Press.js + 1 modules
var Press = __webpack_require__(194);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/input/PressCell.js



const PressCell_GetValue = Phaser.Utils.Objects.GetValue;

var PressCell = function (table, tableConfig) {
    var pressConfig = PressCell_GetValue(tableConfig, 'press', undefined);
    table._press = new Press["a" /* default */](table, pressConfig);
    table._press
        .on('pressstart', function (press) {
            var cellIndex = table.pointerToCellIndex(press.x, press.y);
            press._cellIndex = cellIndex;
            input_EmitCellEvent(this.eventEmitter, 'cell.pressstart', table, cellIndex);
        }, this)
        .on('pressend', function (press) {
            var cellIndex = press._cellIndex;
            press._cellIndex = undefined;
            input_EmitCellEvent(this.eventEmitter, 'cell.pressend', table, cellIndex);
        }, this)
};

/* harmony default export */ var input_PressCell = (PressCell);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/swipe/Swipe.js + 4 modules
var Swipe = __webpack_require__(389);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/input/SwipeCell.js



const SwipeCell_GetValue = Phaser.Utils.Objects.GetValue;

var SwipeCell = function (table, tableConfig) {
    var swipeConfig = SwipeCell_GetValue(tableConfig, 'swipe', undefined);
    if (swipeConfig === undefined) {
        swipeConfig = {};
    }
    swipeConfig.dir = '4dir';
    table._swipe = new Swipe["a" /* default */](table, swipeConfig);
    table._swipe
        .on('swipe', function (swipe) {
            var isValidSwipe = (table.scrollMode === 0) ? (swipe.left || swipe.right) : (swipe.up || swipe.down);
            if (isValidSwipe) {
                var cellIndex = table.pointerToCellIndex(swipe.x, swipe.y);
                var dirName =
                    (swipe.left) ? 'left' :
                        (swipe.right) ? 'right' :
                            (swipe.up) ? 'up' :
                                'down';
                input_EmitCellEvent(this.eventEmitter, `cell.swipe${dirName}`, table, cellIndex);
            }
        }, this)
};

/* harmony default export */ var input_SwipeCell = (SwipeCell);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/input/TableSetInteractive.js






var TableSetInteractive = function (table, tableConfig) {
    table.setInteractive();

    input_ClickCell.call(this, table, tableConfig);
    input_OverCell.call(this, table, tableConfig);
    input_TapCell.call(this, table, tableConfig);
    input_PressCell.call(this, table, tableConfig);
    input_SwipeCell.call(this, table, tableConfig);
}

/* harmony default export */ var input_TableSetInteractive = (TableSetInteractive);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/NOOP.js
var NOOP = __webpack_require__(141);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/SetItems.js
var SetItems = function (items) {
    if (items === undefined) {
        this.items.length = 0;
    } else {
        this.items = items;
    }

    var table = this.childrenMap.child;
    table.setCellsCount(this.items.length);
    table.updateTable(true);

    this.resizeController();
    return this;
}

/* harmony default export */ var gridtable_SetItems = (SetItems);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/GridTable.js









const gridtable_GridTable_GetValue = Phaser.Utils.Objects.GetValue;
class gridtable_GridTable_GridTable extends Scrollable["a" /* default */] {
    constructor(scene, config) {
        if (config === undefined) {
            config = {};
        }

        // Create grid table core
        var scrollMode = Object(GetScrollMode["a" /* default */])(config);
        var tableConfig = gridtable_GridTable_GetValue(config, "table", undefined);
        if (tableConfig === undefined) {
            tableConfig = {};
        }
        tableConfig.scrollMode = scrollMode;
        tableConfig.clamplTableOXY = gridtable_GridTable_GetValue(config, "clamplChildOY", false);
        var tableWidth = gridtable_GridTable_GetValue(tableConfig, "width", undefined);
        var tableHeight = gridtable_GridTable_GetValue(tableConfig, "height", undefined);
        var table = new gridtable_GridTable(
            scene,
            0,
            0,
            tableWidth,
            tableHeight,
            tableConfig
        );
        scene.add.existing(table); // Important: Add to display list for touch detecting
        var proportion, expand;
        if (scrollMode === 0) {
            proportion = tableWidth === undefined ? 1 : 0;
            expand = tableHeight === undefined;
        } else {
            proportion = tableHeight === undefined ? 1 : 0;
            expand = tableWidth === undefined;
        }
        // Inject properties for scrollable interface
        gridtable_InjectProperties(table);
        // Fill config of scrollable
        config.type = "rexGridTable";
        config.child = {
            gameObject: table,
            proportion: proportion,
            expand: expand,
        };
        var spaceConfig = gridtable_GridTable_GetValue(config, "space", undefined);
        if (spaceConfig) {
            spaceConfig.child = spaceConfig.table;
        }
        super(scene, config);

        this.addChildrenMap("table", table);

        this.eventEmitter = gridtable_GridTable_GetValue(config, "eventEmitter", this);
        var callback = gridtable_GridTable_GetValue(config, "createCellContainerCallback", NOOP["a" /* default */]);
        var scope = gridtable_GridTable_GetValue(
            config,
            "createCellContainerCallbackScope",
            undefined
        );
        this.setCreateCellContainerCallback(callback, scope);

        gridtable_TableOnCellVisible.call(this, table);

        if (gridtable_GridTable_GetValue(tableConfig, "interactive", true)) {
            input_TableSetInteractive.call(this, table, tableConfig);
        }
        this.setItems(gridtable_GridTable_GetValue(config, "items", []));
    }

    set tableOX(ox) {
        const table = this.getElement("table");
        if (table) table.tableOX = ox;
    }

    set tableOY(oy) {
        const table = this.getElement("table");
        if (table) table.tableOY = oy;
    }
    setColumnCount(cnt) {
        const table = this.getElement("table");
        if (table) table.setColumnCount(cnt);
        return this;
    }
    setCreateCellContainerCallback(callback, scope) {
        this.createCellContainerCallback = callback;
        this.createCellContainerCallbackScope = scope;
        return this;
    }

    refresh() {
        this.setItems(this.items);
        return this;
    }
}

var methods = {
    setItems: gridtable_SetItems,
};
Object.assign(gridtable_GridTable_GridTable.prototype, methods);

/* harmony default export */ var ui_gridtable_GridTable = __webpack_exports__["a"] = (gridtable_GridTable_GridTable);


/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/container/Container.js
var Container = __webpack_require__(164);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetSizerConfig.js
var GetSizerConfig = __webpack_require__(213);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/defaultbounds/GetDefaultBounds.js
var GetDefaultBounds = __webpack_require__(345);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/PushIntoBounds.js


var PushIntoBounds = function (bounds) {
    if (bounds === undefined) {
        bounds = Object(GetDefaultBounds["a" /* default */])(this.scene);
    }

    this.left = Math.max(this.left, bounds.left);
    this.right = Math.min(this.right, bounds.right);
    this.top = Math.max(this.top, bounds.top);
    this.bottom = Math.min(this.bottom, bounds.bottom);
    return this;
}

/* harmony default export */ var basesizer_PushIntoBounds = (PushIntoBounds);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/AlignConst.js
var AlignConst = __webpack_require__(214);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/actions/GlobZone.js
var GlobZone = __webpack_require__(150);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/QuickSet.js + 23 modules
var QuickSet = __webpack_require__(135);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/DrawBounds.js




const GetValue = Phaser.Utils.Objects.GetValue;

var DrawBounds = function (graphics, config) {
    var scene = graphics.scene;

    var color;
    var createTextCallback, createTextCallbackScope, textAlign;
    if (typeof (config) === 'number') {
        color = config;
    } else {
        color = GetValue(config, 'color', 0xffffff);
        var nameTextConfig = GetValue(config, 'name', false);
        if (nameTextConfig) {
            createTextCallback = GetValue(nameTextConfig, 'createTextCallback', DefaultCreateTextCallback);
            createTextCallbackScope = GetValue(nameTextConfig, 'createTextCallbackScope', undefined);
            textAlign = GetValue(nameTextConfig, 'align', 'left-top');
            if (typeof (textAlign) === 'string') {
                textAlign = AlignConst["a" /* default */][textAlign];
            }
        }
    }

    if (createTextCallback && !graphics.children) {
        graphics.children = scene.add.group();
        graphics.on('destroy', function () {
            graphics.children.destroy();
            graphics.children = undefined;
        })
        var graphicsClear = graphics.clear.bind(graphics);
        graphics.clear = function () {
            graphicsClear();
            graphics.children.clear(false, true);
        }
    }

    var children = this.getAllChildren([this]), child;
    var nameText;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
        child = children[i];
        if (!child.getBounds) {
            continue;
        }
        if (color) {
            graphics
                .lineStyle(1, color)
                .strokeRectShape(child.getBounds(globRect));
        }

        if (child.name && createTextCallback) {
            if (createTextCallbackScope) {
                nameText = createTextCallback.call(createTextCallbackScope, scene);
            } else {
                nameText = createTextCallback(scene);
            }
            if (nameText) {
                nameText.setText(child.name);
                graphics.children.add(nameText);

                GlobZone["a" /* default */].setPosition(globRect.x, globRect.y).setSize(globRect.width, globRect.height);
                Object(QuickSet["a" /* default */])(nameText, GlobZone["a" /* default */], textAlign);
            }
        }
    }
    return this;
}

var DefaultCreateTextCallback = function (scene, child, childBoundsRect) {
    return scene.add.text(0, 0, '');
}

var globRect = new Phaser.Geom.Rectangle();

/* harmony default export */ var basesizer_DrawBounds = (DrawBounds);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/AddChildrenMap.js
var AddChildrenMap = function (key, gameObject) {
    if (this.childrenMap === undefined) {
        this.childrenMap = {};
    }
    this.childrenMap[key] = gameObject;
    return this;
}

/* harmony default export */ var basesizer_AddChildrenMap = (AddChildrenMap);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/IsArray.js
var IsArray = __webpack_require__(202);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/GetElement.js


var GetElement = function (mapNameList) {
    if (this.childrenMap === undefined) {
        return undefined;
    }

    if (typeof (mapNameList) === 'string') {
        mapNameList = mapNameList.split('.');
    }
    if (mapNameList.length === 0) {
        return undefined;
    }

    var name = mapNameList.shift(),
        element;
    if (name.charAt(0) === '#') {
        name = name.substring(1);
        element = GetElementByName(this.childrenMap, name);
    } else if (name.indexOf('[') === (-1)) {
        element = this.childrenMap[name];
    } else { // name[]
        var innerMatch = name.match(RE_OBJ);
        if (innerMatch != null) {
            var elements = this.childrenMap[innerMatch[1]];
            if (elements) {
                element = elements[innerMatch[2]];
            }
        }
    }

    if (mapNameList.length === 0) {
        return element;
    } else if (element && element.childrenMap) {
        return element.getElement(mapNameList);
    } else {
        return null;
    }
};

var GetElementByName = function (children, name) {
    var child;
    if (Object(IsArray["a" /* default */])(children)) {
        for (var i = 0, cnt = children.length; i < cnt; i++) {
            child = TestName(children[i], name);
            if (child) {
                return child;
            }
        }
    } else { // Is plain object
        for (var key in children) {
            child = TestName(children[key], name);
            if (child) {
                return child;
            }
        }
    }
}

var TestName = function (gameObject, name) {
    if (!gameObject) {
        return null;
    } else if (gameObject.hasOwnProperty('name')) {
        return (gameObject.name === name) ? gameObject : null;
    } else { // Array, or plain object
        return GetElementByName(gameObject, name);
    }
}

const RE_OBJ = /(\S+)\[(\d+)\]/i;

/* harmony default export */ var basesizer_GetElement = (GetElement);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/GetChildrenWidth.js
// Override
var GetChildrenWidth = function () {
    return 0;
}

/* harmony default export */ var basesizer_GetChildrenWidth = (GetChildrenWidth);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/GetChildrenHeight.js
// Override
var GetChildrenHeight = function () {
    return 0;
}

/* harmony default export */ var basesizer_GetChildrenHeight = (GetChildrenHeight);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/GetAllChildrenSizers.js
var GetAllChildrenSizers = function (out) {
    if (out === undefined) {
        out = [];
    }
    var startIdx = out.length;
    var children = this.getChildrenSizers(out);
    var endIdx = out.length;
    for (var i = startIdx; i < endIdx; i++) {
        children[i].getAllChildrenSizers(out);
    }

    return out;
}
/* harmony default export */ var basesizer_GetAllChildrenSizers = (GetAllChildrenSizers);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/GetChildrenSizers.js
// Override
var GetChildrenSizers = function(out) {
    if (out === undefined) {
        out = [];
    }
    return out;
}
/* harmony default export */ var basesizer_GetChildrenSizers = (GetChildrenSizers);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/PreLayout.js
var LayoutInit = function (parent) {
    if (parent) {
        return;
    }

    var children = this.getAllChildrenSizers([this]);
    var child, parent;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
        child = children[i];
        if (!child.rexSizer) {
            continue;
        }
        child._layoutInit();
    }
}
/* harmony default export */ var PreLayout = (LayoutInit);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/Layout.js
// Override
var Layout = function (parent, newWidth, newHeight) {
    if (this.rexSizer.hidden) {
        return this;
    }

    this.preLayout()

    // ...

    return this.postLayout();
}
/* harmony default export */ var basesizer_Layout = (Layout);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/PostLayout.js
var PostLayout = function (parent, newWidth, newHeight) {
    if (this._anchor) {
        this._anchor.updatePosition();
    }
    return this;
}
/* harmony default export */ var basesizer_PostLayout = (PostLayout);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/_layoutInit.js
// Override
var _layoutInit = function () {}
/* harmony default export */ var basesizer_layoutInit = (_layoutInit);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/behaviors/anchor/GetViewport.js
const Rectangle = Phaser.Geom.Rectangle;

var GetViewport = function (scaleManager, out) {
    if (out === undefined) {
        out = new Rectangle();
    }
    var bounds = scaleManager.canvasBounds;
    var scale = scaleManager.displayScale;
    var autoCenter = scaleManager.autoCenter;
    out.x = (bounds.x >= 0) ? 0 : -(bounds.x * scale.x);
    out.y = (bounds.y >= 0) ? 0 : -(bounds.y * scale.y);
    out.width = (bounds.width * scale.x) - out.x;
    out.height = (bounds.height * scale.y) - out.y;
    if ((autoCenter === 1) || (autoCenter === 2)) {
        out.width -= out.x;
    }
    if ((autoCenter === 1) || (autoCenter === 3)) {
        out.height -= out.y;
    }
    return out;
}

/* harmony default export */ var anchor_GetViewport = (GetViewport);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/behaviors/anchor/Anchor.js


const Anchor_Rectangle = Phaser.Geom.Rectangle;

class Anchor_Anchor {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.viewport = new Anchor_Rectangle();
        this.resetFromJSON(config);
        this.boot();
    }

    resetFromJSON(o) {
        var alignX, configX;
        if (o.x !== undefined) {
            alignX = null;
            configX = o.x;
        } else if (o.left !== undefined) {
            alignX = 0;
            configX = o.left;
        } else if (o.right !== undefined) {
            alignX = 1;
            configX = o.right;
        } else if (o.centerX !== undefined) {
            alignX = 0.5;
            configX = o.centerX;
        }

        var alignY, configY;
        if (o.y !== undefined) {
            alignY = null;
            configY = o.y;
        } else if (o.top !== undefined) {
            alignY = 0;
            configY = o.top;
        } else if (o.bottom !== undefined) {
            alignY = 1;
            configY = o.bottom;
        } else if (o.centerY !== undefined) {
            alignY = 0.5;
            configY = o.centerY;
        }

        var percentageX, offsetX;
        if (configX !== undefined) {
            configX = configX.replace('left', '0%').replace('right', '100%').replace('center', '50%').split('%');
            percentageX = parseFloat(configX[0]) / 100;
            offsetX = (configX[1] === '') ? 0 : parseFloat(configX[1]);
        }
        var percentageY, offsetY;
        if (configY !== undefined) {
            configY = configY.replace('top', '0%').replace('bottom', '100%').replace('center', '50%').split('%');
            percentageY = parseFloat(configY[0]) / 100;
            offsetY = (configY[1] === '') ? 0 : parseFloat(configY[1]);
        }

        this.setAlign(alignX, alignY);
        this.setPercentage(percentageX, percentageY);
        this.setOffset(offsetX, offsetY);
        return this;
    }

    boot() {
        this.scaleManamger.on('resize', this.anchor, this);
        this.gameObject.on('destroy', this.destroy, this);

        this.anchor();
    }

    shutdown() {
        this.scaleManamger.off('resize', this.anchor, this);
        this.gameObject = undefined;
    }

    destroy() {
        this.shutdown();
    }

    setAlign(x, y) {
        this.alignX = x;
        this.alignY = y;
        return this;
    }

    setPercentage(x, y) {
        this.percentageX = x;
        this.percentageY = y;
        return this;
    }

    setOffset(x, y) {
        this.offsetX = x;
        this.offsetY = y;
        return this;
    }

    anchor() {
        anchor_GetViewport(this.scaleManamger, this.viewport);
        this.updatePosition();
        return this;
    }

    updatePosition() {
        var gameObject = this.gameObject;

        if (this.alignX === null) {
            gameObject.x = this.anchorX;
        } else if (this.alignX !== undefined) {
            gameObject.x = this.anchorX + (gameObject.displayWidth * (gameObject.originX - this.alignX));
        }

        if (this.alignY === null) {
            this.gameObject.y = this.anchorY;
        } else if (this.alignY !== undefined) {
            gameObject.y = this.anchorY + (gameObject.displayHeight * (gameObject.originY - this.alignY));
        }
        return this;
    }

    get scaleManamger() {
        return this.gameObject.scene.scale;
    }

    get anchorX() {
        return this.viewport.x + (this.viewport.width * this.percentageX) + this.offsetX;
    }

    get anchorY() {
        return this.viewport.y + (this.viewport.height * this.percentageY) + this.offsetY;
    }
}

/* harmony default export */ var anchor_Anchor = (Anchor_Anchor);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/SetAnchor.js


var SetAnchor = function (config) {
    if (this._anchor === undefined) {
        this._anchor = new anchor_Anchor(this, config);
    } else {
        this._anchor.resetFromJSON(config)
    }
    return this;
}

/* harmony default export */ var basesizer_SetAnchor = (SetAnchor);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/tween/TweenBase.js
var TweenBase = __webpack_require__(215);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/behaviors/scale/Scale.js


const Scale_GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;

class Scale_Scale extends TweenBase["a" /* default */]{
    constructor(gameObject, config) {
        super(gameObject);
        this.gameObject = gameObject;

        this.scaleStart = {};
        this.scaleEnd = {};
        this.resetFromJSON(config);
    }

    resetFromJSON(o) {
        this.setMode(Scale_GetValue(o, 'mode', 0));
        this.setScaleRange(
            GetAdvancedValue(o, 'start', undefined),
            GetAdvancedValue(o, 'end', 0)
        );
        this.setDelay(GetAdvancedValue(o, 'delay', 0));
        this.setDuration(GetAdvancedValue(o, 'duration', 1000));
        this.setEase(Scale_GetValue(o, 'ease', undefined));
        return this;
    }

    toJSON() {
        return {
            mode: this.mode,
            start: this.scaleStart,
            end: this.scaleEnd,
            delay: this.delay,
            duration: this.duration
        };
    }

    setMode(m) {
        if (typeof (m) === 'string') {
            m = MODE[m];
        }
        this.mode = m;
        return this;
    }

    setScaleRange(start, end) {
        if (typeof (start) === 'number') {
            this.scaleStart.x = start;
            this.scaleStart.y = start;
        } else {
            this.scaleStart.x = Scale_GetValue(start, 'x', this.gameObject.scaleX);
            this.scaleStart.y = Scale_GetValue(start, 'y', this.gameObject.scaleY);
        }
        if (typeof (end) === 'number') {
            this.scaleEnd.x = end;
            this.scaleEnd.y = end;
        } else {
            this.scaleEnd.x = Scale_GetValue(end, 'x', this.scaleStart.x);
            this.scaleEnd.y = Scale_GetValue(end, 'y', this.scaleStart.y);
        }
        return this;
    }

    setDelay(time) {
        this.delay = time;
        return this;
    }

    setDuration(time) {
        this.duration = time;
        return this;
    }

    setEase(ease) {
        if (ease === undefined) {
            ease = 'Linear';
        }
        this.ease = ease;
        return this;
    }

    start() {
        if (this.isRunning) {
            return this;
        }

        this.gameObject.setScale(this.scaleStart.x, this.scaleStart.y);
        super.start({
            targets: this.gameObject,
            scaleX: this.scaleEnd.x,
            scaleY: this.scaleEnd.y,

            duration: this.duration,
            ease: this.ease,
            yoyo: (this.mode == 2),
            repeat: ((this.mode == 2) ? -1 : 0)
        });
        return this;
    }

    complete() {
        super.complete();
        if (this.mode === 1) {
            this.gameObject.destroy();
        }
        return this;
    }

}

const MODE = {
    stop: 0,
    destroy: 1,
    yoyo: 2
}

/* harmony default export */ var scale_Scale = (Scale_Scale);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/scale.js

/* harmony default export */ var plugins_scale = (scale_Scale);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/popup.js


var PopUp = function (gameObject, duration, orientation, ease, scale) {
    defaultConfig.mode = 0;
    switch (orientation) {
        case 0:
        case 'x':
            defaultConfig.start = {
                x: 0
            };
            break;
        case 1:
        case 'y':
            defaultConfig.start = {
                y: 0
            };
            break;
        default:
            defaultConfig.start = 0;
            break;
    }
    defaultConfig.end = 1;
    defaultConfig.duration = duration;
    defaultConfig.ease = (ease === undefined) ? 'Cubic' : ease;

    if (scale === undefined) {
        scale = new plugins_scale(gameObject, defaultConfig);
    } else {
        scale.resetFromJSON(defaultConfig);
    }
    scale.restart();

    return scale;
};

var defaultConfig = {}; // reuse this config

/* harmony default export */ var popup = (PopUp);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/scale-down-destroy.js


var ScaleDownDestroy = function (gameObject, duration, orientation, ease, destroyMode, scale) {
    if (destroyMode instanceof plugins_scale) {
        scale = destroyMode;
        destroyMode = undefined;
    }

    if (destroyMode === undefined) {
        destroyMode = true;
    }

    scale_down_destroy_defaultConfig.mode = (destroyMode) ? 1 : 0;
    switch (orientation) {
        case 0:
        case 'x':
            scale_down_destroy_defaultConfig.end = {
                x: 0
            };
            break;
        case 1:
        case 'y':
            scale_down_destroy_defaultConfig.end = {
                y: 0
            };
            break;
        default:
            scale_down_destroy_defaultConfig.end = 0;
            break;
    }
    scale_down_destroy_defaultConfig.duration = duration;
    scale_down_destroy_defaultConfig.ease = (ease === undefined) ? 'Linear' : ease;

    if (scale === undefined) {
        scale = new plugins_scale(gameObject, scale_down_destroy_defaultConfig);
    } else {
        scale.resetFromJSON(scale_down_destroy_defaultConfig);
    }
    scale.restart();

    return scale;
};

var scale_down_destroy_defaultConfig = {}; // reuse this config

/* harmony default export */ var scale_down_destroy = (ScaleDownDestroy);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/promise/WaitEvent.js
var WaitEvent = __webpack_require__(152);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/ScaleMethods.js




const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const ScaleMethods_GetValue = Phaser.Utils.Objects.GetValue;

/* harmony default export */ var ScaleMethods = ({
    popUp(duration, orientation, ease) {
        if (IsPlainObject(duration)) {
            var config = duration;
            duration = ScaleMethods_GetValue(config, 'duration', undefined);
            orientation = ScaleMethods_GetValue(config, 'orientation', undefined);
            ease = ScaleMethods_GetValue(config, 'ease', undefined);
        }

        this._scale = popup(this, duration, orientation, ease, this._scale);
        this._scale.once('complete', function () {
            this.emit('popup.complete', this);
        }, this);
        return this;
    },

    popUpPromise(duration, orientation, ease) {
        this.popUp(duration, orientation, ease);
        return Object(WaitEvent["a" /* WaitComplete */])(this._scale);
    },

    scaleDownDestroy(duration, orientation, ease, destroyMode) {
        if (IsPlainObject(duration)) {
            var config = duration;
            duration = ScaleMethods_GetValue(config, 'duration', undefined);
            orientation = ScaleMethods_GetValue(config, 'orientation', undefined);
            ease = ScaleMethods_GetValue(config, 'ease', undefined);
            destroyMode = ScaleMethods_GetValue(config, 'destroy', undefined);
        }

        this._scale = scale_down_destroy(this, duration, orientation, ease, destroyMode, this._scale);
        this._scale.once('complete', function () {
            this.emit('scaledown.complete', this);
        }, this);
        return this;
    },

    scaleDownDestroyPromise(duration, orientation, ease, destroyMode) {
        this.scaleDownDestroy(duration, orientation, ease, destroyMode);
        return Object(WaitEvent["a" /* WaitComplete */])(this._scale);
    },

    scaleDown(duration, orientation, ease) {
        this.scaleDownDestroy(duration, orientation, ease, false);
        return this;
    },

    scaleDownPromise(duration, orientation, ease) {
        this.scaleDown(duration, orientation, ease);
        return Object(WaitEvent["a" /* WaitComplete */])(this._scale);
    }


});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/behaviors/fade/Fade.js


const Fade_GetValue = Phaser.Utils.Objects.GetValue;
const Fade_GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;

class Fade_Fade extends TweenBase["a" /* default */] {
    constructor(gameObject, config) {
        super(gameObject);
        this.gameObject = gameObject;

        this.alphaStart = undefined;
        this.alphaEnd = undefined;
        this.resetFromJSON(config);
    }

    resetFromJSON(o) {
        this.setMode(Fade_GetValue(o, 'mode', 0));
        this.setAlphaRange(
            Fade_GetAdvancedValue(o, 'start', this.gameObject.alpha),
            Fade_GetAdvancedValue(o, 'end', 0)
        );
        this.setDelay(Fade_GetAdvancedValue(o, 'delay', 0));
        this.setDuration(Fade_GetAdvancedValue(o, 'duration', 1000));
        return this;
    }

    toJSON() {
        return {
            mode: this.mode,
            start: this.alphaStart,
            end: this.alphaEnd,
            delay: this.delay,
            duration: this.duration
        };
    }

    shutdown() {
        super.shutdown();
        this.gameObject = undefined;
        return this;
    }

    setMode(m) {
        if (typeof (m) === 'string') {
            m = Fade_MODE[m];
        }
        this.mode = m;
        return this;
    }

    setAlphaRange(start, end) {
        this.alphaStart = start;
        this.alphaEnd = end;
        return this;
    }

    setDelay(time) {
        this.delay = time;
        return this;
    }

    setDuration(time) {
        this.duration = time;
        return this;
    }

    start() {
        if (this.isRunning) {
            return this;
        }

        this.gameObject.setAlpha(this.alphaStart);
        super.start({
            targets: this.gameObject,
            alpha: this.alphaEnd,

            delay: this.delay,
            duration: this.duration,
            ease: 'Linear',
            yoyo: (this.mode == 2),
            repeat: ((this.mode == 2) ? -1 : 0)
        });
        return this;
    }

    complete() {
        super.complete();
        if (this.mode === 1) {
            this.gameObject.destroy();
        }
        return this;
    }

}

const Fade_MODE = {
    stop: 0,
    destroy: 1,
    yoyo: 2
}

/* harmony default export */ var fade_Fade = (Fade_Fade);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/fade.js

/* harmony default export */ var plugins_fade = (fade_Fade);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/fade-in.js


const fade_in_IsPlainObject = Phaser.Utils.Objects.IsPlainObject;

var FadeIn = function (gameObject, duration, alpha, fade) {
    var startAlpha, endAlpha;
    if (fade_in_IsPlainObject(alpha)) {
        startAlpha = alpha.start;
        endAlpha = alpha.end;
    } else {
        endAlpha = alpha;
    }
    if (startAlpha === undefined) {
        startAlpha = 0
    }
    if (endAlpha === undefined) {
        endAlpha = gameObject.alpha;
    }
    fade_in_defaultConfig.mode = 0;
    fade_in_defaultConfig.start = startAlpha;
    fade_in_defaultConfig.end = endAlpha;
    fade_in_defaultConfig.duration = duration;

    if (fade === undefined) {
        fade = new plugins_fade(gameObject, fade_in_defaultConfig);
    } else {
        fade.resetFromJSON(fade_in_defaultConfig);
    }
    fade.restart();

    return fade;
};

var fade_in_defaultConfig = {}; // reuse this config

/* harmony default export */ var fade_in = (FadeIn);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/fade-out-destroy.js


var FadeOutDestroy = function (gameObject, duration, destroyMode, fade) {
    if (destroyMode instanceof plugins_fade) {
        fade = destroyMode;
        destroyMode = undefined;
    }

    if (destroyMode === undefined) {
        destroyMode = true;
    }

    fade_out_destroy_defaultConfig.mode = (destroyMode) ? 1 : 0;
    fade_out_destroy_defaultConfig.end = 0;
    fade_out_destroy_defaultConfig.duration = duration;

    if (fade === undefined) {
        fade = new plugins_fade(gameObject, fade_out_destroy_defaultConfig);
    } else {
        fade.resetFromJSON(fade_out_destroy_defaultConfig);
    }
    fade.restart();

    return fade;
};

var fade_out_destroy_defaultConfig = {}; // reuse this config

/* harmony default export */ var fade_out_destroy = (FadeOutDestroy);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/FadeMethods.js




const FadeMethods_IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const FadeMethods_GetValue = Phaser.Utils.Objects.GetValue;

/* harmony default export */ var FadeMethods = ({
    fadeIn(duration, alpha) {
        if (FadeMethods_IsPlainObject(duration)) {
            var config = duration;
            duration = FadeMethods_GetValue(config, 'duration', undefined);
        }

        this._fade = fade_in(this, duration, alpha, this._fade);
        this._fade.once('complete', function () {
            this.emit('fadein.complete', this);
        }, this);
        return this;
    },

    fadeInPromoise(duration, alpha) {
        this.fadeIn(duration, alpha);
        return Object(WaitEvent["a" /* WaitComplete */])(this._fade);
    },

    fadeOutDestroy(duration, destroyMode) {
        if (FadeMethods_IsPlainObject(duration)) {
            var config = duration;
            duration = FadeMethods_GetValue(config, 'duration', undefined);
            destroyMode = FadeMethods_GetValue(config, 'destroy', undefined);
        }
        this._fade = fade_out_destroy(this, duration, destroyMode, this._fade);
        this._fade.once('complete', function () {
            this.emit('fadeout.complete', this);
        }, this);
        return this;
    },

    fadeOutDestroyPromise(duration, destroyMode) {
        this.fadeOutDestroy(duration, destroyMode);
        return Object(WaitEvent["a" /* WaitComplete */])(this._fade);
    },

    fadeOut(duration) {
        this.fadeOutDestroy(duration, false);
        return this;
    },

    fadeOutPromise(duration) {
        this.fadeOut(duration);
        return Object(WaitEvent["a" /* WaitComplete */])(this._fade);
    }
});
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/input/IsPointerInBounds.js
var IsPointerInBounds = __webpack_require__(165);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/IsInTouching.js


/* harmony default export */ var IsInTouching = (function (pointer) {
    return Object(IsPointerInBounds["a" /* default */])(this, pointer);
});
// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetParentSizer.js
var GetParentSizer = __webpack_require__(153);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/GetParentSizer.js


/* harmony default export */ var basesizer_GetParentSizer = (function () {
    return Object(GetParentSizer["a" /* default */])(this);
});
// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetTopmostSizer.js
var GetTopmostSizer = __webpack_require__(166);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/GetTopmostSizer.js


/* harmony default export */ var basesizer_GetTopmostSizer = (function () {
    return Object(GetTopmostSizer["a" /* default */])(this);
});
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/ResizeGameObject.js
var ResizeGameObject = __webpack_require__(130);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/LayoutBackgrounds.js




const ALIGN_CENTER = Phaser.Display.Align.CENTER;

var LayoutBackgrounds = function () {
    if (this.backgroundChildren === undefined) {
        return;
    }
    var backgrounds = this.backgroundChildren;

    var child;
    var x = this.left,
        y = this.top,
        width = this.width,
        height = this.height;

    for (var i = 0, cnt = backgrounds.length; i < cnt; i++) {
        child = backgrounds[i];
        if (child.rexSizer.hidden) {
            continue;
        }
        Object(ResizeGameObject["a" /* default */])(child, width, height);
        GlobZone["a" /* default */].setPosition(x, y).setSize(width, height);
        Object(QuickSet["a" /* default */])(child, GlobZone["a" /* default */], ALIGN_CENTER);
        this.resetChildPositionState(child);
    }
}

/* harmony default export */ var basesizer_LayoutBackgrounds = (LayoutBackgrounds);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/SetDraggable.js
var SetDraggable = function (senser, draggable) {
    var senserType = typeof (senser);
    if (senserType === 'string') {
        senser = this.getElement(senser);
    } else if ((senser === undefined) || (senserType != 'object')) {
        draggable = senser;
        senser = this;
    }
    if (draggable === undefined) {
        draggable = true;
    }

    if (senser.input && senser.input.hasOwnProperty('draggable')) {
        // Draggable is already registered
        senser.input.draggable = draggable;
    } else if (draggable) {
        // Register draggable
        senser.setInteractive();
        senser.scene.input.setDraggable(senser);
        senser.on('drag', onDrag, this);
    } else {
        // Not draggable and draggable is not registered yet, do nothing
    }
    return this;
}

var onDrag = function (pointer, dragX, dragY) {
    var topmostParent = this.getTopmostSizer();
    topmostParent.x += (dragX - this.x);
    topmostParent.y += (dragY - this.y);
}

/* harmony default export */ var basesizer_SetDraggable = (SetDraggable);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/Methods.js























var methods = {
    getSizerConfig: GetSizerConfig["a" /* default */],
    pushIntoBounds: basesizer_PushIntoBounds,
    drawBounds: basesizer_DrawBounds,
    getChildrenWidth: basesizer_GetChildrenWidth,
    getChildrenHeight: basesizer_GetChildrenHeight,
    addChildrenMap: basesizer_AddChildrenMap,
    addElement: basesizer_AddChildrenMap,
    getElement: basesizer_GetElement,
    getAllChildrenSizers: basesizer_GetAllChildrenSizers,
    getChildrenSizers: basesizer_GetChildrenSizers,
    preLayout: PreLayout,
    _layoutInit: basesizer_layoutInit,
    layout: basesizer_Layout,
    layoutBackgrounds: basesizer_LayoutBackgrounds,
    postLayout: basesizer_PostLayout,

    setAnchor: basesizer_SetAnchor,
    isInTouching: IsInTouching,
    getParentSizer: basesizer_GetParentSizer,
    getTopmostSizer: basesizer_GetTopmostSizer,
    setDraggable: basesizer_SetDraggable,
};

Object.assign(
    methods,
    FadeMethods,
    ScaleMethods
);

/* harmony default export */ var Methods = (methods);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/GetDisplaySize.js
var GetDisplaySize = __webpack_require__(112);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/basesizer/BaseSizer.js




const BaseSizer_GetValue = Phaser.Utils.Objects.GetValue;

class BaseSizer_Base extends Container["a" /* default */] {
    constructor(scene, x, y, minWidth, minHeight, config) {
        super(scene, x, y, 2, 2);

        this.isRexSizer = true;
        this.setMinSize(minWidth, minHeight);
        this.setName(BaseSizer_GetValue(config, 'name', ''));
        this.rexSizer = {};
        this.backgroundChildren = undefined;

        var anchorConfig = BaseSizer_GetValue(config, 'anchor', undefined);
        if (anchorConfig) {
            this.setAnchor(anchorConfig);
        }

        this.setDraggable(BaseSizer_GetValue(config, 'draggable', false));
    }

    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene) {
            return;
        }
        if (this.backgroundChildren !== undefined) {
            this.backgroundChildren.length = 0;
        }
        super.destroy(fromScene);
    }

    setMinSize(minWidth, minHeight) {
        this.setMinWidth(minWidth).setMinHeight(minHeight);
        return this;
    }

    setMinWidth(minWidth) {
        if (minWidth == null) {
            minWidth = 0;
        }
        this.minWidth = minWidth;
        return this;
    }

    setMinHeight(minHeight) {
        if (minHeight == null) {
            minHeight = 0;
        }
        this.minHeight = minHeight;
        return this;
    }

    get childrenWidth() {
        if (this._childrenWidth === undefined) {
            this._childrenWidth = this.getChildrenWidth();
        }
        return this._childrenWidth;
    }

    get childrenHeight() {
        if (this._childrenHeight === undefined) {
            this._childrenHeight = this.getChildrenHeight();
        }
        return this._childrenHeight;
    }

    get left() {
        return this.x - (Object(GetDisplaySize["b" /* GetDisplayWidth */])(this) * this.originX);
    }

    set left(value) {
        this.x += (value - this.left);
    }

    alignLeft(value) {
        this.left = value;
        return this;
    }

    get right() {
        return this.left + Object(GetDisplaySize["b" /* GetDisplayWidth */])(this);
    }

    set right(value) {
        this.x += (value - this.right);
    }

    alignRight(value) {
        this.right = value;
        return this;
    }

    get centerX() {
        return this.left + (Object(GetDisplaySize["b" /* GetDisplayWidth */])(this) / 2);
    }

    set centerX(value) {
        this.x += (value - this.centerX);
    }

    alignCenterX(value) {
        this.centerX = value;
        return this;
    }

    get top() {
        return this.y - (Object(GetDisplaySize["a" /* GetDisplayHeight */])(this) * this.originY);
    }

    set top(value) {
        this.y += (value - this.top);
    }

    alignTop(value) {
        this.top = value;
        return this;
    }

    get bottom() {
        return this.top + Object(GetDisplaySize["a" /* GetDisplayHeight */])(this);
    }

    set bottom(value) {
        this.y += (value - this.bottom);
    }

    alignBottom(value) {
        this.bottom = value;
        return this;
    }

    get centerY() {
        return this.top + (Object(GetDisplaySize["a" /* GetDisplayHeight */])(this) / 2);
    }

    set centerY(value) {
        this.y += (value - this.centerY);
    }

    alignCenterY(value) {
        this.centerY = value;
        return this;
    }

    pin(gameObject) {
        super.add(gameObject);
        return this;
    }

    addBackground(gameObject, childKey) {
        if (this.backgroundChildren === undefined) {
            this.backgroundChildren = [];
        }

        super.add(gameObject);

        var config = this.getSizerConfig(gameObject);
        config.parent = this;
        this.backgroundChildren.push(gameObject);

        if (childKey !== undefined) {
            this.addChildrenMap(childKey, gameObject)
        }
        return this;
    }
}

Object.assign(
    BaseSizer_Base.prototype,
    Methods
);

/* harmony default export */ var BaseSizer = __webpack_exports__["a"] = (BaseSizer_Base);

/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/basesizer/BaseSizer.js + 31 modules
var BaseSizer = __webpack_require__(187);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetBoundsConfig.js
var GetBoundsConfig = __webpack_require__(216);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/text/IsTextGameObject.js
const TextKlass = Phaser.GameObjects.Text;

var IsTextGameObject = function (gameObject) {
    return (gameObject instanceof TextKlass);
}

/* harmony default export */ var text_IsTextGameObject = (IsTextGameObject);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/mask/DefaultMask.js
var DefaultMask = __webpack_require__(168);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/SetTextObject.js




const ALIGN_LEFTTOP = Phaser.Display.Align.TOP_LEFT;

var SetTextObject = function (gameObject, maskEnable) {
    if (maskEnable === undefined) {
        maskEnable = true;
    }

    this.add(gameObject);

    var config = this.getSizerConfig(gameObject);
    config.parent = this;
    config.align = ALIGN_LEFTTOP;
    config.padding = Object(GetBoundsConfig["a" /* default */])(0);
    config.expand = true;
    this.textObject = gameObject;
    this.textObjectType = (text_IsTextGameObject(gameObject)) ? 0 : 1;
    // Add more variables
    config.preOffsetY = 0;
    config.offsetY = 0;

    // Create mask of text object
    if (maskEnable) {
        this.textMask = new DefaultMask["a" /* default */](this);
        this.textObject.setMask(this.textMask.createGeometryMask());
        this.pin(this.textMask);
    }
    return this;
}

/* harmony default export */ var textblock_SetTextObject = (SetTextObject);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/SetText.js
var SetText = function (text) {
    if (text !== undefined) {
        this.text = text;
    }

    // Wrap content in lines
    if (this.textObjectType === 0) {
        this.lines = this.textObject.getWrappedText(this.text); // lines in array
    } else {
        this.lines = this.textObject.getPenManager(this.text, this.lines); // pen manager
    }

    this.updateTextObject();
    return this;
}
/* harmony default export */ var textblock_SetText = (SetText);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/TextHeightToLinesCount.js
var TextHeightToLinesCount = function (height) {
    // height = (maxLines * (lineHeight + lineSpacing)) - lineSpacing
    return (height - this.textLineSpacing) / (this.textLineHeight + this.textLineSpacing);
}
/* harmony default export */ var textblock_TextHeightToLinesCount = (TextHeightToLinesCount);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/LinesCountToTextHeight.js
var LinesCountToTextHeight = function (linesCount) {
    // height = (maxLines * (lineHeight + lineSpacing)) - lineSpacing
    return (linesCount * (this.textLineHeight + this.textLineSpacing)) - this.textLineSpacing;
}
/* harmony default export */ var textblock_LinesCountToTextHeight = (LinesCountToTextHeight);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/GetLines.js
var GetLines = function (startLineIdx) {
    var endLineIdx = startLineIdx + this.textObject.style.maxLines;
    var text;
    if (this.textObjectType === 0) {
        text = this.lines.slice(startLineIdx, endLineIdx).join('\n');
    } else {
        var startIdx = this.lines.getLineStartIndex(startLineIdx);
        var endIdx = this.lines.getLineEndIndex(endLineIdx - 1);
        text = this.lines.getSliceTagText(startIdx, endIdx, true);
    }
    return text;
}

/* harmony default export */ var textblock_GetLines = (GetLines);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/ResetTextObjectPosition.js
var ResetTextObjectPosition = function () {
    var config = this.textObject.rexSizer;
    this.textObject.y += (config.offsetY - config.preOffsetY);
    config.preOffsetY = config.offsetY;
    this.resetChildPositionState(this.textObject);
}
/* harmony default export */ var textblock_ResetTextObjectPosition = (ResetTextObjectPosition);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/UpdateTextObject.js





var UpdateTextObject = function () {
    var startLineIndex = Math.max(Math.floor(textblock_TextHeightToLinesCount.call(this, -this.textOY)), 0);
    var textOffset = textblock_LinesCountToTextHeight.call(this, startLineIndex) + this.textOY;

    this.textObject.setText(textblock_GetLines.call(this, startLineIndex));
    this.textObject.rexSizer.offsetY = textOffset;
    textblock_ResetTextObjectPosition.call(this);
    return this;
}
/* harmony default export */ var textblock_UpdateTextObject = (UpdateTextObject);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/ResizeText.js


var ResizeText = function (textObject, width, height) {
    height += this.textLineHeight + this.textLineSpacing; // Add 1 text line
    if ((textObject.width === width) && (textObject.height === height)) {
        return;
    }

    textObject.setFixedSize(width, height);

    var style = textObject.style;
    var wrapWidth = Math.max(width, 0);

    var maxLines = Math.ceil(textblock_TextHeightToLinesCount.call(this, height)) + 1;

    if (this.textObjectType === 0) {
        style.wordWrapWidth = wrapWidth;
        style.maxLines = maxLines;
    } else {
        style.wrapWidth = wrapWidth;
        style.maxLines = maxLines;
    }

    // Render content again
    this.setText();
}

/* harmony default export */ var textblock_ResizeText = (ResizeText);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/actions/GlobZone.js
var GlobZone = __webpack_require__(150);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/QuickSet.js + 23 modules
var QuickSet = __webpack_require__(135);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/Layout.js





var Layout = function (parent, newWidth, newHeight) {
    // Skip invisible sizer
    if (this.rexSizer.hidden) {
        return this;
    }

    this.preLayout(parent);

    // Set size
    if (newWidth === undefined) {
        newWidth = this.minWidth;
    }
    if (newHeight === undefined) {
        newHeight = this.minHeight;
    }
    this.resize(newWidth, newHeight);

    // Layout children
    var child, childConfig, padding;
    var startX = this.left,
        startY = this.top;
    var x, y, width, height; // Align zone

    // Layout text child
    // Skip invisible child
    child = this.textObject;
    if (!child.rexSizer.hidden) {
        childConfig = child.rexSizer;
        padding = childConfig.padding;
        x = (startX + padding.left);
        y = (startY + padding.top);
        width = this.width - padding.left - padding.right;
        height = this.height - padding.top - padding.bottom;
        textblock_ResizeText.call(this, child, width, height);
        GlobZone["a" /* default */].setPosition(x, y).setSize(width, height);
        Object(QuickSet["a" /* default */])(child, GlobZone["a" /* default */], childConfig.align);

        childConfig.preOffsetY = 0; // Clear preOffsetY
        textblock_ResetTextObjectPosition.call(this);

        if (this.textMask) {
            this.textMask.setPosition().resize();
            this.resetChildPositionState(this.textMask);
        }

    }

    // Layout background children
    this.layoutBackgrounds();

    return this.postLayout();
}

/* harmony default export */ var textblock_Layout = (Layout);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/Methods.js





/* harmony default export */ var Methods = ({
    setTextObject: textblock_SetTextObject,
    setText: textblock_SetText,
    updateTextObject: textblock_UpdateTextObject,
    layout: textblock_Layout,
});
// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/TextBlock.js





const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;

class TextBlock_TextBlock extends BaseSizer["a" /* default */] {
    constructor(scene, x, y, minWidth, minHeight, config) {
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, 'x', 0);
            y = GetValue(config, 'y', 0);
            minWidth = GetValue(config, 'width', undefined);
            minHeight = GetValue(config, 'height', undefined);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = GetValue(config, 'width', undefined);
            minHeight = GetValue(config, 'height', undefined);
        }

        super(scene, x, y, minWidth, minHeight, config);

        this.type = 'rexTextBlock';
        this.textObject = undefined;
        this.textMask = undefined;
        this.textObjectType = undefined;
        this.lines = undefined; // array (default text object), or pens-manager (tag text object)
        this.text = GetValue(config, 'content', '');
        this._textOY = 0;
        this.execeedTopState = false;
        this.execeedBottomState = false;

        this.setClampMode(GetValue(config, 'clamplTextOY', true));

        // Add elements
        var background = GetValue(config, 'background', undefined);
        var textObject = GetValue(config, 'text', undefined);
        if (textObject === undefined) {
            textObject = createDefaultTextObject(scene);
        }
        var textMaskEnable = GetValue(config, 'textMask', true);

        if (background) {
            this.addBackground(background);
        }

        this.setTextObject(textObject, textMaskEnable);

        this.addChildrenMap('background', background);
        this.addChildrenMap('text', textObject);
    }

    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene) {
            return;
        }
        this.textObject = undefined;
        this.textMask = undefined;
        if (this.lines === undefined) {
            // Do nothing
        } else if (this.textObjectType === 0) {
            this.lines.length = 0;
        } else {
            this.lines.destroy();
        }
        super.destroy(fromScene);
    }

    setClampMode(mode) {
        this.clampTextOYMode = mode;
        return this;
    }

    get textLineHeight() {
        var style = this.textObject.style;
        return style.metrics.fontSize + style.strokeThickness;
    }

    get textLineSpacing() {
        return this.textObject.lineSpacing;
    }

    get linesCount() {
        var count;
        if (this.lines === undefined) {
            count = 0;
        } else if (this.textObjectType === 0) {
            count = this.lines.length;
        } else {
            count = this.lines.linesCount;
        }
        return count;
    }

    get visibleLinesCount() {
        return Math.floor(textblock_TextHeightToLinesCount.call(this, this.textObject.height));
    }

    get topTextOY() {
        return 0;
    }

    get bottomTextOY() {
        return -this.textVisibleHeight;
    }

    get textHeight() {
        return textblock_LinesCountToTextHeight.call(this, this.linesCount);
    }

    get textObjectHeight() {
        return this.textObject.height - this.textLineHeight - this.textLineSpacing; // Remove 1 text line
    }

    get textVisibleHeight() {
        var h;
        var textHeight = this.textHeight;
        var textObjectHeight = this.textObjectHeight;
        if (textHeight > textObjectHeight) {
            h = textHeight - textObjectHeight;
        } else {
            h = 0;
        }

        return h;
    }

    textOYExceedTop(oy) {
        if (oy === undefined) {
            oy = this.textOY;
        }
        return (oy > this.topTextOY);
    }

    textOYExeceedBottom(oy) {
        if (oy === undefined) {
            oy = this.textOY;
        }
        return (oy < this.bottomTextOY);
    }

    get textOY() {
        return this._textOY;
    }

    set textOY(oy) {
        var topTextOY = this.topTextOY;
        var bottomTextOY = this.bottomTextOY;
        var textOYExceedTop = this.textOYExceedTop(oy);
        var textOYExeceedBottom = this.textOYExeceedBottom(oy);

        if (this.clampTextOYMode) {
            if (this.visibleLinesCount > this.linesCount) {
                oy = 0;
            } else if (textOYExceedTop) {
                oy = topTextOY
            } else if (textOYExeceedBottom) {
                oy = bottomTextOY;
            }
        }

        if (this._textOY !== oy) {
            this._textOY = oy;
            this.updateTextObject();
        }

        if (textOYExceedTop) {
            if (!this.execeedTopState) {
                this.emit('execeedtop', this, oy, topTextOY);
            }
        }
        this.execeedTopState = textOYExceedTop;

        if (textOYExeceedBottom) {
            if (!this.execeedBottomState) {
                this.emit('execeedbottom', this, oy, bottomTextOY);
            }
        }
        this.execeedBottomState = textOYExeceedBottom;
    }

    setTextOY(oy) {
        this.textOY = oy;
        return this;
    }

    set t(value) {
        this.textOY = -this.textVisibleHeight * value;
    }

    get t() {
        var textVisibleHeight = this.textVisibleHeight;
        if (textVisibleHeight === 0) {
            return 0;
        }
        return (this.textOY / -textVisibleHeight);
    }

    setTextOYByPercentage(percentage) {
        this.t = percentage;
        return this;
    }
}

var createDefaultTextObject = function (scene) {
    return scene.add.text(0, 0, '');
};

Object.assign(
    TextBlock_TextBlock.prototype,
    Methods
);

/* harmony default export */ var textblock_TextBlock = __webpack_exports__["a"] = (TextBlock_TextBlock);

/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/sizer/Sizer.js + 11 modules
var Sizer = __webpack_require__(126);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/PositionToPercent.js
const Percent = Phaser.Math.Percent;

var PositionToPercent = function (startPoint, endPoint, currentPoint) {
    var min, max, value;
    if (startPoint.y === endPoint.y) {
        min = Math.min(startPoint.x, endPoint.x);
        max = Math.max(startPoint.x, endPoint.x);
        value = Percent(currentPoint.x, min, max);
    } else if (startPoint.x === endPoint.x) {
        min = Math.min(startPoint.y, endPoint.y);
        max = Math.max(startPoint.y, endPoint.y);
        value = Percent(currentPoint.y, min, max);
    }
    return value
}

/* harmony default export */ var slider_PositionToPercent = (PositionToPercent);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/OnDragThumb.js


var OnDragThumb = function (pointer, dragX, dragY) {
    if (!this.enable) {
        return;
    }
    tmpPoint.x = dragX;
    tmpPoint.y = dragY;
    this.value = slider_PositionToPercent(this.getStartPoint(), this.getEndPoint(), tmpPoint);
}
var tmpPoint = {};

/* harmony default export */ var slider_OnDragThumb = (OnDragThumb);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/OnTouchTrack.js


var OnTouchTrack = function (pointer, localX, localY) {
    if (!this.enable) {
        return;
    }
    if (!pointer.isDown) {
        return;
    }
    OnTouchTrack_tmpPoint.x = pointer.worldX;
    OnTouchTrack_tmpPoint.y = pointer.worldY;
    this.value = slider_PositionToPercent(this.getStartPoint(), this.getEndPoint(), OnTouchTrack_tmpPoint);
}
var OnTouchTrack_tmpPoint = {};

/* harmony default export */ var slider_OnTouchTrack = (OnTouchTrack);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/QuickSet.js + 23 modules
var QuickSet = __webpack_require__(135);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/GetThumbAlignPoint.js


var GetThumbAlignPoint = function (align, out) {
    if (out === undefined) {
        out = GetThumbAlignPoint_tmpPoint;
    }
    var thumb = this.childrenMap.thumb;
    var currentX = thumb.x;
    var currentY = thumb.y;

    Object(QuickSet["a" /* default */])(thumb, this, align);
    out.x = thumb.x;
    out.y = thumb.y;

    thumb.x = currentX;
    thumb.y = currentY;

    return out;
}

var GetThumbAlignPoint_tmpPoint = {};

/* harmony default export */ var slider_GetThumbAlignPoint = (GetThumbAlignPoint);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/GetStartPoint.js


const AlignLeft = Phaser.Display.Align.LEFT_CENTER;
const AlignTop = Phaser.Display.Align.TOP_CENTER;

var GetStartPoint = function (out) {
    if (out === undefined) {
        out = GetStartPoint_tmpPoint;
    }
    if (this.childrenMap.thumb) {
        var align = (this.orientation === 0) ? AlignTop : AlignLeft;
        slider_GetThumbAlignPoint.call(this, align, out);
    } else {
        if (this.orientation === 0) {
            out.x = this.centerX;
            out.y = this.top + 1; // Add 1 pixel margin
        } else {
            out.x = this.left + 1; // Add 1 pixel margin
            out.y = this.centerY;
        }
    }
    return out;
}

var GetStartPoint_tmpPoint = {};

/* harmony default export */ var slider_GetStartPoint = (GetStartPoint);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/GetEndPoint.js


const AlignRight = Phaser.Display.Align.RIGHT_CENTER;
const AlignBottom = Phaser.Display.Align.BOTTOM_CENTER;

var GetEndoint = function (out) {
    if (out === undefined) {
        out = GetEndPoint_tmpPoint;
    }
    if (this.childrenMap.thumb) {
        var align = (this.orientation === 1) ? AlignRight : AlignBottom;
        slider_GetThumbAlignPoint.call(this, align, out);
    } else {
        if (this.orientation === 0) {
            out.x = this.centerX;
            out.y = this.bottom - 1; // Add 1 pixel margin
        } else {
            out.x = this.right - 1; // Add 1 pixel margin
            out.y = this.centerY;
        }
    }
    return out;
}

var GetEndPoint_tmpPoint = {};

/* harmony default export */ var GetEndPoint = (GetEndoint);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/PercentToPosition.js
const Linear = Phaser.Math.Linear;

var PercentToPosition = function (t, startPoint, endPoint, out) {
    if (out === undefined) {
        out = tmpOut;
    }
    out.x = Linear(startPoint.x, endPoint.x, t);
    out.y = Linear(startPoint.y, endPoint.y, t);
    return out;
}
var tmpOut = {};

/* harmony default export */ var slider_PercentToPosition = (PercentToPosition);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/UpdateThumb.js


var UpdateThumb = function (t) {
    var thumb = this.childrenMap.thumb;
    if (thumb === undefined) {
        return this;
    }

    if (t === undefined) {
        t = this.value;
    }
    slider_PercentToPosition(t, this.getStartPoint(), this.getEndPoint(), thumb);
    this.resetChildPositionState(thumb);
    return this;
}

/* harmony default export */ var slider_UpdateThumb = (UpdateThumb);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/ResizeGameObject.js
var ResizeGameObject = __webpack_require__(130);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/GetDisplaySize.js
var GetDisplaySize = __webpack_require__(112);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/UpdateIndicator.js




const UpdateIndicator_AlignLeft = Phaser.Display.Align.LEFT_CENTER;
const UpdateIndicator_AlignTop = Phaser.Display.Align.TOP_CENTER;

var UpdateIndicator = function (t) {
    var indicator = this.childrenMap.indicator;
    if (indicator === undefined) {
        return this;
    }

    if (t === undefined) {
        t = this.value;
    }

    var newWidth, newHeight;
    var thumb = this.childrenMap.thumb;
    if (thumb) {
        if (this.orientation === 0) { // x, extend height
            var thumbHeight = Object(GetDisplaySize["a" /* GetDisplayHeight */])(thumb);
            var thumbBottom = (thumb.y - (thumbHeight * thumb.originY)) + thumbHeight;
            newHeight = thumbBottom - this.top;
        } else { // y, extend width
            var thumbWidth = Object(GetDisplaySize["b" /* GetDisplayWidth */])(thumb);
            var thumbRight = (thumb.x - (thumbWidth * thumb.originX)) + thumbWidth;
            newWidth = thumbRight - this.left;
        }
    } else {
        if (this.orientation === 0) { // x, extend height
            newHeight = this.height * t;
        } else { // y, extend width
            newWidth = this.width * t;
        }
    }
    Object(ResizeGameObject["a" /* default */])(indicator, newWidth, newHeight);
    var align = (this.orientation === 1) ? UpdateIndicator_AlignLeft : UpdateIndicator_AlignTop;
    Object(QuickSet["a" /* default */])(indicator, this, align);
    this.resetChildPositionState(indicator);
}

/* harmony default export */ var slider_UpdateIndicator = (UpdateIndicator);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/Slider.js








const GetValue = Phaser.Utils.Objects.GetValue;
const Clamp = Phaser.Math.Clamp;
const Slider_Linear = Phaser.Math.Linear;
const Slider_Percent = Phaser.Math.Percent;
const SnapTo = Phaser.Math.Snap.To;

class Slider_Slider extends Sizer["a" /* default */] {
    constructor(scene, config) {
        // Create sizer
        super(scene, config);
        this.type = 'rexSlider';
        this.eventEmitter = GetValue(config, 'eventEmitter', this);

        // Add elements
        var background = GetValue(config, 'background', undefined);
        var track = GetValue(config, 'track', undefined);
        var indicator = GetValue(config, 'indicator', undefined);
        var thumb = GetValue(config, 'thumb', undefined);

        // Space
        var paddingLeft = GetValue(config, 'space.left', 0);
        var paddingRight = GetValue(config, 'space.right', 0);
        var paddingTop = GetValue(config, 'space.top', 0);
        var paddingBottom = GetValue(config, 'space.bottom', 0);

        if (background) {
            this.addBackground(background);
        }

        if (track) {
            var padding = {
                left: paddingLeft,
                right: paddingRight,
                top: paddingTop,
                bottom: paddingBottom
            }
            this.add(track, 0, undefined, padding, true);
        }

        if (indicator) {
            this.add(indicator, null); // Put into container but not layout it
        }

        if (thumb) {
            this.add(thumb, null); // Put into container but not layout it

        }

        // Input
        var inputMode = GetValue(config, 'input', 0);
        if (typeof (inputMode) === 'string') {
            inputMode = INPUTMODE[inputMode];
        }
        switch (inputMode) {
            case 0: // 'drag'
                if (thumb) {
                    thumb.setInteractive();
                    this.scene.input.setDraggable(thumb);
                    thumb.on('drag', slider_OnDragThumb, this);
                }
                break;
            case 1: // 'click'
                this.setInteractive()
                    .on('pointerdown', slider_OnTouchTrack, this)
                    .on('pointermove', slider_OnTouchTrack, this);
                break;
        }

        this.addChildrenMap('background', background);
        this.addChildrenMap('track', track);
        this.addChildrenMap('indicator', indicator);
        this.addChildrenMap('thumb', thumb);

        var callback = GetValue(config, 'valuechangeCallback', null);
        if (callback !== null) {
            var scope = GetValue(config, 'valuechangeCallbackScope', undefined);
            this.eventEmitter.on('valuechange', callback, scope);
        }
        this.setEnable(GetValue(config, 'enable', undefined));
        this.setGap(GetValue(config, 'gap', undefined));
        this.setValue(GetValue(config, 'value', 0));
    }

    setEnable(enable) {
        if (enable === undefined) {
            enable = true;
        }
        this.enable = enable;
        return this;
    }

    setGap(gap) {
        this.gap = gap;
        return this;
    }

    get value() {
        return this._value;
    }

    set value(value) {
        if (this.gap !== undefined) {
            value = SnapTo(value, this.gap);
        }
        var oldValue = this._value;
        this._value = Clamp(value, 0, 1);

        if (oldValue !== this._value) {
            this.updateThumb(this._value);
            this.updateIndicator(this._value);
            this.eventEmitter.emit('valuechange', this._value, oldValue, this.eventEmitter);
        }
    }

    setValue(value, min, max) {
        if ((value === undefined) || (value === null)) {
            return this;
        }

        if (min !== undefined) {
            value = Slider_Percent(value, min, max);
        }
        this.value = value;
        return this;
    }

    addValue(inc, min, max) {
        if (min !== undefined) {
            inc = Slider_Percent(inc, min, max);
        }
        this.value += inc;
        return this;
    }

    getValue(min, max) {
        var value = this.value;
        if (min !== undefined) {
            value = Slider_Linear(min, max, value);
        }
        return value;
    }

    layout(parent, newWidth, newHeight) {
        super.layout(parent, newWidth, newHeight);
        this.updateThumb();
        this.updateIndicator();
        return this;
    }
}

const INPUTMODE = {
    drag: 0,
    click: 1,
    none: -1,
}

var methods = {
    getStartPoint: slider_GetStartPoint,
    getEndPoint: GetEndPoint,
    updateThumb: slider_UpdateThumb,
    updateIndicator: slider_UpdateIndicator,
}
Object.assign(
    Slider_Slider.prototype,
    methods
);

/* harmony default export */ var slider_Slider = __webpack_exports__["a"] = (Slider_Slider);

/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/sizer/Sizer.js + 11 modules
var Sizer = __webpack_require__(126);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/button/Button.js
var Button = __webpack_require__(255);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/buttons/ButtonSetInteractive.js


var ButtonSetInteractive = function (button, clickConfig) {
    //Default: Fire 'click' event when touch released after pressed.
    button._buttonBehavior = new Button["a" /* default */](button, clickConfig);

    button._buttonBehavior.on('click', function (buttonBehavior, gameObject, pointer, event) {
        FireEvent.call(this, 'button.click', button, pointer, event);
    }, this);

    button
        .on('pointerover', function (pointer, localX, localY, event) {
            FireEvent.call(this, 'button.over', button, pointer, event);
        }, this)
        .on('pointerout', function (pointer, event) {
            FireEvent.call(this, 'button.out', button, pointer, event);
        }, this)
}

var FireEvent = function (eventName, button, pointer, event) {
    var index;
    if (typeof (button) === 'number') {
        index = button;
        button = this.childrenMap.buttons[index];
        if (!button) {
            return;
        }
    } else {
        index = this.childrenMap.buttons.indexOf(button);
        if (index === -1) {
            return;
        }
    }

    // Buttons is a child. Fire internal events.
    if (this.eventEmitter !== this) {
        this.emit(eventName, button, index, pointer, event);
    }

    if (this.groupName !== undefined) {
        this.eventEmitter.emit(eventName, button, this.groupName, index, pointer, event);
    } else {
        this.eventEmitter.emit(eventName, button, index, pointer, event);
    }
}


// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/Hide.js
var Hide = __webpack_require__(144);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/buttons/ButtonMethods.js



/* harmony default export */ var ButtonMethods = ({
    getButton(index) {
        var button;
        if (typeof (index) === 'number') {
            button = this.childrenMap.buttons[index];
        } else {
            button = index;
            if (this.childrenMap.buttons.indexOf(button) === -1) {
                button = undefined;
            }
        }
        return button;
    },

    emitButtonClick(index) {
        // index or button game object
        FireEvent.call(this, 'button.click', index);
        return this;
    },

    showButton(index) {
        Object(Hide["c" /* Show */])(this.getButton(index));
        return this;
    },

    hideButton(index) {
        Object(Hide["a" /* Hide */])(this.getButton(index));
        return this;
    },

    isButtonShown(index) {
        Object(Hide["b" /* IsShown */])(this.getButton(index));
        return this;
    },

    forEachButtton(callback, scope) {
        var buttons = this.childrenMap.buttons;
        for (var i = 0, cnt = buttons.length; i < cnt; i++) {
            if (scope) {
                callback.call(scope, buttons[i], i, buttons);
            } else {
                callback(buttons[i], i, buttons);
            }
        }
        return this;
    }
});
// CONCATENATED MODULE: ./lib/rexui/lib/ui/buttons/types/InitData.js
const GetValue = Phaser.Utils.Objects.GetValue;

var InitData = function (config, initialValue) {
    if (initialValue === undefined) {
        initialValue = false;
    }

    var dataManager = GetValue(config, 'dataManager', undefined);
    var setValueCallback = GetValue(config, 'setValueCallback', undefined);
    var setValueCallbackScope = GetValue(config, 'setValueCallbackScope', undefined);

    if (dataManager === undefined) {
        this.setDataEnabled();
        dataManager = this.data;
    }

    this.childrenMap.buttons.forEach(function (button) {
        var key = button.name;

        if (setValueCallback) {
            dataManager.events.on(`changedata-${key}`, function (parent, value, previousValue) {
                if (setValueCallbackScope) {
                    setValueCallback.call(setValueCallbackScope, button, value, previousValue);
                } else {
                    setValueCallback(button, value);
                }
            }, this)
        }

        dataManager.set(key, undefined);
        dataManager.set(key, initialValue); // Trigger data event 'changedata'
    })
    this._dataManager = dataManager;
}

/* harmony default export */ var types_InitData = (InitData);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/buttons/types/SetRadioType.js


var SetRadioType = function (config) {
    types_InitData.call(this, config);

    this._value = undefined;
    Object.defineProperty(this, 'value', {
        get: (function () {
            return this._value;
        }).bind(this),
        set: (function (value) {
            if (value === this._value) {
                return;
            }

            this._value = value;

            // Update state of button -> Fire `changedata-btnName` event -> setValueCallback
            var dataManager = this._dataManager;
            this.getElement('buttons').forEach(function (button) {
                var key = button.name;
                var state = dataManager.get(key);
                if (key === value) {
                    if (!state) {
                        dataManager.set(key, true);
                    }
                } else {
                    if (state) {
                        dataManager.set(key, false);
                    }
                }
            });
        }).bind(this),
        enumerable: true,
        configurable: true
    });

    this.on('button.click', function (button) {
        this.value = button.name;
    }, this);

}

/* harmony default export */ var types_SetRadioType = (SetRadioType);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/buttons/types/SetCheckboxesType.js


var SetCheckboxesType = function (config) {
    types_InitData.call(this, config);

    this.on('button.click', function (button) {
        var dataManager = this._dataManager;
        var key = button.name;
        var value = dataManager.get(key);
        dataManager.set(key, !value);
    }, this);
}

/* harmony default export */ var types_SetCheckboxesType = (SetCheckboxesType);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/buttons/types/SetType.js



const SetType_GetValue = Phaser.Utils.Objects.GetValue;

const SetTypeCallbacks = {
    radio: types_SetRadioType,
    checkboxes: types_SetCheckboxesType
}

var SetType = function (config) {
    var type = SetType_GetValue(config, 'type', undefined);
    if (type && SetTypeCallbacks.hasOwnProperty(type)) {
        SetTypeCallbacks[type].call(this, config);
    }
}

/* harmony default export */ var types_SetType = (SetType);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/buttons/Buttons.js





const Buttons_GetValue = Phaser.Utils.Objects.GetValue;

class Buttons_Buttons extends Sizer["a" /* default */] {
    constructor(scene, config) {
        if (config === undefined) {
            config = {};
        }
        // Create 
        super(scene, config);
        this.type = 'rexButtons';
        this.eventEmitter = Buttons_GetValue(config, 'eventEmitter', this);
        this.groupName = Buttons_GetValue(config, 'groupName', undefined);

        // Add elements
        var background = Buttons_GetValue(config, 'background', undefined);
        var buttons = Buttons_GetValue(config, 'buttons', undefined);
        if (buttons && buttons.length === 0) {
            buttons = undefined;
        }

        // Space
        var buttonSpace = Buttons_GetValue(config, 'space', 0);

        if (background) {
            this.addBackground(background);
        }

        if (buttons) {
            var expand = Buttons_GetValue(config, 'expand', false);
            var proportion = (expand) ? 1 : 0;
            var buttonsAlign = Buttons_GetValue(config, 'align', undefined); // undefined/left/top: no space
            var clickConfig = Buttons_GetValue(config, 'click', undefined);

            // Add space
            if ((!expand) &&
                (
                    (buttonsAlign === 'right') ||
                    (buttonsAlign === 'bottom') ||
                    (buttonsAlign === 'center')
                )
            ) {
                this.addSpace();
            }

            var button, padding;
            for (var i = 0, cnt = buttons.length; i < cnt; i++) {
                button = buttons[i];
                // Add to sizer
                if (this.orientation === 0) {
                    padding = {
                        left: (i >= 1) ? buttonSpace : 0,
                        right: 0,
                        top: 0,
                        bottom: 0
                    }
                } else {
                    padding = {
                        left: 0,
                        right: 0,
                        top: (i >= 1) ? buttonSpace : 0,
                        bottom: 0
                    }
                }
                this.add(button, proportion, 'center', padding, true);
                ButtonSetInteractive.call(this, button, clickConfig);
            }

            // Add space
            if ((!expand) && (buttonsAlign === 'center')) {
                this.addSpace();
            }
        }

        this.addChildrenMap('background', background);
        this.addChildrenMap('buttons', (buttons) ? buttons : []);

        types_SetType.call(this, config);
    }
}

Object.assign(
    Buttons_Buttons.prototype,
    ButtonMethods
);

/* harmony default export */ var buttons_Buttons = __webpack_exports__["a"] = (Buttons_Buttons);

/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/basesizer/BaseSizer.js + 31 modules
var BaseSizer = __webpack_require__(187);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/mask/DefaultMask.js
var DefaultMask = __webpack_require__(168);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/scrollableblock/SetChild.js


const GetValue = Phaser.Utils.Objects.GetValue;
const ALIGN_LEFTTOP = Phaser.Display.Align.TOP_LEFT;

var SetChild = function (gameObject, expand, maskConfig) {
    if (gameObject.setOrigin) {
        gameObject.setOrigin(0);
    }

    this.add(gameObject);

    var config = this.getSizerConfig(gameObject);
    config.parent = this;
    config.align = ALIGN_LEFTTOP;
    config.expand = expand;
    this.child = gameObject;

    // Create mask of child object
    var maskEnable, maskPadding;
    if (maskConfig === true) {
        maskEnable = true;
        maskPadding = 0;
    } else if (maskConfig === false) {
        maskEnable = false;
    } else {
        maskEnable = GetValue(maskConfig, 'mask', true);
        maskPadding = GetValue(maskConfig, 'padding', 0);
    }

    if (maskEnable) {
        var maskGameObject = new DefaultMask["a" /* default */](this, 0, maskPadding);
        this.childMask = maskGameObject.createGeometryMask();
        this.pin(maskGameObject);
    }

    return this;
}

/* harmony default export */ var scrollableblock_SetChild = (SetChild);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/GetDisplaySize.js
var GetDisplaySize = __webpack_require__(112);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/scrollableblock/GetChildrenWidth.js


var GetChildrenWidth = function () {
    if (this.rexSizer.hidden) {
        return 0;
    }

    var result;
    var child = this.child,
        childConfig = child.rexSizer;
    if (childConfig.hidden) {
        result = 0;
    } else if (this.scrollMode === 0) { // scroll y
        result = (child.isRexSizer) ?
            Math.max(child.minWidth, child.childrenWidth) :
            Object(GetDisplaySize["b" /* GetDisplayWidth */])(child);
    } else { // scroll x
        result = 0;
    }

    return result;
}

/* harmony default export */ var scrollableblock_GetChildrenWidth = (GetChildrenWidth);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/scrollableblock/GetChildrenHeight.js


var GetChildrenHeight = function () {
    if (this.rexSizer.hidden) {
        return 0;
    }

    var result;
    var child = this.child,
        childConfig = child.rexSizer;
    if (childConfig.hidden) {
        result = 0;
    } else if (this.scrollMode === 0) { // scroll y   
        result = 0;
    } else { // scroll x
        result = (child.isRexSizer) ?
            Math.max(child.minHeight, child.childrenHeight) :
            Object(GetDisplaySize["a" /* GetDisplayHeight */])(child);
    }

    return result;
}

/* harmony default export */ var scrollableblock_GetChildrenHeight = (GetChildrenHeight);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/MaskChildren.js
var MaskChildren = __webpack_require__(349);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/scrollableblock/ResetChildPosition.js


var ResetChildPosition = function () {
    var x = this.left;
    var y = this.top;
    if (this.scrollMode === 0) {
        y += this.childOY;
    } else {
        x += this.childOY;
    }
    this.child.setPosition(x, y);
    Object(MaskChildren["a" /* default */])(this, this.childMask, this.child.getAllChildren());
    this.resetChildPositionState(this.child);
};

/* harmony default export */ var scrollableblock_ResetChildPosition = (ResetChildPosition);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/ResizeGameObject.js
var ResizeGameObject = __webpack_require__(130);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/mask/MaskToGameObject.js
var MaskToGameObject = __webpack_require__(254);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/scrollableblock/Layout.js



var Layout = function (parent, newWidth, newHeight) {
    // Skip invisible sizer
    if (this.rexSizer.hidden) {
        return this;
    }

    this.preLayout(parent);

    // Set size
    if (newWidth === undefined) {
        newWidth = Math.max(this.childrenWidth, this.minWidth);
    }
    if (newHeight === undefined) {
        newHeight = Math.max(this.childrenHeight, this.minHeight);
    }
    this.resize(newWidth, newHeight);

    // Layout child
    var child = this.child;
    var childWidth, childHeight;
    if (!child.rexSizer.hidden) {
        // Set size
        if (this.scrollMode === 0) {
            childWidth = this.width;
        } else {
            childHeight = this.height;
        }
        if (child.isRexSizer) {
            child.layout(this, childWidth, childHeight);
        } else {
            Object(ResizeGameObject["a" /* default */])(child, childWidth, childHeight);
        }

        this.resetChildPosition();

        // Layout child mask
        if (this.childMask) {
            var maskGameObject = Object(MaskToGameObject["a" /* default */])(this.childMask);
            maskGameObject.setPosition().resize();
            this.resetChildPositionState(maskGameObject);
        }
    }

    return this.postLayout();
}

/* harmony default export */ var scrollableblock_Layout = (Layout);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/scrollableblock/Methods.js






/* harmony default export */ var Methods = ({
    setChild: scrollableblock_SetChild,
    getChildrenWidth: scrollableblock_GetChildrenWidth,
    getChildrenHeight: scrollableblock_GetChildrenHeight,
    resetChildPosition: scrollableblock_ResetChildPosition,
    layout: scrollableblock_Layout,
});
// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/ScrollModeConst.js
var ScrollModeConst = __webpack_require__(347);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/scrollableblock/ScrollableBlock.js





const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const ScrollableBlock_GetValue = Phaser.Utils.Objects.GetValue;

class ScrollableBlock_ScrollableBlock extends BaseSizer["a" /* default */] {
    constructor(scene, x, y, minWidth, minHeight, config) {
        if (IsPlainObject(x)) {
            config = x;
            x = ScrollableBlock_GetValue(config, 'x', 0);
            y = ScrollableBlock_GetValue(config, 'y', 0);
            minWidth = ScrollableBlock_GetValue(config, 'width', undefined);
            minHeight = ScrollableBlock_GetValue(config, 'height', undefined);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = ScrollableBlock_GetValue(config, 'width', undefined);
            minHeight = ScrollableBlock_GetValue(config, 'height', undefined);
        }
        super(scene, x, y, minWidth, minHeight, config);

        this.type = 'rexScrollableBlock';
        this.child = undefined;
        this.childMask = undefined;
        this._childOY = 0;
        this.execeedTopState = false;
        this.execeedBottomState = false;

        this.setScrollMode(ScrollableBlock_GetValue(config, 'scrollMode', true))
        this.setClampMode(ScrollableBlock_GetValue(config, 'clamplChildOY', true));

        // Add elements
        // No background object, and child does not have padding
        var child = ScrollableBlock_GetValue(config, 'child', undefined);
        var expand = ScrollableBlock_GetValue(config, 'expand', true);
        var childMask = ScrollableBlock_GetValue(config, 'mask', undefined);

        this.setChild(child, expand, childMask);
    }

    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene) {
            return;
        }
        this.child = undefined;
        if (this.childMask) {
            this.childMask.destroy();
            this.childMask = undefined;
        }
        super.destroy(fromScene);
    }

    setScrollMode(mode) {
        if (typeof (mode) === 'string') {
            mode = ScrollModeConst["a" /* default */][mode.toLowerCase()];
        }
        this.scrollMode = mode;
        return this;
    }

    setClampMode(mode) {
        this.clampChildOYMode = mode;
        return this;
    }

    get instHeight() {
        return (this.scrollMode === 0) ? this.height : this.width;
    }

    get instWidth() {
        return (this.scrollMode === 0) ? this.width : this.height;
    }

    get childHeight() {
        return (this.scrollMode === 0) ? Object(GetDisplaySize["a" /* GetDisplayHeight */])(this.child) : Object(GetDisplaySize["b" /* GetDisplayWidth */])(this.child);
    }

    get childWidth() {
        return (this.scrollMode === 0) ? Object(GetDisplaySize["b" /* GetDisplayWidth */])(this.child) : Object(GetDisplaySize["a" /* GetDisplayHeight */])(this.child);
    }

    get topChildOY() {
        return 0;
    }

    get bottomChildOY() {
        return -this.visibleHeight;
    }

    get visibleHeight() {
        var h;
        var childHeight = this.childHeight;
        var instHeight = this.instHeight;
        if (childHeight > instHeight) {
            h = childHeight - instHeight;
        } else {
            h = 0;
        }

        return h;
    }

    childOYExceedTop(oy) {
        if (oy === undefined) {
            oy = this.childOY;
        }
        return (oy > this.topChildOY);
    }

    childOYExeceedBottom(oy) {
        if (oy === undefined) {
            oy = this.childOY;
        }
        return (oy < this.bottomChildOY);
    }

    get childOY() {
        return this._childOY;
    }

    set childOY(oy) {
        var topChildOY = this.topChildOY;
        var bottomChildOY = this.bottomChildOY;
        var childOYExceedTop = this.childOYExceedTop(oy);
        var childOYExeceedBottom = this.childOYExeceedBottom(oy);

        if (this.clampChildOYMode) {
            if (this.instHeight > this.childHeight) {
                oy = 0;
            } else if (childOYExceedTop) {
                oy = topChildOY
            } else if (childOYExeceedBottom) {
                oy = bottomChildOY;
            }
        }

        if (this._childOY !== oy) {
            this._childOY = oy;
            this.resetChildPosition();
        }

        if (childOYExceedTop) {
            if (!this.execeedTopState) {
                this.emit('execeedtop', this, oy, topChildOY);
            }
        }
        this.execeedTopState = childOYExceedTop;

        if (childOYExeceedBottom) {
            if (!this.execeedBottomState) {
                this.emit('execeedbottom', this, oy, bottomChildOY);
            }
        }
        this.execeedBottomState = childOYExeceedBottom;
    }

    setChildOY(oy) {
        this.childOY = oy;
        return this;
    }

    set t(value) {
        this.childOY = -this.visibleHeight * value;
    }

    get t() {
        var visibleHeight = this.visibleHeight;
        if (visibleHeight === 0) {
            return 0;
        }
        return (this.childOY / -visibleHeight);
    }

    setChildOYByPercentage(percentage) {
        this.t = percentage;
        return this;
    }
}

Object.assign(
    ScrollableBlock_ScrollableBlock.prototype,
    Methods
);

/* harmony default export */ var scrollableblock_ScrollableBlock = __webpack_exports__["a"] = (ScrollableBlock_ScrollableBlock);

/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ dragonbones_display_DragonbonesDisplay; });

// UNUSED EXPORTS: AvatarSlotType, AvatarPartType

// EXTERNAL MODULE: ./src/utils/resUtil.ts + 1 modules
var resUtil = __webpack_require__(104);

// EXTERNAL MODULE: ./src/rooms/display/display.object.ts
var display_object = __webpack_require__(148);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/interface/sound/ISoundConfig.ts
var SoundField;
(function (SoundField) {
    SoundField[SoundField["Background"] = 0] = "Background";
    SoundField[SoundField["Element"] = 1] = "Element";
    SoundField[SoundField["Effect"] = 2] = "Effect";
})(SoundField || (SoundField = {}));

// CONCATENATED MODULE: ./src/rooms/display/dragonbones.display.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var AvatarSlotType;
(function (AvatarSlotType) {
    AvatarSlotType["BodyCostDres"] = "body_cost_$_dres";
    AvatarSlotType["BodyCost"] = "body_cost_$";
    AvatarSlotType["BodyTail"] = "body_tail_$";
    AvatarSlotType["BodyWing"] = "body_wing_$";
    AvatarSlotType["BodyBase"] = "body_base_$";
    AvatarSlotType["BodySpec"] = "body_spec_$";
    AvatarSlotType["FlegSpec"] = "fleg_spec_$";
    AvatarSlotType["FlegBase"] = "fleg_base_$";
    AvatarSlotType["FlegCost"] = "fleg_cost_$";
    AvatarSlotType["BarmSpec"] = "barm_spec_$";
    AvatarSlotType["BarmBase"] = "barm_base_$";
    AvatarSlotType["BarmCost"] = "barm_cost_$";
    AvatarSlotType["WeapBarm"] = "weap_barm_$";
    AvatarSlotType["ShldBarm"] = "shld_barm_$";
    AvatarSlotType["BlegSpec"] = "bleg_spec_$";
    AvatarSlotType["BlegBase"] = "bleg_base_$";
    AvatarSlotType["BlegCost"] = "bleg_cost_$";
    AvatarSlotType["FarmSpec"] = "farm_spec_$";
    AvatarSlotType["FarmBase"] = "farm_base_$";
    AvatarSlotType["FarmCost"] = "farm_cost_$";
    AvatarSlotType["ShldFarm"] = "shld_farm_$";
    AvatarSlotType["WeapFarm"] = "weap_farm_$";
    AvatarSlotType["HeadSpec"] = "head_spec_$";
    AvatarSlotType["HeadMask"] = "head_mask_$";
    AvatarSlotType["HeadEyes"] = "head_eyes_$";
    AvatarSlotType["HeadBase"] = "head_base_$";
    AvatarSlotType["HeadHairBack"] = "head_hair_$_back";
    AvatarSlotType["HeadMous"] = "head_mous_$";
    AvatarSlotType["HeadHair"] = "head_hair_$";
    AvatarSlotType["HeadHats"] = "head_hats_$";
})(AvatarSlotType || (AvatarSlotType = {}));
var AvatarPartType;
(function (AvatarPartType) {
    AvatarPartType["BarmBase"] = "barm_base_#_$";
    AvatarPartType["BarmCost"] = "barm_cost_#_$";
    AvatarPartType["BarmSpec"] = "barm_spec_#_$";
    AvatarPartType["BlegBase"] = "bleg_base_#_$";
    AvatarPartType["BlegCost"] = "bleg_cost_#_$";
    AvatarPartType["BlegSpec"] = "bleg_spec_#_$";
    AvatarPartType["BodyBase"] = "body_base_#_$";
    AvatarPartType["BodyCost"] = "body_cost_#_$";
    AvatarPartType["BodyCostDres"] = "body_cost_#_$_dres";
    AvatarPartType["BodySpec"] = "body_spec_#_$";
    AvatarPartType["BodyTail"] = "body_tail_#_$";
    AvatarPartType["BodyWing"] = "body_wing_#_$";
    AvatarPartType["FarmBase"] = "farm_base_#_$";
    AvatarPartType["FarmCost"] = "farm_cost_#_$";
    AvatarPartType["FarmSpec"] = "farm_spec_#_$";
    AvatarPartType["FlegBase"] = "fleg_base_#_$";
    AvatarPartType["FlegCost"] = "fleg_cost_#_$";
    AvatarPartType["FlegSpec"] = "fleg_spec_#_$";
    AvatarPartType["HeadBase"] = "head_base_#_$";
    AvatarPartType["HeadEyes"] = "head_eyes_#_$";
    AvatarPartType["HeadHair"] = "head_hair_#_$";
    AvatarPartType["HeadHairBack"] = "head_hair_#_$_back";
    AvatarPartType["HeadHats"] = "head_hats_#_$";
    AvatarPartType["HeadMask"] = "head_mask_#_$";
    AvatarPartType["HeadMous"] = "head_mous_#_$";
    AvatarPartType["HeadSpec"] = "head_spec_#_$";
    AvatarPartType["ShldFarm"] = "shld_farm_#_$";
    AvatarPartType["WeapFarm"] = "weap_farm_#_$";
    AvatarPartType["ShldBarm"] = "shld_barm_#_$";
    AvatarPartType["WeapBarm"] = "weap_barm_#_$";
})(AvatarPartType || (AvatarPartType = {}));
/**
 * 龙骨显示对象
 */
var dragonbones_display_DragonbonesDisplay = /** @class */ (function (_super) {
    __extends(DragonbonesDisplay, _super);
    function DragonbonesDisplay(scene, roomService, element, antial) {
        if (antial === void 0) { antial = false; }
        var _this = _super.call(this, scene, roomService, element, antial) || this;
        _this.mAnimationName = "Armature";
        _this.mDragonbonesName = "";
        _this.replaceArr = [];
        _this.mHasLoadMap = new Map();
        _this.mLoadMap = new Map();
        _this.mErrorLoadMap = new Map();
        return _this;
    }
    Object.defineProperty(DragonbonesDisplay.prototype, "spriteWidth", {
        get: function () {
            if (this.mArmatureDisplay) {
                return this.mArmatureDisplay.width;
            }
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DragonbonesDisplay.prototype, "spriteHeight", {
        get: function () {
            if (this.mArmatureDisplay) {
                return this.mArmatureDisplay.height;
            }
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DragonbonesDisplay.prototype, "GameObject", {
        get: function () {
            return this;
        },
        enumerable: false,
        configurable: true
    });
    DragonbonesDisplay.prototype.changeAlpha = function (val) {
        // this.alpha = val;
    };
    DragonbonesDisplay.prototype.load = function (display) {
        this.mDisplayInfo = display;
        this.mCollisionArea = [[1, 1], [1, 1]];
        this.mOriginPoint = new Phaser.Geom.Point(1, 1);
        if (!this.mDisplayInfo)
            return;
        this.dragonBonesName = "bones_human01"; // this.mDisplayInfo.avatar.id;
    };
    DragonbonesDisplay.prototype.getDisplay = function () {
        return this.mArmatureDisplay;
    };
    DragonbonesDisplay.prototype.play = function (val) {
        this.mActionName = val;
        if (this.mArmatureDisplay) {
            if (this.mArmatureDisplay.hasDBEventListener(dragonBones.EventObject.LOOP_COMPLETE)) {
                this.mArmatureDisplay.removeDBEventListener(dragonBones.EventObject.LOOP_COMPLETE, this.onArmatureLoopComplete, this);
            }
            if (val.playingQueue && val.playingQueue.complete) {
                this.mArmatureDisplay.addDBEventListener(dragonBones.EventObject.LOOP_COMPLETE, this.onArmatureLoopComplete, this);
            }
            this.mArmatureDisplay.animation.play(val.animationName);
            this.mArmatureDisplay.scaleX = val.flip ? -1 : 1;
        }
    };
    DragonbonesDisplay.prototype.fadeIn = function (callback) {
        this.clearFadeTween();
        this.alpha = 0;
        this.mFadeTween = this.scene.tweens.add({
            targets: this,
            alpha: 1,
            duration: 1200,
            onComplete: function () {
                if (callback)
                    callback();
            }
        });
    };
    DragonbonesDisplay.prototype.fadeOut = function (callback) {
        this.clearFadeTween();
        this.mFadeTween = this.scene.tweens.add({
            targets: this,
            alpha: 0,
            duration: 1200,
            onComplete: function () {
                if (callback)
                    callback();
            }
        });
    };
    DragonbonesDisplay.prototype.destroy = function () {
        this.mDisplayInfo = null;
        if (this.mArmatureDisplay) {
            this.mArmatureDisplay.dispose(true);
            this.mArmatureDisplay = null;
        }
        if (this.mClickCon) {
            this.mClickCon.destroy(true);
            this.mClickCon = null;
        }
        if (this.mFadeTween) {
            this.clearFadeTween();
            this.mFadeTween = null;
        }
        _super.prototype.destroy.call(this);
    };
    DragonbonesDisplay.prototype.buildDragbones = function () {
        if (this.scene.cache.custom.dragonbone.get(this.mDragonbonesName)) {
            this.onLoadCompleteHandler();
        }
        else {
            var res = "./resources/dragonbones";
            var pngUrl = res + "/" + this.mDragonbonesName + "_tex.png";
            var jsonUrl = res + "/" + this.mDragonbonesName + "_tex.json";
            var dbbinUrl = res + "/" + this.mDragonbonesName + "_ske.dbbin";
            this.loadDragonBones(res, pngUrl, jsonUrl, dbbinUrl);
        }
    };
    DragonbonesDisplay.prototype.onLoadCompleteHandler = function (loader, totalComplete, totalFailed) {
        if (!this.scene)
            return;
        if (this.mArmatureDisplay) {
            this.mArmatureDisplay.dbClear();
        }
        this.mArmatureDisplay = this.scene.add.armature(this.mAnimationName, this.dragonBonesName);
        this.mArmatureDisplay.addDBEventListener(dragonBones.EventObject.SOUND_EVENT, this.onSoundEventHandler, this);
        this.mArmatureDisplay.visible = false;
        this.add(this.mArmatureDisplay);
        // ==========只有在创建龙骨时才会调用全部清除，显示通过后续通信做处理
        this.clearArmatureSlot();
        // ==========替换相应格位的display，服务端通信后可调用
        this.getReplaceArr();
        this.showReplaceArmatrue();
        // this.play("idle");
        this.mArmatureDisplay.x = this.baseLoc.x;
        this.mArmatureDisplay.y = this.baseLoc.y;
        var rect = new Phaser.Geom.Rectangle(0, 0, 50, 70);
        if (!this.mClickCon) {
            this.mClickCon = this.scene.make.container(undefined, false);
            this.mClickCon.setInteractive(rect, Phaser.Geom.Rectangle.Contains);
            this.mClickCon.x = -rect.width >> 1;
            this.mClickCon.y = -rect.height;
        }
        this.setData("id", this.mDisplayInfo.id);
        this.add(this.mClickCon);
        this.emit("initialized");
    };
    DragonbonesDisplay.prototype.loadDragonBones = function (resUrl, pngUrl, jsonUrl, dbbinUrl) {
        this.scene.load.dragonbone(this.mDragonbonesName, pngUrl, jsonUrl, dbbinUrl, null, null, { responseType: "arraybuffer" });
        this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadCompleteHandler, this);
        this.scene.load.start();
    };
    DragonbonesDisplay.prototype.clearArmatureSlot = function () {
        var slotList = this.mArmatureDisplay.armature.getSlots();
        slotList.forEach(function (slot) {
            if (slot)
                slot.display.visible = false;
        });
    };
    DragonbonesDisplay.prototype.clearReplaceArmature = function () {
        this.mArmatureDisplay.armature.animation.stop();
        if (!this.replaceArr || this.replaceArr.length === 0) {
            return;
        }
        var len = this.replaceArr.length;
        for (var i = 0; i < len; i++) {
            var part = this.replaceArr[i].slot.replace("$", this.replaceArr[i].dir.toString());
            var slot = this.mArmatureDisplay.armature.getSlot(part);
            slot.replaceDisplay(null);
        }
    };
    DragonbonesDisplay.prototype.showReplaceArmatrue = function () {
        for (var _i = 0, _a = this.replaceArr; _i < _a.length; _i++) {
            var obj = _a[_i];
            this.replacePartDisplay(obj.slot, obj.part, obj.dir, obj.skin);
        }
        if (this.mLoadMap && this.mLoadMap.size > 0) {
            this.startLoad();
        }
        else {
            this.refreshAvatar();
        }
    };
    DragonbonesDisplay.prototype.getReplaceArr = function () {
        this.replaceArr.length = 0;
        var avater = this.mDisplayInfo.avatar;
        if (avater.bodyBaseId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BodyBase,
                part: AvatarPartType.BodyBase,
                dir: 3,
                skin: avater.bodyBaseId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BodyBase,
                part: AvatarPartType.BodyBase,
                dir: 1,
                skin: avater.bodyBaseId,
            });
        }
        if (avater.bodySpecId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BodySpec,
                part: AvatarPartType.BodySpec,
                dir: 3,
                skin: avater.bodySpecId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BodySpec,
                part: AvatarPartType.BodySpec,
                dir: 1,
                skin: avater.bodySpecId,
            });
        }
        if (avater.bodyWingId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BodyWing,
                part: AvatarPartType.BodyWing,
                dir: 3,
                skin: avater.bodyWingId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BodyWing,
                part: AvatarPartType.BodyWing,
                dir: 1,
                skin: avater.bodyWingId,
            });
        }
        if (avater.bodyTailId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BodyTail,
                part: AvatarPartType.BodyTail,
                dir: 3,
                skin: avater.bodyTailId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BodyTail,
                part: AvatarPartType.BodyTail,
                dir: 1,
                skin: avater.bodyTailId,
            });
        }
        if (avater.bodyCostId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BodyCost,
                part: AvatarPartType.BodyCost,
                dir: 3,
                skin: avater.bodyCostId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BodyCost,
                part: AvatarPartType.BodyCost,
                dir: 1,
                skin: avater.bodyCostId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BodyCostDres,
                part: AvatarPartType.BodyCostDres,
                dir: 3,
                skin: avater.bodyCostId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BodyCostDres,
                part: AvatarPartType.BodyCostDres,
                dir: 1,
                skin: avater.bodyCostId,
            });
        }
        if (avater.farmBaseId) {
            this.replaceArr.push({
                slot: AvatarSlotType.FarmBase,
                part: AvatarPartType.FarmBase,
                dir: 3,
                skin: avater.farmBaseId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.FarmBase,
                part: AvatarPartType.FarmBase,
                dir: 1,
                skin: avater.farmBaseId,
            });
        }
        if (avater.farmSpecId) {
            this.replaceArr.push({
                slot: AvatarSlotType.FarmSpec,
                part: AvatarPartType.FarmSpec,
                dir: 3,
                skin: avater.farmSpecId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.FarmSpec,
                part: AvatarPartType.FarmSpec,
                dir: 1,
                skin: avater.farmSpecId,
            });
        }
        if (avater.farmCostId) {
            this.replaceArr.push({
                slot: AvatarSlotType.FarmCost,
                part: AvatarPartType.FarmCost,
                dir: 3,
                skin: avater.farmCostId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.FarmCost,
                part: AvatarPartType.FarmCost,
                dir: 1,
                skin: avater.farmCostId,
            });
        }
        if (avater.barmBaseId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BarmBase,
                part: AvatarPartType.BarmBase,
                dir: 3,
                skin: avater.barmBaseId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BarmBase,
                part: AvatarPartType.BarmBase,
                dir: 1,
                skin: avater.barmBaseId,
            });
        }
        if (avater.barmSpecId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BarmSpec,
                part: AvatarPartType.BarmSpec,
                dir: 3,
                skin: avater.barmSpecId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BarmSpec,
                part: AvatarPartType.BarmSpec,
                dir: 1,
                skin: avater.barmSpecId,
            });
        }
        if (avater.barmCostId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BarmCost,
                part: AvatarPartType.BarmCost,
                dir: 3,
                skin: avater.barmCostId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BarmCost,
                part: AvatarPartType.BarmCost,
                dir: 1,
                skin: avater.barmCostId,
            });
        }
        if (avater.blegBaseId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BlegBase,
                part: AvatarPartType.BlegBase,
                dir: 3,
                skin: avater.blegBaseId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BlegBase,
                part: AvatarPartType.BlegBase,
                dir: 1,
                skin: avater.blegBaseId,
            });
        }
        if (avater.blegSpecId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BlegSpec,
                part: AvatarPartType.BlegSpec,
                dir: 3,
                skin: avater.blegSpecId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BlegSpec,
                part: AvatarPartType.BlegSpec,
                dir: 1,
                skin: avater.blegSpecId,
            });
        }
        if (avater.blegCostId) {
            this.replaceArr.push({
                slot: AvatarSlotType.BlegCost,
                part: AvatarPartType.BlegCost,
                dir: 3,
                skin: avater.blegCostId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.BlegCost,
                part: AvatarPartType.BlegCost,
                dir: 1,
                skin: avater.blegCostId,
            });
        }
        if (avater.flegBaseId) {
            this.replaceArr.push({
                slot: AvatarSlotType.FlegBase,
                part: AvatarPartType.FlegBase,
                dir: 3,
                skin: avater.flegBaseId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.FlegBase,
                part: AvatarPartType.FlegBase,
                dir: 1,
                skin: avater.flegBaseId,
            });
        }
        if (avater.flegSpecId) {
            this.replaceArr.push({
                slot: AvatarSlotType.FlegSpec,
                part: AvatarPartType.FlegSpec,
                dir: 3,
                skin: avater.flegSpecId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.FlegSpec,
                part: AvatarPartType.FlegSpec,
                dir: 1,
                skin: avater.flegSpecId,
            });
        }
        if (avater.flegCostId) {
            this.replaceArr.push({
                slot: AvatarSlotType.FlegCost,
                part: AvatarPartType.FlegCost,
                dir: 3,
                skin: avater.flegCostId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.FlegCost,
                part: AvatarPartType.FlegCost,
                dir: 1,
                skin: avater.flegCostId,
            });
        }
        if (avater.headBaseId) {
            this.replaceArr.push({
                slot: AvatarSlotType.HeadBase,
                part: AvatarPartType.HeadBase,
                dir: 3,
                skin: avater.headBaseId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.HeadBase,
                part: AvatarPartType.HeadBase,
                dir: 1,
                skin: avater.headBaseId,
            });
        }
        if (avater.barmWeapId) {
            this.replaceArr.push({
                slot: AvatarSlotType.WeapBarm,
                part: AvatarPartType.WeapBarm,
                dir: 3,
                skin: avater.barmWeapId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.WeapBarm,
                part: AvatarPartType.WeapBarm,
                dir: 1,
                skin: avater.barmWeapId,
            });
        }
        if (avater.headHairId) {
            this.replaceArr.push({
                slot: AvatarSlotType.HeadHair,
                part: AvatarPartType.HeadHair,
                dir: 3,
                skin: avater.headHairId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.HeadHair,
                part: AvatarPartType.HeadHair,
                dir: 1,
                skin: avater.headHairId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.HeadHairBack,
                part: AvatarPartType.HeadHairBack,
                dir: 3,
                skin: avater.headHairId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.HeadHairBack,
                part: AvatarPartType.HeadHairBack,
                dir: 1,
                skin: avater.headHairId,
            });
        }
        if (avater.headHatsId) {
            this.replaceArr.push({
                slot: AvatarSlotType.HeadHats,
                part: AvatarPartType.HeadHats,
                dir: 3,
                skin: avater.headHatsId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.HeadHats,
                part: AvatarPartType.HeadHats,
                dir: 1,
                skin: avater.headHatsId,
            });
        }
        if (avater.headSpecId) {
            this.replaceArr.push({
                slot: AvatarSlotType.HeadSpec,
                part: AvatarPartType.HeadSpec,
                dir: 3,
                skin: avater.headSpecId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.HeadSpec,
                part: AvatarPartType.HeadSpec,
                dir: 1,
                skin: avater.headSpecId,
            });
        }
        if (avater.headEyesId) {
            this.replaceArr.push({
                slot: AvatarSlotType.HeadEyes,
                part: AvatarPartType.HeadEyes,
                dir: 3,
                skin: avater.headEyesId,
            });
        }
        if (avater.headMousId) {
            this.replaceArr.push({
                slot: AvatarSlotType.HeadMous,
                part: AvatarPartType.HeadMous,
                dir: 3,
                skin: avater.headMousId,
            });
        }
        if (avater.headMaskId) {
            this.replaceArr.push({
                slot: AvatarSlotType.HeadMask,
                part: AvatarPartType.HeadMask,
                dir: 3,
                skin: avater.headMaskId,
            });
        }
        if (avater.farmShldId) {
            this.replaceArr.push({
                slot: AvatarSlotType.ShldFarm,
                part: AvatarPartType.ShldFarm,
                dir: 3,
                skin: avater.farmShldId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.ShldFarm,
                part: AvatarPartType.ShldFarm,
                dir: 1,
                skin: avater.farmShldId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.ShldBarm,
                part: AvatarPartType.ShldBarm,
                dir: 3,
                skin: avater.farmShldId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.ShldBarm,
                part: AvatarPartType.ShldBarm,
                dir: 1,
                skin: avater.farmShldId,
            });
        }
        if (avater.farmWeapId) {
            this.replaceArr.push({
                slot: AvatarSlotType.WeapFarm,
                part: AvatarPartType.WeapFarm,
                dir: 3,
                skin: avater.farmWeapId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.WeapFarm,
                part: AvatarPartType.WeapFarm,
                dir: 1,
                skin: avater.farmWeapId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.WeapBarm,
                part: AvatarPartType.WeapBarm,
                dir: 3,
                skin: avater.farmWeapId,
            });
            this.replaceArr.push({
                slot: AvatarSlotType.WeapBarm,
                part: AvatarPartType.WeapBarm,
                dir: 1,
                skin: avater.farmWeapId,
            });
        }
    };
    DragonbonesDisplay.prototype.replacePartDisplay = function (soltName, soltPart, soltDir, skin) {
        var part = soltName.replace("$", soltDir.toString());
        var slot = this.mArmatureDisplay.armature.getSlot(part);
        var key = soltPart.replace("#", skin.toString()).replace("$", soltDir.toString());
        var dragonBonesTexture = this.scene.game.textures.get(this.mDragonbonesName);
        if (this.scene.cache.custom.dragonbone.get(this.dragonBonesName)) {
            var partName = resUtil["f" /* ResUtils */].getPartName(key);
            var frameName = "test resources/" + key;
            if (this.mErrorLoadMap.get(partName))
                return;
            if (!this.scene.textures.exists(partName)) {
                if (!dragonBonesTexture.frames[frameName]) {
                    // ==============新资源需从外部加载，之后要重新打图集
                    this.mLoadMap.set(slot.name, [slot.name, key]);
                }
                else {
                    this.mHasLoadMap.set(key, this.scene.textures.get(partName));
                }
            }
            else {
                //     // ==============贴图集上的资源 / 单个替换资源
                // this.mHasLoadMap.set(slot.name,this.scene.textures.exists(partName));
                // let img: dragonBones.phaser.display.SlotImage;
                // if (dragonBonesTexture.frames[frameName]) {// && this.scene.game.textures.exists(this.mDisplayInfo.id + "")) {
                //     if (!this.scene.textures.exists(partName)) {
                //         this.mLoadMap.set(slot.name, [slot.name, key]);
                //         return;
                //     }
                //     img = new dragonBones.phaser.display.SlotImage(this.scene, slot.display.x, slot.display.y, partName);
                // } else {
                //     img = new dragonBones.phaser.display.SlotImage(this.scene, slot.display.x, slot.display.y, partName);
                // }
                // if (this.mAntial) {
                //     // 用于设置边缘抗锯齿
                //     img.texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
                // }
                // slot.replaceDisplay(img);
            }
        }
    };
    DragonbonesDisplay.prototype.startLoad = function () {
        var _this = this;
        var configList = [];
        // ============只有check到新资源时才会重新load，否则直接从当前龙骨的贴图资源上，获取对应贴图
        this.scene.load.once(Phaser.Loader.Events.COMPLETE, function (data, totalComplete, totalFailed) {
            if (!configList || !_this.scene)
                return;
            _this.refreshAvatar();
            _this.mLoadMap.clear();
        }, this);
        this.scene.load.once(Phaser.Loader.Events.FILE_LOAD_ERROR, function (e) {
            // ==============为了防止404资源重复请求加载，在加载失败后直接将其索引放置加载失败列表中，并从加载map中删除
            _this.mLoadMap.delete(e.key);
            _this.mErrorLoadMap.set(e.key, e);
        }, this);
        this.mLoadMap.forEach(function (data) {
            var nextLoad = data;
            var partUrl = resUtil["f" /* ResUtils */].getPartUrl(nextLoad[1]);
            var partName = resUtil["f" /* ResUtils */].getPartName(nextLoad[1]);
            configList.push({ key: partName, url: partUrl });
        });
        this.scene.load.image(configList);
        this.scene.load.start();
    };
    DragonbonesDisplay.prototype.refreshAvatar = function () {
        var _this = this;
        var dragonBonesTexture = this.scene.game.textures.get(this.mDragonbonesName);
        var frames = dragonBonesTexture.getFrameNames();
        // ==============重绘贴图方式
        // if (this.mLoadMap.size > 0) {
        // }
        var renderTextureKey = "bones_" + this.mDisplayInfo.id; // "bones_" + this.mDisplayInfo.id;// "bones_human01";
        var renderTexture = this.scene.textures.get(renderTextureKey);
        if (!this.mDragonBonesRenderTexture)
            this.mDragonBonesRenderTexture = this.scene.make.renderTexture({ x: 0, y: 0, width: dragonBonesTexture.source[0].width, height: dragonBonesTexture.source[0].height }, false);
        this.mDragonBonesRenderTexture.clear();
        // this.scene.add.existing(this.mDragonBonesRenderTexture);
        for (var i = 0, len = frames.length; i < len; i++) {
            // =============龙骨贴图资源frames里面的key "test resources/xxxxx"
            var name_1 = frames[i];
            // =============龙骨part资源key 带图片资源名及方向
            var key = name_1.split("/")[1].split("_");
            // =============front || back单独也有格位
            var slotKey = key[4] ? key[0] + "_" + key[1] + "_" + key[3] + "_" + key[4] : key[0] + "_" + key[1] + "_" + key[3];
            var slot = this.mArmatureDisplay.armature.getSlot(slotKey);
            var dat = dragonBonesTexture.get(name_1);
            var loadArr = this.mLoadMap.get(slotKey);
            // 原始资源
            if (!loadArr) {
                for (var _i = 0, _a = this.replaceArr; _i < _a.length; _i++) {
                    var obj = _a[_i];
                    var tmpKey = obj.part.replace("#", obj.skin.toString()).replace("$", obj.dir.toString());
                    var partName = resUtil["f" /* ResUtils */].getPartName(tmpKey);
                    var frameName = "test resources/" + tmpKey;
                    var part = obj.slot.replace("$", obj.dir.toString());
                    if (part === slotKey) {
                        var texture = this.scene.textures.get(partName);
                        // if (this.mAntial) {
                        //     // 用于设置边缘抗锯齿
                        //     texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
                        // }
                        if (dragonBonesTexture.frames[frameName]) {
                            this.mDragonBonesRenderTexture.drawFrame(this.mDragonbonesName, name_1, dat.cutX, dat.cutY);
                            break;
                        }
                        else {
                            this.mDragonBonesRenderTexture.drawFrame(partName, texture.firstFrame, dat.cutX, dat.cutY);
                            break;
                        }
                    }
                }
                // this.mDragonBonesRenderTexture.drawFrame(this.mDragonbonesName, name, dat.cutX, dat.cutY);
            }
            else {
                var drawTextureKey = loadArr[1] + "_png";
                var drawTexture = this.scene.game.textures.get(drawTextureKey);
                // if (this.mAntial) {
                //     // 用于设置边缘抗锯齿
                //     drawTexture.setFilter(Phaser.Textures.FilterMode.NEAREST);
                // }
                this.mDragonBonesRenderTexture.drawFrame(drawTextureKey, drawTexture.firstFrame, dat.cutX, dat.cutY);
            }
        }
        this.mDragonBonesRenderTexture.snapshotArea(0, 0, dragonBonesTexture.source[0].width, dragonBonesTexture.source[0].height, function (snapshot) {
            if (snapshot instanceof HTMLImageElement) {
                if (_this.scene.game.textures.exists(renderTextureKey))
                    _this.scene.game.textures.removeKey(renderTextureKey);
                var changeTexture = _this.scene.game.textures.create(renderTextureKey, snapshot, dragonBonesTexture.source[0].width, dragonBonesTexture.source[0].height);
                if (_this.mAntial) {
                    changeTexture.setFilter(Phaser.Textures.FilterMode.NEAREST);
                }
                _this.mArmatureDisplay.armature.replacedTexture = changeTexture;
            }
        });
        // }
        this.mArmatureDisplay.visible = true;
    };
    DragonbonesDisplay.prototype.clearFadeTween = function () {
        if (this.mFadeTween) {
            this.mFadeTween.stop();
            this.mFadeTween.remove();
        }
    };
    DragonbonesDisplay.prototype.onArmatureLoopComplete = function (event) {
        if (!this.mArmatureDisplay || !this.mActionName) {
            return;
        }
        var queue = this.mActionName.playingQueue;
        if (queue.playedTimes === undefined) {
            queue.playedTimes = 1;
        }
        else {
            queue.playedTimes++;
        }
        if (queue.playedTimes >= queue.playTimes) {
            this.mArmatureDisplay.removeDBEventListener(dragonBones.EventObject.LOOP_COMPLETE, this.onArmatureLoopComplete, this);
            // this.emit("animationComplete");
            if (queue.complete) {
                queue.complete.call(this);
                delete queue.complete;
            }
        }
    };
    DragonbonesDisplay.prototype.onSoundEventHandler = function (event) {
        // Logger.getInstance().log("sound event: ", event.name);
        if (event.name) {
            this.mRoomService.world.playSound({
                field: SoundField.Element,
                key: event.name,
            });
        }
    };
    Object.defineProperty(DragonbonesDisplay.prototype, "dragonBonesName", {
        get: function () {
            return this.mDragonbonesName;
        },
        set: function (val) {
            // if (this.mDragonbonesName !== val) {
            // TODO 暴露一个换装接口
            this.mDragonbonesName = val;
            this.buildDragbones();
            // }
        },
        enumerable: false,
        configurable: true
    });
    return DragonbonesDisplay;
}(display_object["a" /* DisplayObject */]));



/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/gestures/onepointertracer/OnePointerTracer.js + 1 modules
var OnePointerTracer = __webpack_require__(195);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/fsm.js + 1 modules
var fsm = __webpack_require__(137);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/gestures/tap/Tap.js



const GetValue = Phaser.Utils.Objects.GetValue;
const DistanceBetween = Phaser.Math.Distance.Between;

class Tap_Tap extends OnePointerTracer["a" /* default */] {
    constructor(gameObject, config) {
        super(gameObject, config);

        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function () {
                        self.stop();
                        self.tapsCount = 0;
                        self.x = 0;
                        self.y = 0;
                        self.worldX = 0;
                        self.worldY = 0;
                    },
                    exit: function () {
                        var pointer = self.lastPointer;
                        self.x = pointer.x;
                        self.y = pointer.y;
                        self.worldX = pointer.worldX;
                        self.worldY = pointer.worldY;
                    }
                },
                BEGIN: {
                    enter: function () {
                        self.start();
                        self.tapsCount = 0;
                        self.emit('tappingstart', self, self.gameObject, self.lastPointer);
                    },
                },
                RECOGNIZED: {
                    enter: function () {
                        self.start();
                        self.emit('tap', self, self.gameObject, self.lastPointer);
                        self.emit(`${self.tapsCount}tap`, self, self.gameObject, self.lastPointer);
                    },
                }
            },
            init: function () {
                this.state = IDLE;
            },
            eventEmitter: false,
        }
        this.setRecongizedStateObject(new fsm["a" /* default */](stateConfig));
    }

    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setMaxHoldTime(GetValue(o, 'time', 250)); // min-hold-time of Press is 251
        this.setTapInterval(GetValue(o, 'tapInterval', 200));
        this.setDragThreshold(GetValue(o, 'threshold', 9));
        this.setTapOffset(GetValue(o, 'tapOffset', 10));

        var taps = GetValue(o, 'taps', undefined);
        if (taps !== undefined) {
            this.setTaps(taps);
        } else {
            this.setMaxTaps(GetValue(o, 'maxTaps', undefined));
            this.setMinTaps(GetValue(o, 'minTaps', undefined));
        }
        return this;
    }

    onDragStart() {
        switch (this.state) {
            case IDLE:
                this.state = BEGIN;
                break;

            case BEGIN:
                var pointer = this.lastPointer;
                var tapsOffset = DistanceBetween(
                    pointer.upX,
                    pointer.upY,
                    pointer.x,
                    pointer.y);
                if (tapsOffset > this.tapOffset) { // Can't recognize next level, restart here
                    this.state = RECOGNIZED;
                    this.state = BEGIN;
                }
                break;

            case RECOGNIZED:
                this.state = BEGIN;
                break;
        }
    }

    onDragEnd() {
        if (this.state === BEGIN) {
            this.tapsCount++; // Try recognize next level
            this.emit('tapping', this, this.gameObject, this.lastPointer);

            if ((this.maxTaps !== undefined) && (this.tapsCount === this.maxTaps)) { // Reach to maxTaps, stop here                
                this.state = RECOGNIZED;
            }
        }
    }

    onDrag() {
        if (this.state === IDLE) {
            return;
        }

        if (this.pointer.getDistance() > this.dragThreshold) { // Cancel
            this.state = IDLE;
        }
    }

    preUpdate(time, delta) {
        if (this.state === BEGIN) {
            var pointer = this.lastPointer;
            if (pointer.isDown) {
                var holdTime = time - pointer.downTime;
                if (holdTime > this.holdTime) {
                    this.state = IDLE;
                }
            } else { // isUp
                var releasedTime = time - pointer.upTime;
                if (releasedTime > this.tapInterval) {
                    if ((this.minTaps === undefined) || (this.tapsCount >= this.minTaps)) {
                        this.state = RECOGNIZED;
                    } else {
                        this.state = IDLE;
                    }
                }
            }
        }
    }

    postUpdate(time, delta) {
        // Clear RECOGNIZED after update()
        if (this.state === RECOGNIZED) {
            this.state = IDLE;
        }
    }

    get isTapped() {
        return (this.state === RECOGNIZED);
    }

    setMaxHoldTime(time) {
        this.holdTime = time; // ms
        return this;
    }

    setTapInterval(time) {
        this.tapInterval = time; // ms
        return this;
    }

    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }

    setTapOffset(distance) {
        this.tapOffset = distance;
        return this;
    }

    setMaxTaps(taps) {
        this.maxTaps = taps;
        return this;
    }

    setMinTaps(taps) {
        this.minTaps = taps;
        return this;
    }

    setTaps(minTaps, maxTaps) {
        if (maxTaps === undefined) {
            maxTaps = minTaps;
        }
        this.setMinTaps(minTaps).setMaxTaps(maxTaps);
        return this;
    }
}

const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';

/* harmony default export */ var tap_Tap = (Tap_Tap);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/tap/Tap.js

/* harmony default export */ var ui_tap_Tap = __webpack_exports__["a"] = (tap_Tap);

/***/ }),
/* 194 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/gestures/onepointertracer/OnePointerTracer.js + 1 modules
var OnePointerTracer = __webpack_require__(195);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/fsm.js + 1 modules
var fsm = __webpack_require__(137);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/gestures/press/Press.js



const GetValue = Phaser.Utils.Objects.GetValue;

class Press_Press extends OnePointerTracer["a" /* default */] {
    constructor(gameObject, config) {
        super(gameObject, config);

        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function () {
                        self.x = 0;
                        self.y = 0;
                        self.worldX = 0;
                        self.worldY = 0;
                    },
                    exit: function () {
                        var pointer = self.lastPointer;
                        self.x = pointer.x;
                        self.y = pointer.y;
                        self.worldX = pointer.worldX;
                        self.worldY = pointer.worldY;
                    }
                },
                BEGIN: {
                    enter: function () {
                        self.start();
                    },
                    exit: function () {
                        self.stop();
                    }
                },
                RECOGNIZED: {
                    enter: function () {
                        self.emit('pressstart', self, self.gameObject, self.lastPointer);
                    },
                    exit: function () {
                        self.emit('pressend', self, self.gameObject, self.lastPointer);
                    }
                }
            },
            init: function () {
                this.state = IDLE;
            },
            eventEmitter: false,
        }
        this.setRecongizedStateObject(new fsm["a" /* default */](stateConfig));
    }

    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(GetValue(o, 'threshold', 9));
        this.setMinHoldTime(GetValue(o, 'time', 251));
        return this;
    }

    onDragStart() {
        this.state = (this.holdTime === 0) ? RECOGNIZED : BEGIN;
    }

    onDragEnd() {
        this.state = IDLE;
    }

    onDrag() {
        if (this.state === IDLE) {
            return;
        }

        if (this.pointer.getDistance() > this.dragThreshold) {
            this.state = IDLE;
        }
    }

    preUpdate(time, delta) {
        if (this.state === BEGIN) {
            var holdTime = time - this.pointer.downTime;
            if (holdTime >= this.holdTime) {
                this.state = RECOGNIZED;
            }
        }
    }

    get isPressed() {
        return (this.state === RECOGNIZED);
    }

    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }

    setMinHoldTime(time) {
        this.holdTime = time; // ms
        return this;
    }
}

const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';

/* harmony default export */ var press_Press = (Press_Press);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/press/Press.js

/* harmony default export */ var ui_press_Press = __webpack_exports__["a"] = (press_Press);

/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/eventemitter/EventEmitterMethods.js
var EventEmitterMethods = __webpack_require__(129);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/ticktask/TickTask.js


const GetValue = Phaser.Utils.Objects.GetValue;

class TickTask {
    constructor(parent, config) {
        this.parent = parent;
        this._isRunning = false;
        this.tickingState = false;
        // Event emitter
        this.setEventEmitter(GetValue(config, 'eventEmitter', undefined));
        this.setTickingMode(GetValue(config, 'tickingMode', 1));
    }

    // override
    boot() {
        if ((this.tickingMode === 2) && (!this.tickingState)) {
            this.startTicking();
        }
    }

    // override
    shutdown() {
        this.destroyEventEmitter();
        if (this.tickingState) {
            this.stopTicking();
        }        
    }

    setTickingMode(mode) {
        if (typeof (mode) === 'string') {
            mode = TICKINGMODE[mode];
        }
        this.tickingMode = mode;
    }

    // override
    startTicking() {
        this.tickingState = true;
    }

    // override
    stopTicking() {
        this.tickingState = false;
    }

    get isRunning() {
        return this._isRunning;
    }

    set isRunning(value) {
        if (this._isRunning === value) {
            return;
        }

        this._isRunning = value;
        if ((this.tickingMode === 1) && (value != this.tickingState)) {
            if (value) {
                this.startTicking();
            } else {
                this.stopTicking();
            }
        }
    }

    start() {
        this.isRunning = true;
        return this;
    }

    pause() {
        this.isRunning = false;
        return this;
    }

    resume() {
        this.isRunning = true;
        return this;
    }

    stop() {
        this.isRunning = false;
        return this;
    }

    complete() {
        this.isRunning = false;
        this.emit('complete', this.parent, this);
    }
}

Object.assign(
    TickTask.prototype,
    EventEmitterMethods["a" /* default */]
);

const TICKINGMODE = {
    'no': 0,
    'lazy': 1,
    'always': 2
}

/* harmony default export */ var ticktask_TickTask = (TickTask);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/system/GetSceneObject.js
var GetSceneObject = __webpack_require__(142);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/gestures/onepointertracer/OnePointerTracer.js



const OnePointerTracer_GetValue = Phaser.Utils.Objects.GetValue;

class OnePointerTracer_OnePointerTracer extends ticktask_TickTask {
    constructor(gameObject, config) {
        var scene = Object(GetSceneObject["a" /* default */])(gameObject);
        if (scene === gameObject) {
            gameObject = undefined;
        }
        super(scene, config);

        this.scene = scene;
        this.gameObject = gameObject;
        if (gameObject) {
            gameObject.setInteractive(OnePointerTracer_GetValue(config, "inputConfig", undefined));
        }
        this.resetFromJSON(config);
        this.boot();
    }

    resetFromJSON(o) {
        this.setEnable(OnePointerTracer_GetValue(o, "enable", true));

        if (this.gameObject === undefined) {
            this.bounds = OnePointerTracer_GetValue(o, 'bounds', undefined);
        } else {
            this.bounds = undefined;
        }

        this.tracerState = TOUCH0;
        // this.recongizedState = new stateClass(this);
        this.pointer = undefined;
        this.lastPointer = undefined; // Last catched pointer
        this.movedState = false;
        this.isTouchingAnyObject = false;
        return this;
    }

    boot() {
        super.boot();
        if (this.gameObject) {
            this.gameObject.on('pointerdown', this.onPointerDown, this);
        } else {
            this.scene.input.on('pointerdown', this.onPointerDown, this);
        }
        this.scene.input.on('pointerup', this.onPointerUp, this);
        this.scene.input.on('pointermove', this.onPointerMove, this);
        this.scene.events.once('shutdown', this.destroy, this);
    }

    shutdown() {
        if (this.gameObject) {
            this.gameObject.off('pointerdown', this.onPointerDown, this);
        } else if (this.scene) {
            this.scene.input.off('pointerdown', this.onPointerDown, this);
        }
        if (this.scene) {
            this.scene.input.off('pointerup', this.onPointerUp, this);
            this.scene.input.off('pointermove', this.onPointerMove, this);
            this.scene.events.off('destroy', this.destroy, this);
            this.scene = undefined;
        }

        this.scene = undefined;
        this.gameObject = undefined;
        this.bounds = undefined;
        this.pointer = undefined;
        this.lastPointer = undefined; // Last catched pointer
        this.movedState = false;
        super.shutdown();
    }

    destroy() {
        this.shutdown();
    }

    setEnable(e) {
        if (e === undefined) {
            e = true;
        }

        if (this.enable === e) {
            return this;
        }

        if (!e) {
            this.dragCancel();
        }
        this.enable = e;
        return this;
    }

    onPointerDown(pointer, gameObjects) {
        if (!this.enable) {
            return;
        }

        if (this.pointer !== undefined) {
            return;
        }

        var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;
        if (!isInsideBounds) {
            return;
        }

        if (this.pointer === pointer) {
            return;
        }

        this.pointer = pointer;
        this.lastPointer = pointer;
        this.movedState = false;
        this.tracerState = TOUCH1;

        if (this.gameObject === undefined) {
            this.isTouchingAnyObject = (gameObjects.length > 0);
        }
        this.onDragStart();
    }

    onPointerUp(pointer) {
        if (!this.enable) {
            return;
        }

        var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;
        if (!isInsideBounds) {
            return;
        }

        if (this.pointer !== pointer) {
            return;
        }

        this.pointer = undefined;
        this.movedState = false;
        this.tracerState = TOUCH0;
        this.onDragEnd();
    }

    onPointerMove(pointer) {
        if (!this.enable) {
            return;
        }

        if (pointer.isDown) {
            var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;
            var isCatchedPointer = (this.pointer === pointer);
            if (!isCatchedPointer && isInsideBounds) { // Pointer moves into bounds
                // this.onPointerDown(pointer);
            } else if (isCatchedPointer && !isInsideBounds) { // Pointer moves out of bounds
                this.onPointerUp(pointer);
            } else { // Pointer drags in bounds
                if (!this.movedState) {
                    this.movedState = (pointer.x !== pointer.downX) || (pointer.y !== pointer.downY);
                }
                if (this.movedState) {
                    this.onDrag();
                }
            }
        } else {
            // var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;
            // var isLastCatchedPointer = (this.lastPointer === pointer);
            // if (isLastCatchedPointer && isInsideBounds) {
            //     this.onLastPointerMove();
            // }
        }
    }

    dragCancel() {
        if (this.tracerState === TOUCH1) {
            this.onDragEnd();
        }
        this.pointer = undefined;
        this.tracerState = TOUCH0;
        return this;
    }

    onDragStart() {
        this.emit('dragstart', this);
    }

    onDragEnd() {
        this.emit('dragend', this);
    }

    onDrag() {
        this.emit('drag', this);
    }

    // onLastPointerMove() { }

    preUpdate(time, delta) { }

    postUpdate(time, delta) { }

    startTicking() {
        super.startTicking();
        this.scene.events.on('preupdate', this.preUpdate, this);
        this.scene.events.on('postupdate', this.postUpdate, this);
    }

    stopTicking() {
        super.stopTicking();
        if (this.scene) { // Scene might be destoryed
            this.scene.events.off('preupdate', this.preUpdate, this);
            this.scene.events.off('postupdate', this.postUpdate, this);
        }
    }

    setRecongizedStateObject(stateObject) {
        this.recongizedState = stateObject;
        return this;
    }

    get state() {
        return this.recongizedState.state;
    }

    set state(newState) {
        this.recongizedState.state = newState;
    }

    cancel() {
        this.state = IDLE;
        return this;
    }
}

const TOUCH0 = 0;
const TOUCH1 = 1;

const IDLE = 'IDLE';

/* harmony default export */ var onepointertracer_OnePointerTracer = __webpack_exports__["a"] = (OnePointerTracer_OnePointerTracer);

/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ NineSlicePatch_NineSlicePatch; });

// CONCATENATED MODULE: ./lib/rexui/lib/ui/interface/baseUI/Patches.config.ts
var normalizePatchesConfig = function (config) {
    config.bottom = (config.bottom !== undefined) ? config.bottom : config.top;
    config.left = (config.left !== undefined) ? config.left : config.top;
    config.right = (config.right !== undefined) ? config.right : config.left;
    return config;
};
var resetPatchesConfig = function (config) {
    config.top = 0;
    config.bottom = 0;
    config.left = 0;
    config.right = 0;
    return config;
};


// EXTERNAL MODULE: ./lib/rexui/lib/ui/baseUI/BaseUI.ts
var BaseUI = __webpack_require__(125);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/ninepatch/NineSlicePatch.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var GetValue = Phaser.Utils.Objects.GetValue;
var NineSlicePatch_NineSlicePatch = /** @class */ (function (_super) {
    __extends(NineSlicePatch, _super);
    function NineSlicePatch(scene, x, y, width, height, key, frame, config, dpr, scale) {
        var _this = _super.call(this, scene) || this;
        _this.dpr = dpr || 1;
        _this.scale = scale || 1;
        _this.setConfig(config);
        _this.setSize(width, height);
        _this.setTexture(key, frame);
        return _this;
    }
    NineSlicePatch.prototype.resize = function (width, height) {
        width = Math.round(width);
        height = Math.round(height);
        if (!this.patchesConfig) {
            return this;
        }
        if (this.width === width && this.height === height) {
            return this;
        }
        width = Math.max(width, this.patchesConfig.left + this.patchesConfig.right);
        height = Math.max(height, this.patchesConfig.top + this.patchesConfig.bottom);
        this.setSize(width, height);
        this.drawPatches();
        return;
    };
    NineSlicePatch.prototype.getConfig = function () {
        return this.patchesConfig;
    };
    NineSlicePatch.prototype.setConfig = function (config) {
        this.patchesConfig = config;
        this.patchesConfig.top = Math.round(this.patchesConfig.top);
        if (this.patchesConfig.right)
            this.patchesConfig.right = Math.round(this.patchesConfig.right);
        if (this.patchesConfig.bottom)
            this.patchesConfig.bottom = Math.round(this.patchesConfig.bottom);
        if (this.patchesConfig.left)
            this.patchesConfig.left = Math.round(this.patchesConfig.left);
        normalizePatchesConfig(config);
    };
    NineSlicePatch.prototype.setTexture = function (key, frame) {
        this.originTexture = this.scene.textures.get(key);
        this.setFrame(frame);
        return this;
    };
    NineSlicePatch.prototype.setFrame = function (frame) {
        this.originFrame = this.originTexture.frames[frame] || this.originTexture.frames[NineSlicePatch.__BASE];
        this.createPatches();
        this.drawPatches();
        return this;
    };
    NineSlicePatch.prototype.setSize = function (width, height) {
        this.width = width;
        this.height = height;
        _super.prototype.setSize.call(this, width, height);
        this.finalXs = [0, this.patchesConfig.left, this.width - this.patchesConfig.right, this.width];
        this.finalYs = [0, this.patchesConfig.top, this.height - this.patchesConfig.bottom, this.height];
        return this;
    };
    NineSlicePatch.prototype.setTint = function (tint) {
        this.tint = tint;
        return this;
    };
    NineSlicePatch.prototype.setTintFill = function (tint) {
        this.tint = tint;
        this.tintFill = true;
        return this;
    };
    Object.defineProperty(NineSlicePatch.prototype, "tintFill", {
        get: function () {
            return this.first && this.first.tintFill;
        },
        set: function (value) {
            this.each(function (patch) { return patch.tintFill = value; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NineSlicePatch.prototype, "tint", {
        set: function (value) {
            this.each(function (patch) { return patch.setTint(value); });
            this.internalTint = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NineSlicePatch.prototype, "isTinted", {
        get: function () {
            return this.first && this.first.isTinted;
        },
        enumerable: false,
        configurable: true
    });
    NineSlicePatch.prototype.clearTint = function () {
        this.each(function (patch) { return patch.clearTint(); });
    };
    NineSlicePatch.prototype.createPatches = function () {
        // The positions we want from the base texture
        var textureXs = [0, this.patchesConfig.left / this.dpr, this.originFrame.width - this.patchesConfig.right / this.dpr, this.originFrame.width];
        var textureYs = [0, this.patchesConfig.top / this.dpr, this.originFrame.height - this.patchesConfig.bottom / this.dpr, this.originFrame.height];
        var patchIndex = 0;
        for (var yi = 0; yi < 3; yi++) {
            for (var xi = 0; xi < 3; xi++) {
                this.createPatchFrame(this.getPatchNameByIndex(patchIndex), textureXs[xi], // x
                textureYs[yi], // y
                textureXs[xi + 1] - textureXs[xi], // width
                textureYs[yi + 1] - textureYs[yi] // height
                );
                ++patchIndex;
            }
        }
    };
    NineSlicePatch.prototype.drawPatches = function () {
        var tintFill = this.tintFill;
        this.removeAll(true);
        var patchIndex = 0;
        for (var yi = 0; yi < 3; yi++) {
            for (var xi = 0; xi < 3; xi++) {
                var patch = this.originTexture.frames[this.getPatchNameByIndex(patchIndex)];
                var patchImg = new Phaser.GameObjects.Image(this.scene, 0, 0, patch.texture.key, patch.name);
                patchImg.setOrigin(0);
                patchImg.setPosition(this.finalXs[xi] - this.width * this.originX, this.finalYs[yi] - this.height * this.originY);
                patchImg.setScale((this.finalXs[xi + 1] - this.finalXs[xi]) / patch.width, (this.finalYs[yi + 1] - this.finalYs[yi]) / patch.height);
                this.add(patchImg);
                patchImg.setTint(this.internalTint);
                patchImg.tintFill = tintFill;
                ++patchIndex;
            }
        }
    };
    NineSlicePatch.prototype.createPatchFrame = function (patch, x, y, width, height) {
        if (this.originTexture.frames.hasOwnProperty(patch)) {
            return;
        }
        this.originTexture.add(patch, this.originFrame.sourceIndex, this.originFrame.cutX + x, this.originFrame.cutY + y, width, height);
    };
    NineSlicePatch.prototype.getPatchNameByIndex = function (index) {
        return this.originFrame.name + "|" + NineSlicePatch.patches[index];
    };
    NineSlicePatch.__BASE = "__BASE";
    NineSlicePatch.patches = ["[0][0]", "[1][0]", "[2][0]", "[0][1]", "[1][1]", "[2][1]", "[0][2]", "[1][2]", "[2][2]"];
    return NineSlicePatch;
}(BaseUI["a" /* BaseUI */]));



/***/ }),
/* 197 */,
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Size; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Size = /** @class */ (function (_super) {
    __extends(Size, _super);
    function Size(width, height) {
        return _super.call(this, width, height) || this;
    }
    return Size;
}(Phaser.Structs.Size));



/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicSprite", function() { return DynamicSprite; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DynamicSprite = /** @class */ (function (_super) {
    __extends(DynamicSprite, _super);
    function DynamicSprite(scene, x, y) {
        var _this = _super.call(this, scene, x, y, undefined) || this;
        scene.sys.updateList.add(_this);
        return _this;
    }
    DynamicSprite.prototype.load = function (textureURL, atlasURL, loadContext, completeCallBack, errorCallBack) {
        this.mLoadCompleteCallbak = completeCallBack;
        this.mLoadErrorCallback = errorCallBack;
        this.mLoadContext = loadContext;
        this.mUrl = textureURL + atlasURL;
        if (this.scene.cache.obj.get(this.mUrl)) {
            this.onLoadComplete();
        }
        else {
            this.scene.load.atlas(this.mUrl, textureURL, atlasURL);
            this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadComplete, this);
            this.scene.load.once(Phaser.Loader.Events.FILE_LOAD_ERROR, this.onLoadError, this);
            this.scene.load.start();
        }
    };
    DynamicSprite.prototype.destroy = function (fromScene) {
        this.scene.sys.updateList.remove(this);
        _super.prototype.destroy.call(this, fromScene);
    };
    DynamicSprite.prototype.onLoadComplete = function () {
        if (this.mLoadCompleteCallbak) {
            var cb = this.mLoadCompleteCallbak;
            this.mLoadCompleteCallbak = null;
            cb.call(this.mLoadContext);
            this.mLoadContext = null;
        }
        this.scene.anims.create({
            key: this.mUrl,
            frames: this.scene.anims.generateFrameNames(this.mUrl),
            repeat: 1
        });
        this.play(this.mUrl);
        // this.setTexture(this.mUrl);
    };
    DynamicSprite.prototype.onLoadError = function (file) {
        if (this.mUrl === file.url) {
            if (this.mLoadErrorCallback) {
                var cb = this.mLoadErrorCallback;
                this.mLoadErrorCallback = null;
                cb.call(this.mLoadContext);
                this.mLoadContext = null;
            }
        }
    };
    return DynamicSprite;
}(Phaser.GameObjects.Sprite));



/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BlockObject; });
/* harmony import */ var _element_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(117);
/* harmony import */ var _utils_pos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(111);


var BlockObject = /** @class */ (function () {
    function BlockObject(mRoomService) {
        this.mRoomService = mRoomService;
        this.isUsed = false;
        this.mRenderable = false;
        this.mBlockable = true;
        this.mInputEnable = _element_element__WEBPACK_IMPORTED_MODULE_0__[/* InputEnable */ "c"].Diasble;
        this.isUsed = true;
    }
    BlockObject.prototype.setRenderable = function (isRenderable, delay) {
        var _this = this;
        if (delay === void 0) { delay = 0; }
        if (this.mRenderable !== isRenderable) {
            this.mRenderable = isRenderable;
            if (isRenderable) {
                this.addDisplay();
                if (delay > 0) {
                    this.fadeIn();
                }
                return;
            }
            else {
                if (delay > 0) {
                    this.fadeOut(function () {
                        _this.removeDisplay();
                    });
                }
                else {
                    this.removeDisplay();
                }
            }
        }
    };
    BlockObject.prototype.getPosition = function () {
        var pos;
        if (this.mDisplay) {
            pos = new _utils_pos__WEBPACK_IMPORTED_MODULE_1__[/* Pos */ "a"](this.mDisplay.x, this.mDisplay.y, this.mDisplay.z);
        }
        else {
            pos = new _utils_pos__WEBPACK_IMPORTED_MODULE_1__[/* Pos */ "a"]();
        }
        return pos;
    };
    BlockObject.prototype.getPosition45 = function () {
        var pos = this.getPosition();
        if (!pos)
            return new _utils_pos__WEBPACK_IMPORTED_MODULE_1__[/* Pos */ "a"]();
        return this.mRoomService.transformTo45(pos);
    };
    BlockObject.prototype.getRenderable = function () {
        return this.mRenderable;
    };
    BlockObject.prototype.fadeIn = function (callback) {
        if (!this.mDisplay)
            return;
        this.mDisplay.fadeIn(callback);
    };
    BlockObject.prototype.fadeOut = function (callback) {
        if (!this.mDisplay)
            return;
        this.mDisplay.fadeOut(callback);
    };
    BlockObject.prototype.fadeAlpha = function (alpha) {
        if (!this.mDisplay)
            return;
        // this.mDisplay.alpha = alpha;
    };
    BlockObject.prototype.setInputEnable = function (val) {
        // if (this.mInputEnable !== val) {
        this.mInputEnable = val;
        if (this.mDisplay) {
            switch (val) {
                case _element_element__WEBPACK_IMPORTED_MODULE_0__[/* InputEnable */ "c"].Interactive:
                    if (this.mModel && this.mModel.hasInteractive) {
                        this.mDisplay.setInteractive();
                    }
                    break;
                case _element_element__WEBPACK_IMPORTED_MODULE_0__[/* InputEnable */ "c"].Enable:
                    this.mDisplay.setInteractive();
                    break;
                default:
                    this.mDisplay.disableInteractive();
                    break;
            }
        }
        // }
    };
    BlockObject.prototype.setBlockable = function (val) {
        if (this.mBlockable !== val) {
            this.mBlockable = val;
            if (this.mDisplay && this.mRoomService) {
                if (val) {
                    this.mRoomService.addBlockObject(this);
                }
                else {
                    this.mRoomService.removeBlockObject(this);
                }
            }
        }
        return this;
    };
    BlockObject.prototype.destroy = function () {
        if (this.mDisplay) {
            this.mDisplay.destroy();
            this.mDisplay = null;
        }
    };
    BlockObject.prototype.clear = function () {
        this.isUsed = false;
    };
    BlockObject.prototype.addDisplay = function () { };
    BlockObject.prototype.removeDisplay = function () {
        if (!this.mDisplay) {
            return;
        }
        this.mDisplay.removeFromParent();
    };
    BlockObject.prototype.addToBlock = function () {
        if (this.mBlockable) {
            this.mRoomService.addBlockObject(this);
        }
        else {
            this.addDisplay();
        }
    };
    BlockObject.prototype.updateBlock = function () {
        if (this.mBlockable) {
            this.mRoomService.updateBlockObject(this);
        }
    };
    Object.defineProperty(BlockObject.prototype, "id", {
        get: function () {
            return -1;
        },
        enumerable: false,
        configurable: true
    });
    return BlockObject;
}());



/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicNinepatch", function() { return DynamicNinepatch; });
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_ninepatch_NinePatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(136);

var DynamicNinepatch = /** @class */ (function () {
    function DynamicNinepatch(mScene, mParent) {
        this.mScene = mScene;
        this.mParent = mParent;
    }
    DynamicNinepatch.prototype.load = function (value, config, completeCallBack, loadContext) {
        this.mLoadCompleteCallBack = completeCallBack;
        this.mLoadContext = loadContext;
        this.mConfig = config;
        this.mUrl = value;
        if (this.mScene.cache.obj.get(value)) {
            this.onLoadCompleteHandler();
        }
        else {
            this.mScene.load.image(this.mUrl, this.mUrl);
            this.mScene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadCompleteHandler, this);
            this.mScene.load.start();
        }
    };
    DynamicNinepatch.prototype.onLoadCompleteHandler = function () {
        this.mImage = new _lib_rexui_lib_plugins_gameobjects_ninepatch_NinePatch__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](this.mScene, this.mConfig);
        if (this.mLoadCompleteCallBack) {
            this.mLoadCompleteCallBack.call(this.mLoadContext, this.mImage);
            this.mLoadCompleteCallBack = null;
            this.mLoadContext = null;
        }
    };
    Object.defineProperty(DynamicNinepatch.prototype, "image", {
        get: function () {
            return this.mImage;
        },
        enumerable: false,
        configurable: true
    });
    return DynamicNinepatch;
}());



/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var IsArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
}
/* harmony default export */ __webpack_exports__["a"] = (IsArray);

/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var chance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var chance__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(chance__WEBPACK_IMPORTED_MODULE_0__);
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

var Helpers = /** @class */ (function () {
    function Helpers() {
    }
    Helpers.genId = function () {
        return new chance__WEBPACK_IMPORTED_MODULE_0__().natural({
            min: 10000,
            max: Helpers.MAX_ID
        });
    };
    Helpers.flipArray = function (source) {
        if (!source)
            return;
        var array = __spreadArrays(source);
        var result = [];
        if (array.length > 0) {
            var len = array[0].length;
            for (var i = 0; i < len; i++) {
                result[i] = [];
                for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                    var j = array_1[_i];
                    result[i].push(j[i]);
                }
            }
        }
        return result;
    };
    Helpers.MAX_ID = Math.pow(2, 31);
    return Helpers;
}());
/* harmony default export */ __webpack_exports__["a"] = (Helpers);


/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Animation; });
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__);

var Animation = /** @class */ (function () {
    function Animation(ani) {
        var tmpBaseLoc = null;
        if (typeof ani.baseLoc === "string") {
            tmpBaseLoc = ani.baseLoc.split(",");
        }
        else {
            tmpBaseLoc = [ani.baseLoc.x, ani.baseLoc.y];
        }
        this.mID = ani.id;
        this.mBaseLoc = tmpBaseLoc;
        this.mName = ani.name;
        this.mFrameName = ani.frameName;
        if (!ani.frameName || this.mFrameName.length < 1) {
            // Logger.getInstance().fatal(`Animation: ${ani.id} frames is invalid`);
        }
        this.mLoop = ani.loop;
        if (!ani.loop) {
            // Logger.getInstance().fatal(`Animation: ${ani.id} loop is invalid`);
        }
        if (!ani.frameRate) {
            // Logger.getInstance().fatal(`Animation: ${ani.id} frameRate is invalid`);
        }
        if (ani.originPoint) {
            // Logger.getInstance().fatal(`Animation: ${ani.id} originPoint is invalid`);
        }
        if (!ani.baseLoc) {
            // Logger.getInstance().fatal(`Animation: ${ani.id} baseLoc is invalid`);
        }
        this.mFrameRate = ani.frameRate;
        this.mBaseLoc = new Phaser.Geom.Point(parseInt(tmpBaseLoc[0], 10), parseInt(tmpBaseLoc[1], 10));
        var origin = ani.originPoint;
        if (Array.isArray(origin)) {
            this.mOriginPoint = new Phaser.Geom.Point(origin[0], origin[1]);
        }
        else {
            this.mOriginPoint = new Phaser.Geom.Point(origin.x, origin.y);
        }
        if (typeof ani.collisionArea === "string") {
            this.mCollisionArea = this.stringToArray(ani.collisionArea, ",", "&") || [[0]];
        }
        else {
            this.mCollisionArea = ani.collisionArea || [[0]];
        }
        if (typeof ani.walkableArea === "string") {
            this.mWalkableArea = this.stringToArray(ani.walkableArea, ",", "&") || [[0]];
        }
        else {
            this.mWalkableArea = ani.walkableArea || [[0]];
        }
        // this.mInteractiveArea = [{x: 0, y: 0}];
        this.mInteractiveArea = ani.interactiveArea;
    }
    Animation.prototype.toClient = function () {
        var ani = pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__["op_gameconfig"].Animation.create();
        ani.id = this.id;
        ani.baseLoc = this.baseLoc.x + "," + this.baseLoc.y;
        ani.name = this.name;
        ani.loop = this.loop;
        ani.frameRate = this.frameRate;
        ani.frameName = this.frameName;
        ani.originPoint = [this.originPoint.x, this.originPoint.y];
        ani.walkOriginPoint = [this.originPoint.x, this.originPoint.y];
        ani.walkableArea = this.arrayToString(this.mWalkableArea, ",", "&");
        ani.collisionArea = this.arrayToString(this.mCollisionArea, ",", "&");
        ani.interactiveArea = this.mInteractiveArea;
        return ani;
    };
    Animation.prototype.stringToArray = function (string, fristJoin, lastJoin) {
        if (!string) {
            return;
        }
        var tmp = string.split(lastJoin);
        var result = [];
        for (var _i = 0, tmp_1 = tmp; _i < tmp_1.length; _i++) {
            var ary = tmp_1[_i];
            var tmpAry = ary.split(fristJoin);
            result.push(tmpAry.map(function (value) { return parseInt(value, 10); }));
        }
        return result;
    };
    Animation.prototype.arrayToString = function (array, fristJoin, lastJoin) {
        if (!array)
            return "";
        var tmp = [];
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var ary = array_1[_i];
            tmp.push(ary.join(fristJoin));
        }
        return tmp.join(lastJoin);
    };
    Object.defineProperty(Animation.prototype, "baseLoc", {
        get: function () {
            return this.mBaseLoc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "id", {
        get: function () {
            return this.mID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "frameName", {
        get: function () {
            return this.mFrameName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "frameRate", {
        get: function () {
            return this.mFrameRate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "loop", {
        get: function () {
            return this.mLoop;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "name", {
        get: function () {
            return this.mName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "collisionArea", {
        get: function () {
            return this.mCollisionArea;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "walkableArea", {
        get: function () {
            return this.mWalkableArea;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "originPoint", {
        get: function () {
            return this.mOriginPoint;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "interactiveArea", {
        get: function () {
            return this.mInteractiveArea;
        },
        enumerable: false,
        configurable: true
    });
    return Animation;
}());



/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ControlFMediator", function() { return ControlFMediator; });
/* harmony import */ var _ControlFPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(206);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _rooms_element_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(117);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var ControlFMediator = /** @class */ (function (_super) {
    __extends(ControlFMediator, _super);
    function ControlFMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__[/* UIType */ "a"].Tips;
        _this.mScene = scene;
        _this.mLayerManager = layerManager;
        _this.world = world;
        return _this;
    }
    ControlFMediator.prototype.getName = function () {
        return "";
    };
    ControlFMediator.prototype.getView = function () {
        return undefined;
    };
    ControlFMediator.prototype.hide = function () {
        this.mShow = false;
        if (this.mView && this.mView.isShow()) {
            if (!this.world.roomManager.currentRoom || !this.world.roomManager.currentRoom.playerManager.actor ||
                this.world.roomManager.currentRoom.playerManager.actor.getState() === _rooms_element_element__WEBPACK_IMPORTED_MODULE_3__[/* PlayerState */ "d"].WALK) {
                this.mView.off("control", this.handControlF, this);
                this.mView.destroy();
                this.mView = null;
            }
        }
    };
    ControlFMediator.prototype.isSceneUI = function () {
        return false;
    };
    ControlFMediator.prototype.isShow = function () {
        if (!this.mView)
            return false;
        return this.mView.isShow();
    };
    ControlFMediator.prototype.resize = function () {
        if (!this.mView)
            return;
        this.mView.resize();
    };
    ControlFMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow() || this.mShow) {
            return;
        }
        this.mView = new _ControlFPanel__WEBPACK_IMPORTED_MODULE_0__["ControlFPanel"](this.mScene, this.world);
        this.mView.on("control", this.handControlF, this);
        this.mLayerManager.addToUILayer(this.mView);
        this.mView.show(param);
        _super.prototype.show.call(this, param);
    };
    ControlFMediator.prototype.update = function (param) {
    };
    ControlFMediator.prototype.destroy = function () {
        if (this.mView) {
            this.mView.off("control", this.handControlF, this);
            this.mView.destroy();
            this.mView = null;
        }
        this.mScene = null;
        this.mLayerManager = null;
        _super.prototype.destroy.call(this);
    };
    ControlFMediator.prototype.handControlF = function () {
        if (!this.world || !this.world.connection) {
            return;
        }
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_GATEWAY_KEYBOARD_DOWN);
        var content = pkt.content;
        var keyArr;
        if (this.world.inputManager) {
            keyArr = this.world.inputManager.getKeyDowns();
        }
        else {
            keyArr = [];
        }
        keyArr = keyArr.concat(Phaser.Input.Keyboard.KeyCodes.F);
        content.keyCodes = keyArr;
        this.world.connection.send(pkt);
    };
    ControlFMediator.NAME = "ControlFMediator";
    return ControlFMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__[/* BaseMediator */ "a"]));



/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ControlFPanel", function() { return ControlFPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var ControlFPanel = /** @class */ (function (_super) {
    __extends(ControlFPanel, _super);
    function ControlFPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.setTween(false);
        return _this;
    }
    ControlFPanel.prototype.addListen = function () {
        this.on("pointerdown", this.onMouseDownHandler, this);
    };
    ControlFPanel.prototype.removeListen = function () {
        this.off("pointerdown", this.onMouseDownHandler, this);
    };
    ControlFPanel.prototype.resize = function (wid, hei) {
        if (wid === void 0) { wid = 0; }
        if (hei === void 0) { hei = 0; }
        if (!this.mScene)
            return;
        var worldView = this.mScene.cameras.main.worldView;
        this.x = worldView.x + (worldView.width >> 1);
        this.y = worldView.y + (worldView.height >> 1);
    };
    ControlFPanel.prototype.destroy = function () {
        if (this.mControlText)
            this.mControlText.destroy(true);
        _super.prototype.destroy.call(this);
    };
    ControlFPanel.prototype.preload = function () {
        this.mScene.load.image("controlF_background", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/controlf/background.png"));
        _super.prototype.preload.call(this);
    };
    ControlFPanel.prototype.init = function () {
        if (!this.mScene)
            return;
        var image = this.mScene.make.image({
            key: "controlF_background"
        }, false);
        this.add(image);
        // TODO 不一定是F
        this.mControlText = this.mScene.make.text({
            align: "center",
            text: "F",
            style: { font: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].YAHEI_20_BOLD }
        }, false);
        this.mControlText.x = -(this.mControlText.width >> 1);
        this.mControlText.y = -(this.mControlText.height >> 1);
        this.add(this.mControlText);
        this.setSize(image.width, image.height);
        this.setInteractive();
        _super.prototype.init.call(this);
        this.resize();
    };
    ControlFPanel.prototype.onMouseDownHandler = function () {
        this.scale = 0.8;
    };
    ControlFPanel.prototype.onMouseUpHandler = function () {
        this.scale = 1;
        this.emit("control");
    };
    return ControlFPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TerrainManager; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _terrain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(340);
/* harmony import */ var _element_sprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(123);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var NodeType = pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].NodeType;
var TerrainManager = /** @class */ (function (_super) {
    __extends(TerrainManager, _super);
    function TerrainManager(mRoom, listener) {
        var _this = _super.call(this) || this;
        _this.mRoom = mRoom;
        _this.hasAddComplete = false;
        _this.mTerrains = new Map();
        // add by 7 ----
        _this.mPacketFrameCount = 0;
        _this.mListener = listener;
        if (_this.connection) {
            _this.connection.addPacketListener(_this);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ADD_SPRITE, _this.onAdd);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ADD_SPRITE_END, _this.addComplete);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_DELETE_SPRITE, _this.onRemove);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_SYNC_SPRITE, _this.onSyncSprite);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_CHANGE_SPRITE_ANIMATION, _this.onChangeAnimation);
        }
        if (_this.mRoom && _this.mRoom.world) {
            _this.mGameConfig = _this.mRoom.world.elementStorage;
        }
        var miniSize = _this.roomService.miniSize;
        _this.mMap = new Array(miniSize.cols);
        for (var i = 0; i < miniSize.rows; i++) {
            _this.mMap[i] = new Array(miniSize.rows).fill(0);
        }
        return _this;
    }
    TerrainManager.prototype.init = function () {
        // this.destroy();
    };
    TerrainManager.prototype.destroy = function () {
        var _this = this;
        if (this.connection) {
            this.connection.removePacketListener(this);
        }
        if (!this.mTerrains)
            return;
        this.mTerrains.forEach(function (terrain) { return _this.remove(terrain.id); });
        this.mTerrains.clear();
    };
    TerrainManager.prototype.get = function (id) {
        var terrain = this.mTerrains.get(id);
        if (!terrain) {
            return;
        }
        return terrain;
    };
    TerrainManager.prototype.add = function (sprites) {
        for (var _i = 0, sprites_1 = sprites; _i < sprites_1.length; _i++) {
            var sprite = sprites_1[_i];
            this._add(sprite);
        }
    };
    TerrainManager.prototype.remove = function (id) {
        if (!this.mTerrains)
            return;
        var terrain = this.mTerrains.get(id);
        if (terrain) {
            this.mTerrains.delete(id);
            terrain.destroy();
        }
        return terrain;
    };
    TerrainManager.prototype.getElements = function () {
        return Array.from(this.mTerrains.values());
    };
    TerrainManager.prototype.onAdd = function (packet) {
        this.mPacketFrameCount++;
        if (!this.mGameConfig) {
            return;
        }
        var content = packet.content;
        var sprites = content.sprites;
        var type = content.nodeType;
        var pf = content.packet;
        if (type !== pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].NodeType.TerrainNodeType) {
            return;
        }
        var point;
        var ids = [];
        // sprites 服务端
        for (var _i = 0, sprites_2 = sprites; _i < sprites_2.length; _i++) {
            var sprite = sprites_2[_i];
            point = sprite.point3f;
            if (point) {
                var s = new _element_sprite__WEBPACK_IMPORTED_MODULE_3__[/* Sprite */ "a"](sprite, type);
                if (!s.displayInfo) {
                    this.checkTerrainDisplay(s);
                }
                if (!s.displayInfo) {
                    ids.push(s.id);
                }
                this._add(s);
            }
        }
        this.fetchDisplay(ids);
        if (this.mListener && this.mPacketFrameCount === pf.totalFrame) {
            this.mListener.onFullPacketReceived(type);
        }
    };
    TerrainManager.prototype._add = function (sprite) {
        var terrain = this.mTerrains.get(sprite.id);
        if (!terrain) {
            terrain = new _terrain__WEBPACK_IMPORTED_MODULE_2__[/* Terrain */ "a"](sprite, this);
        }
        else {
            terrain.model = sprite;
        }
        // this.addMap(sprite);
        this.mTerrains.set(terrain.id || 0, terrain);
        return terrain;
    };
    TerrainManager.prototype.addComplete = function (packet) {
        this.hasAddComplete = true;
    };
    TerrainManager.prototype.onRemove = function (packet) {
        var content = packet.content;
        var type = content.nodeType;
        var ids = content.ids;
        if (type !== pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].NodeType.TerrainNodeType) {
            return;
        }
        for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
            var id = ids_1[_i];
            this.remove(id);
        }
        // Logger.getInstance().log("remove terrain length: ", ids.length);
    };
    TerrainManager.prototype.onSyncSprite = function (packet) {
        var content = packet.content;
        if (content.nodeType !== pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].NodeType.TerrainNodeType) {
            return;
        }
        var terrain = null;
        var sprites = content.sprites;
        for (var _i = 0, sprites_3 = sprites; _i < sprites_3.length; _i++) {
            var sprite = sprites_3[_i];
            terrain = this.get(sprite.id);
            if (terrain) {
                var sp = new _element_sprite__WEBPACK_IMPORTED_MODULE_3__[/* Sprite */ "a"](sprite, content.nodeType);
                terrain.model = sp;
                // this.addMap(sp);
                // terrain.setRenderable(true);
            }
        }
    };
    TerrainManager.prototype.checkDisplay = function (sprite) {
        if (!sprite.displayInfo) {
            var displayInfo = this.roomService.world.elementStorage.getDisplayModel(sprite.bindID || sprite.id);
            if (displayInfo) {
                sprite.displayInfo = displayInfo;
                return displayInfo;
            }
        }
    };
    TerrainManager.prototype.checkTerrainDisplay = function (sprite) {
        if (!sprite.displayInfo) {
            var palette = this.roomService.world.elementStorage.getTerrainPaletteByBindId(sprite.bindID);
            if (palette) {
                sprite.displayInfo = palette;
            }
        }
    };
    TerrainManager.prototype.fetchDisplay = function (ids) {
        if (ids.length === 0) {
            return;
        }
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_REQ_VIRTUAL_WORLD_QUERY_SPRITE_RESOURCE);
        var content = packet.content;
        content.ids = ids;
        this.connection.send(packet);
    };
    TerrainManager.prototype.removeMap = function (sprite) {
        this.setMap(sprite, 1);
    };
    TerrainManager.prototype.addMap = function (sprite) {
        this.setMap(sprite, 0);
    };
    TerrainManager.prototype.setMap = function (sprite, type) {
        var displayInfo = sprite.displayInfo;
        if (!displayInfo) {
            return;
        }
        var curAni = sprite.currentAnimation;
        var aniName = curAni.animationName;
        var flip = false;
        var collisionArea = displayInfo.getCollisionArea(aniName, flip);
        var walkArea = displayInfo.getWalkableArea(aniName, flip);
        var origin = displayInfo.getOriginPoint(aniName, flip);
        var rows = collisionArea.length;
        var cols = collisionArea[0].length;
        var hasCollisionArea = true;
        if (rows === 1 && cols === 1) {
            rows = 2;
            cols = 2;
            hasCollisionArea = false;
        }
        var pos = sprite.pos;
        for (var i = 0; i < rows; i++) {
            for (var j = 0; j < cols; j++) {
                // if ((!hasCollisionArea) || collisionArea[i][j] === 1 && walkArea[i][j] === 1) {
                // this.mMap[pos.x + i - origin.x][pos.y + j - origin.y] = type;
                // }
            }
        }
    };
    TerrainManager.prototype.onChangeAnimation = function (packet) {
        var content = packet.content;
        if (content.nodeType !== NodeType.TerrainNodeType) {
            return;
        }
        var anis = content.changeAnimation;
        var ids = content.ids;
        var terrain = null;
        for (var _i = 0, ids_2 = ids; _i < ids_2.length; _i++) {
            var id = ids_2[_i];
            terrain = this.get(id);
            if (terrain) {
                // terrain.play(ani.animationName);
            }
        }
    };
    Object.defineProperty(TerrainManager.prototype, "connection", {
        get: function () {
            if (this.mRoom) {
                return this.mRoom.connection;
            }
            // Logger.getInstance().error("room manager is undefined");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TerrainManager.prototype, "roomService", {
        get: function () {
            return this.mRoom;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TerrainManager.prototype, "scene", {
        get: function () {
            if (this.mRoom) {
                return this.mRoom.scene;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TerrainManager.prototype, "camera", {
        get: function () {
            return this.camera;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TerrainManager.prototype, "map", {
        get: function () {
            return this.mMap;
        },
        enumerable: false,
        configurable: true
    });
    return TerrainManager;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TerrainDisplay; });
/* harmony import */ var _frames_display__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(160);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var TerrainDisplay = /** @class */ (function (_super) {
    __extends(TerrainDisplay, _super);
    function TerrainDisplay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // public fadeIn(callback?: () => void) {
    //     // this.y += 50;
    //     this.alpha = 0;
    //     if (this.mFadeTween) {
    //         this.mFadeTween.stop();
    //         this.mFadeTween.remove();
    //     }
    //     this.mFadeTween = this.scene.tweens.add({
    //         targets: this,
    //         alpha: 1,
    //         // y: this.y + 50,
    //         duration: 1200,
    //         onComplete: () => {
    //             if (callback) callback();
    //         }
    //     });
    // }
    //
    // public fadeOut(callback?: () => void) {
    //     if (this.mFadeTween) {
    //         this.mFadeTween.stop();
    //         this.mFadeTween.remove();
    //     }
    //     this.mFadeTween = this.scene.tweens.add({
    //         targets: this,
    //         alpha: 0,
    //         // y: this.y + 50,
    //         duration: 1200,
    //         onComplete: () => {
    //             if (callback) callback();
    //         }
    //     });
    // }
    TerrainDisplay.prototype.showRefernceArea = function () {
    };
    return TerrainDisplay;
}(_frames_display__WEBPACK_IMPORTED_MODULE_0__[/* FramesDisplay */ "a"]));



/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecorateManager", function() { return DecorateManager; });
/* harmony import */ var _decorate_panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(210);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var DecorateManager = /** @class */ (function (_super) {
    __extends(DecorateManager, _super);
    function DecorateManager(scene, roomService) {
        var _this = _super.call(this) || this;
        _this.mPanel = new _decorate_panel__WEBPACK_IMPORTED_MODULE_0__["DecoratePanel"](scene, roomService);
        _this.mPanel.on("moveElement", _this.onMoveElementHandler, _this);
        _this.mPanel.on("addSprite", _this.onAddSpriteHandler, _this);
        _this.mPanel.on("addSingleSprite", _this.onAddSingleSprtieHandle, _this);
        _this.mRoomService = roomService;
        _this.mLayerManager = roomService.layerManager;
        return _this;
    }
    DecorateManager.prototype.setElement = function (ele) {
        this.mPanel.setElement(ele);
        this.mLayerManager.addToSceneToUI(this.mPanel);
        this.mPanel.show();
    };
    DecorateManager.prototype.canPut = function (val) {
        if (this.mPanel) {
            this.mPanel.canPUt(val);
        }
    };
    DecorateManager.prototype.remove = function () {
        // TODO panel只有destroy。需要封装个仅移除的方法
        if (this.mPanel.parentContainer) {
            this.mPanel.parentContainer.remove(this.mPanel);
        }
        this.mPanel.removeListen();
    };
    DecorateManager.prototype.updatePos = function (x, y) {
        if (!this.mPanel) {
            return;
        }
        this.mPanel.setPos(x, y);
    };
    DecorateManager.prototype.destroy = function () {
        if (this.mPanel) {
            this.mPanel.destroy();
        }
        _super.prototype.destroy.call(this);
    };
    DecorateManager.prototype.onMoveElementHandler = function (pos) {
        this.emit("moveElement", pos);
    };
    DecorateManager.prototype.onAddSpriteHandler = function (sprite, points) {
        this.sendAddSpriteByType(sprite, points);
    };
    DecorateManager.prototype.onAddSingleSprtieHandle = function (sprite, points) {
        this.sendAddSingleSprite(sprite, points);
    };
    DecorateManager.prototype.sendAddSpriteByType = function (sprite, points) {
        if (!sprite || !points || points.length < 1) {
            return;
        }
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_ADD_SPRITE_BY_TYPE);
        var content = packet.content;
        var pos = [];
        for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {
            var point = points_1[_i];
            var p = pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].PBPoint3f.create();
            p.x = point.x;
            p.y = point.y;
            pos.push(p);
        }
        content.nodeType = pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].NodeType.ElementNodeType;
        content.sprite = sprite.toSprite();
        content.points = pos;
        this.mRoomService.connection.send(packet);
    };
    DecorateManager.prototype.sendAddSingleSprite = function (sprite, points) {
        if (!sprite || !points || points.length < 1) {
            return;
        }
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_ADD_SINGLE_SPRITE_BY_TYPE);
        var content = packet.content;
        var pos = [];
        for (var _i = 0, points_2 = points; _i < points_2.length; _i++) {
            var point = points_2[_i];
            var p = pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].PBPoint3f.create();
            p.x = point.x;
            p.y = point.y;
            pos.push(p);
        }
        content.nodeType = pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].NodeType.ElementNodeType;
        content.sprite = sprite.toSprite();
        content.points = pos;
        this.mRoomService.connection.send(packet);
    };
    return DecorateManager;
}(Phaser.Events.EventEmitter));



/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecoratePanel", function() { return DecoratePanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_pos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(111);
/* harmony import */ var _utils_position45__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(139);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(109);
/* harmony import */ var _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(117);
/* harmony import */ var _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(120);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var DecoratePanel = /** @class */ (function (_super) {
    __extends(DecoratePanel, _super);
    function DecoratePanel(scene, mRoomService) {
        var _this = _super.call(this, scene, mRoomService.world) || this;
        _this.mRoomService = mRoomService;
        _this.resKey = "decorate";
        _this.minGrid = 2;
        _this.maxGrid = 10;
        _this.key = "decorate_edit_menu";
        _this.offset = new _utils_pos__WEBPACK_IMPORTED_MODULE_1__[/* Pos */ "a"]();
        _this.mScaleRatio = 1;
        _this.setTween(false);
        if (_this.mWorld)
            _this.mScaleRatio = _this.mWorld.scaleRatio;
        return _this;
    }
    DecoratePanel.prototype.show = function (param) {
        this.mShowData = param;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        if (this.mShow)
            return;
        if (this.soundGroup && this.soundGroup.open)
            this.playSound(this.soundGroup.open);
        if (!this.mTweening && this.mTweenBoo) {
            this.showTween(true);
        }
        else {
            this.mShow = true;
        }
    };
    DecoratePanel.prototype.addListen = function () {
        if (this.mCancelBtn)
            this.mCancelBtn.on("pointerup", this.onCancelHandler, this);
        if (this.mOkBtn)
            this.mOkBtn.on("pointerup", this.onAddHandler, this);
        if (this.mRecycleBtn)
            this.mRecycleBtn.on("pointerup", this.onRecycleHandler, this);
        if (this.mTurnBtn)
            this.mTurnBtn.on("pointerup", this.onTurnHandler, this);
        if (this.mMoveBtn)
            this.mMoveBtn.on("pointerup", this.onShowMoveMenuHandler, this);
        if (this.mRepeatBtn)
            this.mRepeatBtn.on("pointerup", this.onShowRepeatHandler, this);
        if (this.mExtendBtn)
            this.mExtendBtn.on("pointerup", this.onShowExtendsHandler, this);
        if (this.mMoveMenuContainer) {
            this.mMoveMenuContainer.register();
            this.mMoveMenuContainer.on("move", this.onMoveHandler, this);
        }
        if (this.mRepeatMenuContainer) {
            this.mRepeatMenuContainer.register();
            this.mRepeatMenuContainer.on("move", this.onRepeatHandler, this);
            this.mRepeatMenuContainer.on("hold", this.onHoldRepeatHandler, this);
        }
    };
    DecoratePanel.prototype.removeListen = function () {
        if (this.mCancelBtn)
            this.mCancelBtn.off("pointerup", this.onCancelHandler, this);
        if (this.mOkBtn)
            this.mOkBtn.off("pointerup", this.onAddHandler, this);
        if (this.mRecycleBtn)
            this.mRecycleBtn.off("pointerup", this.onRecycleHandler, this);
        if (this.mTurnBtn)
            this.mTurnBtn.off("pointerup", this.onTurnHandler, this);
        if (this.mMoveBtn)
            this.mMoveBtn.off("pointerup", this.onShowMoveMenuHandler, this);
        if (this.mRepeatBtn)
            this.mRepeatBtn.off("pointerup", this.onShowRepeatHandler, this);
        if (this.mExtendBtn)
            this.mExtendBtn.off("pointerup", this.onShowExtendsHandler, this);
        if (this.mMoveMenuContainer) {
            this.mMoveMenuContainer.unRegister();
            this.mMoveMenuContainer.off("move", this.onMoveHandler, this);
        }
        if (this.mRepeatMenuContainer) {
            this.mRepeatMenuContainer.unRegister();
            this.mRepeatMenuContainer.off("move", this.onRepeatHandler, this);
            this.mRepeatMenuContainer.off("hold", this.onHoldRepeatHandler, this);
        }
    };
    DecoratePanel.prototype.setElement = function (ele) {
        this.mDisplayObject = ele;
        this.mSprite = ele.model;
        if (!this.mInitialized) {
            return;
        }
        var pos = this.mDisplayObject.getPosition();
        this.x = pos.x;
        this.y = pos.y;
        this.updateArrowPos(ele);
        this.addListen();
    };
    DecoratePanel.prototype.canPUt = function (val) {
        if (val !== this.mCanPut) {
            this.mCanPut = val;
            if (!this.mOkBtn) {
                return;
            }
            if (val) {
                this.mOkBtn.clearTint();
            }
            else {
                this.mOkBtn.setTint(0x666666);
            }
        }
    };
    DecoratePanel.prototype.setPos = function (x, y, z) {
        this.x = x * this.mScaleRatio;
        this.y = (y + this.offset.y) * this.mScaleRatio;
        this.z = z || 0;
        return this;
    };
    DecoratePanel.prototype.preload = function () {
        // this.scene.load.image(Border.getName(), Border.getPNG());
        // this.scene.load.image("arrow", Url.getRes("ui/common/common_arrow.png"));
        // this.scene.load.atlas(this.resKey, Url.getRes("ui/decorate/decorate_atlas.png"), Url.getRes("ui/decorate/decorate_atlas.json"));
        this.addAtlas(this.key, "decorate_edit_menu/decorate_edit_menu.png", "decorate_edit_menu/decorate_edit_menu.json");
        _super.prototype.preload.call(this);
    };
    DecoratePanel.prototype.init = function () {
        var w = this.scene.cameras.main.width / this.scale;
        var h = this.scene.cameras.main.height / this.scale;
        this.mMainMenus = [];
        this.mMenuContainer = this.scene.make.container({
            x: w >> 1,
        }, false);
        this.mSubMenus = this.scene.make.container({
            x: w >> 1,
            y: 60 * this.dpr
        }, false);
        this.mOkBtn = this.scene.make.image({
            key: this.key,
            frame: "ok_btn.png"
        }, false).setInteractive().setOrigin(0);
        this.mRecycleBtn = this.scene.make.image({
            key: this.key,
            frame: "recycly_btn.png"
        }, false).setInteractive().setOrigin(0);
        this.mTurnBtn = this.scene.make.image({
            key: this.key,
            frame: "turn_btn.png"
        }, false).setInteractive().setOrigin(0);
        this.mCancelBtn = this.scene.make.image({
            key: this.key,
            frame: "cancel_btn.png"
        }, false).setInteractive().setOrigin(0);
        // this.add([this.mControllContainer, this.mArrow1, this.mArrow7, this.mArrow3, this.mArrow5]);
        this.mHorizontalBtn = this.scene.make.image({
            key: this.key,
            frame: "horizontal_btn.png"
        }, false).setInteractive().setOrigin(0);
        this.mMoveBtn = this.scene.make.image({
            key: this.key,
            frame: "move_btn.png"
        }, false).setInteractive().setOrigin(0);
        this.mRepeatBtn = this.scene.make.image({
            key: this.key,
            frame: "repeat_btn.png"
        }, false).setInteractive().setOrigin(0);
        this.mExtendBtn = this.scene.make.image({
            key: this.key,
            frame: "extend_btn.png"
        }, false).setInteractive().setOrigin(0);
        this.mMoveMenuContainer = new MoveMenu(this.scene, this.key, this.dpr, this.scale);
        this.mMoveMenuContainer.y = this.mSubMenus.y + 60 * this.dpr + this.mMoveMenuContainer.height / 2;
        this.mRepeatMenuContainer = new MoveMenu(this.scene, this.key, this.dpr, this.scale);
        this.mRepeatMenuContainer.y = this.mMoveMenuContainer.y;
        var zoom = this.scale;
        // this.add(this.mMenuGroup);
        // this.mMenuGroup.addMultiple([this.mOkBtn, this.mTurnBtn, this.mRecycleBtn, this.mCancelBtn])
        // this.mMainMenus = ;
        // this.mSubMenus = ;
        this.add([this.mMenuContainer, this.mSubMenus]);
        this.mMenuContainer.add([this.mOkBtn, this.mTurnBtn, this.mRecycleBtn, this.mCancelBtn]);
        this.mSubMenus.add([this.mHorizontalBtn, this.mMoveBtn, this.mRepeatBtn, this.mExtendBtn]);
        // this.add(this.mSubMenus);
        var mainMenuW = w - 55 * this.dpr * this.mWorld.uiScale * 2;
        this.mMenuContainer.x = -mainMenuW >> 1;
        var list = this.mMenuContainer.list;
        list.map(function (btn) { return mainMenuW -= btn.width; });
        var margin = mainMenuW / (list.length - 1) / zoom;
        for (var i = 1; i < list.length; i++) {
            var preButton = list[i - 1];
            var button = list[i];
            button.x = preButton.width + preButton.x + margin;
        }
        mainMenuW = w - 70 * this.dpr * this.mWorld.uiScale * 2;
        this.mSubMenus.x = -mainMenuW >> 1;
        var subList = this.mSubMenus.list;
        subList.map(function (btn) { return mainMenuW -= btn.width; });
        margin = mainMenuW / (subList.length - 1) / zoom;
        for (var i = 1; i < subList.length; i++) {
            var preButton = subList[i - 1];
            var button = subList[i];
            button.x = preButton.width + preButton.x + margin;
        }
        this.mMoveMenuContainer.x = this.mSubMenus.x + this.mMoveBtn.x + this.mMoveBtn.width / 2 + 29 * this.dpr;
        this.mRepeatMenuContainer.x = this.mSubMenus.x + this.mRepeatBtn.x + this.mRepeatBtn.width / 2 + 29 * this.dpr;
        if (this.mCanPut) {
            this.mOkBtn.clearTint();
        }
        else {
            this.mOkBtn.setTint(0x666666);
        }
        // this.mControllContainer.add([border, this.mTurnBtn, this.mRecycleBtn, this.mConfirmBtn]);
        _super.prototype.init.call(this);
        this.setElement(this.mDisplayObject);
    };
    // protected register() {
    //     if (!this.mInitialized) {
    //         return;
    //     }
    //     this.mCancelBtn.on("pointerup", this.onCancelHandler, this);
    //     this.mOkBtn.on("pointerup", this.onAddHandler, this);
    //     this.mRecycleBtn.on("pointerup", this.onRecycleHandler, this);
    //     this.mTurnBtn.on("pointerup", this.onTurnHandler, this);
    //     this.mMoveBtn.on("pointerup", this.onShowMoveMenuHandler, this);
    //     this.mRepeatBtn.on("pointerup", this.onShowRepeatHandler, this);
    //     this.mExtendBtn.on("pointerup", this.onShowExtendsHandler, this);
    //     this.mMoveMenuContainer.register();
    //     this.mMoveMenuContainer.on("move", this.onMoveHandler, this);
    //     this.mRepeatMenuContainer.register();
    //     this.mRepeatMenuContainer.on("move", this.onRepeatHandler, this);
    //     this.mRepeatMenuContainer.on("hold", this.onHoldRepeatHandler, this);
    //     // this.mTurnBtn.on("pointerup", this.onTurnHandler, this);
    //     // this.mRecycleBtn.on("pointerup", this.onRecycleHandler, this);
    //     // this.mOkBtn.on("pointerup", this.onPutHandler, this);
    // }
    // protected unregister() {
    //     if (!this.mInitialized) {
    //         return;
    //     }
    //     this.mCancelBtn.off("pointerup", this.onCancelHandler, this);
    //     this.mOkBtn.off("pointerup", this.onAddHandler, this);
    //     this.mRecycleBtn.off("pointerup", this.onRecycleHandler, this);
    //     this.mTurnBtn.off("pointerup", this.onTurnHandler, this);
    //     this.mMoveBtn.off("pointerup", this.onShowMoveMenuHandler, this);
    //     this.mRepeatBtn.off("pointerup", this.onShowRepeatHandler, this);
    //     this.mExtendBtn.off("pointerup", this.onShowExtendsHandler, this);
    //     this.mMoveMenuContainer.off("move", this.onMoveHandler, this);
    //     this.mMoveMenuContainer.unRegister();
    //     this.mRepeatMenuContainer.off("move", this.onRepeatHandler, this);
    //     this.mRepeatMenuContainer.off("hold", this.onHoldRepeatHandler, this);
    //     this.mRepeatMenuContainer.unRegister();
    //     // this.mTurnBtn.off("pointerup", this.onTurnHandler, this);
    //     // this.mRecycleBtn.off("pointerup", this.onRecycleHandler, this);
    //     // this.mOkBtn.off("pointerup", this.onPutHandler, this);
    // }
    DecoratePanel.prototype.onLeftUpHandler = function () {
        if (!this.mDisplayObject) {
            return;
        }
        var pos45 = this.mRoomService.transformToMini45(this.mDisplayObject.getPosition());
        pos45.x -= 1;
        this.onMoveElement(pos45);
    };
    DecoratePanel.prototype.onLeftDownHandler = function () {
        var pos45 = this.mRoomService.transformToMini45(this.mDisplayObject.getPosition());
        pos45.y += 1;
        this.onMoveElement(pos45);
    };
    DecoratePanel.prototype.onRightUpHandler = function () {
        var pos45 = this.mRoomService.transformToMini45(this.mDisplayObject.getPosition());
        pos45.y -= 1;
        this.onMoveElement(pos45);
    };
    DecoratePanel.prototype.onRightDownHandler = function () {
        var pos45 = this.mRoomService.transformToMini45(this.mDisplayObject.getPosition());
        pos45.x = pos45.x + 1;
        this.onMoveElement(pos45);
    };
    DecoratePanel.prototype.getNorthWestPoints = function (count) {
        if (count === void 0) { count = 10; }
        var area = this.mSprite.currentCollisionArea;
        var origin = this.mSprite.currentCollisionPoint;
        var posList = [];
        var pos45 = this.mRoomService.transformToMini45(this.mSprite.pos);
        for (var i = 0; i < count; i++) {
            posList[i] = this.mRoomService.transformToMini90(pos45);
            pos45.x -= area[0].length;
        }
        return this.checkNextPos(posList, area, origin);
    };
    DecoratePanel.prototype.getWestSouthPoints = function (count) {
        if (count === void 0) { count = 10; }
        var area = this.mSprite.currentCollisionArea;
        var origin = this.mSprite.currentCollisionPoint;
        var posList = [];
        var pos45 = this.mRoomService.transformToMini45(this.mSprite.pos);
        for (var i = 0; i < count; i++) {
            posList[i] = this.mRoomService.transformToMini90(pos45);
            pos45.y += area.length;
        }
        return this.checkNextPos(posList, area, origin);
    };
    DecoratePanel.prototype.getSouthEastPoints = function (count) {
        if (count === void 0) { count = 10; }
        var area = this.mSprite.currentCollisionArea;
        var origin = this.mSprite.currentCollisionPoint;
        var posList = [];
        var pos45 = this.mRoomService.transformToMini45(this.mSprite.pos);
        for (var i = 0; i < count; i++) {
            posList[i] = this.mRoomService.transformToMini90(pos45);
            pos45.x += area[0].length;
        }
        return this.checkNextPos(posList, area, origin);
    };
    DecoratePanel.prototype.getEastNorthPoints = function (count) {
        if (count === void 0) { count = 10; }
        var area = this.mSprite.currentCollisionArea;
        var origin = this.mSprite.currentCollisionPoint;
        var posList = [];
        var pos45 = this.mRoomService.transformToMini45(this.mSprite.pos);
        for (var i = 0; i < count; i++) {
            posList[i] = this.mRoomService.transformToMini90(pos45);
            pos45.y -= area.length;
        }
        return this.checkNextPos(posList, area, origin);
    };
    DecoratePanel.prototype.checkNextPos = function (pos45, collisionArea, origin) {
        var result = [];
        for (var _i = 0, pos45_1 = pos45; _i < pos45_1.length; _i++) {
            var pos = pos45_1[_i];
            var nextPos = this.getNextRepeatPos(pos, collisionArea, origin);
            if (nextPos) {
                result.push(nextPos);
            }
            else {
                break;
            }
        }
        return result;
    };
    DecoratePanel.prototype.getNextRepeatPos = function (pos, collisionArea, origin) {
        if (this.mRoomService.canPut(pos, collisionArea, origin)) {
            return pos;
        }
    };
    DecoratePanel.prototype.onMoveElement = function (pos45) {
        if (!this.mDisplayObject) {
            return;
        }
        var position = this.mRoomService.transformToMini90(pos45);
        this.emit("moveElement", position);
    };
    DecoratePanel.prototype.createImage = function (key, frame, x, y) {
        return this.scene.make.image({ key: key, frame: frame, x: x, y: y }, false).setInteractive().setOrigin(0);
    };
    DecoratePanel.prototype.validateGrid = function (val) {
        if (val > this.maxGrid) {
            val = this.maxGrid;
        }
        if (val < this.minGrid) {
            val = this.minGrid;
        }
        return val;
    };
    DecoratePanel.prototype.updateArrowPos = function (ele) {
        var _a;
        if (!ele || !ele.model || !ele.getDisplay()) {
            return;
        }
        // return;
        var display = ele.getDisplay();
        var rows = ele.model.currentCollisionArea.length;
        var cols = ele.model.currentCollisionArea[0].length;
        rows = this.validateGrid(rows);
        cols = this.validateGrid(cols);
        if (ele.getDisplay().scaleX === -1) {
            _a = [cols, rows], rows = _a[0], cols = _a[1];
        }
        var miniSize = this.mRoomService.roomSize;
        var position = {
            rows: rows,
            cols: cols,
            tileWidth: miniSize.tileWidth / 2,
            tileHeight: miniSize.tileHeight / 2,
        };
        // const reference = ele.getElement("reference");
        // if (!reference) {
        //     return;
        // }
        var sprite = ele.model;
        var pos = _utils_position45__WEBPACK_IMPORTED_MODULE_2__[/* Position45 */ "a"].transformTo90(new _utils_pos__WEBPACK_IMPORTED_MODULE_1__[/* Pos */ "a"](cols - sprite.currentCollisionPoint.y, rows - sprite.currentCollisionPoint.x), position);
        this.offset.y = pos.y;
        // let pos = Position45.transformTo90(new Pos(cols, (rows / 2)), position);
        // if (this.mArrow5) {
        //     this.mArrow5.x = pos.x + reference.x;
        //     this.mArrow5.y = pos.y + reference.y;
        // }
        // pos = Position45.transformTo90(new Pos((cols / 2), rows), position);
        // if (this.mArrow3) {
        //     this.mArrow3.x = pos.x - this.mArrow3.width + reference.x;
        //     this.mArrow3.y = pos.y + reference.y;
        // }
        // pos = Position45.transformTo90(new Pos(0, (rows / 2)), position);
        // if (this.mArrow1) {
        //     this.mArrow1.x = pos.x - this.mArrow1.width + reference.x;
        //     this.mArrow1.y = pos.y - this.mArrow1.height + reference.y;
        // }
        // pos = Position45.transformTo90(new Pos((cols / 2), 0), position);
        // if (this.mArrow7) {
        //     this.mArrow7.x = pos.x + reference.x;
        //     this.mArrow7.y = pos.y - this.mArrow7.height + reference.y;
        // }
    };
    DecoratePanel.prototype.onTurnHandler = function () {
        this.mWorld.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].TURN_ELEMENT, this.mDisplayObject);
    };
    DecoratePanel.prototype.onRecycleHandler = function () {
        this.mWorld.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].RECYCLE_ELEMENT, this.mDisplayObject);
    };
    DecoratePanel.prototype.onCancelHandler = function () {
        this.mWorld.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].CANCEL_PUT, this.mDisplayObject);
    };
    DecoratePanel.prototype.onAddHandler = function () {
        if (this.mCanPut) {
            this.mWorld.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].PUT_ELEMENT, this.mDisplayObject);
        }
    };
    DecoratePanel.prototype.onMoveHandler = function (dir) {
        if (typeof dir !== "number") {
            return;
        }
        switch (dir) {
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].north_west:
                this.onLeftUpHandler();
                break;
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].west_south:
                this.onLeftDownHandler();
                break;
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].south_east:
                this.onRightDownHandler();
                break;
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].east_north:
                this.onRightUpHandler();
                break;
        }
    };
    DecoratePanel.prototype.onPutHandler = function () {
        this.mWorld.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].PUT_ELEMENT, this.mDisplayObject);
    };
    DecoratePanel.prototype.onRepeatHandler = function (dir) {
        var result = null;
        switch (dir) {
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].north_west:
                result = this.getNorthWestPoints(2);
                break;
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].west_south:
                result = this.getWestSouthPoints(2);
                break;
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].south_east:
                result = this.getSouthEastPoints(2);
                break;
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].east_north:
                result = this.getEastNorthPoints(2);
                break;
        }
        this.onSendAddSingleSprite(result);
    };
    DecoratePanel.prototype.onHoldRepeatHandler = function (dir) {
        var result = null;
        switch (dir) {
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].north_west:
                result = this.getNorthWestPoints();
                break;
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].west_south:
                result = this.getWestSouthPoints();
                break;
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].south_east:
                result = this.getSouthEastPoints();
                break;
            case _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].east_north:
                result = this.getEastNorthPoints();
                break;
        }
        this.onSendAddSprites(result);
    };
    DecoratePanel.prototype.onShowMoveMenuHandler = function () {
        this.add(this.mMoveMenuContainer);
        this.remove(this.mRepeatMenuContainer);
    };
    DecoratePanel.prototype.onShowRepeatHandler = function () {
        this.add(this.mRepeatMenuContainer);
        this.remove(this.mMoveMenuContainer);
    };
    DecoratePanel.prototype.onShowExtendsHandler = function () {
        // this.mRoomService.canPut()
        // this.mDisplayObject.
    };
    DecoratePanel.prototype.onSendAddSprites = function (points) {
        if (points.length > 1) {
            this.emit("addSprite", this.mSprite, points);
        }
    };
    DecoratePanel.prototype.onSendAddSingleSprite = function (points) {
        if (points.length > 1) {
            this.emit("addSingleSprite", this.mSprite, points);
        }
    };
    return DecoratePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));

var MoveMenu = /** @class */ (function (_super) {
    __extends(MoveMenu, _super);
    function MoveMenu(scene, key, dpr, uiScale) {
        if (dpr === void 0) { dpr = 1; }
        if (uiScale === void 0) { uiScale = 1; }
        var _this = _super.call(this, scene) || this;
        var bg = scene.make.image({
            key: key,
            frame: "bg.png"
        }, false);
        _this.setSize(bg.displayWidth, bg.displayHeight);
        // this.mArrow1 = scene.make.image({
        //     key,
        //     frame: "arrow_1.png"
        // }, false).setInteractive().setData("dir", 1);
        // this.mArrow3 = scene.make.image({
        //     key,
        //     frame: "arrow_3.png"
        // }, false).setInteractive().setData("dir", 3);
        // this.mArrow5 = scene.make.image({
        //     key,
        //     frame: "arrow_5.png"
        // }, false).setInteractive().setData("dir", 5);
        // this.mArrow7 = scene.make.image({
        //     key,
        //     frame: "arrow_7.png"
        // }, false).setInteractive().setData("dir", 7);
        _this.mArrow1 = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_5__[/* Button */ "a"](_this.scene, key, "arrow_1.png");
        _this.mArrow1.setData("dir", _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].north_west);
        _this.mArrow3 = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_5__[/* Button */ "a"](_this.scene, key, "arrow_3.png");
        _this.mArrow3.setData("dir", _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].west_south);
        _this.mArrow5 = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_5__[/* Button */ "a"](_this.scene, key, "arrow_5.png");
        _this.mArrow5.setData("dir", _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].south_east);
        _this.mArrow7 = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_5__[/* Button */ "a"](_this.scene, key, "arrow_7.png");
        _this.mArrow7.setData("dir", _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].east_north);
        _this.mBtns = [_this.mArrow1, _this.mArrow3, _this.mArrow5, _this.mArrow7];
        _this.add(bg);
        _this.add(_this.mBtns);
        var w = _this.width;
        var totalWidth = _this.width - 20 * dpr;
        _this.mBtns.map(function (btn) { return totalWidth -= btn.displayWidth; });
        var space = totalWidth = totalWidth / (_this.mBtns.length - 1);
        var arrowH = (3 * dpr);
        for (var i = 0; i < _this.mBtns.length; i++) {
            if (i === 0) {
                _this.mBtns[i].x = 10 * dpr + _this.mBtns[i].width / 2 - _this.width / 2;
            }
            else {
                _this.mBtns[i].x = space + _this.mBtns[i - 1].x + _this.mBtns[i - 1].width;
            }
            _this.mBtns[i].y = arrowH;
        }
        _this.setInteractive();
        return _this;
    }
    MoveMenu.prototype.register = function () {
        // for (const btn of this.mBtns) {
        //     btn.on("pointerup", this.onArrowHandler, this);
        // }
        this.mArrow1.on("Hold", this.onHoldHandler, this);
        this.mArrow1.on("Tap", this.onClickHandler, this);
        this.mArrow3.on("Hold", this.onHoldHandler, this);
        this.mArrow3.on("Tap", this.onClickHandler, this);
        this.mArrow5.on("Hold", this.onHoldHandler, this);
        this.mArrow5.on("Tap", this.onClickHandler, this);
        this.mArrow7.on("Hold", this.onHoldHandler, this);
        this.mArrow7.on("Tap", this.onClickHandler, this);
        // this.mArrow1.on("pointerup", this.onArrow1Handler, this);
        // this.mArrow3.on("pointerup", this.onArrow3Handler, this);
        // this.mArrow5.on("pointerup", this.onArrow5Handler, this);
        // this.mArrow7.on("pointerup", this.onArrow7Handler, this);
    };
    MoveMenu.prototype.unRegister = function () {
        this.mArrow1.off("Hold", this.onHoldHandler, this);
        this.mArrow1.off("Tap", this.onClickHandler, this);
        this.mArrow3.off("Hold", this.onHoldHandler, this);
        this.mArrow3.off("Tap", this.onClickHandler, this);
        this.mArrow5.off("Hold", this.onHoldHandler, this);
        this.mArrow5.off("Tap", this.onClickHandler, this);
        this.mArrow7.off("Hold", this.onHoldHandler, this);
        this.mArrow7.off("Tap", this.onClickHandler, this);
        // this.mArrow1.off("pointerup", this.onArrow1Handler, this);
        // this.mArrow3.off("pointerup", this.onArrow3Handler, this);
        // this.mArrow5.off("pointerup", this.onArrow5Handler, this);
        // this.mArrow7.off("pointerup", this.onArrow7Handler, this);
    };
    MoveMenu.prototype.onArrow1Handler = function (pointer) {
        this.emit("move", _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].north_west);
    };
    MoveMenu.prototype.onArrow3Handler = function () {
        this.emit("move", _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].west_south);
    };
    MoveMenu.prototype.onArrow5Handler = function () {
        this.emit("move", _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].south_east);
    };
    MoveMenu.prototype.onArrow7Handler = function () {
        this.emit("move", _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Direction */ "a"].east_north);
    };
    MoveMenu.prototype.onHoldHandler = function (gameobject) {
        this.emit("hold", gameobject.getData("dir"));
    };
    MoveMenu.prototype.onClickHandler = function (pointer, gameobject) {
        this.emit("move", gameobject.getData("dir"));
    };
    return MoveMenu;
}(Phaser.GameObjects.Container));


/***/ }),
/* 211 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UiManager", function() { return UiManager; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _chat_chat_mediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(149);
/* harmony import */ var _layer_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(222);
/* harmony import */ var _Notice_NoticeMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(223);
/* harmony import */ var _bag_bagView_bagMediator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(131);
/* harmony import */ var _friend_friend_mediator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(172);
/* harmony import */ var _Rank_RankMediator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(156);
/* harmony import */ var _baseView_rightGroup_right_mediator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(174);
/* harmony import */ var _baseView_leftGroup_left_mediator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(234);
/* harmony import */ var _baseView_bottomGroup_bottom_mediator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(175);
/* harmony import */ var _baseView_bagGroup_bag_group_mediator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(237);
/* harmony import */ var _baseView_top_menu_top_menu_mediator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(239);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(109);
/* harmony import */ var _components_inputTextFactory__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(178);
/* harmony import */ var _DecorateControl_DecorateControlMediator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(241);
/* harmony import */ var _PiCaMainUI_PicaMainUIMediator__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(243);
/* harmony import */ var _Activity_ActivityMediator__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(246);
/* harmony import */ var _PicaChat_PicaChatMediator__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(179);
/* harmony import */ var _PicaNavigate_PicaNavigateMediator__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(181);
/* harmony import */ var _MineCar_MineCarMediator__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(251);
/* harmony import */ var _Bubble_interactivebubble_manager__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(257);
/* harmony import */ var _ui_mediatorType__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(122);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(115);
/* harmony import */ var _ReAwardTips_ReAwardTipsMediator__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(259);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

























// export const enum UIType {
//     NoneUIType,
// Scene, // 场景内常驻ui
// Normal, // 普通功能ui
// Pop, // 弹出型ui
// Tips, // tips型ui
// Monopoly, // 独占型ui
// Activity, // 热发布活动类型ui，便于单独刷新活动ui
// }
var UiManager = /** @class */ (function (_super) {
    __extends(UiManager, _super);
    function UiManager(worldService) {
        var _this = _super.call(this) || this;
        _this.worldService = worldService;
        _this.mCache = [];
        _this.mNoneUIMap = new Map();
        _this.mSceneUIMap = new Map();
        _this.mNormalUIMap = new Map();
        _this.mPopUIMap = new Map();
        _this.mTipUIMap = new Map();
        _this.mMonopolyUIMap = new Map();
        _this.mActivityUIMap = new Map();
        // 用于记录功能ui打开的顺序,最多2个
        _this.mShowuiList = [];
        _this.mConnect = worldService.connection;
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_SHOW_UI, _this.handleShowUI);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_UPDATE_UI, _this.handleUpdateUI);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_CLOSE_UI, _this.handleCloseUI);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ENABLE_MARKET, _this.onEnableMarket);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_MINING_MODE_SHOW_REWARD_PACKAGE, _this.openMineSettle);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_MINING_MODE_SHOW_SELECT_EQUIPMENT_PANEL, _this.openEquipUpgrade);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_PKT_CRAFT_SKILLS, _this.openComposePanel);
        // this.addHandlerFun(op_client.OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ENABLE_EDIT_MODE, this.onEnableEditMode);
        _this.mUILayerManager = new _layer_manager__WEBPACK_IMPORTED_MODULE_3__["LayerManager"]();
        _this.mInputTextFactory = new _components_inputTextFactory__WEBPACK_IMPORTED_MODULE_14__["InputTextFactory"](worldService);
        _this.interBubbleMgr = new _Bubble_interactivebubble_manager__WEBPACK_IMPORTED_MODULE_21__["InteractiveBubbleManager"](_this.mUILayerManager, _this.worldService);
        return _this;
    }
    UiManager.prototype.getInputTextFactory = function () {
        return this.mInputTextFactory;
    };
    UiManager.prototype.addPackListener = function () {
        if (this.mConnect) {
            this.mConnect.addPacketListener(this);
            this.worldService.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_13__[/* MessageType */ "a"].SHOW_UI, this.handleShowUI, this);
        }
    };
    UiManager.prototype.removePackListener = function () {
        if (this.mConnect) {
            this.mConnect.removePacketListener(this);
            this.worldService.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_13__[/* MessageType */ "a"].SHOW_UI, this.handleShowUI, this);
        }
    };
    UiManager.prototype.getUILayerManager = function () {
        return this.mUILayerManager;
    };
    UiManager.prototype.setScene = function (scene) {
        this.mScene = scene;
        this.mUILayerManager.setScene(scene);
        this.interBubbleMgr.setScene(scene);
        if (this.mCacheUI) {
            this.mCacheUI();
            this.mCacheUI = undefined;
        }
    };
    UiManager.prototype.showMainUI = function () {
        var _this = this;
        if (!this.mScene) {
            this.mCacheUI = this.showMainUI;
            return;
        }
        var scene = this.mScene;
        this.clearMediator();
        if (!this.mMedMap) {
            this.mMedMap = new Map();
            // ============场景中固定显示ui
            if (this.worldService.game.device.os.desktop) {
                this.mMedMap.set(_baseView_bagGroup_bag_group_mediator__WEBPACK_IMPORTED_MODULE_11__["BagGroupMediator"].NAME, new _baseView_bagGroup_bag_group_mediator__WEBPACK_IMPORTED_MODULE_11__["BagGroupMediator"](this.worldService, scene));
            }
            else {
                // this.mMedMap.set(BottomMediator.NAME, new BottomMediator(this.worldService, scene));
                // this.mMedMap.set(LeftMediator.NAME, new LeftMediator(this.worldService, scene));
                // this.mMedMap.set(TopMediator.NAME, new TopMediator(this.worldService, scene));
                // this.mMedMap.set(RightMediator.NAME, new RightMediator(this.worldService, scene));
                this.mMedMap.set(_Activity_ActivityMediator__WEBPACK_IMPORTED_MODULE_17__["ActivityMediator"].name, new _Activity_ActivityMediator__WEBPACK_IMPORTED_MODULE_17__["ActivityMediator"](this.mUILayerManager, scene, this.worldService));
                this.mMedMap.set(_PiCaMainUI_PicaMainUIMediator__WEBPACK_IMPORTED_MODULE_16__["PicaMainUIMediator"].name, new _PiCaMainUI_PicaMainUIMediator__WEBPACK_IMPORTED_MODULE_16__["PicaMainUIMediator"](this.mUILayerManager, scene, this.worldService));
                this.mMedMap.set(_PicaChat_PicaChatMediator__WEBPACK_IMPORTED_MODULE_18__["PicaChatMediator"].name, new _PicaChat_PicaChatMediator__WEBPACK_IMPORTED_MODULE_18__["PicaChatMediator"](this.mUILayerManager, scene, this.worldService));
                this.mMedMap.set(_PicaNavigate_PicaNavigateMediator__WEBPACK_IMPORTED_MODULE_19__["PicaNavigateMediator"].name, new _PicaNavigate_PicaNavigateMediator__WEBPACK_IMPORTED_MODULE_19__["PicaNavigateMediator"](this.mUILayerManager, scene, this.worldService));
                this.mMedMap.set(_MineCar_MineCarMediator__WEBPACK_IMPORTED_MODULE_20__["MineCarMediator"].name, new _MineCar_MineCarMediator__WEBPACK_IMPORTED_MODULE_20__["MineCarMediator"](this.mUILayerManager, scene, this.worldService));
                // this.mMedMap.set(MineSettleMediator.name, new MineSettleMediator(this.mUILayerManager, this.worldService));
            }
            // this.mMedMap.set(UBaseMediatorType.MainUBaseMediator, new MainUBaseMediator(this.worldService, scene));
            this.mMedMap.set(_ui_mediatorType__WEBPACK_IMPORTED_MODULE_22__["UIMediatorType"].BagMediator, new _bag_bagView_bagMediator__WEBPACK_IMPORTED_MODULE_5__["BagMediator"](this.mUILayerManager, this.worldService, scene));
            if (this.worldService.game.device.os.desktop)
                this.mMedMap.set(_ui_mediatorType__WEBPACK_IMPORTED_MODULE_22__["UIMediatorType"].ChatMediator, new _chat_chat_mediator__WEBPACK_IMPORTED_MODULE_2__["ChatMediator"](this.worldService, scene));
            this.mMedMap.set(_ui_mediatorType__WEBPACK_IMPORTED_MODULE_22__["UIMediatorType"].NOTICE, new _Notice_NoticeMediator__WEBPACK_IMPORTED_MODULE_4__["NoticeMediator"](this.mUILayerManager, scene, this.worldService));
            this.mMedMap.set(_friend_friend_mediator__WEBPACK_IMPORTED_MODULE_6__["FriendMediator"].NAME, new _friend_friend_mediator__WEBPACK_IMPORTED_MODULE_6__["FriendMediator"](scene, this.worldService));
            this.mMedMap.set(_ReAwardTips_ReAwardTipsMediator__WEBPACK_IMPORTED_MODULE_24__["ReAwardTipsMediator"].name, new _ReAwardTips_ReAwardTipsMediator__WEBPACK_IMPORTED_MODULE_24__["ReAwardTipsMediator"](scene, this.worldService));
            // this.mMedMap.set(ComposeMediator.name, new ComposeMediator(this.mUILayerManager,scene, this.worldService));
            // this.mMedMap.set(CharacterInfoMediator.name, new CharacterInfoMediator(this.mUILayerManager, scene, this.worldService));
            // this.mMedMap.set(NpcDialogueMediator.name, new NpcDialogueMediator(this.mUILayerManager,scene, this.worldService));
            // this.mMedMap.set(MineCarMediator.name, new MineCarMediator(this.mUILayerManager, scene, this.worldService));
            // this.mMedMap.set(TopMenuMediator.name, new TopMenuMediator(scene, this.worldService));
            // this.mMedMap.set(MineSettleMediator.name, new MineSettleMediator(this.mUILayerManager, scene, this.worldService));
            // this.mMedMap.set(EquipUpgradeMediator.name, new EquipUpgradeMediator(this.mUILayerManager, scene, this.worldService));
            // this.mMedMap.set(DebugLoggerMediator.NAME, new DebugLoggerMediator(scene, this.worldService));
            // this.mMedMap.set(ElementStorageMediator.NAME, new ElementStorageMediator(this.mUILayerManager, scene, this.worldService));
            for (var _i = 0, _a = this.mCache; _i < _a.length; _i++) {
                var tmp = _a[_i];
                var ui = tmp[0];
                this.showMed(ui.name, ui);
            }
            this.mCache.length = 0;
        }
        // TOOD 通过统一的方法创建打开
        this.mMedMap.forEach(function (mediator, key) {
            var map;
            var deskBoo = _this.worldService.game.device.os.desktop ? true : false;
            switch (key) {
                case _baseView_leftGroup_left_mediator__WEBPACK_IMPORTED_MODULE_9__["LeftMediator"].NAME:
                case _baseView_rightGroup_right_mediator__WEBPACK_IMPORTED_MODULE_8__["RightMediator"].NAME:
                case _baseView_bottomGroup_bottom_mediator__WEBPACK_IMPORTED_MODULE_10__["BottomMediator"].NAME:
                    map = _this.mSceneUIMap;
                    break;
                // case TopMediator.NAME:
                //     if (deskBoo) {
                //         map = this.mSceneUIMap;
                //     }
                //     break;
                case _baseView_bagGroup_bag_group_mediator__WEBPACK_IMPORTED_MODULE_11__["BagGroupMediator"].NAME:
                    if (deskBoo) {
                        map = _this.mSceneUIMap;
                    }
                    break;
                case _ui_mediatorType__WEBPACK_IMPORTED_MODULE_22__["UIMediatorType"].ChatMediator:
                    if (deskBoo) {
                        map = _this.mSceneUIMap;
                    }
                    break;
                case _Rank_RankMediator__WEBPACK_IMPORTED_MODULE_7__["RankMediator"].NAME:
                    if (deskBoo) {
                        map = _this.mSceneUIMap;
                    }
                    break;
            }
            if (map)
                map.set(key, mediator);
            if (mediator.isSceneUI()) {
                mediator.show();
            }
        });
    };
    UiManager.prototype.showDecorateUI = function () {
        if (!this.mScene) {
            this.mCacheUI = this.showDecorateUI;
            return;
        }
        this.clearMediator();
        if (!this.mMedMap) {
            this.mMedMap = new Map();
        }
        // const topMenu = new TopMenuMediator(this.mScene, this.worldService);
        // this.mMedMap.set(ElementStorageMediator.NAME, new ElementStorageMediator(this.mUILayerManager, this.mScene, this.worldService));
        this.mMedMap.set(_DecorateControl_DecorateControlMediator__WEBPACK_IMPORTED_MODULE_15__["DecorateControlMediator"].NAME, new _DecorateControl_DecorateControlMediator__WEBPACK_IMPORTED_MODULE_15__["DecorateControlMediator"](this.mUILayerManager, this.mScene, this.worldService));
        this.mMedMap.set(_ui_mediatorType__WEBPACK_IMPORTED_MODULE_22__["UIMediatorType"].NOTICE, new _Notice_NoticeMediator__WEBPACK_IMPORTED_MODULE_4__["NoticeMediator"](this.mUILayerManager, this.mScene, this.worldService));
        // this.mMedMap.set(TopMenuMediator.name, topMenu);
        // topMenu.addItem({
        //     key: "Turn_Btn_Top", name: "SaveDecorate", bgResKey: "baseView", bgTextures: ["btnGroup_yellow_normal.png", "btnGroup_yellow_light.png", "btnGroup_yellow_select.png"],
        //     iconResKey: "", iconTexture: "btnGroup_top_expand.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
        // });
        this.showAll();
    };
    UiManager.prototype.resize = function (width, height) {
        if (this.mMedMap) {
            this.mMedMap.forEach(function (mediator) {
                if (mediator.isShow)
                    mediator.resize();
            });
        }
    };
    UiManager.prototype.setMediator = function (value, mediator) {
        this.mMedMap.set(value, mediator);
    };
    UiManager.prototype.getMediator = function (type) {
        if (!this.mMedMap)
            return;
        return this.mMedMap.get(type);
    };
    UiManager.prototype.clearMediator = function () {
        if (!this.mMedMap) {
            return;
        }
        this.mMedMap.forEach(function (med) { return med.destroy(); });
        this.mMedMap.clear();
        this.mMedMap = null;
    };
    UiManager.prototype.destroy = function () {
        this.removePackListener();
        this.clearMediator();
        this.mMedMap = undefined;
        this.mScene = undefined;
    };
    UiManager.prototype.baseFaceResize = function () {
        var bottomMed = this.getMediator(_baseView_bottomGroup_bottom_mediator__WEBPACK_IMPORTED_MODULE_10__["BottomMediator"].NAME);
        var rightMed = this.getMediator(_baseView_rightGroup_right_mediator__WEBPACK_IMPORTED_MODULE_8__["RightMediator"].NAME);
        var leftMed = this.getMediator(_baseView_leftGroup_left_mediator__WEBPACK_IMPORTED_MODULE_9__["LeftMediator"].NAME);
        // const topMed = this.getMediator(TopMediator.NAME);
        if (rightMed && rightMed.getView())
            rightMed.getView().resize(0, 0);
        if (leftMed && leftMed.getView())
            leftMed.getView().resize(0, 0);
        if (bottomMed && bottomMed.getView())
            bottomMed.getView().resize(0, 0);
        // if (topMed && topMed.getView()) topMed.getView().resize(0, 0);
    };
    UiManager.prototype.baseFaceTween = function (show) {
        // if (!this.worldService.game.device.os.desktop) {
        //     (this.worldService.inputManager as JoyStickManager).tweenExpand(show);
        // }
        var rightMed = this.getMediator(_baseView_rightGroup_right_mediator__WEBPACK_IMPORTED_MODULE_8__["RightMediator"].NAME);
        var leftMed = this.getMediator(_baseView_leftGroup_left_mediator__WEBPACK_IMPORTED_MODULE_9__["LeftMediator"].NAME);
        var bottomMed = this.getMediator(_baseView_bottomGroup_bottom_mediator__WEBPACK_IMPORTED_MODULE_10__["BottomMediator"].NAME);
        // const topMed = this.getMediator(TopMediator.NAME);
        if (rightMed && rightMed.getView())
            rightMed.getView().tweenExpand(show);
        if (leftMed && leftMed.getView())
            leftMed.getView().tweenExpand(show);
        if (bottomMed && bottomMed.getView())
            bottomMed.getView().tweenExpand(show);
        // if (topMed && topMed.getView()) topMed.getView().tweenExpand(show);
    };
    UiManager.prototype.checkUIState = function (medName, show) {
        var mediator = this.mMedMap.get(medName);
        if (!mediator)
            return;
        var uiType = mediator.UIType;
        var deskBoo = this.worldService.game.device.os.desktop;
        var map;
        switch (uiType) {
            case _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_23__[/* UIType */ "a"].None:
                map = this.mNoneUIMap;
                break;
            case _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_23__[/* UIType */ "a"].Scene:
                map = this.mSceneUIMap;
                break;
            case _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_23__[/* UIType */ "a"].Normal:
                map = this.mNormalUIMap;
                // pc端场景ui无需收进，但是功能ui可以共存，需要调整位置
                if (deskBoo) {
                    this.checkNormalUITween(show, medName);
                }
                else {
                    this.checkBaseUImap(show);
                }
                break;
            case _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_23__[/* UIType */ "a"].Monopoly:
                map = this.mMonopolyUIMap;
                this.checkBaseUImap(show);
                this.checkNormalUImap(show);
                this.chekcTipUImap(show);
                break;
            case _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_23__[/* UIType */ "a"].Tips:
                map = this.mTipUIMap;
                break;
            case _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_23__[/* UIType */ "a"].Pop:
                map = this.mPopUIMap;
                break;
            case _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_23__[/* UIType */ "a"].Activity:
                map = this.mActivityUIMap;
                break;
        }
        map.set(medName, mediator);
    };
    UiManager.prototype.showMed = function (type) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        if (!this.mMedMap) {
            this.mCache.push(param);
            return;
        }
        if (type === "MessageBox") {
            type = "PicaMessageBox";
        }
        var className = type + "Mediator";
        var mediator = this.mMedMap.get(className);
        if (!mediator) {
            var path = "./" + type + "/" + type + "Mediator";
            var ns = __webpack_require__(424)("./" + type + "/" + className);
            mediator = new ns[className](this.mUILayerManager, this.mScene, this.worldService);
            if (!mediator) {
                // Logger.getInstance().error(`error ${type} no panel can show!!!`);
                return;
            }
            this.mMedMap.set(type + "Mediator", mediator);
            // mediator.setName(type);
        }
        // if (mediator.showing) return;
        if (param)
            mediator.setParam(param);
        // if (className === "RankMediator") {
        //     if (!this.worldService.game.device.os.desktop) {
        //         const med: TopMediator = this.getMediator(TopMediator.NAME) as TopMediator;
        //         if (med) {
        //             if (!med.isShow()) {
        //                 med.preRefreshBtn(className);
        //             } else {
        //                 med.refreshBtn(className, true);
        //             }
        //         }
        //         return;
        //     }
        // }
        this.checkUIState(className, false);
        mediator.show(param);
    };
    UiManager.prototype.handleShowUI = function (packet) {
        var ui = packet.content;
        this.showMed(ui.name, ui);
    };
    UiManager.prototype.handleUpdateUI = function (packet) {
        var ui = packet.content;
        this.updateMed(ui.name, ui);
    };
    UiManager.prototype.handleCloseUI = function (packet) {
        var ui = packet.content;
        this.hideMed(ui.name);
    };
    UiManager.prototype.onEnableEditMode = function (packet) {
        var topMenu = this.mMedMap.get(_baseView_top_menu_top_menu_mediator__WEBPACK_IMPORTED_MODULE_12__["TopMenuMediator"].NAME);
        if (!topMenu) {
            topMenu = new _baseView_top_menu_top_menu_mediator__WEBPACK_IMPORTED_MODULE_12__["TopMenuMediator"](this.mScene, this.worldService);
            this.mMedMap.set(_baseView_top_menu_top_menu_mediator__WEBPACK_IMPORTED_MODULE_12__["TopMenuMediator"].NAME, topMenu);
        }
        topMenu.addItem({
            key: "Turn_Btn_Top", name: "EnterDecorate", bgResKey: "baseView", bgTextures: ["btnGroup_yellow_normal.png", "btnGroup_yellow_light.png", "btnGroup_yellow_select.png"],
            iconResKey: "", iconTexture: "btnGroup_top_expand.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
        });
    };
    UiManager.prototype.onEnableMarket = function () {
        if (!this.mMedMap) {
            return;
        }
        var topMenu = this.mMedMap.get(_baseView_top_menu_top_menu_mediator__WEBPACK_IMPORTED_MODULE_12__["TopMenuMediator"].NAME);
        if (!topMenu) {
            topMenu = new _baseView_top_menu_top_menu_mediator__WEBPACK_IMPORTED_MODULE_12__["TopMenuMediator"](this.mScene, this.worldService);
            this.mMedMap.set(_baseView_top_menu_top_menu_mediator__WEBPACK_IMPORTED_MODULE_12__["TopMenuMediator"].NAME, topMenu);
        }
        topMenu.addItem({
            key: "Turn_Btn_Top", name: "Market", bgResKey: "baseView", bgTextures: ["btnGroup_yellow_normal.png", "btnGroup_yellow_light.png", "btnGroup_yellow_select.png"],
            iconResKey: "", iconTexture: "btnGroup_top_expand.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
        });
    };
    UiManager.prototype.checkBaseUImap = function (show) {
        this.mSceneUIMap.forEach(function (med) {
            if (med)
                med.tweenExpand(show);
        });
    };
    UiManager.prototype.checkNormalUITween = function (show, medName) {
        var size = this.worldService.getSize();
        var len = this.mShowuiList.length;
        var tmpName;
        var med;
        if (!show) {
            if (this.mShowuiList.indexOf(medName) === -1)
                this.mShowuiList.push(medName);
            len = this.mShowuiList.length;
            var mPad = len > 1 ? size.width / 3 : 0;
            for (var i = 0; i < len; i++) {
                tmpName = this.mShowuiList[i];
                med = this.mMedMap.get(tmpName);
                if (len > 2 && i === 0) {
                    med.hide();
                }
                else {
                    med.resize((i * 2 - 1) * mPad, 0);
                }
            }
            if (len > 2)
                this.mShowuiList.shift();
        }
        else {
            var index = void 0;
            for (var i = 0; i < len; i++) {
                tmpName = this.mShowuiList[i];
                med = this.mMedMap.get(tmpName);
                if (tmpName === medName) {
                    index = i;
                    continue;
                }
                med.resize(0, 0);
            }
            this.mShowuiList.splice(index, 1);
        }
    };
    UiManager.prototype.checkNormalUImap = function (show) {
        this.mNormalUIMap.forEach(function (med) {
            if (med) {
                if (show) {
                    // med.show();
                }
                else {
                    med.hide();
                }
            }
        });
        if (!show)
            this.mNormalUIMap.clear();
    };
    UiManager.prototype.chekcTipUImap = function (show) {
        this.mTipUIMap.forEach(function (med) {
            if (med) {
                if (show) {
                    // med.show();
                }
                else {
                    med.hide();
                }
            }
        });
        if (!show)
            this.mNormalUIMap.clear();
    };
    UiManager.prototype.updateMed = function (type) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        if (!this.mMedMap) {
            return;
        }
        var name = type + "Mediator";
        var mediator = this.mMedMap.get(name);
        if (!mediator) {
            // Logger.getInstance().error(`error ${type} no panel can show!!!`);
            return;
        }
        if (param)
            mediator.setParam(param);
        mediator.update(param);
    };
    UiManager.prototype.hideMed = function (type) {
        if (!this.mMedMap) {
            return;
        }
        if (type === "MessageBox") {
            type = "PicaMessageBox";
        }
        var medName = type + "Mediator";
        var mediator = this.mMedMap.get(medName);
        if (!mediator) {
            // Logger.getInstance().error(`error ${type} no panel can show!!!`);
            return;
        }
        // if (!this.worldService.game.device.os.desktop && medName === "RankMediator") {
        //     const med: TopMediator = this.getMediator(TopMediator.NAME) as TopMediator;
        //     if (med) {
        //         if (!med.isShow()) {
        //             med.preRefreshBtn(medName);
        //         } else {
        //             med.refreshBtn(medName, true);
        //         }
        //     }
        // }
        // if (!mediator.isShow()) return;
        this.checkUIState(medName, true);
        mediator.hide();
    };
    UiManager.prototype.showAll = function () {
        if (!this.mMedMap) {
            return;
        }
        this.mMedMap.forEach(function (med) {
            if (med.isSceneUI()) {
                med.show();
            }
        });
    };
    UiManager.prototype.closeAll = function () {
        if (!this.mMedMap) {
            return;
        }
        this.mMedMap.forEach(function (med) { return med.hide(); });
    };
    UiManager.prototype.openMineSettle = function (packge) {
        var content = packge.content;
        this.showMed("MineSettle", content);
    };
    UiManager.prototype.openEquipUpgrade = function (packge) {
        var content = packge.content;
        this.showMed("EquipUpgrade", content);
    };
    UiManager.prototype.openComposePanel = function (packge) {
        var content = packge.content;
        this.showMed("Compose", content);
    };
    return UiManager;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChatPanelPC", function() { return ChatPanelPC; });
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_shape_roundrectangle_RoundRectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(390);
/* harmony import */ var _lib_rexui_lib_ui_textarea_TextArea__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(127);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(118);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(114);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(104);
/* harmony import */ var _components_check_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(169);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(116);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(110);
/* harmony import */ var _base_chat_panel__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(170);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var ChatPanelPC = /** @class */ (function (_super) {
    __extends(ChatPanelPC, _super);
    function ChatPanelPC(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mPreHei = 0;
        _this.mPreWid = 0;
        return _this;
    }
    ChatPanelPC.prototype.appendChat = function (val) {
        if (this.mTextArea) {
            this.mTextArea.appendText(val);
            this.mTextArea.scrollToBottom();
        }
    };
    ChatPanelPC.prototype.tweenExpand = function (show) {
        if (!this.scene)
            return;
        var baseX = 0;
        var toX = show === true ? baseX : baseX - 200;
        var toAlpha = show === true ? 1 : 0;
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Cubic.Out",
            props: {
                x: { value: toX },
                alpha: { value: toAlpha },
            },
        });
    };
    ChatPanelPC.prototype.setPosition = function (x, y) {
        if (!this.mInitialized)
            return;
        // DefaultMask在TextBlock中，TextBlock是一个非渲染矩形游戏对象
        var size = this.mWorld.getSize();
        _super.prototype.setPosition.call(this, 0, size.height - this.mPreHei);
        if (this.mTextArea) {
            // this.mTextArea.childrenMap.child.setMinSize(width, (h - 16 * this.dpr) * zoom);
            // this.mTextArea.layout();
            // this.mTextArea.setPosition(this.width / 2 + 4 * this.dpr, this.y + this.mTextArea.height / 2 + 10 * this.dpr * zoom);
            var textMask = this.mTextArea.childrenMap.text;
            textMask.y = size.height - this.height + 25 * this.dpr;
            this.mTextArea.scrollToBottom();
            // 每次resize更新textBlock中的textMask的位置
            // this.mTextArea.childrenMap.child.textMask.setPosition(undefined, size.height - this.height + 30).resize();
        }
        return this;
    };
    ChatPanelPC.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        if (this.sendMsgBtn)
            this.sendMsgBtn.on("pointerdown", this.onSendMsgHandler, this);
        if (this.mVoiceBtn)
            this.mVoiceBtn.on("selected", this.onSelectedVoiceHandler, this);
        if (this.mMicBtn)
            this.mMicBtn.on("selected", this.onSelectedMicHandler, this);
        if (this.mInputText) {
            this.mInputText.on("focus", this.onFocusHandler, this);
            this.mInputText.on("blur", this.onBlurHandler, this);
        }
    };
    ChatPanelPC.prototype.removeListen = function () {
        _super.prototype.removeListen.call(this);
        if (!this.mInitialized)
            return;
        if (this.sendMsgBtn)
            this.sendMsgBtn.off("pointerdown", this.onSendMsgHandler, this);
        if (this.mVoiceBtn)
            this.mVoiceBtn.off("selected", this.onSelectedVoiceHandler, this);
        if (this.mMicBtn)
            this.mMicBtn.off("selected", this.onSelectedMicHandler, this);
        if (this.mInputText) {
            this.mInputText.off("focus", this.onFocusHandler, this);
            this.mInputText.off("blur", this.onBlurHandler, this);
        }
    };
    ChatPanelPC.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    ChatPanelPC.prototype.preload = function () {
        if (!this.scene) {
            return;
        }
        this.scene.load.image("button", _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Url */ "h"].getRes("ui/common/button.png"));
        this.scene.load.image("thumbTexture", _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Url */ "h"].getRes("ui/common/common_thumb_texture.png"));
        this.scene.load.image("track", _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Url */ "h"].getRes("ui/common/common_track.png"));
        this.scene.load.image("chat_input_bg", _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Url */ "h"].getRes("ui/chat/input_bg.png"));
        // this.scene.load.image("chat_border_bg", Url.getRes("ui/chat/bg.png"));
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Border */ "d"].getPNG());
        this.scene.load.atlas("chat_atlas", _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Url */ "h"].getRes("ui/chat/chat_atlas.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Url */ "h"].getRes("ui/chat/chat_atlas.json"));
        _super.prototype.preload.call(this);
    };
    ChatPanelPC.prototype.init = function () {
        if (this.mInitialized)
            return;
        var size = this.mWorld.getSize();
        this.mPreHei = size.height;
        this.mPreWid = size.width;
        this.setSize(464, 281);
        var border = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_7__["NinePatch"](this.scene, 0, 0, this.width, this.height, _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Border */ "d"].getConfig());
        border.x = 4 * this.mWorld.uiScale + border.width * border.originX;
        border.y = size.height - 260 * this.mWorld.uiScale + border.height * border.originY;
        this.add(border);
        this.outPut = this.scene.make.container(undefined, false);
        this.add(this.outPut);
        var background = new _lib_rexui_lib_plugins_gameobjects_shape_roundrectangle_RoundRectangle__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](this.scene, 0, 0, 2, 2, 3, 0x808080, 0.5);
        this.outPut.add(background);
        var track = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__["NinePatchButton"](this.scene, 0, 0, 4, 7, "track", "", "", {
            left: 0,
            top: 2,
            right: 0,
            bottom: 2
        });
        track.x = 100 * this.mWorld.uiScale;
        track.y = 10 * this.mWorld.uiScale;
        this.outPut.add(track);
        var text = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](this.scene, 0, 0, "", {
            fontSize: "14px",
            wrap: {
                mode: "char",
                width: 400 * this.mWorld.uiScale
            },
        });
        this.outPut.add(text);
        var thumb = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__["NinePatchButton"](this.scene, 0, 0, 20, 35, "button", "", "", {
            left: 4,
            top: 4,
            right: 4,
            bottom: 4
        });
        // const indicator = new NinePatchButton(this.scene, 0, 0, 8, 10, "thumbTexture", "", {
        //     left: 0,
        //     top: 0,
        //     right: 0,
        //     bottom: 0
        // });
        this.outPut.add(thumb);
        // this.outPut.add(indicator);
        this.mTextArea = new _lib_rexui_lib_ui_textarea_TextArea__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](this.scene, {
            x: 230 * this.mWorld.uiScale,
            y: size.height - 155 * this.mWorld.uiScale,
            textWidth: 430,
            textHeight: 200,
            text: text,
            slider: {
                track: track,
                // indicator,
                thumb: thumb,
            },
        })
            .layout();
        this.outPut.add(this.mTextArea);
        var tracks = this.mTextArea.getElement("child");
        if (tracks) {
            // tracks.x += 150;
        }
        var inputContainer = this.scene.make.container(undefined, false);
        this.add(inputContainer);
        var inputBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_7__["NinePatch"](this.scene, 0, 0, 370, 32, "chat_input_bg", null, { left: 4, top: 4, right: 4, bottom: 4 });
        inputBg.x = 8 * this.mWorld.uiScale + inputBg.width * inputBg.originX;
        inputBg.y = size.height - 46 * this.mWorld.uiScale + inputBg.height * inputBg.originY;
        inputContainer.add(inputBg);
        this.mInputText = new _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.scene, 0, 0, 10, 10, {
            type: "input",
            fontSize: "14px",
            color: "#808080"
        })
            .resize(360, 20)
            .setOrigin(0, 0)
            .setStyle({ font: "bold 16px YaHei" });
        this.mInputText.x = 12 * this.mWorld.uiScale;
        this.mInputText.y = size.height - 40 * this.mWorld.uiScale;
        inputContainer.add(this.mInputText);
        this.sendMsgBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__["NinePatchButton"](this.scene, 0, 0, 60, 30, "button", "", "发送", {
            left: 4,
            top: 4,
            right: 4,
            bottom: 4
        });
        this.sendMsgBtn.x = this.width - this.sendMsgBtn.width + 10 * this.mWorld.uiScale;
        this.sendMsgBtn.y = size.height - this.sendMsgBtn.height;
        this.add(this.sendMsgBtn);
        this.mSendKey = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.ENTER);
        this.mVoiceBtn = new _components_check_button__WEBPACK_IMPORTED_MODULE_5__["CheckButton"](this.scene, 0, 0, "chat_atlas", "voice_normal.png", "voice_selected.png");
        this.mVoiceBtn.x = this.width - 60 * this.mWorld.uiScale;
        this.mVoiceBtn.y = size.height - this.height;
        this.add(this.mVoiceBtn);
        this.mMicBtn = new _components_check_button__WEBPACK_IMPORTED_MODULE_5__["CheckButton"](this.scene, 0, 0, "chat_atlas", "mic_normal.png", "mic_selected.png");
        this.mMicBtn.x = this.width - 20 * this.mWorld.uiScale;
        this.mMicBtn.y = size.height - this.height;
        this.add(this.mMicBtn);
        this.setPosition();
        _super.prototype.init.call(this);
    };
    ChatPanelPC.prototype.onSelectedVoiceHandler = function (val) {
        if (val === false) {
            this.mMicBtn.selected = false;
        }
        this.emit("selectedVoice", val);
    };
    ChatPanelPC.prototype.onSelectedMicHandler = function (val) {
        if (this.mVoiceBtn.selected === false) {
            this.mMicBtn.selected = false;
            return;
        }
        this.mMicBtn.selected = val;
        this.emit("selectedMic", val);
    };
    ChatPanelPC.prototype.onSendMsgHandler = function () {
        var text = this.mInputText.text;
        if (text.length > 0) {
            this.emit("sendChat", text);
            this.mInputText.setText("");
            this.mInputText.setBlur();
        }
    };
    ChatPanelPC.prototype.onFocusHandler = function () {
        if (!this.mWorld || !this.mWorld.inputManager) {
            return;
        }
        if (this.mSendKey) {
            this.mSendKey.on("down", this.onDownEnter, this);
        }
    };
    ChatPanelPC.prototype.onBlurHandler = function () {
        if (!this.mWorld || !this.mWorld.inputManager) {
            return;
        }
        if (this.mSendKey) {
            this.mSendKey.off("down", this.onDownEnter, this);
        }
    };
    ChatPanelPC.prototype.onDownEnter = function () {
        this.onSendMsgHandler();
    };
    Object.defineProperty(ChatPanelPC.prototype, "outChannel", {
        get: function () {
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    return ChatPanelPC;
}(_base_chat_panel__WEBPACK_IMPORTED_MODULE_8__["BaseChatPanel"]));



/***/ }),
/* 213 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var GetSizerConfig = function (gameObject) {
    if (!gameObject.hasOwnProperty('rexSizer')) {
        gameObject.rexSizer = {};
    }
    return gameObject.rexSizer;
}
/* harmony default export */ __webpack_exports__["a"] = (GetSizerConfig);

/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const ALIGN = Phaser.Display.Align;
/* harmony default export */ __webpack_exports__["a"] = ({
    center: ALIGN.CENTER,
    left: ALIGN.LEFT_CENTER,
    right: ALIGN.RIGHT_CENTER,
    top: ALIGN.TOP_CENTER,
    bottom: ALIGN.BOTTOM_CENTER,

    'left-top': ALIGN.TOP_LEFT,
    'left-center': ALIGN.LEFT_CENTER,
    'left-bottom': ALIGN.BOTTOM_LEFT,
    'center-top': ALIGN.TOP_CENTER,
    'center-center': ALIGN.CENTER,
    'center-bottom': ALIGN.BOTTOM_CENTER,
    'right-top': ALIGN.TOP_RIGHT,
    'right-center': ALIGN.RIGHT_CENTER,
    'right-bottom': ALIGN.BOTTOM_RIGHT
});

/***/ }),
/* 215 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _eventemitter_EventEmitterMethods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(129);
/* harmony import */ var _system_GetSceneObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(142);
/* harmony import */ var _system_IsGameObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(151);
/* harmony import */ var _system_IsSceneObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(346);





const GetValue = Phaser.Utils.Objects.GetValue;

class TweenBase {
    constructor(parent, config) {
        this.parent = parent;
        this.scene = Object(_system_GetSceneObject_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(parent);

        /*
        eventEmitter:
        - false(default value): Use tween's event emitter.
        - true: Create a private event emitter.
        */
        var eventEmitter = GetValue(config, 'eventEmitter', false);
        if (eventEmitter === true) {
            eventEmitter = undefined;
        }
        this.setEventEmitter(eventEmitter);
        this.boot();
    }

    boot() {
        if (Object(_system_IsGameObject_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(this.parent)) { // Parent is Game Object
            if (this.parent.once) { // oops, bob object does not have event emitter
                this.parent.on('destroy', this.destroy, this);
            }
        } else if (Object(_system_IsSceneObject_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])(this.parent)) { // Parent is Scene Object
            this.parent.events.once('shutdown', this.destroy, this);
        } else {
            // ??
        }
    }

    shutdown() {
        this.stop();
        if (Object(_system_IsSceneObject_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])(this.parent)) {  // Parent is Scene Object
            this.parent.events.off('shutdown', this.destroy, this);
        }
        this.destroyEventEmitter();
        this.parent = undefined;
        this.scene = undefined;
        return this;
    }


    destroy() {
        this.shutdown();
        return this;
    }

    start(tweenConfig) {
        if (this.isRunning) {
            return this;
        }

        this.tween = this.scene.tweens.add(tweenConfig)
            .on('complete', this.complete, this);
        if (this.getEventEmitter() === false) {
            this.setEventEmitter(this.tween);
        }
        return this;
    }

    restart() {
        this.stop().start();
        return this;
    }

    stop() {
        if (!this.tween) {
            return this;
        }

        if (this.getEventEmitter() === this.tween) {
            this.setEventEmitter(false);
        }
        this.tween.remove();
        this.tween = undefined;
        return this;
    }

    complete() {
        this.stop();
        if (this.getEventEmitter()) {
            this.emit('complete');
        }
        return this;
    }

    get isRunning() {
        return (!!this.tween);
    }
}

Object.assign(
    TweenBase.prototype,
    _eventemitter_EventEmitterMethods_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]
);

/* harmony default export */ __webpack_exports__["a"] = (TweenBase);

/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const GetValue = Phaser.Utils.Objects.GetValue;
var GetBoundsConfig = function (config, out) {
    if (out === undefined) {
        out = {};
    }
    if (typeof (config) === 'number') {
        out.left = config;
        out.right = config;
        out.top = config;
        out.bottom = config;
    } else {
        out.left = GetValue(config, 'left', 0);
        out.right = GetValue(config, 'right', 0);
        out.top = GetValue(config, 'top', 0);
        out.bottom = GetValue(config, 'bottom', 0);
    }
    return out;
}
/* harmony default export */ __webpack_exports__["a"] = (GetBoundsConfig);

/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizePatchesConfig", function() { return normalizePatchesConfig; });
var normalizePatchesConfig = function (config) {
    config.bottom = (config.bottom !== undefined) ? config.bottom : config.top;
    config.left = (config.left !== undefined) ? config.left : config.top;
    config.right = (config.right !== undefined) ? config.right : config.left;
    return config;
};



/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _Clear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(219);


/**
 * Shallow Object Clone. Will not out nested objects.
 * @param {object} obj JSON object
 * @param {object} ret JSON object to return, set null to return a new object
 * @returns {object} this object
 */
var Clone = function (obj, out) {
    var objIsArray = Array.isArray(obj);

    if (out === undefined) {
        out = (objIsArray) ? [] : {};
    } else {
        Object(_Clear_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(out);
    }

    if (objIsArray) {
        out.length = obj.length;
        for (var i = 0, cnt = obj.length; i < cnt; i++) {
            out[i] = obj[i];
        }
    } else {
        for (var key in obj) {
            out[key] = obj[key];
        }
    }

    return out;
};

/* harmony default export */ __webpack_exports__["a"] = (Clone);


/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var Clear = function (obj) {
    if (Array.isArray(obj)) {
        obj.length = 0;
    } else {
        for (var key in obj) {
            delete obj[key];
        }
    }
}
/* harmony default export */ __webpack_exports__["a"] = (Clear);

/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChatPanelMobile", function() { return ChatPanelMobile; });
/* harmony import */ var _base_chat_panel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(170);
/* harmony import */ var _lib_rexui_lib_ui_textarea_TextArea_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(127);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_inputtext_InputText_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(118);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(110);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(116);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(114);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var ChatPanelMobile = /** @class */ (function (_super) {
    __extends(ChatPanelMobile, _super);
    function ChatPanelMobile(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.setTween(false);
        return _this;
    }
    ChatPanelMobile.prototype.addListen = function () {
        this.mSendBtn.on("pointerdown", this.onSendMsgHandler, this);
        this.clickContainer.on("pointerdown", this.clickHandler, this);
        this.mInputText.on("focus", this.onFocusHandler, this);
        this.mInputText.on("blur", this.onBlurHandler, this);
    };
    ChatPanelMobile.prototype.removeListen = function () {
        this.mSendBtn.off("pointerdown", this.onSendMsgHandler, this);
        this.clickContainer.off("pointerdown", this.clickHandler, this);
        this.mInputText.off("focus", this.onFocusHandler, this);
        this.mInputText.off("blur", this.onBlurHandler, this);
    };
    ChatPanelMobile.prototype.appendChat = function (val) {
        if (this.mTextArea) {
            this.mTextArea.appendText(val);
            this.mTextArea.scrollToBottom();
        }
    };
    ChatPanelMobile.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        this.tweenExpand(true);
    };
    ChatPanelMobile.prototype.setPosition = function (x, y) {
        if (!this.mShow)
            return;
        // DefaultMask在TextBlock中，TextBlock是一个非渲染矩形游戏对象
        var size = this.mWorld.getSize();
        var track;
        var thumb;
        var text;
        if (this.mTextArea) {
            this.mTextArea.destroy();
            this.mTextArea = null;
            text = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](this.scene, 0, 0, "", {
                fontSize: "20px",
                wrap: {
                    mode: "char",
                    width: this.width >> 1
                },
            });
            track = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_6__["NinePatchButton"](this.scene, 0, 0, 4, 7, "track", "", "", {
                left: 0,
                top: 2,
                right: 0,
                bottom: 2
            });
            // track.x = this.width / 2;
            // track.y = 8 * this.mWorld.uiScale;
            thumb = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_6__["NinePatchButton"](this.scene, 0, 0, 20, 35, "button", "", "", {
                left: 4,
                top: 4,
                right: 4,
                bottom: 4
            });
            this.add(text);
            this.add(track);
            this.add(thumb);
        }
        if (this.mInputText) {
            this.mInputText.destroy();
            this.mInputText = null;
            this.mInputText = new _lib_rexui_lib_plugins_gameobjects_inputtext_InputText_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.scene, 0, 0, 10, 10, {
                type: "input",
                fontSize: "20px",
                color: "#808080"
            })
                .resize(328, 26)
                .setOrigin(0, 0)
                .setStyle({ font: "bold 20px YaHei" });
            // .on("focus", this.onFocusHandler, this)
            // .on("blur", this.onBlurHandler, this);
        }
        if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
            this.width = size.width >> 1;
            this.height = size.height;
            this.mBorder.resize(this.width / this.mWorld.uiScale, this.height / this.mWorld.uiScale);
            this.x = 0;
            this.y = 0;
            this.clickContainer.x = this.width / this.mWorld.uiScale + this.clickContainer.width / 2;
            this.clickContainer.y = this.height / (this.mWorld.uiScale * 2);
            this.clickContainer.rotation = Math.PI * .5;
            this.arrow.rotation = Math.PI * .5;
            this.mInputBg.y = this.mBorder.height - this.mInputBg.height / 2;
            this.mTextArea = new _lib_rexui_lib_ui_textarea_TextArea_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](this.scene, {
                x: this.width * .5 / this.mWorld.uiScale,
                y: this.height / 2,
                textWidth: this.mBorder.width - 20 * this.mWorld.uiScale,
                textHeight: this.height,
                text: text,
                slider: {
                    track: track,
                    thumb: thumb,
                },
                clamplChildOY: true,
            });
            this.mInputText.setPosition(2, this.mInputBg.y - 12 * this.mWorld.uiScale);
        }
        else {
            this.width = size.width;
            this.height = size.height / 2;
            this.mBorder.resize(this.width / this.mWorld.uiScale, this.height / this.mWorld.uiScale);
            this.x = 0;
            this.y = this.height + 20 * this.mWorld.uiScale;
            this.mInputBg.y = this.mBorder.height - this.mInputBg.height;
            this.mTextArea = new _lib_rexui_lib_ui_textarea_TextArea_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](this.scene, {
                x: (this.width - 15) / this.mWorld.uiScale >> 1,
                y: (size.height / 2 - this.mSendBtn.height - 20) / this.mWorld.uiScale >> 1,
                textWidth: this.mBorder.width - 20 * this.mWorld.uiScale,
                textHeight: (size.height / 2 - this.mSendBtn.height - 20) / this.mWorld.uiScale,
                text: text,
                slider: {
                    track: track,
                    thumb: thumb,
                },
                scroller: {
                    bounds: [0, this.height >> 1],
                },
                clamplChildOY: true,
                backDeceleration: true,
            });
            // this.mTextArea.x = this.mTextArea.childrenMap.child.minWidth >> 1;
            // this.mTextArea.y = this.mTextArea.childrenMap.child.minHeight >> 1;
            this.clickContainer.x = size.width / (this.mWorld.uiScale * 2);
            this.clickContainer.y = -this.clickContainer.height >> 1;
            var silder = this.mTextArea.getElement("slider");
            silder.y = this.height >> 1;
            this.clickContainer.rotation = Math.PI;
            this.arrow.rotation = Math.PI * 1.5;
            this.mInputText.setPosition(2, this.mInputBg.y - 6 * this.mWorld.uiScale);
        }
        this.mTextArea.layout();
        this.add(this.mTextArea);
        this.mTextArea.childrenMap.child.textMask.setPosition(-5, size.height - this.height).resize(this.width + 18, this.height - this.mSendBtn.height);
        // this.mBorder = new NinePatch(this.scene, 0, 0, this.width / this.mWorld.uiScale, this.height / this.mWorld.uiScale, Border.getName(), null, Border.getConfig());
        this.mBorder.x = this.mBorder.width / 2;
        this.mBorder.y = this.mBorder.height / 2;
        this.setSize(this.width, this.height);
        // this.mTextArea.x = this.mBorder.width + 100 * this.mWorld.uiScale >> 1;
        this.mInputBg.x = this.mInputBg.width >> 1;
        this.mSendBtn.x = this.mBorder.width - this.mSendBtn.width;
        this.mSendBtn.y = this.mInputBg.y;
        this.scale = this.mWorld.uiScale;
        this.add(this.mInputText);
        return this;
    };
    ChatPanelMobile.prototype.destroy = function () {
        // if (this.mSendBtn) this.mSendBtn.destroy(true);
        // if (this.mInputBg) this.mInputBg.destroy(true);
        // if (this.clickContainer) this.clickContainer.destroy(true);
        // if (this.arrow) this.arrow.destroy(true);
        // if (this.mBorder) this.mBorder.destroy(true);
        // if (this.mTextArea) this.mTextArea.destroy();
        // if (this.mInputText) this.mInputText.destroy();
        // this.mTextArea = null;
        // this.mInputText = null;
        // this.mSendBtn = null;
        // this.clickContainer = null;
        // this.arrow = null;
        // this.mBorder = null;
        // this.mInputBg = null;
        _super.prototype.destroy.call(this);
    };
    ChatPanelMobile.prototype.tweenExpand = function (show) {
        var _this = this;
        var toAlpha = show === true ? 1 : 0;
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Linear",
            props: {
                alpha: { value: toAlpha },
            },
            onComplete: function (tween, targets, ship) {
                if (!show)
                    _this.hide();
                _this.addListen();
            },
        });
        if (show)
            this.setPosition();
    };
    ChatPanelMobile.prototype.hide = function () {
        this.removeListen();
        _super.prototype.hide.call(this);
    };
    ChatPanelMobile.prototype.preload = function () {
        if (!this.scene) {
            return;
        }
        this.scene.load.image("button", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/common/button.png"));
        this.scene.load.image("thumbTexture", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/common/common_thumb_texture.png"));
        this.scene.load.image("track", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/common/common_track.png"));
        this.scene.load.image("channelSelect", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/common/common_channelSelect.png"));
        this.scene.load.image("channelUnSelect", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/common/common_channelUnSelect.png"));
        this.scene.load.image("arrow", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/common/common_arrow.png"));
        this.scene.load.image("chat_input_bg", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/chat/input_bg.png"));
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Border */ "d"].getPNG());
        this.scene.load.atlas(_utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* WhiteButton */ "i"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* WhiteButton */ "i"].getPNG(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* WhiteButton */ "i"].getJSON());
        this.scene.load.atlas("chat_atlas", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/chat/chat_atlas.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/chat/chat_atlas.json"));
        _super.prototype.preload.call(this);
    };
    ChatPanelMobile.prototype.init = function () {
        if (this.mInitialized)
            return;
        var size = this.mWorld.getSize();
        if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
            this.width = size.width >> 1;
            this.height = size.height;
        }
        else {
            this.width = size.width;
            this.height = size.height >> 1;
        }
        this.setSize(this.width, this.height);
        this.mBorder = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__["NinePatch"](this.scene, 0, 0, this.width / this.mWorld.uiScale, this.height / this.mWorld.uiScale, _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Border */ "d"].getConfig());
        this.mBorder.x = this.mBorder.width / 2;
        this.mBorder.y = this.mBorder.height / 2;
        this.addAt(this.mBorder, 0);
        var text = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](this.scene, 0, 0, "", {
            fontSize: "20px",
            wrap: {
                mode: "char",
                width: this.width >> 1
            },
        });
        var track = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_6__["NinePatchButton"](this.scene, 0, 0, 4, 7, "track", "", "", {
            left: 0,
            top: 2,
            right: 0,
            bottom: 2
        });
        track.x = this.width / 2;
        track.y = 8 * this.mWorld.uiScale;
        var thumb = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_6__["NinePatchButton"](this.scene, 0, 0, 20, 35, "button", "", "", {
            left: 4,
            top: 4,
            right: 4,
            bottom: 4
        });
        this.add(text);
        this.add(track);
        this.add(thumb);
        this.mTextArea = new _lib_rexui_lib_ui_textarea_TextArea_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](this.scene, {
            x: this.width >> 1,
            y: this.height + 178 * this.mWorld.uiScale >> 1,
            textWidth: this.width,
            textHeight: this.height + 150 * this.mWorld.uiScale,
            text: text,
            slider: {
                track: track,
                thumb: thumb,
            },
        })
            .layout();
        this.add(this.mTextArea);
        this.mInputBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__["NinePatch"](this.scene, 0, 0, 340, 30, "chat_input_bg", null, { left: 4, top: 4, right: 4, bottom: 4 });
        this.add(this.mInputBg);
        this.mInputText = new _lib_rexui_lib_plugins_gameobjects_inputtext_InputText_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.scene, 0, 0, 10, 10, {
            type: "input",
            fontSize: "20px",
            color: "#808080"
        })
            .resize(328, 26)
            .setOrigin(0, 0)
            .setStyle({ font: "bold 20px YaHei" })
            .on("focus", this.onFocusHandler, this)
            .on("blur", this.onBlurHandler, this);
        this.mSendBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_6__["NinePatchButton"](this.scene, 0, 0, 60, 30, _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* WhiteButton */ "i"].getName(), "", "发送", _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* WhiteButton */ "i"].getConfig());
        this.add(this.mSendBtn);
        this.clickContainer = this.scene.make.container(undefined, false);
        var btnBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__["NinePatch"](this.scene, 0, 0, 53 / this.mWorld.uiScale, 30 / this.mWorld.uiScale, _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Border */ "d"].getConfig());
        this.arrow = this.scene.make.image(undefined, false);
        this.arrow.setTexture("arrow");
        this.clickContainer.setSize(btnBg.width + 4, btnBg.height + 10);
        this.clickContainer.add(btnBg);
        this.clickContainer.add(this.arrow);
        this.clickContainer.setInteractive();
        this.add(this.clickContainer);
        this.add(this.mInputText);
        this.setPosition();
        _super.prototype.init.call(this);
    };
    ChatPanelMobile.prototype.clickHandler = function () {
        this.scene.tweens.add({
            targets: this.clickContainer,
            duration: 50,
            ease: "Linear",
            props: {
                scaleX: { value: .5 },
                scaleY: { value: .5 },
            },
            yoyo: true,
            repeat: 0,
        });
        this.clickContainer.scaleX = this.clickContainer.scaleY = 1;
        this.tweenExpand(false);
        this.mWorld.uiManager.baseFaceTween(true);
    };
    ChatPanelMobile.prototype.onSendMsgHandler = function () {
        var text = this.mInputText.text;
        if (text.length > 0) {
            this.emit("sendChat", text);
            this.mInputText.setText("");
            this.mInputText.setBlur();
        }
        // // =====================tween out/in baseView
        // const baseViewMed: MainUIMediator = this.mWorld.uiManager.getMediator(MainUIMediator.NAME) as MainUIMediator;
        // if (baseViewMed) {
        //     baseViewMed.tweenView(true);
        // }
    };
    ChatPanelMobile.prototype.onFocusHandler = function () {
        if (!this.mWorld || !this.mWorld.inputManager) {
            return;
        }
        // this.mWorld.inputManager.enable = false;
    };
    ChatPanelMobile.prototype.onBlurHandler = function () {
        if (!this.mWorld || !this.mWorld.inputManager) {
            return;
        }
        // this.mWorld.inputManager.enable = true;
    };
    return ChatPanelMobile;
}(_base_chat_panel__WEBPACK_IMPORTED_MODULE_0__["BaseChatPanel"]));



/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chat", function() { return Chat; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Chat = /** @class */ (function (_super) {
    __extends(Chat, _super);
    function Chat(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    Chat.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    Chat.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    Chat.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_CHAT, this.handleCharacterChat);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_QCLOUD_GME_AUTHBUFFER, this.handleQCLoudGME);
        }
    };
    Chat.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    Object.defineProperty(Chat.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    Chat.prototype.handleCharacterChat = function (packet) {
        var content = packet.content;
        this.mEvent.emit("characterChat", packet);
    };
    Chat.prototype.handleQCLoudGME = function (packet) {
        var authBuffer = packet.content;
        this.mEvent.emit("QCLoundGME", packet);
    };
    return Chat;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayerManager", function() { return LayerManager; });
var LayerManager = /** @class */ (function () {
    function LayerManager() {
    }
    LayerManager.prototype.setScene = function (scene) {
        if (!scene)
            return;
        this.destroy();
        this.mScene = scene;
        // const view = scene.cameras.main;
        // this.mInteractive = scene.add.container(view.width >> 1, view.height >> 1);
        // this.mInteractive.setSize(view.width, view.height);
        // const rect = scene.add.graphics();
        // rect.lineStyle(1, 0, 1);
        // rect.fillRect(0, 0, view.width, view.height);
        // this.mInteractive.setInteractive();
        this.mUILayer = scene.add.container(0, 0);
        this.mDialogLayer = scene.add.container(0, 0);
        this.mToolTipsLyaer = scene.add.container(0, 0);
    };
    LayerManager.prototype.addToUILayer = function (obj) {
        if (!this.mUILayer) {
            return;
        }
        this.mUILayer.add(obj);
    };
    LayerManager.prototype.addToDialogLayer = function (obj) {
        if (!this.mDialogLayer) {
            return;
        }
        this.mDialogLayer.add(obj);
    };
    LayerManager.prototype.addToToolTipsLayer = function (obj) {
        if (!this.mToolTipsLyaer) {
            return;
        }
        this.mToolTipsLyaer.add(obj);
    };
    LayerManager.prototype.removeToUILayer = function (obj) {
        this.mUILayer.remove(obj);
    };
    LayerManager.prototype.removeToDialogLayer = function (obj) {
        this.mDialogLayer.remove(obj);
    };
    LayerManager.prototype.removeToToolTipsLayer = function (obj) {
        this.mToolTipsLyaer.remove(obj);
    };
    LayerManager.prototype.destroy = function () {
        if (this.mUILayer) {
            this.mUILayer.destroy();
            this.mUILayer = null;
        }
        if (this.mDialogLayer) {
            this.mDialogLayer.destroy();
            this.mDialogLayer = null;
        }
        if (this.mToolTipsLyaer) {
            this.mToolTipsLyaer.destroy();
            this.mToolTipsLyaer = null;
        }
    };
    Object.defineProperty(LayerManager.prototype, "interactive", {
        get: function () {
            return this.mInteractive;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LayerManager.prototype, "scene", {
        get: function () {
            return this.mScene;
        },
        enumerable: false,
        configurable: true
    });
    return LayerManager;
}());



/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoticeMediator", function() { return NoticeMediator; });
/* harmony import */ var _NoticePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(224);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(109);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(106);
/* harmony import */ var _Notice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(225);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var NoticeMediator = /** @class */ (function (_super) {
    __extends(NoticeMediator, _super);
    function NoticeMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.world = worldService;
        _this.mLayerManager = layerManager;
        _this.mScene = scene;
        _this.notice = new _Notice__WEBPACK_IMPORTED_MODULE_3__["Notice"](worldService);
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_4__[/* UIType */ "a"].Tips;
        _this.addListen();
        return _this;
    }
    NoticeMediator.prototype.setUiScale = function (value) {
        this.mView.scale = value;
    };
    NoticeMediator.prototype.getView = function () {
        return this.mView !== undefined ? this.mView : undefined;
    };
    NoticeMediator.prototype.getUIType = function () {
        return this.mUIType;
    };
    NoticeMediator.prototype.hide = function () {
        if (!this.mView)
            return;
        _super.prototype.hide.call(this);
    };
    NoticeMediator.prototype.destroy = function () {
        this.removeListen();
        this.notice.unregister();
        this.notice = null;
        _super.prototype.destroy.call(this);
    };
    NoticeMediator.prototype.isShow = function () {
        return this.mView.isShow();
    };
    NoticeMediator.prototype.resize = function () {
        if (!this.mView)
            return;
        this.mView.resize();
    };
    NoticeMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            this.mView.showNotice(param);
            return;
        }
        this.mView = new _NoticePanel__WEBPACK_IMPORTED_MODULE_0__["NoticePanel"](this.mScene, this.world);
        this.mView.show(param);
        this.mView.showNotice(param);
        this.mLayerManager.addToDialogLayer(this.mView);
        // this.setUiScale(this.world.uiScale);
    };
    NoticeMediator.prototype.update = function (param) {
        this.mParam = param;
        if (!this.mView)
            return;
    };
    NoticeMediator.prototype.setParam = function (param) {
        this.mParam = param;
    };
    NoticeMediator.prototype.getParam = function () {
        return this.mParam;
    };
    NoticeMediator.prototype.addListen = function () {
        this.notice.on("showNotice", this.noticeHandler, this);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].SHOW_NOTICE, this.noticeHandler, this);
        this.notice.register();
    };
    NoticeMediator.prototype.removeListen = function () {
        this.notice.off("showNotice", this.noticeHandler, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].SHOW_NOTICE, this.noticeHandler, this);
    };
    NoticeMediator.prototype.noticeHandler = function (packet) {
        if (!packet || !packet.content) {
            return;
        }
        this.show(packet.content);
    };
    NoticeMediator.NAME = "NoticeMediator";
    return NoticeMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__[/* BaseMediator */ "a"]));



/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoticePanel", function() { return NoticePanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(110);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var NoticePanel = /** @class */ (function (_super) {
    __extends(NoticePanel, _super);
    function NoticePanel(scene, world) {
        return _super.call(this, scene, world) || this;
    }
    NoticePanel.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        this.resize();
        this.scale = this.mWorld.uiRatio;
        this.refreshData();
    };
    NoticePanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
    };
    NoticePanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
    };
    NoticePanel.prototype.destroy = function () {
        if (this.mContentText) {
            this.mContentText.destroy();
            this.mContentText = null;
        }
        if (this.mTween) {
            this.mTween.stop();
            this.mTween.remove();
            this.mTween = null;
        }
        _super.prototype.destroy.call(this);
    };
    NoticePanel.prototype.resize = function (wid, hei) {
        if (wid === void 0) { wid = 0; }
        if (hei === void 0) { hei = 0; }
        var view = this.scene.cameras.main.worldView;
        this.x = view.x + view.width + wid >> 1;
        this.y = 180 + hei;
    };
    NoticePanel.prototype.showNotice = function (data) {
        var _this = this;
        if (!this.mInitialized)
            return;
        if (!data)
            return;
        if (this.mTween) {
            this.mTween.stop();
            this.mTween.remove();
        }
        var color = "#FFFFFF";
        var delay = 5000;
        var setting = data.chatsetting;
        if (setting) {
            if (setting.textColor) {
                color = setting.textColor;
            }
            if (setting.duration) {
                delay = setting.duration;
            }
        }
        this.mContentText.setText(data.noticeContext);
        this.mContentText.setFill(color);
        this.mContentText.x = -(this.mContentText.width >> 1);
        this.mContentText.y = -(this.mContentText.height >> 1);
        this.mTween = this.scene.tweens.add({
            targets: this,
            alpha: 0,
            duration: 200,
            delay: delay,
            onComplete: function () {
                _this.removeFromParent();
            }
        });
    };
    NoticePanel.prototype.preload = function () {
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getPNG());
        _super.prototype.preload.call(this);
    };
    NoticePanel.prototype.init = function () {
        // const background = new NinePatch(this.scene, {
        //     width: 1200,
        //     height: 120,
        //     key: Border.getName(),
        //     columns: Border.getColumns(),
        //     rows: Border.getRows()
        // });
        var background = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](this.scene, 0, 0, 1200, 120, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getConfig());
        this.add(background);
        this.mContentText = this.scene.make.text({
            align: "center",
            style: {
                fontFamily: "bold YaHei",
                fontSize: 20 * this.dpr * this.mWorld.uiScale,
                wordWrap: { width: 1180, useAdvancedWrap: true },
            },
        }, false)
            .setStroke("#000000", 1);
        this.add(this.mContentText);
        _super.prototype.init.call(this);
    };
    NoticePanel.prototype.refreshData = function () {
        var data = this.mShowData;
        if (data) {
            this.showNotice(data);
        }
    };
    NoticePanel.prototype.removeFromParent = function () {
        if (this.parentContainer) {
            this.parentContainer.remove(this);
        }
        if (this.mTween) {
            this.mTween.stop();
            this.mTween.remove();
            this.mTween = null;
        }
        this.mShow = false;
    };
    return NoticePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Notice", function() { return Notice; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Notice = /** @class */ (function (_super) {
    __extends(Notice, _super);
    function Notice(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    Notice.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    Notice.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    Notice.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_NOTICE, this.noticeHandler);
        }
    };
    Notice.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    Object.defineProperty(Notice.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    Notice.prototype.noticeHandler = function (packet) {
        if (!packet || !packet.content) {
            return;
        }
        this.mEvent.emit("showNotice", packet);
    };
    return Notice;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 226 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BagPanel", function() { return BagPanel; });
/* harmony import */ var _item_slot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(132);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(104);
/* harmony import */ var _bagMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(131);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(110);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(118);
/* harmony import */ var _utils_tool__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(155);
/* harmony import */ var _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(121);
/* harmony import */ var _ui_mediatorType__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(122);
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(105);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();










var BagPanel = /** @class */ (function (_super) {
    __extends(BagPanel, _super);
    // private mInitalize: boolean = false;
    function BagPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mPageNum = 0;
        _this.mPageIndex = 1;
        _this.mBaseStr = "输入关键字进行搜索";
        _this.bagSlotList = [];
        _this.mCheckList = [];
        return _this;
    }
    BagPanel.prototype.resize = function (wid, hei) {
        var size = this.mWorld.getSize();
        if (this.mWorld.game.device.os.desktop) {
            this.x = size.width >> 1;
            this.y = size.height >> 1;
        }
        else {
            if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
                this.x = size.width >> 1;
                this.y = size.height >> 1;
            }
            else {
                this.x = size.width >> 1;
                this.y = size.height - (this.height / 2) * this.mWorld.uiScale >> 1;
            }
        }
    };
    BagPanel.prototype.setDataList = function () {
        var itemList = this.mWorld.roomManager.currentRoom.playerManager.actor.package.items;
        this.mPageNum = Math.ceil(itemList.length / BagPanel.PageMaxCount);
        this.mDataList = itemList;
        if (!this.mInitialized) {
            return;
        }
        this.checkChinese();
    };
    BagPanel.prototype.getPageNum = function () {
        return this.mPageNum;
    };
    BagPanel.prototype.destroy = function () {
        if (this.bagSlotList) {
            this.bagSlotList.forEach(function (slot) {
                if (slot)
                    slot.destroy();
            });
            this.bagSlotList.length = 0;
            this.bagSlotList = null;
        }
        this.mWorld = null;
        this.mPageNum = 0;
        this.mPageIndex = 1;
        _super.prototype.destroy.call(this);
    };
    BagPanel.prototype.getCurPageIndex = function () {
        return this.mPageIndex;
    };
    BagPanel.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        if (this.mInitialized) {
            this.mPreBtn.play("slipBtn");
            this.mNextBtn.play("slipBtn");
        }
    };
    BagPanel.prototype.setBlur = function () {
        if (this.mInputText)
            this.mInputText.setBlur();
    };
    BagPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.mInputText.on("focus", this.onFocusHandler, this);
        this.mInputText.on("blur", this.onBlurHandler, this);
        this.mNextBtn.on("pointerup", this.nextHandler, this);
        this.mPreBtn.on("pointerup", this.preHandler, this);
        this.mClsBtn.on("pointerup", this.closeHandler, this);
    };
    BagPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mInputText.off("focus", this.onFocusHandler, this);
        this.mInputText.off("blur", this.onBlurHandler, this);
        this.mNextBtn.off("pointerup", this.nextHandler, this);
        this.mPreBtn.off("pointerup", this.preHandler, this);
        this.mClsBtn.off("pointerup", this.closeHandler, this);
    };
    BagPanel.prototype.init = function () {
        if (this.mInitialized)
            return;
        var size = this.mWorld.getSize();
        if (this.mWorld.game.device.os.desktop) {
            this.x = size.width >> 1;
            this.y = size.height >> 1;
        }
        else {
            if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
                this.x = size.width >> 1;
                this.y = size.height >> 1;
            }
            else {
                this.x = size.width >> 1;
                this.y = size.height - (this.height / 2) * this.mWorld.uiScale >> 1;
            }
        }
        // ============背包格位
        var itemSlot;
        var tmpX = 0;
        var tmpY = 0;
        // ================背包界面背景底
        this.mBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__["NinePatch"](this.scene, 0, 0, 500, 350, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getConfig());
        // this.mBg.x = size.width - this.width >> 1;
        // this.mBg.y = size.height - this.mBg.height >> 1;
        this.addAt(this.mBg, 0);
        this.setSize(this.mBg.width, this.mBg.height);
        this.mBorder = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__["NinePatch"](this.scene, 0, 0, this.mBg.width - 10, this.mBg.height - 30, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getConfig());
        this.mBorder.x = this.mBg.x;
        this.mBorder.y = this.mBg.y + 10;
        this.addAt(this.mBorder, 1);
        var txtBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__["NinePatch"](this.scene, this.mBorder.width / 4 + 5, -this.mBg.height / 2 + 65, this.mBorder.width / 2 - 40, 35, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getConfig());
        this.add(txtBg);
        this.mInputText = new _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](this.scene, 0, 0, 10, 10, {
            type: "input",
            fontSize: "14px",
            color: "#808080"
        })
            .resize(txtBg.width, txtBg.height)
            .setOrigin(0, 0)
            .setStyle({ font: "bold 16px YaHei" });
        this.mInputText.x = txtBg.x - txtBg.width / 2;
        this.mInputText.y = txtBg.y - txtBg.height / 2;
        this.mInputText.setText(this.mBaseStr);
        this.add(this.mInputText);
        // 多排背包格位
        this.bagSlotList = [];
        for (var i = 0; i < BagPanel.PageMaxCount; i++) {
            tmpX = i % 8 * 60 - 210;
            tmpY = Math.floor(i / 8) * 60 - this.mBorder.height / 2 + this.mBorder.y + this.mBorder.height / 2 - 55;
            itemSlot = new _item_slot__WEBPACK_IMPORTED_MODULE_0__["ItemSlot"](this.scene, this.mWorld, this, tmpX, tmpY, this.mResStr, this.mResPng, this.mResJson, "bagView_slot.png", "itemSelectFrame");
            itemSlot.createUI();
            this.bagSlotList.push(itemSlot);
        }
        this.mPreBtn = this.scene.make.sprite(undefined, false);
        this.mPreBtn.x = -this.mBg.width >> 1;
        // // ===============背包界面右翻按钮
        this.mNextBtn = this.scene.make.sprite(undefined, false);
        this.mNextBtn.scaleX = -1;
        this.mNextBtn.x = this.mBg.width >> 1;
        var titleCon = this.scene.make.sprite(undefined, false);
        titleCon.setTexture(this.mResStr, "bagView_titleBtn.png");
        titleCon.x = (-this.mBg.width >> 1) + 50;
        titleCon.y = (-this.mBg.height >> 1);
        this.add(titleCon);
        var titleTF = this.scene.make.text(undefined, false);
        titleTF.setFontFamily("Tahoma");
        titleTF.setFontStyle("bold");
        titleTF.setFontSize(20);
        titleTF.setText("背包");
        titleTF.x = titleCon.x + titleCon.width - 10;
        titleTF.y = titleCon.y - (titleTF.height >> 1);
        this.add(titleTF);
        this.add(this.mPreBtn);
        this.add(this.mNextBtn);
        this.mNextBtn.setInteractive();
        this.mPreBtn.setInteractive();
        this.width = this.mBg.width;
        this.height = this.mBg.height;
        this.mClsBtn = new _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_7__["IconBtn"](this.scene, this.mWorld, {
            key: _ui_mediatorType__WEBPACK_IMPORTED_MODULE_8__["UIMediatorType"].Close_Btn, bgResKey: "clsBtn", bgTextures: ["btn_normal", "btn_over", "btn_click"],
            iconResKey: "", iconTexture: "", scale: 1, pngUrl: this.mResPng, jsonUrl: this.mResJson
        });
        this.mClsBtn.x = (this.width >> 1) - 65;
        this.mClsBtn.y = -this.height >> 1;
        this.mClsBtn.scaleX = this.mClsBtn.scaleY = 2;
        this.add(this.mClsBtn);
        this.mInitialized = true;
        if (this.mDataList) {
            this.refreshDataList(this.mDataList);
        }
        this.setInteractive();
        this.mWorld.uiManager.getMediator(_bagMediator__WEBPACK_IMPORTED_MODULE_3__["BagMediator"].NAME).resize(this.width, this.height);
        _super.prototype.init.call(this);
    };
    BagPanel.prototype.preload = function () {
        if (!this.scene) {
            return;
        }
        this.mResStr = "bagView";
        this.mResPng = "ui/bag/bagView.png";
        this.mResJson = "ui/bag/bagView.json";
        this.scene.load.atlas("itemChose", _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/bag/itemChose.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/bag/itemChose.json"));
        this.scene.load.atlas("slip", _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/bag/slip.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/bag/slip.json"));
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getPNG());
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getPNG());
        this.scene.load.atlas("clsBtn", _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/common/common_clsBtn.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/common/common_clsBtn.json"));
        this.scene.load.atlas(this.mResStr, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes(this.mResPng), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes(this.mResJson));
        _super.prototype.preload.call(this);
    };
    BagPanel.prototype.loadComplete = function (loader, totalComplete, totalFailed) {
        var selectFramesObj = this.scene.textures.get("itemChose").frames;
        var tmpSelectFrames = [];
        for (var key in selectFramesObj) {
            if (key === "__BASE")
                continue;
            var frame = selectFramesObj[key];
            if (!frame)
                continue;
            tmpSelectFrames.push(key);
        }
        // 手动把json配置中的frames给予anims
        this.scene.anims.create({
            key: "itemSelectFrame",
            frames: this.scene.anims.generateFrameNumbers("itemChose", { start: 0, end: 8, frames: tmpSelectFrames }),
            frameRate: 33,
            yoyo: true,
            repeat: -1
        });
        var framesObj = this.scene.textures.get("slip").frames;
        var tmpFrames = [];
        for (var key in framesObj) {
            if (key === "__BASE")
                continue;
            var frame = framesObj[key];
            if (!frame)
                continue;
            tmpFrames.push(key);
        }
        // 手动把json配置中的frames给予anims
        this.scene.anims.create({
            key: "slipBtn",
            frames: this.scene.anims.generateFrameNumbers("slip", { start: 0, end: 14, frames: tmpFrames }),
            frameRate: 33,
            yoyo: true,
            repeat: -1
        });
        _super.prototype.loadComplete.call(this, loader, totalComplete, totalFailed);
    };
    BagPanel.prototype.tweenComplete = function (show) {
        _super.prototype.tweenComplete.call(this, show);
        if (show)
            this.mWorld.uiManager.getMediator(_bagMediator__WEBPACK_IMPORTED_MODULE_3__["BagMediator"].NAME).resize(this.width, this.height);
    };
    BagPanel.prototype.nextHandler = function (pointer, gameObject) {
        this.preNextBtnScaleHandler(this.mNextBtn, -1);
        if (this.mPageIndex >= this.mPageNum) {
            return;
        }
        this.mPageIndex++;
        var list = this.mCheckList.length > 0 ? this.mCheckList : this.mDataList;
        this.refreshDataList(list);
    };
    BagPanel.prototype.preHandler = function (pointer, gameObject) {
        this.preNextBtnScaleHandler(this.mPreBtn);
        if (this.mPageIndex <= 1) {
            return;
        }
        this.mPageIndex--;
        var list = this.mCheckList.length > 0 ? this.mCheckList : this.mDataList;
        this.refreshDataList(list);
    };
    BagPanel.prototype.preNextBtnScaleHandler = function (gameObject, scaleX) {
        if (scaleX === void 0) { scaleX = 1; }
        this.scene.tweens.add({
            targets: gameObject,
            duration: 50,
            ease: "Linear",
            props: {
                scaleX: { value: .5 * scaleX },
                scaleY: { value: .5 },
            },
            yoyo: true,
            repeat: 0,
        });
        gameObject.scaleX = scaleX;
        gameObject.scaleY = 1;
    };
    BagPanel.prototype.refreshDataList = function (checkItemList) {
        if (!checkItemList) {
            _utils_log__WEBPACK_IMPORTED_MODULE_1__[/* Logger */ "a"].getInstance().error("checkItemList is undefiend");
            return;
        }
        var items = checkItemList.slice((this.mPageIndex - 1) * BagPanel.PageMaxCount, this.mPageIndex * BagPanel.PageMaxCount);
        var len = BagPanel.PageMaxCount;
        var item;
        for (var i = 0; i < len; i++) {
            item = this.bagSlotList[i];
            if (!item)
                continue;
            item.dataChange(items[i]);
        }
    };
    BagPanel.prototype.closeHandler = function () {
        var med = this.mWorld.uiManager.getMediator(_bagMediator__WEBPACK_IMPORTED_MODULE_3__["BagMediator"].NAME);
        med.hide();
    };
    BagPanel.prototype.onFocusHandler = function () {
        if (!this.mWorld || !this.mWorld.inputManager) {
            return;
        }
        // this.mWorld.inputManager.enable = false;
        if (!this.mInputText)
            return;
        this.mInputText.on("textchange", this.checkChinese, this);
        this.mInputText.setText("");
    };
    BagPanel.prototype.onBlurHandler = function () {
        if (!this.mWorld || !this.mWorld.inputManager || !this.mInputText) {
            return;
        }
        // this.mWorld.inputManager.enable = false;
        this.mInputText.on("textchange", this.checkChinese, this);
        this.mInputText.setText(this.mBaseStr);
    };
    BagPanel.prototype.checkChinese = function () {
        var _this = this;
        var str = this.mInputText.text;
        if (str.length < 1 || !_utils_tool__WEBPACK_IMPORTED_MODULE_6__[/* Tool */ "a"].checkChinese(str) || str === this.mBaseStr) {
            this.refreshDataList(this.mDataList);
            return;
        }
        var itemList = this.mWorld.roomManager.currentRoom.playerManager.actor.package.items;
        itemList.forEach(function (item) {
            if (item) {
                if (_utils_tool__WEBPACK_IMPORTED_MODULE_6__[/* Tool */ "a"].checkItemName(item.name, _this.mInputText.text)) {
                    _this.mCheckList.push(item);
                }
            }
        });
        this.refreshDataList(this.mCheckList);
    };
    BagPanel.PageMaxCount = 32;
    return BagPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_9__["BasePanel"]));



/***/ }),
/* 227 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FriendPanel", function() { return FriendPanel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FriendItem", function() { return FriendItem; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(110);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(107);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(113);
/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(23);
/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(121);
/* harmony import */ var _friend_mediator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(172);
/* harmony import */ var _ui_mediatorType__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(122);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var FriendPanel = /** @class */ (function (_super) {
    __extends(FriendPanel, _super);
    function FriendPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mIndex = 0;
        return _this;
    }
    FriendPanel.prototype.resize = function (wid, hei) {
        var size = this.mWorld.getSize();
        if (!this.mShow)
            return;
        if (this.mWorld.game.device.os.desktop) {
            this.x = size.width + wid >> 1;
            this.y = size.height + hei >> 1;
        }
        else {
            if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
                this.mBg.resize((size.width * .5 - 20) / this.mWorld.uiScale, (size.height - 20) / this.mWorld.uiScale);
                // new NinePatch(this.scene, 0, 0, size.width * .6 / this.mWorld.uiScale - 30, size.height / this.mWorld.uiScale - 30, Border.getName(), null, Border.getConfig());
                this.setSize(this.mBg.width, this.mBg.height);
                this.x = (this.width / 2 + 10) * this.mWorld.uiScale;
                this.y = (this.height / 2 + 10) * this.mWorld.uiScale;
            }
            else {
                this.mBg.resize((size.width - 20) / this.mWorld.uiScale, (size.height * .5 - 20) / this.mWorld.uiScale);
                // = new NinePatch(this.scene, 0, 0, size.width / this.mWorld.uiScale - 30, size.height / this.mWorld.uiScale - 30, Border.getName(), null, Border.getConfig());
                this.setSize(this.mBg.width, this.mBg.height);
                this.x = (this.width / 2 + 15) * this.mWorld.uiScale;
                this.y = size.height - this.mBg.height * .5 * this.mWorld.uiScale - 10;
            }
        }
        this.scale = this.mWorld.uiScale;
        this.mUpBtn.y = (this.mUpBtn.height / 2 - this.mBg.height) / 2;
        this.mDownBtn.y = (this.mBg.height - this.mDownBtn.height / 2) / 2;
        this.mTitleTxt.x = (-this.mBg.width / 2 + 15);
        this.mTitleTxt.y = (-this.mBg.height / 2 + 8);
        if (this.mClsBtn) {
            this.mClsBtn.x = (this.mBg.width >> 1) - 65;
            this.mClsBtn.y = (-this.mBg.height >> 1);
        }
        this.initFriendItem();
        this.addAt(this.mBg, 0);
        this.add(this.mTitleTxt);
    };
    FriendPanel.prototype.addListen = function () {
        _super.prototype.addListen.call(this);
        this.mDownBtn.on("pointerup", this.downHandler, this);
        this.mUpBtn.on("pointerup", this.upHandler, this);
        this.mClsBtn.on("pointerup", this.hide, this);
    };
    FriendPanel.prototype.removeListen = function () {
        _super.prototype.removeListen.call(this);
        this.mDownBtn.off("pointerup", this.downHandler, this);
        this.mUpBtn.off("pointerup", this.upHandler, this);
        this.mClsBtn.off("pointerup", this.hide, this);
    };
    FriendPanel.prototype.show = function (param) {
        var size = this.mWorld.getSize();
        this.mShowData = param;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        _super.prototype.show.call(this, param);
    };
    FriendPanel.prototype.destroy = function () {
        // if (this.mBg) this.mBg.destroy(true);
        // if (this.mTitleTxt) this.mTitleTxt.destroy(true);
        // if (this.mUpBtn) this.mUpBtn.destroy(true);
        // if (this.mDownBtn) this.mDownBtn.destroy(true);
        if (this.mFriendList) {
            this.mFriendList.forEach(function (item) {
                if (item) {
                    item.destory();
                    item = null;
                }
            });
        }
        // this.mIndex = 0;
        // this.mBg = null;
        // this.mTitleTxt = null;
        // this.mUpBtn = null;
        // this.mDownBtn = null;
        // this.mFriendList = null;
        _super.prototype.destroy.call(this);
    };
    FriendPanel.prototype.friendChat = function (id) {
    };
    FriendPanel.prototype.friendGo = function (gameId) {
    };
    FriendPanel.prototype.btnScaleHandler = function (gameObject, scaleX) {
        if (scaleX === void 0) { scaleX = 1; }
        this.mScene.tweens.add({
            targets: gameObject,
            duration: 50,
            ease: "Linear",
            props: {
                scaleX: { value: .5 * scaleX },
                scaleY: { value: .5 },
            },
            yoyo: true,
            repeat: 0,
        });
        gameObject.scaleX = scaleX;
        gameObject.scaleY = 1;
    };
    FriendPanel.prototype.hide = function () {
        this.mWorld.uiManager.baseFaceTween(true);
        _super.prototype.hide.call(this);
    };
    FriendPanel.prototype.preload = function () {
        if (!this.mScene) {
            return;
        }
        this.mScene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getPNG());
        this.mScene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getPNG());
        this.mScene.load.atlas("clsBtn", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.json"));
        this.scene.load.image("friendChat", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/friend/friend_chat.png"));
        this.scene.load.image("friendGo", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/friend/friend_go.png"));
        this.mScene.load.atlas("bagView", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/bag/bagView.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/bag/bagView.json"));
        _super.prototype.preload.call(this);
    };
    FriendPanel.prototype.init = function () {
        this.mWorld.uiManager.getUILayerManager().addToToolTipsLayer(this);
        var size = this.mWorld.getSize();
        this.mBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](this.scene, 0, 0, 600 / this.mWorld.uiScale, size.height * .5 * this.mWorld.uiScale, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getConfig());
        this.setSize(this.mBg.width, this.mBg.height);
        // this.addAt(this.mBg, 0);
        this.mTitleTxt = this.mScene.make.text(undefined, false);
        this.mTitleTxt.setFontFamily("YaHei");
        this.mTitleTxt.setFontStyle("bold");
        this.mTitleTxt.setFontSize(14);
        this.mTitleTxt.style.align = "left";
        this.mTitleTxt.setText("好友列表");
        // this.add(this.mTitleTxt);
        this.mUpBtn = this.mScene.make.sprite(undefined, false);
        this.mUpBtn.setTexture("bagView", "bagView_tab.png");
        this.mUpBtn.rotation = Math.PI / 2;
        this.mDownBtn = this.mScene.make.sprite(undefined, false);
        this.mDownBtn.setTexture("bagView", "bagView_tab.png");
        this.mDownBtn.rotation = -Math.PI / 2;
        this.mDownBtn.setInteractive();
        this.mUpBtn.setInteractive();
        var image = this.scene.make.image(undefined, false);
        image.setTexture(this.mWorld.roomManager.currentRoom.playerManager.actor.getDisplay().mDisplayInfo.id + "");
        this.add(image);
        this.mBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](this.scene, 0, 0, 500, 350, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getConfig());
        this.addAt(this.mBg, 0);
        this.setSize(this.mBg.width, this.mBg.height);
        this.initFriendItem();
        this.mClsBtn = new _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_6__["IconBtn"](this.mScene, this.mWorld, {
            key: _ui_mediatorType__WEBPACK_IMPORTED_MODULE_8__["UIMediatorType"].Close_Btn, bgResKey: "clsBtn", bgTextures: ["btn_normal", "btn_over", "btn_click"],
            iconResKey: "", iconTexture: "", scale: 1, pngUrl: "ui/common/common_clsBtn.png", jsonUrl: "ui/common/common_clsBtn.json"
        });
        this.mClsBtn.x = (this.mWidth >> 1) - 65;
        this.mClsBtn.y = -this.mHeight >> 1;
        this.mClsBtn.scaleX = this.mClsBtn.scaleY = 2;
        this.add(this.mClsBtn);
        _super.prototype.init.call(this);
    };
    FriendPanel.prototype.tweenComplete = function (show) {
        var _this = this;
        _super.prototype.tweenComplete.call(this, show);
        this.mWorld.roomManager.currentRoom.playerManager.actor.getFriend().requestFriend(function (data) {
            _this.setDataList(data);
        });
        if (show)
            this.mWorld.uiManager.getMediator(_friend_mediator__WEBPACK_IMPORTED_MODULE_7__["FriendMediator"].NAME).resize();
    };
    FriendPanel.prototype.downHandler = function () {
        this.btnScaleHandler(this.mDownBtn);
        var len = this.mFriendDataList ? this.mFriendDataList.length : 0;
        var pageNum = Math.floor(len / FriendPanel.count);
        this.mIndex = this.mIndex + 1 > pageNum ? pageNum : this.mIndex + 1;
        this.refreshDataList();
    };
    FriendPanel.prototype.upHandler = function () {
        this.btnScaleHandler(this.mUpBtn);
        this.mIndex = this.mIndex - 1 > 0 ? this.mIndex - 1 : 0;
        this.refreshDataList();
    };
    FriendPanel.prototype.setDataList = function (data) {
        if (!this.mFriendList)
            return;
        this.mFriendDataList = data;
        var len = data.length > FriendPanel.count ? FriendPanel.count : data.length;
        for (var i = 0; i < 4; i++) {
            var item = this.mFriendList[i];
            var dat = data[this.mIndex * FriendPanel.count + i];
            if (!dat) {
                item.visible = false;
                // this.add(item);
                continue;
            }
            item.visible = true;
            dat.index = i;
            // item.dataChange(dat);
            // this.add(item);
        }
        this.add(this.mUpBtn);
        this.add(this.mDownBtn);
    };
    FriendPanel.prototype.refreshDataList = function () {
        // if (!this.mFriendDataList || !this.mFriendList) return;
        // const len: number = this.mFriendDataList.length > FriendPanel.count ? FriendPanel.count : this.mFriendDataList.length;
        // for (let i: number = 0; i < len; i++) {
        //     const item: FriendItem = this.mFriendList[i];
        //     let dat = this.mFriendDataList[this.mIndex * FriendPanel.count + i];
        //     if (!dat) dat = {};
        //     dat.index = i;
        //     item.dataChange(dat);
        // }
    };
    FriendPanel.prototype.initFriendItem = function () {
        var len = this.mFriendList ? this.mFriendList.length : FriendPanel.count;
        if (this.mFriendList && this.mFriendList.length > 0) {
            for (var i = 0; i < len; i++) {
                var item = this.mFriendList[i];
                item.resize();
                item.y = this.mWorld.game.device.os.desktop ? (-this.mBg.height / 2 + this.mTitleTxt.height + i * (item.height + 10) + (item.height / 2 + 10)) * this.mWorld.uiScale :
                    (i - 1.5) * (item.height + 10);
            }
        }
        else {
            this.mFriendList = [];
            var resList = [{
                    res: "friendChat",
                    name: "聊天"
                }, {
                    res: "friendGo",
                    name: "跟随"
                }];
            for (var i = 0; i < len; i++) {
                var item = new FriendItem(this.mWorld, this.mScene, this, resList);
                item.y = this.mWorld.game.device.os.desktop ? (-this.mBg.height / 2 + this.mTitleTxt.height + i * (item.height + 10) + (item.height / 2 + 10)) * this.mWorld.uiScale :
                    (i - 1.5) * (item.height + 10);
                this.mFriendList.push(item);
            }
        }
    };
    FriendPanel.count = 4;
    return FriendPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));

var FriendItem = /** @class */ (function (_super) {
    __extends(FriendItem, _super);
    function FriendItem(world, scene, panel, iconResList) {
        var _this = _super.call(this, scene) || this;
        _this.iconResList = [];
        _this.mPanel = panel;
        _this.mWorld = world;
        _this.mScene = scene;
        var size = _this.mWorld.getSize();
        _this.mBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](_this.mScene, 0, 0, _this.mPanel.width, 90, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getConfig());
        _this.addAt(_this.mBg, 0);
        _this.setSize(_this.mBg.width, _this.mBg.height);
        _this.mRoleIcon = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_4__["DynamicImage"](_this.mScene, -_this.mBg.width / 2, 0);
        _this.nameTF = _this.mScene.make.text({
            align: "left",
            style: { font: _utils_font__WEBPACK_IMPORTED_MODULE_3__[/* Font */ "a"].YAHEI_20_BOLD, fill: "#FFCC00" }
        }, false);
        _this.statusTF = _this.mScene.make.text({
            align: "left",
            style: { font: "14px YaHei" }
        }, false);
        if (iconResList) {
            var len = iconResList.length;
            var _loop_1 = function (i) {
                var icon = this_1.mScene.make.image(undefined, false);
                var iconCon = this_1.mScene.make.container(undefined, false);
                var bg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](this_1.mScene, 0, 0, 60, 60, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getConfig());
                var txt = this_1.mScene.make.text(undefined, false);
                var friendIconData = iconResList[i];
                txt.setText(friendIconData.name);
                icon.setTexture(friendIconData.res);
                icon.scaleX = icon.scaleY = .8;
                iconCon.add(icon);
                iconCon.add(txt);
                iconCon.addAt(bg, 0);
                iconCon.setSize(60, 60);
                iconCon.setInteractive(new phaser__WEBPACK_IMPORTED_MODULE_5__["Geom"].Rectangle(0, 0, 60, 60), Phaser.Geom.Rectangle.Contains);
                iconCon.on("pointerdown", function () {
                    _this.mPanel.btnScaleHandler(iconCon);
                }, this_1);
                icon.y = -bg.height / 2 + icon.height / 2;
                txt.x = -txt.width >> 1;
                txt.y = iconCon.height / 2 - txt.height - 4;
                // iconCon.x = this.width / 2 - (i + 1) * 70 - 20;
                this_1.add(iconCon);
                this_1.iconResList.push(iconCon);
            };
            var this_1 = this;
            for (var i = 0; i < len; i++) {
                _loop_1(i);
            }
        }
        _this.add(_this.mRoleIcon);
        _this.add(_this.nameTF);
        _this.add(_this.statusTF);
        _this.refreshUIPos();
        return _this;
    }
    FriendItem.prototype.resize = function () {
        if (this.mWorld.game.device.os.desktop)
            return;
        this.mBg.resize(this.mPanel.width * .95, 90);
        this.setSize(this.mBg.width, this.mBg.height);
        this.addAt(this.mBg, 0);
        this.refreshUIPos();
    };
    FriendItem.prototype.getView = function () {
        return this;
    };
    FriendItem.prototype.dataChange = function (data) {
        var _this = this;
        var lv = data.level || 0;
        var id = data.id || "1";
        var name = data.nickname || "test";
        this.nameTF.setText(name);
        this.mRoleIcon.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getOsdRes(data.avatar || "1"), this, function () {
            _this.mRoleIcon.scaleX = _this.height / _this.mRoleIcon.width;
            _this.mRoleIcon.scaleY = _this.height / _this.mRoleIcon.height;
        }, function () {
            _this.mRoleIcon.scaleX = _this.mRoleIcon.scaleY = 1;
        });
        this.mRoleIcon.x = -this.width / 2 + 64;
        this.nameTF.x = this.mRoleIcon.x + 54;
        this.index = data.index;
    };
    FriendItem.prototype.destory = function () {
        this.index = 0;
        if (this.nameTF) {
            this.nameTF.destroy(true);
        }
        if (this.statusTF) {
            this.statusTF.destroy(true);
        }
        if (this.mRoleIcon) {
            this.mRoleIcon.destroy(true);
        }
        this.nameTF = null;
        this.statusTF = null;
        this.mPanel = null;
        this.mWorld = null;
        _super.prototype.destroy.call(this, true);
    };
    FriendItem.prototype.refreshUIPos = function () {
        this.mRoleIcon.x = -this.width / 2 + 64;
        this.nameTF.x = this.mRoleIcon.x + 54;
        this.mRoleIcon.y = 0;
        this.nameTF.y = 10 - this.mBg.height / 2;
        this.statusTF.x = this.nameTF.x;
        if (this.iconResList) {
            var len = this.iconResList.length;
            for (var i = 0; i < len; i++) {
                var iconCon = this.iconResList[i];
                iconCon.x = this.width / 2 - (i + 1) * 70 + 20;
            }
        }
    };
    return FriendItem;
}(Phaser.GameObjects.Container));



/***/ }),
/* 228 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RankPanel", function() { return RankPanel; });
/* harmony import */ var _BasicRankPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(173);
/* harmony import */ var _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(121);
/* harmony import */ var _RankMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(156);
/* harmony import */ var _ui_mediatorType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(122);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var RankPanel = /** @class */ (function (_super) {
    __extends(RankPanel, _super);
    function RankPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mCurrentIndex = 0;
        return _this;
    }
    RankPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        if (!this.mWorld.game.device.os.desktop) {
            this.mClsBtn.on("pointerup", this.closeHandler, this);
        }
        else {
            this.mZoonInBtn.on("pointerup", this.onZoomHandler, this);
        }
    };
    RankPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        if (!this.mWorld.game.device.os.desktop) {
            this.mClsBtn.off("pointerup", this.closeHandler, this);
        }
        else {
            this.mZoonInBtn.off("pointerup", this.onZoomHandler, this);
        }
    };
    RankPanel.prototype.resize = function (wid, hei) {
        if (wid === void 0) { wid = 0; }
        if (hei === void 0) { hei = 0; }
        if (!this.mWorld) {
            return;
        }
        var size = this.mWorld.getSize();
        if (this.mWorld.game.device.os.desktop) {
            this.x = size.width - this.width / 2;
            this.y = this.height / 2 + 10;
        }
        else {
            if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
                this.x = size.width + wid >> 1;
                this.y = size.height + hei >> 1;
            }
            else {
                this.x = size.width + wid >> 1;
                this.y = size.height + hei >> 1;
            }
        }
        this.scale = this.mWorld.uiScale;
    };
    RankPanel.prototype.tweenView = function (show) {
        if (!this.scene)
            return;
        var baseY = this.height / 2 + 10;
        var toY = show === true ? baseY : baseY - 300;
        var toAlpha = show === true ? 1 : 0;
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Cubic.Out",
            props: {
                y: { value: toY },
                alpha: { value: toAlpha },
            },
        });
    };
    RankPanel.prototype.destroy = function () {
        if (this.mZoonInBtn)
            this.mZoonInBtn.destroy(true);
        this.mZoonInBtn = null;
        this.mCurrentIndex = 0;
        _super.prototype.destroy.call(this);
    };
    RankPanel.prototype.init = function () {
        _super.prototype.init.call(this);
        if (!this.mWorld.game.device.os.desktop) {
            this.mClsBtn = new _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_1__["IconBtn"](this.scene, this.mWorld, {
                key: _ui_mediatorType__WEBPACK_IMPORTED_MODULE_3__["UIMediatorType"].Close_Btn, bgResKey: "clsBtn", bgTextures: ["btn_normal", "btn_over", "btn_click"],
                iconResKey: "", iconTexture: "", scale: 1, pngUrl: "ui/common/common_clsBtn.png", jsonUrl: "ui/common/common_clsBtn.json"
            });
            this.mClsBtn.x = this.width / 2 - 35;
            this.mClsBtn.y = -this.height / 2;
            this.mClsBtn.scaleX = this.mClsBtn.scaleY = 2;
            // this.mClsBtn.on("pointerup", this.closeHandler, this);
            this.add(this.mClsBtn);
        }
        else {
            this.mZoonInBtn = this.scene.make.image({
                x: 0,
                y: this.height / 2 - 10,
                key: "rank_atlas",
                frame: "arrow.png"
            }, false);
            this.add(this.mZoonInBtn);
            this.mZoonInBtn.setInteractive();
            // this.mZoonInBtn.on("pointerup", this.onZoomHandler, this);
        }
        this.resize();
    };
    RankPanel.prototype.tweenComplete = function (show) {
        _super.prototype.tweenComplete.call(this, show);
        if (show) {
            var items = this.getData("data");
            if (items)
                this.addItem(items);
        }
    };
    RankPanel.prototype.closeHandler = function () {
        var med = this.mWorld.uiManager.getMediator(_RankMediator__WEBPACK_IMPORTED_MODULE_2__["RankMediator"].NAME);
        med.hide();
    };
    RankPanel.prototype.onZoomHandler = function () {
        this.currentSizeIndex = this.mCurrentIndex === 0 ? 1 : 0;
    };
    Object.defineProperty(RankPanel.prototype, "currentSizeIndex", {
        set: function (value) {
            if (this.mCurrentIndex === value) {
                return;
            }
            this.mCurrentIndex = value;
            var h = this.mCurrentIndex === 1 ? 30 : this.height;
            var zoonBtnY = this.mCurrentIndex === 1 ? -this.height / 2 + 20 : this.height / 2 - 10;
            var bgY = this.mCurrentIndex === 1 ? -this.height / 2 + 15 : 0;
            this.mBackground.resize(328, h);
            this.mZoonInBtn.angle = this.mCurrentIndex === 1 ? 180 : 0;
            if (h > 300) {
                if (this.parentContainer)
                    this.add(this.mChildContainer);
            }
            else {
                this.remove(this.mChildContainer);
            }
            // this.mBackground.x = this.mBackground.width >> 1;
            // this.mBackground.y = this.mBackground.height >> 1;
            this.mBackground.y = bgY;
            this.mZoonInBtn.y = zoonBtnY;
        },
        enumerable: false,
        configurable: true
    });
    return RankPanel;
}(_BasicRankPanel__WEBPACK_IMPORTED_MODULE_0__["BasicRankPanel"]));



/***/ }),
/* 229 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RightBtnGroup", function() { return RightBtnGroup; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _icon_btn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(121);
/* harmony import */ var _bag_item_slot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(132);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _bag_bagView_bagMediator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(131);
/* harmony import */ var _bottomGroup_bottom_mediator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(175);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








var RightBtnGroup = /** @class */ (function (_super) {
    __extends(RightBtnGroup, _super);
    function RightBtnGroup(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mBtnY = 0;
        _this.mWid = 0;
        _this.mHei = 0;
        _this.disInteractive();
        return _this;
    }
    RightBtnGroup.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
    };
    RightBtnGroup.prototype.resize = function () {
        var size = this.mWorld.getSize();
        this.refreshSlot();
        var bottomMed = this.mWorld.uiManager.getMediator(_bottomGroup_bottom_mediator__WEBPACK_IMPORTED_MODULE_7__["BottomMediator"].NAME);
        var padHei = !bottomMed ? this.height / 2 : bottomMed.getView().height;
        this.scale = this.mWorld.uiScale;
        if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
            var mPackage = this.mWorld.roomManager.currentRoom.playerManager.actor.package;
            this.y = size.height - (this.height) * this.mWorld.uiScale;
            this.x = size.width - (this.width / 2) * this.mWorld.uiScale;
            if (mPackage && mPackage.items && mPackage.items.length > 0) {
                this.y = size.height - (this.height / 2) * this.mWorld.uiScale;
                this.x = size.width - (this.width / 4) * this.mWorld.uiScale;
            }
            else {
                this.y = size.height - (this.height) * this.mWorld.uiScale;
                this.x = size.width - (this.width / 2) * this.mWorld.uiScale;
            }
        }
        else if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.PORTRAIT) {
            this.y = size.height - (padHei + this.height / 2) * this.mWorld.uiScale;
            this.x = size.width - (this.width / 2) * this.mWorld.uiScale;
        }
    };
    RightBtnGroup.prototype.hide = function () {
        _super.prototype.hide.call(this);
        this.destroy();
    };
    RightBtnGroup.prototype.destroy = function () {
        this.mBtnY = 0;
        this.mWid = 0;
        this.mHei = 0;
        if (this.mBagSlotList) {
            this.mBagSlotList.forEach(function (itemslot) {
                if (itemslot) {
                    itemslot.destroy();
                    itemslot = null;
                }
            });
        }
        this.mResKey = "";
        this.mBagSlotList = null;
        _super.prototype.destroy.call(this);
    };
    RightBtnGroup.prototype.tweenView = function (show) {
        var size = this.mWorld.getSize();
        var baseX;
        if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
            var mPackage = this.mWorld.roomManager.currentRoom.playerManager.actor.package;
            if (mPackage && mPackage.items && mPackage.items.length > 0) {
                baseX = size.width - (this.width / 4) * this.mWorld.uiScale;
            }
            else {
                baseX = size.width - (this.width / 2) * this.mWorld.uiScale;
            }
        }
        else {
            baseX = size.width - (this.width / 2) * this.mWorld.uiScale;
        }
        var toX = show === true ? baseX : baseX + this.width;
        var toAlpha = show === true ? 1 : 0;
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Linear",
            props: {
                x: { value: toX },
                alpha: { value: toAlpha },
            },
        });
    };
    RightBtnGroup.prototype.refreshSlot = function () {
        if (!this.handBtn)
            return;
        this.mHei = this.handBtn.height;
        if (this.mBagSlotList) {
            this.mBagSlotList.forEach(function (itemslot) {
                if (itemslot) {
                    itemslot.getView().visible = false;
                }
            });
            // =============获取角色背包前几位物品
            var mPackage = this.mWorld.roomManager.currentRoom.playerManager.actor.package;
            if (mPackage && mPackage.items) {
                var items = mPackage.items;
                var len = items.length > RightBtnGroup.SlotMaxCount ? RightBtnGroup.SlotMaxCount : items.length;
                var posX = 0;
                var posY = 0;
                var radio = 110;
                var slotSize = 56;
                var baseAngle = 38;
                for (var i = 0; i < len; i++) {
                    if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
                        var angle = (baseAngle * (i + 2) / -180) * Math.PI;
                        posX = radio * Math.cos(angle);
                        posY = this.handBtn.y + radio * Math.sin(angle);
                        if (i === len - 1) {
                            this.mWid = radio + this.handBtn.width + 30 + slotSize / 2;
                            this.mHei = radio + this.handBtn.height + 30 + slotSize / 2;
                        }
                    }
                    else {
                        posX = 0;
                        posY = -slotSize * (i + 1) - 20 * i;
                        if (i === len - 1) {
                            this.mWid = this.handBtn.width;
                            this.mHei = slotSize * (len - 1) + 5 * (len - 2) + this.handBtn.height + 5;
                        }
                    }
                    var itemSlot = this.mBagSlotList[i];
                    itemSlot.getView().visible = true;
                    itemSlot.toolTipCon.x = posX;
                    itemSlot.toolTipCon.y = posY;
                    itemSlot.dataChange(items[i]);
                }
            }
        }
        this.setSize(this.mWid, this.mHei);
    };
    RightBtnGroup.prototype.tweenComplete = function (show) {
        this.resize();
        _super.prototype.tweenComplete.call(this, show);
    };
    RightBtnGroup.prototype.preload = function () {
        this.mResKey = "baseView";
        this.scene.load.atlas(this.mResKey, _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.json"));
        _super.prototype.preload.call(this);
    };
    RightBtnGroup.prototype.init = function () {
        var _this = this;
        var size = this.mWorld.getSize();
        this.mWorld.uiManager.getUILayerManager().addToUILayer(this);
        this.mBtnY = 0;
        this.handBtn = new _icon_btn__WEBPACK_IMPORTED_MODULE_1__["IconBtn"](this.scene, this.mWorld, {
            key: _bag_bagView_bagMediator__WEBPACK_IMPORTED_MODULE_6__["BagMediator"].NAME, bgResKey: this.mResKey, bgTextures: ["btnGroup_bg.png"],
            iconResKey: this.mResKey, iconTexture: "btnGroup_hand.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
        });
        this.handBtn.x = 0;
        this.handBtn.y = this.mBtnY + this.handBtn.height / 2;
        this.handBtn.setClick(function () {
            // f键值为70，点击该按钮交互
            var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_5__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_GATEWAY_KEYBOARD_DOWN);
            var content = pkt.content;
            content.keyCodes = [70];
            _this.mWorld.connection.send(pkt);
            // ========临时调试用
            // const mainUIMed: MainUIMediator = this.mWorld.uiManager.getMediator(MainUIMediator.NAME) as MainUIMediator;
            // mainUIMed.tweenView(false);
            // this.mWorld.uiManager.getMediator(BagMediator.NAME).show();
        });
        this.add(this.handBtn);
        this.mWid = this.handBtn.width;
        this.mHei = this.handBtn.height;
        this.initBagSlotData();
        _super.prototype.init.call(this);
    };
    RightBtnGroup.prototype.initBagSlotData = function () {
        this.mBagSlotList = [];
        var size = this.mWorld.getSize();
        var len = RightBtnGroup.SlotMaxCount;
        var posX = 0;
        var posY = 0;
        for (var i = 0; i < len; i++) {
            var itemSlot = new _bag_item_slot__WEBPACK_IMPORTED_MODULE_2__["ItemSlot"](this.scene, this.mWorld, this, posX, posY, this.mResKey, _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.json"), "btnGroup_bg.png");
            itemSlot.createUI();
            itemSlot.getBg().scaleX = itemSlot.getBg().scaleY = 0.8;
            itemSlot.getIcon().scaleX = itemSlot.getIcon().scaleY = 1.2;
            this.mBagSlotList.push(itemSlot);
            this.add(itemSlot.toolTipCon);
            itemSlot.getView().visible = false;
        }
        this.resize();
    };
    RightBtnGroup.SlotMaxCount = 4;
    return RightBtnGroup;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 230 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BottomBtnGroup", function() { return BottomBtnGroup; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _icon_btn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(121);
/* harmony import */ var _ui_mediatorType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(122);
/* harmony import */ var _chat_chat_mediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(149);
/* harmony import */ var _components_check_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(169);
/* harmony import */ var _bag_bagView_bagMediator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(131);
/* harmony import */ var _rightGroup_right_mediator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(174);
/* harmony import */ var _ElementStorage_ElementStorageMediator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(176);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var BottomBtnGroup = /** @class */ (function (_super) {
    __extends(BottomBtnGroup, _super);
    // private mOrientation: Phaser.Scale.Orientation;
    function BottomBtnGroup(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mExpandBoo = false;
        _this.tmpWid = 0;
        _this.tmpHei = 0;
        _this.disInteractive();
        return _this;
    }
    BottomBtnGroup.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
    };
    BottomBtnGroup.prototype.addListen = function () {
        this.mChatContainer.on("pointerdown", this.chatHandler, this);
        this.mVoiceBtn.on("selected", this.onSelectedVoiceHandler, this);
        this.mMicBtn.on("selected", this.onSelectedMicHandler, this);
    };
    BottomBtnGroup.prototype.removeListen = function () {
        this.mChatContainer.off("pointerdown", this.chatHandler, this);
        this.mVoiceBtn.off("selected", this.onSelectedVoiceHandler, this);
        this.mMicBtn.off("selected", this.onSelectedMicHandler, this);
    };
    BottomBtnGroup.prototype.resize = function () {
        var size = this.mWorld.getSize();
        this.scale = this.mWorld.uiScale;
        if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
            this.x = size.width >> 1;
            this.mVoiceBtn.x = this.mVoiceBtn.width * this.mMicBtn.scaleX - this.mChatContainer.width / 2;
            this.mVoiceBtn.y = -this.mVoiceBtn.height / 2 * this.mVoiceBtn.scaleY - this.mChatContainer.height / 2;
            this.mMicBtn.x = this.mVoiceBtn.x + this.mVoiceBtn.width * this.mMicBtn.scaleX + 20;
            this.mMicBtn.y = this.mVoiceBtn.y;
        }
        else if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.PORTRAIT) {
            this.x = size.width - (this.width / 2 + 40) * this.mWorld.uiScale;
            this.mVoiceBtn.x = this.mVoiceBtn.width - this.mChatContainer.width / 2;
            this.mVoiceBtn.y = this.mChatContainer.y - this.mChatContainer.height / 2 - this.mVoiceBtn.height / 2 * this.mMicBtn.scaleX;
            this.mMicBtn.x = this.mVoiceBtn.x + this.mMicBtn.width * this.mMicBtn.scaleX + 20;
            this.mMicBtn.y = this.mVoiceBtn.y;
        }
        this.y = size.height - 120 * this.mWorld.uiScale;
        var rightMediator = this.mWorld.uiManager.getMediator(_rightGroup_right_mediator__WEBPACK_IMPORTED_MODULE_7__["RightMediator"].NAME);
        var rightBtnGroup;
        if (rightMediator) {
            rightBtnGroup = rightMediator.getView();
        }
        if (rightMediator) {
            if (this.mWorld.inputManager) {
                var joyStick = this.mWorld.inputManager;
                joyStick.resize();
            }
            if (rightBtnGroup)
                rightBtnGroup.resize();
        }
        this.mChatText.setStyle({ "fontSize": Math.floor(30 * this.mWorld.uiScale) });
    };
    BottomBtnGroup.prototype.tweenView = function (show) {
        var size = this.mWorld.getSize();
        var baseY = size.height - 120 * this.mWorld.uiScale;
        var toY = show === true ? baseY : baseY + 50;
        var toAlpha = show === true ? 1 : 0;
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Linear",
            props: {
                y: { value: toY },
                alpha: { value: toAlpha },
            },
        });
    };
    BottomBtnGroup.prototype.preload = function () {
        if (!this.scene) {
            return;
        }
        this.mResKey = "baseView";
        this.scene.load.atlas("chat_atlas", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/chat/chat_atlas.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/chat/chat_atlas.json"));
        this.scene.load.atlas(this.mResKey, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.json"));
        _super.prototype.preload.call(this);
    };
    BottomBtnGroup.prototype.init = function () {
        var _this = this;
        this.mBtnList = [];
        var size = this.mWorld.getSize();
        this.mWorld.uiManager.getUILayerManager().addToUILayer(this);
        var chatBgWidth = 430;
        var chatBgHeight = 230;
        this.mChatContainer = this.scene.make.container(undefined, false);
        this.mChatBg = this.scene.make.image(undefined, false);
        this.mChatBg.setTexture(this.mResKey, "btnGroup_chatBg.png");
        this.mChatContainer.addAt(this.mChatBg, 0);
        this.mChatText = this.scene.make.text({
            width: chatBgWidth,
            height: chatBgHeight,
            style: { font: "bold YaHei", color: "#666666", fontSize: Math.floor(30 * this.mWorld.uiScale), wordWrap: { width: 430, useAdvancedWrap: true } }
        }, false);
        this.mChatText.setText("点击窗口进入聊天界面");
        this.mChatContainer.addAt(this.mChatText, 1);
        this.mChatContainer.setSize(chatBgWidth, chatBgHeight);
        this.mChatText.x = -this.mChatContainer.width >> 1;
        this.mChatText.y = -this.mChatContainer.height >> 1;
        this.mChatContainer.setInteractive(new Phaser.Geom.Rectangle(0, 0, chatBgWidth, chatBgHeight), Phaser.Geom.Rectangle.Contains);
        this.add(this.mChatContainer);
        this.tmpWid += this.mChatContainer.width;
        this.tmpHei += this.mChatContainer.height;
        this.mTurnBtn = new _icon_btn__WEBPACK_IMPORTED_MODULE_2__["IconBtn"](this.scene, this.mWorld, {
            key: _ui_mediatorType__WEBPACK_IMPORTED_MODULE_3__["UIMediatorType"].Turn_Btn_Bottom, bgResKey: this.mResKey, bgTextures: ["btnGroup_white_normal.png", "btnGroup_white_light.png", "btnGroup_white_select.png"],
            iconResKey: this.mResKey, iconTexture: "btnGroup_bottom_expand.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
        });
        this.mTurnBtn.x = (this.tmpWid >> 1) + 30;
        this.mTurnBtn.y = this.tmpHei - this.mTurnBtn.height >> 1;
        this.mTurnBtn.setPos(this.mTurnBtn.x, this.mTurnBtn.y);
        this.add(this.mTurnBtn);
        this.mBagBtn = new _icon_btn__WEBPACK_IMPORTED_MODULE_2__["IconBtn"](this.scene, this.mWorld, {
            key: _bag_bagView_bagMediator__WEBPACK_IMPORTED_MODULE_6__["BagMediator"].NAME, bgResKey: this.mResKey, bgTextures: ["btnGroup_yellow_normal.png", "btnGroup_yellow_light.png", "btnGroup_yellow_select.png"],
            iconResKey: this.mResKey, iconTexture: "btnGroup_bag_icon.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
        });
        this.mBagBtn.x = this.mTurnBtn.x;
        this.mBagBtn.y = this.mTurnBtn.y - this.mTurnBtn.height / 2 - this.mBagBtn.height / 2 - 10;
        this.mBagBtn.setPos(this.mBagBtn.x, this.mBagBtn.y);
        this.tmpWid += this.mBagBtn.width + 30;
        this.add(this.mBagBtn);
        this.mBtnList.push(this.mBagBtn);
        this.mTurnBtn.setClick(function () {
            _this.turnHandler();
        });
        this.mBagBtn.setClick(function () {
            _this.bagHandler();
        });
        this.mMarketBag = new _icon_btn__WEBPACK_IMPORTED_MODULE_2__["IconBtn"](this.scene, this.mWorld, {
            key: _bag_bagView_bagMediator__WEBPACK_IMPORTED_MODULE_6__["BagMediator"].NAME, bgResKey: this.mResKey, bgTextures: ["btnGroup_yellow_normal.png", "btnGroup_yellow_light.png", "btnGroup_yellow_select.png"],
            iconResKey: this.mResKey, iconTexture: "btnGroup_bag_icon.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
        });
        this.mMarketBag.x = this.mTurnBtn.x;
        this.mMarketBag.y = this.mTurnBtn.y - this.mTurnBtn.height / 2 - this.mBagBtn.height / 2 - 60 - this.mMarketBag.height / 2;
        this.mMarketBag.setPos(this.mMarketBag.x, this.mBagBtn.y);
        this.tmpWid += this.mMarketBag.width + 30;
        this.add(this.mMarketBag);
        this.setSize(this.tmpWid, this.tmpHei);
        this.mBtnList.push(this.mMarketBag);
        this.mMarketBag.setClick(function () {
            _this.marketBagHandler();
        });
        this.mVoiceBtn = new _components_check_button__WEBPACK_IMPORTED_MODULE_5__["CheckButton"](this.scene, 0, 0, "chat_atlas", "voice_normal.png", "voice_selected.png");
        this.mVoiceBtn.x = this.width - 60 * this.mWorld.uiScale;
        this.mVoiceBtn.y = size.height - this.height;
        this.add(this.mVoiceBtn);
        this.mMicBtn = new _components_check_button__WEBPACK_IMPORTED_MODULE_5__["CheckButton"](this.scene, 0, 0, "chat_atlas", "mic_normal.png", "mic_selected.png");
        this.mMicBtn.x = this.width - 20 * this.mWorld.uiScale;
        this.mMicBtn.y = size.height - this.height;
        this.add(this.mMicBtn);
        this.mVoiceBtn.scaleX = this.mVoiceBtn.scaleY = 1.5;
        this.mMicBtn.scaleX = this.mMicBtn.scaleY = 1.5;
        this.setSize(this.tmpWid, this.tmpHei);
        this.resize();
        _super.prototype.init.call(this);
    };
    BottomBtnGroup.prototype.tweenComplete = function (show) {
        this.resize();
        _super.prototype.tweenComplete.call(this, show);
    };
    BottomBtnGroup.prototype.onSelectedVoiceHandler = function (val) {
        if (val === false) {
            this.mMicBtn.selected = false;
        }
        this.emit("selectedVoice", val);
    };
    BottomBtnGroup.prototype.onSelectedMicHandler = function (val) {
        if (this.mVoiceBtn.selected === false) {
            this.mMicBtn.selected = false;
            return;
        }
        this.mMicBtn.selected = val;
        this.emit("selectedMic", val);
    };
    BottomBtnGroup.prototype.turnHandler = function () {
        var _this = this;
        // const med: MainUIMediator = this.mWorld.uiManager.getMediator(MainUIMediator.NAME) as MainUIMediator;
        // (med.getView() as MainUIMobile).getTopView().removeBtn({ medKey: "RankMediator" });
        // return;
        this.mVoiceBtn.visible = this.mExpandBoo;
        this.mMicBtn.visible = this.mExpandBoo;
        var easeType = this.mExpandBoo ? "Sine.easeIn" : "Sine.easeOut";
        if (this.mChatContainer && this.mChatContainer.parentContainer) {
            var toScaleX = this.mExpandBoo ? 1 : 0;
            var toScaleY = this.mExpandBoo ? 1 : 0;
            this.scene.tweens.add({
                targets: this.mChatContainer,
                duration: 300,
                ease: easeType,
                props: {
                    scaleX: { value: toScaleX },
                    scaleY: { value: toScaleY }
                }
            });
        }
        if (!this.mBtnList || this.mBtnList.length < 1) {
            this.mExpandBoo = !this.mExpandBoo;
            return;
        }
        var len = this.mBtnList.length;
        var rightMediator = this.mWorld.uiManager.getMediator(_rightGroup_right_mediator__WEBPACK_IMPORTED_MODULE_7__["RightMediator"].NAME);
        var rightBtnGroup;
        if (rightMediator) {
            rightBtnGroup = rightMediator.getView();
        }
        var _loop_1 = function (i) {
            var btn = this_1.mBtnList[i];
            // const angle: number = (90 * (i + 2) / -180) * Math.PI;
            var toX = this_1.mExpandBoo ? btn.getPos().x : this_1.mChatContainer.width / 2 - Math.abs(btn.getPos().y) - 20;
            var toY = this_1.mExpandBoo ? btn.getPos().y : this_1.mTurnBtn.y;
            this_1.scene.tweens.add({
                targets: btn,
                duration: 300,
                ease: easeType,
                props: {
                    x: { value: toX },
                    y: { value: toY }
                },
                onComplete: function (tween, targets, ship) {
                    if (i === len - 1) {
                        _this.mExpandBoo = !_this.mExpandBoo;
                        if (!_this.mExpandBoo) {
                            _this.setSize(_this.tmpWid, _this.tmpHei);
                        }
                        else {
                            _this.setSize(_this.tmpWid, btn.height * 2);
                        }
                        if (rightMediator) {
                            if (_this.mWorld.inputManager) {
                                var joyStick = _this.mWorld.inputManager;
                                joyStick.resize();
                            }
                            if (rightBtnGroup)
                                rightBtnGroup.resize();
                        }
                    }
                },
                onCompleteParams: [this_1]
            });
        };
        var this_1 = this;
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
    };
    BottomBtnGroup.prototype.chatHandler = function () {
        // ======================show chatView
        var chatMed = this.mWorld.uiManager.getMediator(_chat_chat_mediator__WEBPACK_IMPORTED_MODULE_4__["ChatMediator"].NAME);
        if (chatMed === undefined) {
            chatMed = new _chat_chat_mediator__WEBPACK_IMPORTED_MODULE_4__["ChatMediator"](this.mWorld, this.scene);
            this.mWorld.uiManager.setMediator(_chat_chat_mediator__WEBPACK_IMPORTED_MODULE_4__["ChatMediator"].NAME, chatMed);
        }
        var showBoo = chatMed.isShow();
        if (showBoo) {
            // chatMed.hide();
        }
        else {
            chatMed.show();
        }
        // =====================tween out/in baseView
        this.mWorld.uiManager.baseFaceTween(false);
    };
    BottomBtnGroup.prototype.bagHandler = function () {
        // this.mWorld.closeGame();
        this.mWorld.uiManager.getMediator(_ui_mediatorType__WEBPACK_IMPORTED_MODULE_3__["UIMediatorType"].BagMediator).show();
        // =============index = 0 为背包按钮
    };
    BottomBtnGroup.prototype.marketBagHandler = function () {
        // test code
        var mediator = this.mWorld.uiManager.getMediator(_ElementStorage_ElementStorageMediator__WEBPACK_IMPORTED_MODULE_8__["ElementStorageMediator"].name);
        if (!mediator) {
            mediator = new _ElementStorage_ElementStorageMediator__WEBPACK_IMPORTED_MODULE_8__["ElementStorageMediator"](this.mWorld.uiManager.getUILayerManager(), this.scene, this.mWorld);
            this.mWorld.uiManager.setMediator(_ElementStorage_ElementStorageMediator__WEBPACK_IMPORTED_MODULE_8__["ElementStorageMediator"].name, mediator);
        }
        if (mediator.isShow()) {
            mediator.hide();
        }
        else {
            mediator.show(true);
        }
    };
    return BottomBtnGroup;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 231 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementStoragePanel", function() { return ElementStoragePanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(110);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(104);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(118);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(114);
/* harmony import */ var _item_Item__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(232);
/* harmony import */ var _ElementStorageMediator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(176);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var ElementStoragePanel = /** @class */ (function (_super) {
    __extends(ElementStoragePanel, _super);
    function ElementStoragePanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mExpaned = true;
        _this.mItemNum = 32;
        _this.setTween(false);
        _this.dpr /= 2;
        return _this;
    }
    ElementStoragePanel.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        if (this.mInitialized) {
            this.setPackageNum(1);
        }
    };
    ElementStoragePanel.prototype.resize = function (oriention) {
        var size = this.mWorld.getSize();
        this.scale = this.dpr;
        if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
            this.setSize(683 >> 1, 901 >> 1);
            this.x = size.width - (this.width * this.dpr) - 10;
            this.y = size.height - this.height * this.dpr >> 1;
            this.mBackground.resize(this.width, this.height);
            this.mBackground.x = this.mBackground.width >> 1;
            this.mBackground.y = this.mBackground.height >> 1;
            this.mBorder.resize(655 >> 1, 847 >> 1);
            this.mBorder.x = 7 + (this.mBorder.width >> 1);
            this.mBorder.y = 19 + (this.mBorder.height >> 1);
            this.mSearchInput.x = 40 + 105;
            this.mSearchInput.y = 40;
            this.mDragBtn.x = -this.mDragBtn.height;
            this.mDragBtn.y = this.height >> 1;
            // for (let i = 0; i < this.mTabs.length; i++) {
            //     this.mTabs[i].x = 280;
            //     this.mTabs[i].y = 60 + i * this.mTabs[i].height + 10;
            // }
            var len = this.mProps.length;
            for (var i = 0; i < len; i++) {
                // this.mProps[i].setPosition((i % 8) * 60 + 20, Math.ceil(i / 8) * 60 + 80);
                this.mProps[i].x = (i % 4) * 60 + 20;
                this.mProps[i].y = Math.floor(i / 4) * 60 + 80;
            }
        }
        else {
            this.setSize(510, 329);
            // this.mBackground.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.width, this.height));
            // this.scale = this.mWorld.uiScale;
            this.mBackground.resize(this.width, this.height);
            this.mBackground.x = this.mBackground.width >> 1;
            this.mBackground.y = this.mBackground.height >> 1;
            this.mBorder.resize(496, 303);
            this.mBorder.x = 7 + (this.mBorder.width >> 1);
            this.mBorder.y = 19 + (this.mBorder.height >> 1);
            this.mSearchInput.x = 270;
            this.mSearchInput.y = 33;
            this.x = (size.width - this.width * this.dpr >> 1);
            this.y = size.height - this.height * this.dpr - 10;
            this.mDragBtn.x = this.width >> 1;
            this.mDragBtn.y = -this.mDragBtn.height >> 1;
            // for (let i = 0; i < this.mTabs.length; i++) {
            //     this.mTabs[i].x = 24 + i * this.mTabs[i].width + 10;
            //     this.mTabs[i].y = 33;
            // }
            var len = this.mProps.length;
            for (var i = 0; i < len; i++) {
                // this.mProps[i].setPosition((i % 8) * 60 + 20, Math.ceil(i / 8) * 60 + 80);
                this.mProps[i].x = (i % 8) * 60 + 20;
                this.mProps[i].y = Math.floor(i / 8) * 60 + 80;
            }
        }
        this.mPrePageBtn.y = this.height >> 1;
        this.mNextPageBtn.x = this.width;
        this.mNextPageBtn.y = this.height >> 1;
        this.mBackground.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.width, this.height), Phaser.Geom.Rectangle.Contains);
        // this.setScale(this.mWorld.uiScale, this.mWorld.uiScale);
        // this.scaleX = this.scaleY = 5;
    };
    ElementStoragePanel.prototype.addListen = function () {
        _super.prototype.addListen.call(this);
        if (this.mBackground)
            this.mBackground.on("pointerout", this.onPointerOutHandler, this);
        if (this.mDragBtn)
            this.mDragBtn.on("pointerup", this.switchExpand, this);
        if (this.mPrePageBtn)
            this.mPrePageBtn.on("pointerup", this.onPrePageHandler, this);
        if (this.mNextPageBtn)
            this.mNextPageBtn.on("pointerup", this.onNextPageHandler, this);
        if (this.mCloseBtn)
            this.mCloseBtn.on("pointerup", this.onCloseHandler, this);
        if (this.scene) {
            this.scene.input.on("dragstart", this.onDragStartHandler, this);
            this.scene.input.on("dragend", this.onDragEndHandler, this);
            this.scene.input.on("drag", this.onDragHandler, this);
        }
    };
    ElementStoragePanel.prototype.removeListen = function () {
        _super.prototype.removeListen.call(this);
        if (this.mBackground)
            this.mBackground.off("pointerout", this.onPointerOutHandler, this);
        if (this.mDragBtn)
            this.mDragBtn.off("pointerup", this.switchExpand, this);
        if (this.mPrePageBtn)
            this.mPrePageBtn.off("pointerup", this.onPrePageHandler, this);
        if (this.mNextPageBtn)
            this.mNextPageBtn.off("pointerup", this.onNextPageHandler, this);
        if (this.mCloseBtn)
            this.mCloseBtn.off("pointerup", this.onCloseHandler, this);
        if (this.scene) {
            this.scene.input.off("dragstart", this.onDragStartHandler, this);
            this.scene.input.off("dragend", this.onDragEndHandler, this);
            this.scene.input.off("drag", this.onDragHandler, this);
        }
    };
    ElementStoragePanel.prototype.setProps = function (data) {
        var items = data.items;
        this.clearItem();
        for (var i = 0; i < items.length; i++) {
            if (i >= this.mProps.length) {
                return;
            }
            this.mProps[i].setProp(items[i]);
        }
    };
    ElementStoragePanel.prototype.expand = function () {
        if (this.mExpaned) {
            return;
        }
        var size = this.mWorld.getSize();
        var props = null;
        if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
            props = { x: size.width - (this.width * this.dpr) - 10 };
        }
        else {
            props = { y: size.height - this.height * this.dpr - 10 };
        }
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Linear",
            props: props
        });
        this.remove(this.mDragBtn);
        this.add([this.mPrePageBtn, this.mNextPageBtn]);
        this.mExpaned = true;
    };
    ElementStoragePanel.prototype.collapse = function () {
        if (!this.mExpaned) {
            return;
        }
        var size = this.mWorld.getSize();
        var props = null;
        if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
            props = { x: size.width };
        }
        else {
            props = { y: size.height };
        }
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Linear",
            props: props
        });
        this.addAt(this.mDragBtn, 0);
        this.remove([this.mPrePageBtn, this.mNextPageBtn]);
        this.mExpaned = false;
    };
    ElementStoragePanel.prototype.destroy = function () {
        if (this.scene) {
            this.scene.input.off("dragstart", this.onDragStartHandler, this);
            this.scene.input.off("dragend", this.onDragEndHandler, this);
            this.scene.input.off("drag", this.onDragHandler, this);
        }
        _super.prototype.destroy.call(this);
    };
    ElementStoragePanel.prototype.preload = function () {
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getPNG());
        this.scene.load.image("button", _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/common/button.png"));
        this.scene.load.image("prop_background", _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/common/prop_background.png"));
        this.scene.load.atlas("slip", _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/bag/slip.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/bag/slip.json"));
        this.mScene.load.atlas("clsBtn", _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/common/common_clsBtn.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getRes("ui/common/common_clsBtn.json"));
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getPNG());
        _super.prototype.preload.call(this);
    };
    ElementStoragePanel.prototype.init = function () {
        this.mBackground = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_1__["NinePatch"](this.scene, 0, 0, this.width, this.height, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getConfig());
        this.mBorder = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_1__["NinePatch"](this.scene, 7, 19, 655 >> 1, 847 >> 1, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getConfig());
        // this.mBackground.setInteractive();
        // TODO 多语言配置
        this.mSearchInput = new _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](this.scene, 40 + 105, 40, 210, 26, {
            type: "input",
            fontSize: "14px",
            color: "#808080",
            placeholder: "输入关键词进行搜索"
        });
        var config = {
            left: 4,
            top: 4,
            right: 4,
            bottom: 4
        };
        this.mDragBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_4__["NinePatchButton"](this.scene, 0, -20, 80, 40, "button", "", "物件容器", config);
        // this.mTabs = [];
        // const button = new NinePatchButton(this.scene, 280, 40, 60, 30, "button", "地块",  config);
        // const button2 = new NinePatchButton(this.scene, 280, 80, 60, 30, "button", "物件",  config);
        // const checkbox = new CheckboxGroup().appendItemAll([button, button2]);
        // checkbox.on("selected", this.onSelectedHandler, this);
        // this.mTabs.push(button);
        // this.mTabs.push(button2);
        this.mPrePageBtn = this.scene.make.sprite({
            key: "slip"
        }, false);
        this.mPrePageBtn.setInteractive();
        this.mNextPageBtn = this.scene.make.sprite({
            key: "slip"
        }, false).setFlipX(true);
        this.mNextPageBtn.setInteractive();
        this.mProps = [];
        this.add([this.mBackground, this.mBorder, this.mSearchInput]);
        for (var i = 0; i < this.mItemNum; i++) {
            var item = new _item_Item__WEBPACK_IMPORTED_MODULE_5__["Item"](this.scene);
            // this.add(item);
            // this.scene.input.setDraggable(item);
            // item.on("click", this.onClick, this);
            this.mProps[i] = item;
        }
        this.add(this.mProps);
        this.add([this.mPrePageBtn, this.mNextPageBtn]);
        // this.mCloseBtn = new IconBtn(this.mScene, this.mWorld, {
        //     key: UIMediatorType.Close_Btn, bgResKey: "clsBtn", bgTextures: ["btn_normal", "btn_over", "btn_click"],
        //     iconResKey: "", iconTexture: "", scale: 1, pngUrl: this.mResPng, jsonUrl: this.mResJson
        // });
        this.mCloseBtn = this.scene.make.image({
            key: "clsBtn",
            frame: "btn_normal"
        }, false).setInteractive().setScale(2);
        this.add(this.mCloseBtn);
        _super.prototype.init.call(this);
        this.resize();
        this.expand();
    };
    ElementStoragePanel.prototype.onPrePageHandler = function () {
        this.setPackageNum(this.mPacgeNum - 1);
    };
    ElementStoragePanel.prototype.onNextPageHandler = function () {
        this.setPackageNum(this.mPacgeNum + 1);
    };
    ElementStoragePanel.prototype.setPackageNum = function (val) {
        this.mPacgeNum = val < 1 ? 1 : val;
        this.emit("queryElement", this.mPacgeNum, 32);
    };
    ElementStoragePanel.prototype.switchExpand = function () {
        this.mExpaned ? this.collapse() : this.expand();
    };
    ElementStoragePanel.prototype.onSelectedHandler = function () {
    };
    ElementStoragePanel.prototype.onClick = function (data) {
        // this.emit("selectedElement", data);
    };
    ElementStoragePanel.prototype.onDragStartHandler = function (pointer, gameobject, dragX, dragY) {
        var item = gameobject.parentContainer;
        if (item instanceof _item_Item__WEBPACK_IMPORTED_MODULE_5__["Item"]) {
            // this.emit("selectedElement", item.prop);
            // gameobject.x = dragX;
            // gameobject.y = dragX;
            this.mDragData = item.prop;
        }
        if (!this.mDragImage) {
            this.mDragImage = this.scene.make.image(undefined, false);
            this.add(this.mDragImage);
        }
        this.mDragImage.x = item.x;
        this.mDragImage.y = item.y;
        this.mDragImage.setTexture(gameobject.texture.key);
        this.mDragging = true;
        // this.mDragImage.texture = gameobject.texture;
        // Logger.getInstance().log("======", pointer, gameobject);
    };
    ElementStoragePanel.prototype.onDragEndHandler = function () {
        if (!this.mDragImage) {
            return;
        }
        this.mDragImage.setTexture(undefined);
        this.mDragging = false;
    };
    ElementStoragePanel.prototype.onDragHandler = function (pointer, gameobject, dragX, dragY) {
        if (!this.mDragImage) {
            return;
        }
        this.mDragImage.x += pointer.x - pointer.prevPosition.x;
        this.mDragImage.y += pointer.y - pointer.prevPosition.y;
    };
    ElementStoragePanel.prototype.onPointerOutHandler = function () {
        if (this.mDragImage && this.mDragging) {
            this.emit("selectedElement", this.mDragData);
            this.mDragImage.setTexture(undefined);
            this.mDragging = false;
        }
    };
    ElementStoragePanel.prototype.clearItem = function () {
        if (!this.mProps)
            return;
        this.mProps.map(function (item) { return item.clear(); });
    };
    ElementStoragePanel.prototype.onCloseHandler = function () {
        var med = this.mWorld.uiManager.getMediator(_ElementStorageMediator__WEBPACK_IMPORTED_MODULE_6__["ElementStorageMediator"].name);
        if (med)
            med.hide();
    };
    return ElementStoragePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 232 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return Item; });
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(113);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item(scene) {
        var _this = _super.call(this, scene) || this;
        var background = scene.make.image({
            key: "prop_background"
        }).setOrigin(0, 0);
        _this.setSize(background.width, background.height);
        _this.add(background);
        _this.mImage = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_0__["DynamicImage"](_this.scene, 0, 0).setOrigin(0, 0);
        _this.add(_this.mImage);
        _this.mCount = scene.make.text(undefined, false);
        _this.mCount.setAlign("right");
        _this.mCount.y = _this.height - 20;
        _this.add(_this.mCount);
        return _this;
    }
    Item.prototype.setProp = function (prop) {
        var _this = this;
        this.mProp = prop;
        if (!this.mCount) {
            return;
        }
        if (prop) {
            this.mImage.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getOsdRes(prop.display.texturePath), this, function () {
                // this.mImage.on("dragstart", this.onPointerUpHandler, this);
                _this.mImage.setInteractive();
                _this.scene.input.setDraggable(_this.mImage);
                var imageScale = 1;
                if (_this.mImage.width > _this.width) {
                    imageScale = _this.width / _this.mImage.width;
                }
                if (_this.mImage.height > _this.height) {
                    imageScale = _this.height / _this.mImage.height;
                }
                _this.mImage.scale = imageScale;
            });
            this.mCount.setText(prop.count > 1 ? prop.count.toString() : "");
            this.mCount.x = this.width - this.mCount.width;
        }
    };
    Item.prototype.clear = function () {
        if (!this.count) {
            return;
        }
        if (!this.mProp) {
            return;
        }
        this.mCount.setText("");
        this.mImage.setTexture(undefined);
        this.mImage.off("pointerup", this.onPointerUpHandler, this);
        this.mProp = undefined;
    };
    Item.prototype.destroy = function () {
        this.clear();
        _super.prototype.destroy.call(this);
    };
    Object.defineProperty(Item.prototype, "prop", {
        get: function () {
            return this.mProp;
        },
        enumerable: false,
        configurable: true
    });
    Item.prototype.onPointerUpHandler = function () {
        this.emit("click", this.mProp);
    };
    return Item;
}(Phaser.GameObjects.Container));



/***/ }),
/* 233 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementStorage", function() { return ElementStorage; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(109);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var ElementStorage = /** @class */ (function (_super) {
    __extends(ElementStorage, _super);
    function ElementStorage($world) {
        var _this = _super.call(this) || this;
        _this.world = $world;
        _this.event = new Phaser.Events.EventEmitter();
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_QUERY_EDIT_PACKAGE, _this.onQueryEditPackageResuleHandler);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_MARKET_QUERY_PACKAGE, _this.onQueryMarketPacketResuleHandler);
        return _this;
    }
    ElementStorage.prototype.register = function () {
        if (!this.world) {
            return;
        }
        this.world.connection.addPacketListener(this);
    };
    ElementStorage.prototype.unregister = function () {
        if (!this.world) {
            return;
        }
        this.world.connection.removePacketListener(this);
        this.event.removeAllListeners();
    };
    ElementStorage.prototype.on = function (event, fn, context) {
        this.event.on(event, fn, context);
    };
    ElementStorage.prototype.off = function (event, fn, context) {
        this.event.off(event, fn, context);
    };
    /**
     * 请求编辑背包
     */
    ElementStorage.prototype.queryPackage = function (page, perPage, nodeType, queryString) {
        if (!this.world) {
            return;
        }
        // const packet = new PBpacket(op_virtual_world.OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_QUERY_EDIT_PACKAGE);
        // const content: op_virtual_world.IOP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_QUERY_EDIT_PACKAGE = packet.content;
        // content.page = page;
        // content.perPage = perPage;
        // content.nodeType = nodeType;
        // content.queryString = queryString;
        // this.world.connection.send(packet);
    };
    ElementStorage.prototype.queryMarketPackage = function (page, perPage, nodeType, queryString) {
        if (!this.world) {
            return;
        }
        // const packet = new PBpacket(op_virtual_world.OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MARKET_QUERY_PACKAGE);
        // const content: op_virtual_world.IOP_CLIENT_REQ_VIRTUAL_WORLD_MARKET_QUERY_PACKAGE = packet.content;
        // content.page = page;
        // content.perPage = perPage;
        // content.nodeType = nodeType;
        // content.queryString = queryString;
        // this.world.connection.send(packet);
    };
    ElementStorage.prototype.destroy = function () {
        this.unregister();
    };
    ElementStorage.prototype.onQueryEditPackageResuleHandler = function (packet) {
        this.event.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].EDIT_MODE_QUERY_PACKAGE, packet.content);
    };
    ElementStorage.prototype.onQueryMarketPacketResuleHandler = function (packet) {
        this.event.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].EDIT_MODE_QUERY_PACKAGE, packet.content);
    };
    return ElementStorage;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 234 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftMediator", function() { return LeftMediator; });
/* harmony import */ var _baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(133);
/* harmony import */ var _left_btn_group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(235);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var LeftMediator = /** @class */ (function (_super) {
    __extends(LeftMediator, _super);
    function LeftMediator(mWorld, scene) {
        return _super.call(this, mWorld, scene) || this;
    }
    LeftMediator.prototype.show = function (param) {
        if (this.mView && this.isShow()) {
            return;
        }
        this.mView = new _left_btn_group__WEBPACK_IMPORTED_MODULE_1__["LeftBtnGroup"](this.mScene, this.world);
        this.mView.show(param);
        _super.prototype.show.call(this, param);
    };
    LeftMediator.NAME = "LeftMediator";
    return LeftMediator;
}(_baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__["BaseFaceMediator"]));



/***/ }),
/* 235 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeftBtnGroup", function() { return LeftBtnGroup; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _icon_select_btn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(236);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var LeftBtnGroup = /** @class */ (function (_super) {
    __extends(LeftBtnGroup, _super);
    function LeftBtnGroup(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mCollapse = false;
        _this.disInteractive();
        return _this;
    }
    LeftBtnGroup.prototype.show = function (param) {
        this.scale = this.mWorld.uiScale;
        _super.prototype.show.call(this, param);
    };
    LeftBtnGroup.prototype.resize = function () {
        this.x = this.width + 5 * this.mWorld.uiScale;
        this.y = this.height / 2 + 10 * this.mWorld.uiScale;
        this.scale = this.mWorld.uiScale;
    };
    LeftBtnGroup.prototype.destroy = function () {
        if (this.mExpandBtn) {
            this.mExpandBtn.destroy();
        }
        this.mResKey = "";
        this.mExpandBtn = null;
        this.mCollapse = false;
        _super.prototype.destroy.call(this);
    };
    LeftBtnGroup.prototype.tweenView = function (show) {
        var baseX = this.width + 5 * this.mWorld.uiScale;
        var toX = show === true ? baseX : baseX - 50;
        var toAlpha = show === true ? 1 : 0;
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Linear",
            props: {
                x: { value: toX },
                alpha: { value: toAlpha },
            },
        });
    };
    LeftBtnGroup.prototype.addListen = function () {
    };
    LeftBtnGroup.prototype.removeListen = function () {
    };
    LeftBtnGroup.prototype.preload = function () {
        if (!this.scene) {
            return;
        }
        this.mResKey = "baseView";
        this.scene.load.atlas(this.mResKey, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.json"));
        _super.prototype.preload.call(this);
    };
    LeftBtnGroup.prototype.init = function () {
        var _this = this;
        this.mWorld.uiManager.getUILayerManager().addToUILayer(this);
        var hei = 0;
        // const btnResList: string[] = this.mCollapse === false ? ["btnGroup_expand.png", "btnGroup_expand.png", "btnGroup_collapse.png", "btnGroup_collapse.png"] : ["btnGroup_collapse.png", "btnGroup_collapse.png", "btnGroup_expand.png", "btnGroup_expand.png"];
        if (this.mWorld.getConfig().platform !== "app") {
            this.mExpandBtn = new _icon_select_btn__WEBPACK_IMPORTED_MODULE_2__["IconSelectBtn"](this.scene, this.mWorld, this.mResKey, ["btnGroup_expand.png", "btnGroup_collapse.png"], 1);
            this.add(this.mExpandBtn);
            this.mExpandBtn.setClick(function () {
                if (!_this.mCollapse) {
                    _this.mWorld.startFullscreen();
                }
                else {
                    _this.mWorld.stopFullscreen();
                }
                _this.mExpandBtn.setBgRes(Number(!_this.mCollapse));
                _this.mCollapse = !_this.mCollapse;
            });
            hei += this.mExpandBtn.height / 2 + 20;
            this.setSize(this.mExpandBtn.width, hei);
        }
        this.resize();
        _super.prototype.init.call(this);
    };
    return LeftBtnGroup;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 236 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconSelectBtn", function() { return IconSelectBtn; });
/* harmony import */ var _utils_pos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(111);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * 切换状态按钮(点击后状态改变的按钮，需要多帧资源)
 */
var IconSelectBtn = /** @class */ (function (_super) {
    __extends(IconSelectBtn, _super);
    function IconSelectBtn(scene, world, bgResKey, bgTexture, scale) {
        if (scale === void 0) { scale = 28 / 43; }
        var _this = _super.call(this, scene) || this;
        _this.mScene = scene;
        _this.mWorld = world;
        _this.mBtnBg = scene.make.image(undefined, false);
        _this.mBgTexture = bgTexture;
        _this.mBgResKey = bgResKey;
        _this.mBtnBg.setTexture(bgResKey, bgTexture[0]);
        _this.mBtnBg.scaleX = _this.mBtnBg.scaleY = scale;
        _this.addAt(_this.mBtnBg, 0);
        _this.setSize(_this.mBtnBg.width, _this.mBtnBg.height);
        _this.setInteractive();
        _this.on("pointerup", _this.upHandler, _this);
        _this.on("pointerdown", _this.downHandler, _this);
        _this.on("pointerover", _this.overHandler, _this);
        _this.on("pointerout", _this.outHandler, _this);
        return _this;
    }
    IconSelectBtn.prototype.setPos = function (x, y) {
        if (!this.mBasePos) {
            this.mBasePos = new _utils_pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"]();
        }
        this.mBasePos.x = x;
        this.mBasePos.y = y;
    };
    /**
     * 获取按钮的初始化时的位置，用于tween时，按钮来回切换位置用
     */
    IconSelectBtn.prototype.getPos = function () {
        return this.mBasePos;
    };
    IconSelectBtn.prototype.setBtnData = function (value) {
        this.mBtnData = value;
    };
    IconSelectBtn.prototype.getBtnData = function () {
        return this.mBtnData;
    };
    IconSelectBtn.prototype.setClick = function (func) {
        this.monClick = func;
    };
    IconSelectBtn.prototype.setBgRes = function (index) {
        this.mBtnBg.setTexture(this.mBgResKey, this.mBgTexture[index] || 0);
    };
    IconSelectBtn.prototype.destroy = function () {
        if (this.mBtnBg) {
            this.mBtnBg.destroy(true);
        }
        if (this.mBtnIcon) {
            this.mBtnIcon.destroy(true);
        }
        this.monClick = null;
        this.mBtnBg = null;
        this.mBtnIcon = null;
        this.mBtnData = null;
        this.mScene = null;
        _super.prototype.destroy.call(this);
    };
    IconSelectBtn.prototype.overHandler = function (pointer) {
    };
    IconSelectBtn.prototype.outHandler = function (pointer) {
    };
    IconSelectBtn.prototype.upHandler = function () {
        if (this.monClick) {
            this.monClick();
        }
    };
    IconSelectBtn.prototype.downHandler = function () {
        this.scaleHandler();
    };
    IconSelectBtn.prototype.scaleHandler = function () {
        this.mScene.tweens.add({
            targets: this,
            duration: 50,
            ease: "Linear",
            props: {
                scaleX: { value: .5 },
                scaleY: { value: .5 },
            },
            yoyo: true,
            repeat: 0,
        });
        this.scaleX = this.scaleY = 1;
    };
    return IconSelectBtn;
}(Phaser.GameObjects.Container));



/***/ }),
/* 237 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BagGroupMediator", function() { return BagGroupMediator; });
/* harmony import */ var _baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(133);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(109);
/* harmony import */ var _bag_group__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(238);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




/**
 * 背包场景UI，带背包slot，pc端用
 */
var BagGroupMediator = /** @class */ (function (_super) {
    __extends(BagGroupMediator, _super);
    function BagGroupMediator(mWorld, scene) {
        var _this = _super.call(this, mWorld, scene) || this;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_3__[/* UIType */ "a"].Scene;
        return _this;
    }
    BagGroupMediator.prototype.isSceneUI = function () {
        return true;
    };
    BagGroupMediator.prototype.isShow = function () {
        if (this.mView) {
            return this.mView.isShow();
        }
    };
    BagGroupMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        var size = this.world.getSize();
        this.mView = new _bag_group__WEBPACK_IMPORTED_MODULE_2__["BagGroup"](this.mScene, this.world, (size.width >> 1) - 29, size.height - 50);
        this.mView.show(param);
        this.addListen();
        _super.prototype.show.call(this, param);
    };
    BagGroupMediator.prototype.update = function (param) {
        if (this.mView)
            this.mView.update(param);
    };
    BagGroupMediator.prototype.hide = function () {
        this.mShow = false;
        this.removeListen();
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
        }
    };
    BagGroupMediator.prototype.addListen = function () {
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].QUERY_PACKAGE, this.queryPackAge, this);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].UPDATED_CHARACTER_PACKAGE, this.heroItemChange, this);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].PACKAGE_ITEM_ADD, this.heroItemChange, this);
    };
    BagGroupMediator.prototype.removeListen = function () {
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].QUERY_PACKAGE, this.queryPackAge, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].UPDATED_CHARACTER_PACKAGE, this.heroItemChange, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].PACKAGE_ITEM_ADD, this.heroItemChange, this);
    };
    BagGroupMediator.prototype.heroItemChange = function () {
        if (!this.world.roomManager.currentRoom || !this.world.roomManager.currentRoom.playerManager || !this.world.roomManager.currentRoom.playerManager.actor)
            return;
        var itemList = this.world.roomManager.currentRoom.playerManager.actor.package.items;
        if (this.mView) {
            this.mView.setDataList(itemList);
        }
    };
    BagGroupMediator.prototype.queryPackAge = function (data) {
        if (!this.world.roomManager.currentRoom || !this.world.roomManager.currentRoom.playerManager || !this.world.roomManager.currentRoom.playerManager.actor)
            return;
        if (data.id !== this.world.roomManager.currentRoom.playerManager.actor.package.id)
            return;
        if (this.mView) {
            this.mView.setDataList(data.items);
        }
    };
    BagGroupMediator.NAME = "BagGroupMediator";
    return BagGroupMediator;
}(_baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__["BaseFaceMediator"]));



/***/ }),
/* 238 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BagGroup", function() { return BagGroup; });
/* harmony import */ var _bag_item_slot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(132);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _components_radio__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(177);
/* harmony import */ var _chat_chat_mediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(149);
/* harmony import */ var _bag_bagView_bagMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(131);
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(105);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






/**
 * 主界面ui pc版本
 */
var BagGroup = /** @class */ (function (_super) {
    __extends(BagGroup, _super);
    function BagGroup(scene, world, x, y) {
        var _this = _super.call(this, scene, world) || this;
        _this.tmpWid = 0;
        _this.x = x;
        _this.y = y;
        world.uiManager.getUILayerManager().addToToolTipsLayer(_this);
        _this.bagSlotList = [];
        return _this;
    }
    BagGroup.prototype.show = function (param) {
        _super.prototype.show.call(this);
    };
    BagGroup.prototype.resize = function (wid, hei) {
        var size = this.mWorld.getSize();
        var chatMed = this.mWorld.uiManager.getMediator(_chat_chat_mediator__WEBPACK_IMPORTED_MODULE_3__["ChatMediator"].NAME);
        this.x = (size.width - this.tmpWid) / 2 < chatMed.getView().width ? chatMed.getView().width + this.width / 2 : (size.width - this.tmpWid) / 2;
        this.y = size.height - 50;
    };
    BagGroup.prototype.tweenExpand = function (show) {
        if (!this.scene)
            return;
        var size = this.mWorld.getSize();
        var baseY = size.height - 50;
        var toY = show === true ? baseY : baseY + 100;
        var toAlpha = show === true ? 1 : 0;
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Cubic.Out",
            props: {
                y: { value: toY },
                alpha: { value: toAlpha },
            },
        });
    };
    BagGroup.prototype.destroy = function () {
        if (this.bagSlotList) {
            this.bagSlotList.forEach(function (slot) {
                if (slot)
                    slot.destroy();
            });
            this.bagSlotList.length = 0;
            this.bagSlotList = null;
        }
        this.tmpWid = 0;
        this.baseBagBgWid = 0;
        this.mResStr = null;
        this.mResPng = null;
        this.mResJson = null;
        _super.prototype.destroy.call(this);
    };
    BagGroup.prototype.addListen = function () {
        if (this.mBagBtnCon) {
            this.mBagBtnCon.on("pointerdown", this.bagHandler, this);
            this.mBagBtnCon.on("pointerover", this.bagBtnOver, this);
            this.mBagBtnCon.on("pointerout", this.bagBtnOut, this);
        }
    };
    BagGroup.prototype.removeListen = function () {
        if (this.mBagBtnCon) {
            this.mBagBtnCon.off("pointerdown", this.bagHandler, this);
            this.mBagBtnCon.off("pointerover", this.bagBtnOver, this);
            this.mBagBtnCon.off("pointerout", this.bagBtnOut, this);
        }
    };
    BagGroup.prototype.setDataList = function (items) {
        if (this.bagSlotList) {
            this.bagSlotList.forEach(function (itemslot) {
                if (itemslot)
                    itemslot.getView().visible = false;
            });
        }
        var childList = [];
        var len = items.length > BagGroup.SlotMaxCount ? BagGroup.SlotMaxCount : items.length;
        var tempWid = this.baseBagBgWid + 5;
        for (var i = 0; i < len; i++) {
            var itemSlot = this.bagSlotList[i];
            itemSlot.getView().visible = true;
            childList.push(itemSlot.toolTipCon);
            itemSlot.dataChange(items[i]);
            tempWid += 56 + 5;
        }
        if (this.width !== tempWid) {
            this.width = tempWid;
            if (this.buttons) {
                this.buttons.destroy(true);
                this.buttons = null;
            }
            this.buttons = this.scene.rexUI.add.buttons({
                x: (tempWid + this.mBagBg.width) / 2,
                y: 0,
                width: 56,
                height: 56,
                orientation: 0,
                buttons: childList,
                groupName: "bagBtn",
                align: "right",
                click: {
                    mode: "pointerup",
                    clickInterval: 100
                },
                space: 5,
                name: "bag",
            });
            this.buttons.layout();
            // this.buttons.on("button.click", function (button, groupName, index, pointer) {
            //     if (index === 0) {
            //     }
            // }, this);
            this.setSize(tempWid, 65);
            this.mWorld.uiManager.baseFaceResize();
        }
    };
    BagGroup.prototype.preload = function () {
        if (!this.scene) {
            return;
        }
        this.mResStr = "bag";
        this.mResPng = "ui/bag/bag.png";
        this.mResJson = "ui/bag/bag.json";
        this.scene.load.atlas(this.mResStr, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes(this.mResPng), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes(this.mResJson));
        _super.prototype.preload.call(this);
    };
    BagGroup.prototype.init = function () {
        this.mBagBtnCon = this.scene.add.container(0, 0);
        this.mBagBg = this.scene.add.sprite(0, 0, this.mResStr, "bag_BtnBg");
        this.baseBagBgWid = this.mBagBg.width;
        this.tmpWid += this.mBagBg.width + 5;
        this.bagBtn = this.scene.add.sprite(this.mBagBg.x, this.mBagBg.y, this.mResStr, "bag_Btn");
        this.mSubScriptSprite = this.scene.make.sprite(undefined, false);
        this.mSubScriptSprite.setTexture(this.mResStr, "bag_SubScripta");
        this.mSubScriptSprite.x = this.mSubScriptSprite.width - this.mBagBg.width >> 1;
        this.mSubScriptSprite.y = this.mSubScriptSprite.height - this.mBagBg.height >> 1;
        this.mBagBtnCon.addAt(this.mBagBg, 0);
        this.mBagBtnCon.addAt(this.bagBtn, 1);
        // this.mBagBtnCon.addAt(this.mSubScriptSprite, 2);
        this.mBagBtnCon.setSize(56, 56);
        this.mBagBtnCon.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.mBagBg.width, this.mBagBg.height), Phaser.Geom.Rectangle.Contains);
        this.initBagSlot();
        this.setSize(this.tmpWid, 65);
        if (this.mWorld.roomManager.currentRoom && this.mWorld.roomManager.currentRoom.playerManager && this.mWorld.roomManager.currentRoom.playerManager.actor) {
            var mPackage = this.mWorld.roomManager.currentRoom.playerManager.actor.package;
            if (mPackage && mPackage.items)
                this.setDataList(mPackage.items);
        }
        this.add(this.mBagBtnCon);
        _super.prototype.init.call(this);
    };
    BagGroup.prototype.tweenComplete = function (show) {
        _super.prototype.tweenComplete.call(this, show);
        if (show)
            this.mWorld.uiManager.baseFaceResize();
    };
    BagGroup.prototype.initBagSlot = function () {
        var subScriptList = ["0", "b", "c"];
        var subScriptRes;
        for (var i = 0; i < BagGroup.SlotMaxCount; i++) {
            if (i >= 9) {
                subScriptRes = "bag_SubScript" + subScriptList[i % 9];
            }
            else {
                subScriptRes = "bag_SubScript" + (i + 1);
            }
            var itemSlot = new _bag_item_slot__WEBPACK_IMPORTED_MODULE_0__["ItemSlot"](this.scene, this.mWorld, this, 0, 0, this.mResStr, this.mResPng, this.mResJson, "bag_Slot", "", subScriptRes);
            itemSlot.createUI();
            itemSlot.getView().visible = false;
            this.bagSlotList.push(itemSlot);
        }
    };
    BagGroup.prototype.bagHandler = function () {
        // this.mWorld.uiManager.getMediator(FriendMediator.NAME).show();
        var med = this.mWorld.uiManager.getMediator(_bag_bagView_bagMediator__WEBPACK_IMPORTED_MODULE_4__["BagMediator"].NAME);
        if (med.isShow()) {
            med.hide();
            return;
        }
        med.show();
    };
    BagGroup.prototype.tmpLoad = function () {
        var _this = this;
        if (!this.radio) {
            this.radio = new _components_radio__WEBPACK_IMPORTED_MODULE_2__["Radio"](this.scene, {
                wid: 328,
                hei: 142,
                resKey: "juqingRadio",
                resPng: "./resources/ui/juqing/juqing.png",
                resJson: "./resources/ui/juqing/juqing.json",
                resBg: "radio_bg.png",
                resArrow: "radio_arrow.png",
                fontStyle: { size: 20, color: "#ffcc00", bold: false },
                completeBack: function () {
                    _this.radioComplete();
                },
                clickCallBack: function () {
                    if (_this.radio && _this.radio.parentContainer) {
                        _this.radio.clearRadioData();
                        _this.radio.parentContainer.remove(_this.radio);
                    }
                }
            });
            return;
        }
        if (this.radio.isShow) {
            return;
        }
        this.radioComplete();
    };
    BagGroup.prototype.radioComplete = function () {
        this.radio.setRadioData(["1111111111", "2222222222", "333333333333", "444444444444"]);
        this.radio.x = this.bagBtn.x;
        this.radio.y = this.bagBtn.y - 142;
        this.add(this.radio);
    };
    BagGroup.prototype.bagBtnOver = function (pointer) {
        this.mBagSelect = this.scene.make.sprite(undefined, false);
        this.mBagSelect.setTexture(this.mResStr, "bag_BtnSelect");
        this.mBagBtnCon.add(this.mBagSelect);
        // this.tmpLoad();
    };
    BagGroup.prototype.bagBtnOut = function (pointer) {
        if (this.mBagSelect && this.mBagSelect.parentContainer) {
            this.mBagSelect.parentContainer.remove(this.mBagSelect);
        }
    };
    BagGroup.SlotMaxCount = 12;
    return BagGroup;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_5__["BasePanel"]));



/***/ }),
/* 239 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopMenuMediator", function() { return TopMenuMediator; });
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(109);
/* harmony import */ var _top_menu_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(240);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var TopMenuMediator = /** @class */ (function (_super) {
    __extends(TopMenuMediator, _super);
    function TopMenuMediator(scene, world) {
        var _this = _super.call(this) || this;
        _this.scene = scene;
        _this.world = world;
        return _this;
        // this.mMenuPanel = new TopMenuContainer(scene, world);
        // this.onAddIconHandler({ key: "Turn_Btn_Top", name: "SaveDecorate", bgResKey: "baseView", bgTextures: ["btnGroup_yellow_normal.png", "btnGroup_yellow_light.png", "btnGroup_yellow_select.png"], iconResKey: "", iconTexture: "btnGroup_top_expand.png", scale: 1 });
    }
    TopMenuMediator.prototype.show = function () {
        this.register();
    };
    TopMenuMediator.prototype.hide = function () {
        this.unregister();
    };
    TopMenuMediator.prototype.isSceneUI = function () {
        return true;
    };
    TopMenuMediator.prototype.register = function () {
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].ADD_ICON_TO_TOP, this.onAddIconHandler, this);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].REMOVE_ICON_FROM_TOP, this.onAddIconHandler, this);
    };
    TopMenuMediator.prototype.unregister = function () {
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].ADD_ICON_TO_TOP, this.onAddIconHandler, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].REMOVE_ICON_FROM_TOP, this.onRemoveIcon, this);
    };
    TopMenuMediator.prototype.destroy = function () {
        this.hide();
        _super.prototype.destroy.call(this);
    };
    TopMenuMediator.prototype.addItem = function (data) {
        if (!this.mView) {
            this.mView = new _top_menu_container__WEBPACK_IMPORTED_MODULE_1__["TopMenuContainer"](this.scene, this.world);
            this.mView.on("saveDecorate", this.onSaveDecorateHandler, this);
            this.mView.on("enterDecorate", this.onEnterDecorateHandler, this);
            this.mView.on("showMarket", this.onShowMarketHandler, this);
        }
        this.mView.addItem(data);
    };
    TopMenuMediator.prototype.removeItem = function (name) {
        if (!this.mView) {
            return;
        }
        this.mView.removeItem(name);
    };
    TopMenuMediator.prototype.onAddIconHandler = function (data) {
        this.addItem(data);
    };
    TopMenuMediator.prototype.onRemoveIcon = function (name) {
        this.removeItem(name);
    };
    TopMenuMediator.prototype.onSaveDecorateHandler = function () {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_LEAVE);
        var content = packet.content;
        content.needSaveEditScene = true;
        this.world.connection.send(packet);
    };
    TopMenuMediator.prototype.onEnterDecorateHandler = function () {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_ENTER);
        this.world.connection.send(packet);
    };
    TopMenuMediator.prototype.onShowMarketHandler = function () {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_SHOW_UI);
        var content = packet.content;
        content.name = "Market";
        this.world.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].SHOW_UI, packet);
    };
    TopMenuMediator.NAME = "TopMenuMediator";
    return TopMenuMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__[/* BaseMediator */ "a"]));



/***/ }),
/* 240 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopMenuContainer", function() { return TopMenuContainer; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var TopMenuContainer = /** @class */ (function (_super) {
    __extends(TopMenuContainer, _super);
    function TopMenuContainer(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.maxNum = 3;
        _this.setTween(false);
        _this.mButtons = [];
        return _this;
    }
    TopMenuContainer.prototype.resize = function () {
        var size = this.mWorld.getSize();
        this.x = size.width - 50 * this.mWorld.uiScale;
        this.y = this.height / 2 + 120 * this.mWorld.uiScale;
        this.scale = this.dpr;
        // this.scaleX = this.scaleY = this.mWorld.uiScale;
    };
    TopMenuContainer.prototype.show = function () {
        if (this.mWorld) {
            this.mWorld.uiManager.getUILayerManager().addToUILayer(this);
        }
        _super.prototype.show.call(this);
    };
    TopMenuContainer.prototype.hide = function () {
        if (this.parentContainer) {
            this.parentContainer.remove(this);
        }
    };
    TopMenuContainer.prototype.addItem = function (data) {
        // if (!this.mShowing) {
        //   this.show();
        // }
        // // TODO dynamic load texture
        // const iconBtn = new IconBtn(this.scene, this.mWorld, data);
        // iconBtn.setName(data.name);
        // iconBtn.y = iconBtn.height >> 1;
        // this.add(iconBtn);
        // iconBtn.on("click", this.onGameObjectUpHandler, this);
        // this.mButtons.push(iconBtn);
        // if (this.mButtons.length > 3) {
        //   // TODO add turn button
        // }
        // this.refresh();
    };
    TopMenuContainer.prototype.removeItem = function (name) {
        var index = this.mButtons.findIndex(function (icon) { return icon.name === name; });
        if (index >= 0) {
            this.mButtons[index].destroy();
            this.mButtons.splice(index, 1);
        }
        if (this.mButtons.length < this.maxNum) {
            // TODO remove turn button
        }
        if (this.mButtons.length === 0) {
            // TODO remove
            this.hide();
        }
        this.refresh();
    };
    TopMenuContainer.prototype.preload = function () {
        this.scene.load.atlas("baseView", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.json"));
        _super.prototype.preload.call(this);
    };
    TopMenuContainer.prototype.init = function () {
        if (this.mInitialized) {
            return;
        }
        _super.prototype.init.call(this);
        // this.addItem({ key: "Turn_Btn_Top", bgResKey: "baseView", bgTextures: ["btnGroup_yellow_normal.png", "btnGroup_yellow_light.png", "btnGroup_yellow_select.png"], iconResKey: "", iconTexture: "btnGroup_top_expand.png", scale: 1 });
        this.resize();
    };
    TopMenuContainer.prototype.refresh = function () {
        for (var i = 0; i < this.mButtons.length; i++) {
            this.mButtons[i].x = -(i * 60 + 30);
        }
    };
    TopMenuContainer.prototype.expand = function () {
    };
    TopMenuContainer.prototype.collapse = function () {
    };
    TopMenuContainer.prototype.destroy = function () {
        this.mButtons.map(function (btn) { return btn.destroy(); });
        this.mButtons.length = 0;
        _super.prototype.destroy.call(this);
    };
    TopMenuContainer.prototype.onGameObjectUpHandler = function (btn) {
        switch (btn.name) {
            case "SaveDecorate":
                this.emit("saveDecorate");
                break;
            case "EnterDecorate":
                this.emit("enterDecorate");
                break;
            case "Market":
                this.emit("showMarket");
                break;
        }
    };
    return TopMenuContainer;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 241 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecorateControlMediator", function() { return DecorateControlMediator; });
/* harmony import */ var _DecorateControlPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(242);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(109);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var DecorateControlMediator = /** @class */ (function (_super) {
    __extends(DecorateControlMediator, _super);
    function DecorateControlMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.scene = scene;
        _this.world = world;
        if (world) {
            world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].SELECTED_DECORATE_ELEMENT, _this.onSelectedDecorateHandler, _this);
            world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].CANCEL_DECORATE_ELEMENT, _this.onCancelDecorateHandler, _this);
        }
        return _this;
    }
    DecorateControlMediator.prototype.show = function () {
        if (this.mView && this.mView.isShow() || this.mShow) {
            return;
        }
        if (!this.mView) {
            this.mView = new _DecorateControlPanel__WEBPACK_IMPORTED_MODULE_0__["DecorateControlPanel"](this.scene, this.world);
        }
        this.addActionListener();
        this.mView.show();
        this.layerManager.addToUILayer(this.mView);
    };
    DecorateControlMediator.prototype.destroy = function () {
        if (this.world) {
            this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].SELECTED_DECORATE_ELEMENT, this.onSelectedDecorateHandler, this);
            this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].CANCEL_DECORATE_ELEMENT, this.onCancelDecorateHandler, this);
        }
        _super.prototype.destroy.call(this);
    };
    DecorateControlMediator.prototype.isSceneUI = function () {
        return true;
    };
    DecorateControlMediator.prototype.onSelectedDecorateHandler = function () {
        if (!this.mView) {
            return;
        }
        if (this.mView.parentContainer) {
            this.mView.parentContainer.remove(this.mView);
        }
    };
    DecorateControlMediator.prototype.onCancelDecorateHandler = function () {
        if (!this.mView) {
            return;
        }
        this.layerManager.addToUILayer(this.mView);
    };
    DecorateControlMediator.prototype.addActionListener = function () {
        if (!this.mView) {
            return;
        }
        this.mView.on("exit", this.onExitHandler, this);
        this.mView.on("recycleAll", this.onRecycleAllHandler, this);
        this.mView.on("redo", this.onRedoHandler, this);
        this.mView.on("showFurni", this.onShowFurniHandler, this);
        this.mView.on("save", this.onSaveHandler, this);
        this.mView.on("getDoor", this.onGetDoorHandler, this);
    };
    DecorateControlMediator.prototype.onExitHandler = function () {
        if (!this.connection) {
            return;
        }
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_LEAVE);
        var content = packet.content;
        content.needSaveEditScene = false;
        this.world.connection.send(packet);
    };
    DecorateControlMediator.prototype.onRecycleAllHandler = function () {
        if (!this.connection) {
            return;
        }
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_RECYCLE_ALL);
        this.world.connection.send(packet);
    };
    DecorateControlMediator.prototype.onRedoHandler = function () {
        if (!this.connection) {
            return;
        }
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_RECYCLE_LAST_SPRITE);
        this.connection.send(packet);
    };
    DecorateControlMediator.prototype.onShowFurniHandler = function () {
        var uiManager = this.world.uiManager;
        if (uiManager) {
            uiManager.showMed("FurniBag");
        }
    };
    DecorateControlMediator.prototype.onSaveHandler = function () {
        if (!this.connection) {
            return;
        }
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_LEAVE);
        var content = packet.content;
        content.needSaveEditScene = true;
        this.connection.send(packet);
    };
    DecorateControlMediator.prototype.onGetDoorHandler = function () {
        if (!this.connection) {
            return;
        }
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_GET_SPAWN_POINT);
        this.connection.send(packet);
    };
    Object.defineProperty(DecorateControlMediator.prototype, "connection", {
        get: function () {
            if (!this.world) {
                return;
            }
            return this.world.connection;
        },
        enumerable: false,
        configurable: true
    });
    DecorateControlMediator.NAME = "DecorateControlMediator";
    return DecorateControlMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__[/* BaseMediator */ "a"]));



/***/ }),
/* 242 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecorateControlPanel", function() { return DecorateControlPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var DecorateControlPanel = /** @class */ (function (_super) {
    __extends(DecorateControlPanel, _super);
    function DecorateControlPanel(scene, worldService) {
        var _this = _super.call(this, scene, worldService) || this;
        _this.key = "decorateControl";
        return _this;
    }
    DecorateControlPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.mExitBtn.on("pointerup", this.onExitHandler, this);
        this.mRecycleAllBtn.on("pointerup", this.onRecycleAllHandler, this);
        this.mRedoBtn.on("pointerup", this.onRedoHandler, this);
        this.mFurniBtn.on("pointerup", this.onShowFurniHandler, this);
        this.mSaveBtn.on("pointerup", this.onSaveHandler, this);
        this.mDoorBtn.on("pointerup", this.onGetDoorHandler, this);
    };
    DecorateControlPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mExitBtn.off("pointerup", this.onExitHandler, this);
        this.mRecycleAllBtn.off("pointerup", this.onRecycleAllHandler, this);
        this.mRedoBtn.off("pointerup", this.onRedoHandler, this);
        this.mFurniBtn.off("pointerup", this.onShowFurniHandler, this);
        this.mSaveBtn.off("pointerup", this.onSaveHandler, this);
        this.mDoorBtn.off("pointerup", this.onGetDoorHandler, this);
    };
    DecorateControlPanel.prototype.resize = function (w, h) {
        this.setSize(w, 131 * this.dpr);
        // this.x = this.width * this.originX;
        // this.y = this.height * this.originY;
        this.mBackground.clear();
        this.mBackground.fillStyle(0, 0.6);
        this.mBackground.fillRect(0, 0, this.width, this.height);
        _super.prototype.resize.call(this, w, h);
    };
    DecorateControlPanel.prototype.preload = function () {
        this.addAtlas(this.key, "decorate_control/decorate_control.png", "decorate_control/decorate_control.json");
        _super.prototype.preload.call(this);
    };
    DecorateControlPanel.prototype.init = function () {
        var w = this.scene.cameras.main.width;
        var h = this.scene.cameras.main.height;
        this.mBackground = this.scene.make.graphics(undefined, false);
        this.mTopBtns = [];
        this.mExitBtn = this.scene.make.image({
            key: this.key,
            frame: "exitBtn.png",
        }, false).setOrigin(0).setInteractive();
        this.mRecycleAllBtn = this.scene.make.image({
            key: this.key,
            frame: "recycleAllBtn.png",
        }, false).setOrigin(0).setInteractive();
        this.mRedoBtn = this.scene.make.image({
            key: this.key,
            frame: "redoBtn.png",
        }, false).setOrigin(0).setInteractive();
        this.mFurniBtn = this.scene.make.image({
            key: this.key,
            frame: "furniBtn.png",
        }, false).setOrigin(0).setInteractive();
        this.mSaveBtn = this.scene.make.image({
            key: this.key,
            frame: "saveBtn.png"
        }, false).setOrigin(0).setInteractive();
        this.mDoorBtn = this.scene.make.image({
            x: 10 * this.dpr,
            y: 83 * this.dpr,
            key: this.key,
            frame: "doorBtn.png",
        }, false).setOrigin(0).setInteractive();
        this.mStairBtn = this.scene.make.image({
            x: 64 * this.dpr,
            y: 83 * this.dpr,
            key: this.key,
            frame: "stairBtn.png"
        }, false).setOrigin(0);
        this.mTopBtns = [this.mExitBtn, this.mRecycleAllBtn, this.mRedoBtn, this.mFurniBtn, this.mSaveBtn];
        this.add(this.mBackground);
        this.add(this.mTopBtns);
        this.add([this.mDoorBtn, this.mStairBtn]);
        var zoom = this.mWorld.uiScale;
        var totalWidth = w - 10 * 2 * this.dpr * zoom;
        this.mTopBtns.map(function (btn) { return totalWidth -= btn.width * zoom; });
        var space = totalWidth / (this.mTopBtns.length - 1) / zoom;
        for (var i = 0; i < this.mTopBtns.length; i++) {
            if (i > 0) {
                this.mTopBtns[i].x = space + (this.mTopBtns[i - 1].width) + this.mTopBtns[i - 1].x;
            }
            else {
                this.mTopBtns[i].x = 10 * this.dpr;
            }
            this.mTopBtns[i].y = 11 * this.dpr;
        }
        this.resize(w, h);
        _super.prototype.init.call(this);
    };
    DecorateControlPanel.prototype.onExitHandler = function () {
        this.emit("exit");
    };
    DecorateControlPanel.prototype.onRecycleAllHandler = function () {
        this.emit("recycleAll");
    };
    DecorateControlPanel.prototype.onRedoHandler = function () {
        this.emit("redo");
    };
    DecorateControlPanel.prototype.onShowFurniHandler = function () {
        this.emit("showFurni");
    };
    DecorateControlPanel.prototype.onSaveHandler = function () {
        this.emit("save");
    };
    DecorateControlPanel.prototype.onGetDoorHandler = function () {
        this.emit("getDoor");
    };
    return DecorateControlPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 243 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaMainUIMediator", function() { return PicaMainUIMediator; });
/* harmony import */ var _PicaMainUIPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(244);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _PicaMainUI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(245);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var PicaMainUIMediator = /** @class */ (function (_super) {
    __extends(PicaMainUIMediator, _super);
    function PicaMainUIMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.scene = scene;
        _this.world = worldService;
        _this.mainUI = new _PicaMainUI__WEBPACK_IMPORTED_MODULE_2__["PicaMainUI"](worldService);
        _this.mainUI.on("update", _this.onUpdateHandler, _this);
        return _this;
    }
    PicaMainUIMediator.prototype.show = function (param) {
        if (this.mView) {
            this.update(param);
            return;
        }
        if (!this.mView) {
            this.mView = new _PicaMainUIPanel__WEBPACK_IMPORTED_MODULE_0__["PicaMainUIPanel"](this.scene, this.world);
        }
        this.mView.show(param);
        this.mView.on("enterEdit", this.onEnterEditSceneHandler, this);
        this.layerManager.addToUILayer(this.mView);
    };
    PicaMainUIMediator.prototype.destroy = function () {
        if (this.mainUI) {
            this.mainUI.destroy();
        }
        _super.prototype.destroy.call(this);
    };
    PicaMainUIMediator.prototype.onEnterEditSceneHandler = function () {
        if (this.mainUI) {
            this.mainUI.sendEnterDecorate();
        }
    };
    PicaMainUIMediator.prototype.onUpdateHandler = function (content) {
        this.show(content);
    };
    PicaMainUIMediator.NAME = "PicaMainUIMediator";
    return PicaMainUIMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 244 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaMainUIPanel", function() { return PicaMainUIPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(107);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(110);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var PicaMainUIPanel = /** @class */ (function (_super) {
    __extends(PicaMainUIPanel, _super);
    function PicaMainUIPanel(scene, worldService) {
        var _this = _super.call(this, scene, worldService) || this;
        _this.key = "main_ui";
        return _this;
    }
    PicaMainUIPanel.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        if (this.mInitialized) {
            this.setInteractive();
            this.update(param);
        }
    };
    PicaMainUIPanel.prototype.resize = function (w, h) {
        var width = this.scene.cameras.main.width / this.scale;
        var height = this.scene.cameras.main.height / this.scale;
        _super.prototype.resize.call(this, width, height);
        this.mCoinValue.x = width - this.mCoinValue.width / 2 - 5 * this.dpr;
        this.mDiamondValue.x = width - this.mDiamondValue.width / 2 - 5 * this.dpr;
    };
    PicaMainUIPanel.prototype.preload = function () {
        this.addAtlas(this.key, "main_ui/main_ui.png", "main_ui/main_ui.json");
        _super.prototype.preload.call(this);
    };
    PicaMainUIPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        if (!this.mSceneName) {
            _utils_log__WEBPACK_IMPORTED_MODULE_3__[/* Logger */ "a"].getInstance().fatal(PicaMainUIPanel.name + ": sceneName does not exist!");
            return;
        }
        this.mSceneName.on("pointerup", this.onEnterEditScene, this);
    };
    PicaMainUIPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        if (!this.mSceneName) {
            _utils_log__WEBPACK_IMPORTED_MODULE_3__[/* Logger */ "a"].getInstance().fatal(PicaMainUIPanel.name + ": sceneName does not exist!");
            return;
        }
        this.mSceneName.off("pointerup", this.onEnterEditScene, this);
    };
    PicaMainUIPanel.prototype.update = function (param) {
        Object.assign(this.mShowData, param);
        _super.prototype.update.call(this, this.mShowData);
        if (!param) {
            return;
        }
        if (!this.mInitialized) {
            return;
        }
        if (param.hasOwnProperty("level"))
            this.mExpProgress.setLv(param.level);
        if (param.hasOwnProperty("coin"))
            this.mCoinValue.setText(param.coin.toString());
        if (param.hasOwnProperty("diamond"))
            this.mDiamondValue.setText(param.diamond.toString());
        if (param.hasOwnProperty("energy")) {
            var energy = param.energy;
            if (energy) {
                this.mStrengthValue.setValue(energy.currentValue, energy.max);
            }
            else {
                this.mStrengthValue.setValue(0, 100);
            }
        }
        if (param.hasOwnProperty("name")) {
            this.mSceneName.setText(param.name);
            var bound = this.mSceneName.getBounds();
            this.mSceneName.setSize(bound.width, bound.height);
            this.mSceneName.setInteractive(new Phaser.Geom.Rectangle(this.mSceneName.width / 2, this.mSceneName.height / 2, this.mSceneName.width, this.mSceneName.height), Phaser.Geom.Rectangle.Contains);
        }
        if (param.hasOwnProperty("ownerName")) {
            this.mSceneType.setText(param.ownerName);
        }
        if (param.hasOwnProperty("playerCount")) {
            // TODO 多语言适配
            this.mCounter.setText(param.playerCount + "\u4EBA");
        }
    };
    PicaMainUIPanel.prototype.init = function () {
        var w = this.scene.cameras.main.width;
        var h = this.scene.cameras.main.height;
        this.mCoinValue = new ValueContainer(this.scene, this.key, "coin", this.dpr);
        this.mCoinValue.y = 28 * this.dpr;
        this.mDiamondValue = new ValueContainer(this.scene, this.key, "diamond", this.dpr);
        this.mDiamondValue.y = 68 * this.dpr;
        this.mSceneName = new SceneName(this.scene, this.key, "room_icon", "setting_icon", this.dpr);
        this.mSceneName.setText("");
        this.mSceneName.x = 15 * this.dpr;
        this.mSceneName.y = 55 * this.dpr;
        this.mSceneType = new IconText(this.scene, this.key, "star_icon", this.dpr);
        this.mSceneType.setText("");
        this.mSceneType.x = 15 * this.dpr;
        this.mSceneType.y = 80 * this.dpr;
        this.mSceneType.setColor("#FFFF00");
        this.mCounter = new IconText(this.scene, this.key, "counter_icon", this.dpr);
        this.mCounter.setText("1人");
        this.mCounter.x = 15 * this.dpr;
        this.mCounter.y = 105 * this.dpr;
        this.mCounter.setColor("#27f6ff");
        this.add([this.mCoinValue, this.mDiamondValue, this.mSceneName, this.mSceneType, this.mCounter]);
        var frame = this.scene.textures.getFrame(this.key, "strength_progress");
        this.mStrengthValue = new ProgressValue(this.scene, this.key, "strength_icon", this.dpr);
        this.mStrengthValue.x = 50 * this.dpr;
        this.mStrengthValue.y = 27 * this.dpr;
        var ninePatch = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](this.scene, 60 * this.dpr / 2, this.mStrengthValue.height / 2 - frame.height - 1 * this.dpr, 62 * this.dpr, frame.height, this.key, "strength_progress", {
            left: 8 * this.dpr,
            top: 3 * this.dpr,
            right: frame.width - 2 - 8 * this.dpr,
            bottom: frame.height - 1 - 3 * this.dpr
        });
        this.mStrengthValue.setProgress(ninePatch, this.scale);
        this.add(this.mStrengthValue);
        this.mStrengthValue.setValue(1000, 1000);
        // frame = this.scene.textures.getFrame(this.key, "health_progress");
        // const healthValue = new ProgressValue(this.scene, this.key, "health_con", this.dpr);
        // healthValue.x = 150 * this.dpr;
        // healthValue.y = 27 * this.dpr;
        // const healthNinePatch = new NinePatch(this.scene, 60 * this.dpr / 2, healthValue.height / 2 - frame.height - 1 * this.dpr, 62 * this.dpr, frame.height, this.key, "health_progress", {
        //     left: 8 * this.dpr,
        //     top: 3 * this.dpr,
        //     right: frame.width - 2 - 8 * this.dpr,
        //     bottom: frame.height - 1 - 3 * this.dpr
        // });
        // healthValue.setProgress(healthNinePatch, this.scale);
        // this.add(healthValue);
        // healthValue.setValue(200, 1000);
        this.mExpProgress = new ExpProgress(this.scene, this.key, this.dpr, this.scale, this.mWorld);
        this.add(this.mExpProgress);
        this.resize(w, h);
        _super.prototype.init.call(this);
    };
    PicaMainUIPanel.prototype.onEnterEditScene = function () {
        this.emit("enterEdit");
    };
    return PicaMainUIPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));

var ValueContainer = /** @class */ (function (_super) {
    __extends(ValueContainer, _super);
    function ValueContainer(scene, key, leftIcon, dpr) {
        if (dpr === void 0) { dpr = 1; }
        var _this = _super.call(this, scene) || this;
        _this.init(key, leftIcon, dpr);
        return _this;
    }
    ValueContainer.prototype.setText = function (val) {
        this.mText.setText(val);
    };
    ValueContainer.prototype.init = function (key, leftIcon, dpr) {
        var bg = this.scene.make.image({
            key: key,
            frame: "price_bg"
        }, false);
        var left = this.scene.make.image({
            key: key,
            frame: leftIcon,
        }, false);
        this.mText = this.scene.make.text({
            text: "0",
            width: bg.width,
            height: bg.height,
            style: {
                fontSize: 14 * dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(1, 0);
        this.mText.setStroke("#000000", 1 * dpr);
        this.mAddBtn = this.scene.make.image({
            key: key,
            frame: "add_btn"
        });
        this.setSize(bg.width, bg.height);
        left.x = -this.width * this.originX + 10 * dpr;
        this.mAddBtn.x = this.width * this.originX - this.mAddBtn.width * this.originX;
        this.mAddBtn.y = (this.height - this.mAddBtn.height) / 2 + 2 * dpr;
        this.mText.x = this.width / 2 - 30 * dpr;
        this.mText.y = -(this.height - 12 * dpr) / 2;
        this.add([bg, left, this.mText, this.mAddBtn]);
    };
    return ValueContainer;
}(Phaser.GameObjects.Container));
var IconText = /** @class */ (function (_super) {
    __extends(IconText, _super);
    function IconText(scene, key, frame, dpr) {
        if (dpr === void 0) { dpr = 1; }
        var _this = _super.call(this, scene) || this;
        var icon = scene.make.image({
            key: key,
            frame: frame
        }, false);
        _this.mText = scene.make.text({
            style: {
                fontSize: 16 * dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(0, 0.5);
        _this.mText.x = icon.width / 2 + 8 * dpr;
        // this.mText.y = -icon.height / 2;
        _this.mText.setStroke("#000000", 2 * dpr);
        _this.add([icon, _this.mText]);
        return _this;
    }
    IconText.prototype.setText = function (val) {
        this.mText.setText(val);
    };
    IconText.prototype.setStroke = function (color, thickness) {
        this.mText.setStroke(color, thickness);
    };
    IconText.prototype.setColor = function (color) {
        this.mText.setColor(color);
    };
    return IconText;
}(Phaser.GameObjects.Container));
var SceneName = /** @class */ (function (_super) {
    __extends(SceneName, _super);
    function SceneName(scene, key, leftFrame, rightFrame, dpr) {
        if (dpr === void 0) { dpr = 1; }
        var _this = _super.call(this, scene, key, leftFrame, dpr) || this;
        _this.mDpr = dpr;
        _this.mRightIcon = scene.make.image({
            y: 2 * dpr,
            key: key,
            frame: rightFrame
        }, false);
        _this.add(_this.mRightIcon);
        return _this;
    }
    SceneName.prototype.setText = function (val) {
        _super.prototype.setText.call(this, val);
        this.mRightIcon.x = this.mText.x + this.mText.width + this.mRightIcon.width / 2 + 2 * this.mDpr;
    };
    return SceneName;
}(IconText));
var ExpProgress = /** @class */ (function (_super) {
    __extends(ExpProgress, _super);
    function ExpProgress(scene, key, dpr, scale, world) {
        var _this = _super.call(this, scene) || this;
        var width = world.getSize().width / scale;
        var frame = _this.scene.textures.getFrame(key, "exp_bg");
        _this.setSize(width, frame.height);
        var progressW = _this.width;
        var progressH = _this.height;
        _this.mProgressBar = new ProgressBar(scene, dpr);
        _this.mProgressBar.setSize(_this.width, _this.height);
        var bg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](_this.scene, progressW / 2, progressH / 2, progressW, progressH, key, "exp_bg", {
            left: 8 * dpr,
            top: 3 * dpr,
            right: frame.width - 2 - 8 * dpr,
            bottom: frame.height - 1 - 3 * dpr
        });
        _this.mProgressBar.setBackground(bg);
        frame = _this.scene.textures.getFrame(key, "exp_progress");
        var progres = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](_this.scene, progressW / 2, progressH / 2, width, frame.height, key, "exp_progress", {
            left: 8 * dpr,
            top: 3 * dpr,
            right: frame.width - 2 - 10 * dpr,
            bottom: frame.height - 1 - 5 * dpr
        });
        _this.mProgressBar.setProgress(progres, _this.x, _this.y, scale);
        _this.mProgressBar.setRatio(0.5);
        _this.mCurrentLv = scene.make.text({
            text: "Lv. 57",
            style: {
                fontSize: 10 * dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT
            }
        }, false);
        _this.mCurrentLv.setStroke("#000000", 1 * dpr);
        _this.mNextLv = scene.make.text({
            text: "Lv. 58",
            style: {
                fontSize: 10 * dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(0, 0);
        _this.mNextLv.setStroke("#000000", 1 * dpr);
        _this.mNextLv.x = _this.width - _this.mNextLv.width;
        _this.add([_this.mProgressBar, _this.mCurrentLv, _this.mNextLv]);
        return _this;
    }
    ExpProgress.prototype.setLv = function (val) {
        this.mCurrentLv.setText(val.toString());
        this.mNextLv.setText((val + 1).toString());
        this.mNextLv.x = this.width - this.mNextLv.width;
    };
    return ExpProgress;
}(Phaser.GameObjects.Container));
var ProgressValue = /** @class */ (function (_super) {
    __extends(ProgressValue, _super);
    function ProgressValue(scene, key, leftIcon, dpr) {
        return _super.call(this, scene, key, leftIcon, dpr) || this;
    }
    ProgressValue.prototype.setProgress = function (progres, scale) {
        this.mProgress.setProgress(progres, this.x + this.mProgress.x, this.y + this.mProgress.y, scale);
    };
    ProgressValue.prototype.setValue = function (val, maxValue) {
        if (this.mText) {
            this.mText.text = val.toString();
            this.mProgress.setRatio(val / maxValue);
        }
    };
    ProgressValue.prototype.init = function (key, leftIcon, dpr) {
        var bg = this.scene.make.image({
            key: key,
            frame: "strength_bg"
        }, false);
        this.setSize(bg.width, bg.height);
        var left = this.scene.make.image({
            key: key,
            frame: leftIcon,
        }, false);
        this.mProgress = new ProgressBar(this.scene, dpr);
        this.mProgress.x = -this.width / 2 + 10 * dpr;
        this.mProgress.y = 4 * dpr;
        this.mText = this.scene.make.text({
            text: "0",
            width: bg.width,
            height: bg.height,
            style: {
                fontSize: 10 * dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(0.5);
        this.mText.setStroke("#000000", 1 * dpr);
        this.mAddBtn = this.scene.make.image({
            key: key,
            frame: "add_btn"
        });
        this.setSize(bg.width, bg.height);
        left.x = -this.width * this.originX + 10 * dpr;
        this.mAddBtn.x = this.width * this.originX - 10 * dpr;
        this.mAddBtn.y = 6 * dpr;
        // this.mText.x = this.width / 2
        this.mText.y = (this.height - this.mText.height) / 2;
        this.add([bg, this.mProgress, left, this.mText, this.mAddBtn]);
    };
    return ProgressValue;
}(ValueContainer));
var ProgressBar = /** @class */ (function (_super) {
    __extends(ProgressBar, _super);
    function ProgressBar(scene, dpr) {
        var _this = _super.call(this, scene) || this;
        _this.offsetX = 0;
        _this.offsetY = 0;
        _this.dpr = dpr;
        return _this;
    }
    ProgressBar.prototype.setBackground = function (bg) {
        this.addAt(bg, 0);
    };
    ProgressBar.prototype.setProgress = function (progress, offsetX, offsetY, scale) {
        this.offsetX = offsetX;
        this.offsetY = offsetY;
        this.mScale = scale;
        this.mProgress = progress;
        this.setSize(progress.width * this.mScale, progress.height * this.mScale);
        this.mMaskGraphics = this.scene.make.graphics(undefined, false);
        this.mMaskGraphics.fillStyle(0xFF9900);
        this.mMaskGraphics.fillRoundedRect(0, progress.y * this.mScale - progress.height * this.mScale / 2, this.width, progress.height, 10);
        this.add(this.mProgress);
        this.mProgress.mask = new Phaser.Display.Masks.GeometryMask(this.scene, this.mMaskGraphics);
        this.mMaskGraphics.x = offsetX * scale;
        this.mMaskGraphics.y = offsetY * scale;
    };
    ProgressBar.prototype.setRatio = function (ratio) {
        if (!this.mMaskGraphics) {
            return;
        }
        this.mMaskGraphics.x = ((this.width * ratio) - this.width + this.offsetX);
        // setInterval(() => {
        //     this.mMaskGraphics.x += 1 * this.dpr;
        // }, 100);
    };
    return ProgressBar;
}(Phaser.GameObjects.Container));


/***/ }),
/* 245 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaMainUI", function() { return PicaMainUI; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var PicaMainUI = /** @class */ (function (_super) {
    __extends(PicaMainUI, _super);
    function PicaMainUI(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        _this.register();
        return _this;
    }
    PicaMainUI.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    PicaMainUI.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    PicaMainUI.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_PKT_PLAYER_INFO, this.onUpdatePlayerInfo);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_ROOM_INFO, this.onUpdateModeRoomInfo);
        }
    };
    PicaMainUI.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    PicaMainUI.prototype.sendEnterDecorate = function () {
        if (this.connection) {
            this.connection.send(new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_ENTER));
        }
    };
    PicaMainUI.prototype.destroy = function () {
        this.unregister();
    };
    PicaMainUI.prototype.onUpdatePlayerInfo = function (packet) {
        this.mEvent.emit("update", packet.content);
    };
    PicaMainUI.prototype.onUpdateModeRoomInfo = function (packet) {
        this.mEvent.emit("update", packet.content);
    };
    Object.defineProperty(PicaMainUI.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    return PicaMainUI;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 246 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivityMediator", function() { return ActivityMediator; });
/* harmony import */ var _ActivityPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(247);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(115);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var ActivityMediator = /** @class */ (function (_super) {
    __extends(ActivityMediator, _super);
    function ActivityMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.scene = scene;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_1__[/* UIType */ "a"].Scene;
        _this.world = worldService;
        return _this;
    }
    ActivityMediator.prototype.show = function () {
        if (this.mView && this.mView.isShow() || this.mShow) {
            return;
        }
        if (!this.mView) {
            this.mView = new _ActivityPanel__WEBPACK_IMPORTED_MODULE_0__["ActivityPanel"](this.scene, this.world);
        }
        this.mView.show();
        this.layerManager.addToUILayer(this.mView);
    };
    ActivityMediator.prototype.isSceneUI = function () {
        return true;
    };
    ActivityMediator.NAME = "ActivityMediator";
    return ActivityMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__[/* BaseMediator */ "a"]));



/***/ }),
/* 247 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivityPanel", function() { return ActivityPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ActivityPanel = /** @class */ (function (_super) {
    __extends(ActivityPanel, _super);
    function ActivityPanel(scene, worldService) {
        var _this = _super.call(this, scene, worldService) || this;
        _this.key = "activity";
        return _this;
    }
    ActivityPanel.prototype.resize = function (w, h) {
        var width = this.scaleWidth;
        var height = this.scaleHeight;
        this.content.x = width - 20 * this.dpr;
        this.content.y = 120 * this.dpr;
        this.setSize(w, h);
    };
    ActivityPanel.prototype.show = function (param) {
        if (this.mInitialized) {
            this.setInteractive();
        }
        _super.prototype.show.call(this, param);
    };
    ActivityPanel.prototype.preload = function () {
        this.addAtlas(this.key, "activity/activity.png", "activity/activity.json");
        _super.prototype.preload.call(this);
    };
    ActivityPanel.prototype.init = function () {
        this.content = this.scene.make.container(undefined, false);
        this.add(this.content);
        for (var i = 0; i < 4; i++) {
            var img = this.scene.make.image({
                key: this.key,
                frame: "icon_" + (i + 1)
            }, false);
            // img.y = i * 50 * this.dpr;
            this.content.add(img);
        }
        var mainMenuW = 160 * this.dpr;
        var subList = this.content.list;
        subList.map(function (btn) { return mainMenuW -= btn.height; });
        var margin = mainMenuW / (subList.length - 1);
        var offsetY = 15 * this.dpr;
        var tmpWid = 0;
        var tmpHei = 0;
        for (var i = 1; i < subList.length; i++) {
            var preButton = subList[i - 1];
            var button = subList[i];
            button.y = preButton.height + preButton.y + margin + offsetY;
            tmpHei += button.y;
            tmpWid = button.width;
        }
        this.resize(tmpWid, tmpHei);
        _super.prototype.init.call(this);
    };
    return ActivityPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 248 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaChatPanel", function() { return PicaChatPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _lib_rexui_lib_ui_textarea_TextArea__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(127);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(116);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(107);
/* harmony import */ var _components_input_panel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(180);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var PicaChatPanel = /** @class */ (function (_super) {
    __extends(PicaChatPanel, _super);
    function PicaChatPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "pica_chat";
        _this.MAX_HEIGHT = 460 * _this.dpr;
        _this.MIN_HEIGHT = 100 * _this.dpr;
        _this.scale = 1;
        return _this;
    }
    PicaChatPanel.prototype.show = function (param) {
        this.mShowData = param;
        if (this.mPreLoad)
            return;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        if (this.mShow)
            return;
        if (this.soundGroup && this.soundGroup.open)
            this.playSound(this.soundGroup.open);
        if (!this.mTweening && this.mTweenBoo) {
            this.showTween(true);
        }
        else {
            this.mShow = true;
        }
        this.setInteractive();
        this.addListen();
    };
    PicaChatPanel.prototype.resize = function (w, h) {
        this.setSize(w, h);
        var zoom = this.scale;
        var width = this.scene.cameras.main.width;
        var height = this.scene.cameras.main.height;
        var frame = this.scene.textures.getFrame(this.key, "title_bg.png");
        var scaleRatio = width / frame.width;
        this.mTitleBg.scaleX = scaleRatio;
        this.mTitleBg.x = width / 2;
        this.y = height - this.height;
        this.mBackground.clear();
        this.mBackground.fillStyle(0, 0.6);
        this.mBackground.fillRect(0, 0, width, h);
        // this.mBackground.setInteractive();
        this.mNavigateBtn.x = width - this.mNavigateBtn.width / 2 - 2 * this.dpr * zoom;
        this.mNavigateBtn.y = this.height - this.mNavigateBtn.height / 2 - 5 * this.dpr * zoom;
        this.mScrollBtn.x = width - this.mScrollBtn.width / 2 - 2 * this.dpr * zoom;
        this.mTextArea.childrenMap.child.setMinSize(w, (h - 16 * this.dpr) * zoom);
        this.mTextArea.layout();
        this.mTextArea.setPosition(this.width / 2 + 4 * this.dpr, this.y + this.mTextArea.height / 2 + 10 * this.dpr * zoom);
        var textMask = this.mTextArea.childrenMap.text;
        textMask.y = 8 * this.dpr;
        this.mTextArea.scrollToBottom();
        _super.prototype.resize.call(this, w, h);
    };
    PicaChatPanel.prototype.appendChat = function (val) {
        if (this.mTextArea) {
            this.mTextArea.appendText(val);
            this.mTextArea.scrollToBottom();
        }
    };
    PicaChatPanel.prototype.hide = function () {
        this.mShow = false;
    };
    PicaChatPanel.prototype.addListen = function () {
        if (!this.mInitialized || !this.interactiveBoo)
            return;
        // this.mBackground.setInteractive();
        this.mChatBtn.setInteractive();
        this.mEmojiBtn.setInteractive();
        this.mScrollBtn.setInteractive();
        this.mNavigateBtn.setInteractive();
        this.mTextArea.childrenMap.child.setInteractive();
        this.mScrollBtn.on("drag", this.onDragHandler, this);
        this.scene.input.setDraggable(this.mScrollBtn, true);
        this.mNavigateBtn.on("pointerup", this.onShowNavigateHandler, this);
        this.mChatBtn.on("pointerup", this.onShowInputHanldler, this);
    };
    PicaChatPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mBackground.disableInteractive();
        this.mChatBtn.disableInteractive();
        this.mEmojiBtn.disableInteractive();
        this.mScrollBtn.disableInteractive();
        this.mNavigateBtn.disableInteractive();
        this.mTextArea.childrenMap.child.disableInteractive();
        this.mScrollBtn.off("drag", this.onDragHandler, this);
        this.mNavigateBtn.off("pointerup", this.onShowNavigateHandler, this);
        this.mChatBtn.off("pointerup", this.onShowInputHanldler, this);
    };
    PicaChatPanel.prototype.preload = function () {
        this.addAtlas(this.key, "pica_chat/pica_chat.png", "pica_chat/pica_chat.json");
        _super.prototype.preload.call(this);
    };
    PicaChatPanel.prototype.init = function () {
        var width = this.scene.cameras.main.width;
        var height = this.scene.cameras.main.height;
        this.mBackground = this.scene.make.graphics(undefined, false);
        var zoom = this.scale;
        this.setSize(width, 135 * this.dpr);
        this.mTileContainer = this.scene.make.container(undefined, false);
        this.mScrollBtn = this.scene.make
            .image({
            key: this.key,
            frame: "scroll_btn.png"
        }, false)
            .setScale(zoom);
        this.mTitleBg = this.scene.make.image({
            key: this.key,
            frame: "title_bg.png"
        }, false)
            .setScale(zoom);
        this.mTitleBg.texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
        this.mChatBtn = this.scene.make
            .image({
            x: 33 * this.dpr * zoom,
            key: this.key,
            frame: "chat_icon.png"
        }, false)
            .setScale(zoom);
        this.mHornBtn = this.scene.make
            .image({
            x: 96 * this.dpr * zoom,
            key: this.key,
            frame: "horn_icon.png"
        }, false)
            .setScale(zoom);
        this.mEmojiBtn = this.scene.make
            .image({
            x: 155 * this.dpr * zoom,
            key: this.key,
            frame: "emoji.png"
        }, false)
            .setScale(zoom);
        this.mChatBtn.y = -this.mChatBtn.height / 2 + this.mTitleBg.height;
        this.mHornBtn.y = -this.mHornBtn.height / 2 + this.mTitleBg.height;
        this.mEmojiBtn.y = -this.mEmojiBtn.height / 2 + this.mTitleBg.height;
        this.mOutputText = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.mScene, 0, 0, "", {
            fontSize: 14 * this.dpr / zoom + "px",
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_3__[/* Font */ "a"].DEFULT_FONT,
            stroke: "#000000",
            strokeThickness: 1 * this.dpr * zoom,
            textMask: false,
            shadow: {
                offsetX: 0,
                offsetY: 0,
                color: "#000",
                blur: 4,
                stroke: true,
                fill: true
            },
            wrap: {
                mode: "char",
                width: width - 12 * this.dpr * zoom
            }
        });
        var background = this.scene.make.graphics(undefined, false);
        this.mTextArea = new _lib_rexui_lib_ui_textarea_TextArea__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](this.mScene, {
            x: width / 2 + 4 * this.dpr * zoom,
            y: 160 * this.dpr * zoom,
            // background: (<any> this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, 0.2),
            textWidth: width - 4 * this.dpr * zoom,
            textHeight: this.MAX_HEIGHT,
            text: this.mOutputText,
        })
            .layout();
        this.mNavigateBtn = this.scene.make.image({
            key: this.key,
            frame: "more_btn.png"
        }, false)
            .setScale(zoom);
        this.mTileContainer.add([
            this.mTitleBg,
            this.mChatBtn,
            this.mHornBtn,
            this.mEmojiBtn,
            this.mScrollBtn
        ]);
        this.add([
            this.mBackground,
            this.mTileContainer,
            this.mTextArea,
            this.mOutputText,
            background,
            this.mNavigateBtn
        ]);
        this.mTextArea.setSliderEnable(false);
        // this.mTextArea.childrenMap.child.disableInteractive();
        this.resize(this.width, 400);
        _super.prototype.init.call(this);
        this.removeInteractive();
        // this.addActionListener();
        this.appendChat("小盆友[color=yellow]进入房间[/color]\n");
        this.appendChat("一直狐狸[color=yellow]离开房间[/color]\n");
        this.appendChat("[color=#ffffff][当前]小盆友：玩家注册后，账户等级为Lv1级。[/color]\n");
        this.appendChat("[color=#66ffff][喇叭]。用户在游戏内游玩时，使用该道具，经验值收益为4倍增长，时间上限为4h[/color]\n");
        this.appendChat("[color=#ffff00]等级提升为6级[/color]\n");
    };
    PicaChatPanel.prototype.onDragHandler = function (pointer, dragX, dragY) {
        var height = this.height + (pointer.prevPosition.y - pointer.position.y);
        if (height > this.MAX_HEIGHT || height < this.MIN_HEIGHT) {
            return;
        }
        this.resize(this.width, height);
    };
    PicaChatPanel.prototype.onShowNavigateHandler = function () {
        this.emit("showNavigate");
    };
    PicaChatPanel.prototype.onShowInputHanldler = function () {
        // new InputPanel(this.scene);
        if (this.mInputText) {
            return;
        }
        this.mInputText = new _components_input_panel__WEBPACK_IMPORTED_MODULE_4__["InputPanel"](this.scene, this.mWorld);
        this.mInputText.once("close", this.sendChat, this);
    };
    PicaChatPanel.prototype.sendChat = function (val) {
        this.mInputText = undefined;
        if (!val) {
            return;
        }
        this.emit("chat", val);
    };
    return PicaChatPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 249 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaNavigatePanel", function() { return PicaNavigatePanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var PicaNavigatePanel = /** @class */ (function (_super) {
    __extends(PicaNavigatePanel, _super);
    function PicaNavigatePanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "pica_navigate";
        _this.setTween(false);
        _this.setInteractive();
        return _this;
    }
    PicaNavigatePanel.prototype.resize = function (w, h) {
        this.setSize(w, h);
        var zoom = this.scale;
        var width = this.scene.cameras.main.width / zoom;
        var height = this.scene.cameras.main.height;
        var frame = this.scene.textures.getFrame(this.key, "bg");
        var scaleRatio = width / frame.width * this.dpr;
        this.mBackground.scaleX = scaleRatio;
        this.mBackground.x = width / 2;
        this.mBackground.setInteractive();
        this.mCloseBtn.x = width - this.mCloseBtn.width / 2 - 3 * this.dpr;
        this.y = height - this.height / 2;
        _super.prototype.resize.call(this, w, h);
    };
    PicaNavigatePanel.prototype.addListen = function () {
        if (!this.mInitialized || !this.interactiveBoo)
            return;
        this.mMapBtn.on("pointerup", this.onShowMapHandler, this);
        this.mShopBtn.on("pointerup", this.onShowShopHandler, this);
        this.mBagBtn.on("pointerup", this.onShowBagHandler, this);
        this.mFamilyBtn.on("pointerup", this.onShowFamilyHandler, this);
        this.mGoHomeBtn.on("pointerup", this.onShowGoHomeHandler, this);
        this.mPlayerBtn.on("pointerup", this.onShowPlayerHandler, this);
        this.mCloseBtn.on("pointerup", this.onCloseHandler, this);
    };
    PicaNavigatePanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mMapBtn.off("pointerup", this.onShowMapHandler, this);
        this.mShopBtn.off("pointerup", this.onShowShopHandler, this);
        this.mBagBtn.off("pointerup", this.onShowBagHandler, this);
        this.mFamilyBtn.off("pointerup", this.onShowFamilyHandler, this);
        this.mGoHomeBtn.on("pointerup", this.onShowGoHomeHandler, this);
        this.mPlayerBtn.on("pointerup", this.onShowPlayerHandler, this);
        this.mCloseBtn.off("pointerup", this.onCloseHandler, this);
    };
    PicaNavigatePanel.prototype.hide = function () {
        this.mShow = false;
    };
    PicaNavigatePanel.prototype.preload = function () {
        this.addAtlas(this.key, "pica_navigate/pica_navigate.png", "pica_navigate/pica_navigate.json");
        _super.prototype.preload.call(this);
    };
    PicaNavigatePanel.prototype.init = function () {
        this.mBackground = this.createImage(this.key, "bg");
        this.mBackground.texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
        this.mMapBtn = this.createImage(this.key, "map_btn").setInteractive();
        this.mShopBtn = this.createImage(this.key, "shop_btn").setInteractive();
        this.mBagBtn = this.createImage(this.key, "bag_btn").setInteractive();
        this.mFamilyBtn = this.createImage(this.key, "family_btn").setInteractive();
        this.mGoHomeBtn = this.createImage(this.key, "home_btn").setInteractive();
        this.mPlayerBtn = this.createImage(this.key, "family_btn").setInteractive();
        this.mCloseBtn = this.createImage(this.key, "close_btn").setInteractive();
        var list = [this.mMapBtn, this.mMapBtn, this.mShopBtn, this.mBagBtn, this.mFamilyBtn, this.mGoHomeBtn, this.mPlayerBtn];
        this.add([this.mBackground]);
        this.add(list);
        this.add(this.mCloseBtn);
        for (var i = 0; i < list.length; i++) {
            list[i].x = i * 50 * this.dpr - list[i].width / 2;
        }
        var zoom = this.scale;
        this.resize(this.mBackground.width * zoom, this.mBackground.height * zoom);
        _super.prototype.init.call(this);
    };
    PicaNavigatePanel.prototype.createImage = function (key, frame) {
        return this.scene.make.image({
            key: key,
            frame: frame
        }, false);
    };
    PicaNavigatePanel.prototype.onShowMapHandler = function () {
        this.emit("showPanel", "PicaRoomList");
    };
    PicaNavigatePanel.prototype.onShowShopHandler = function () {
        this.emit("showPanel", "Market");
    };
    PicaNavigatePanel.prototype.onShowBagHandler = function () {
        this.emit("showPanel", "FurniBag");
    };
    PicaNavigatePanel.prototype.onShowFamilyHandler = function () {
        this.emit("showPanel", "CharacterInfo");
    };
    PicaNavigatePanel.prototype.onShowGoHomeHandler = function () {
        this.emit("showPanel", "Compose");
    };
    PicaNavigatePanel.prototype.onShowPlayerHandler = function () {
        // this.emit("showPanel", "CharacterInfo");
    };
    PicaNavigatePanel.prototype.onCloseHandler = function () {
        this.emit("close");
    };
    return PicaNavigatePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 250 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaChat", function() { return PicaChat; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var PicaChat = /** @class */ (function (_super) {
    __extends(PicaChat, _super);
    function PicaChat($world) {
        var _this = _super.call(this) || this;
        _this.world = $world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    PicaChat.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_CHAT, this.handleCharacterChat);
        }
    };
    PicaChat.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    PicaChat.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    PicaChat.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    PicaChat.prototype.sendMessage = function (val) {
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_GATEWAY_REQ_VIRTUAL_WORLD_CHAT);
        var content = pkt.content;
        content.chatChannel = 0;
        content.chatContext = val;
        this.connection.send(pkt);
    };
    PicaChat.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    PicaChat.prototype.handleCharacterChat = function (packet) {
        this.mEvent.emit("chat", packet.content);
    };
    Object.defineProperty(PicaChat.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    return PicaChat;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 251 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MineCarMediator", function() { return MineCarMediator; });
/* harmony import */ var _MineCarPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(252);
/* harmony import */ var _MineCar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(256);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var MineCarMediator = /** @class */ (function (_super) {
    __extends(MineCarMediator, _super);
    function MineCarMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.scene = scene;
        _this.world = worldService;
        _this.mMineCar = new _MineCar__WEBPACK_IMPORTED_MODULE_1__["MineCar"](worldService);
        _this.mMineCar.register();
        _this.mMineCar.on("query", _this.onQueryHandler, _this);
        return _this;
    }
    MineCarMediator.prototype.show = function (param) {
        if (this.mShow) {
            return;
        }
        _super.prototype.show.call(this, param);
        if (!this.mView) {
            this.mView = new _MineCarPanel__WEBPACK_IMPORTED_MODULE_0__["MineCarPanel"](this.scene, this.world);
        }
        this.mView.show(param);
        this.mView.on("close", this.onCloseHandler, this);
        this.mView.on("discard", this.onDiscardHandler, this);
        this.layerManager.addToUILayer(this.mView);
    };
    MineCarMediator.prototype.update = function (param) {
        if (!this.mView) {
            this.show(param);
            return;
        }
        _super.prototype.update.call(this, param);
    };
    MineCarMediator.prototype.destroy = function () {
        this.mShow = false;
        if (this.mMineCar) {
            this.mMineCar.off("query", this.onQueryHandler, this);
            this.mMineCar.unregister();
            this.mMineCar.destroy();
            this.mMineCar = null;
        }
        _super.prototype.destroy.call(this);
    };
    MineCarMediator.prototype.onQueryHandler = function (packet) {
        this.update(packet);
    };
    MineCarMediator.prototype.onDiscardHandler = function (items) {
        if (this.mMineCar) {
            this.mMineCar.discard(items);
        }
    };
    MineCarMediator.prototype.onCloseHandler = function () {
        if (this.mView) {
            this.mView.hide();
            this.mView = undefined;
        }
        this.mShow = false;
    };
    return MineCarMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__[/* BaseMediator */ "a"]));



/***/ }),
/* 252 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MineCarPanel", function() { return MineCarPanel; });
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(107);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);
/* harmony import */ var _components_alert_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(253);
/* harmony import */ var _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(134);
/* harmony import */ var _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(120);
/* harmony import */ var _lib_rexui_lib_ui_tab_TabButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(182);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








var MineCarPanel = /** @class */ (function (_super) {
    __extends(MineCarPanel, _super);
    function MineCarPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "mine_car";
        _this.scale = 1;
        _this.disInteractive();
        return _this;
    }
    MineCarPanel.prototype.resize = function (width, height) {
        var w = this.scene.cameras.main.width / this.scale;
        var h = this.scene.cameras.main.height / this.scale;
        _super.prototype.resize.call(this, width, height);
        var zoom = this.mWorld.uiScale;
        this.setSize(w, h);
        this.mBg.x = w / 2;
        this.mBg.y = this.mBg.displayHeight / 2 + 107 * this.dpr * zoom;
        this.carIcon.x = this.mBg.x / 2 - 4 * this.dpr * zoom;
        this.carIcon.y = this.mBg.y - (this.mBg.displayHeight - this.carIcon.displayHeight) / 2 + 4 * this.dpr * zoom;
        this.mCloseBtn.x = this.mBg.x + this.mBg.displayWidth / 2;
        this.mCloseBtn.y = this.mBg.y - (this.mBg.displayHeight - this.mCloseBtn.displayHeight) / 2 + 10 * this.dpr * zoom;
        this.mCounter.x = this.mBg.x / 2;
        this.mCounter.y = this.mBg.y + (this.mBg.displayHeight - this.mDiscardBtn.displayHeight) / 2 - 16 * this.dpr * zoom;
        this.mTips.x = this.mBg.x + 20 * this.dpr * zoom;
        this.mTips.y = this.mBg.y - this.mBg.displayHeight / 2 - 15 * this.dpr * zoom;
        this.mDiscardBtn.x = this.mBg.x + this.mBg.displayWidth / 2 - this.mDiscardBtn.displayWidth / 2 - 9 * this.dpr * zoom;
        this.mDiscardBtn.y = this.mBg.y + this.mBg.displayHeight / 2 - this.mDiscardBtn.displayHeight / 2 - 9 * this.dpr * zoom;
        this.categoriesBg.x = this.mBg.x;
        this.categoriesBg.y = this.mBg.y - this.mBg.displayHeight / 2 + this.categoriesBg.displayHeight / 2 + 38 * this.dpr * zoom;
        this.mPropGrid.refreshPos(this.mBg.x + 2 * this.dpr * zoom, this.mBg.y + 6 * this.dpr * zoom);
        this.mCategoryTable.refreshPos(this.mBg.x, this.mBg.y - this.mBg.displayHeight / 2 + this.categoriesBg.displayHeight / 2 + 44 * this.dpr * zoom);
    };
    MineCarPanel.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        if (this.mInitialized && !this.mPreLoad) {
            this.refreshData();
        }
    };
    MineCarPanel.prototype.update = function (param) {
        _super.prototype.update.call(this, param);
        if (this.mInitialized && this.mShow) {
            this.refreshData();
        }
    };
    MineCarPanel.prototype.setCategories = function (subcategorys) {
        this.mPreSelectedCategorie = undefined;
        this.mCategoryTable.setItems(subcategorys);
    };
    MineCarPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.removeListen();
        this.mCloseBtn.on("pointerup", this.onCloseHandler, this);
        this.mDiscardBtn.on("Tap", this.enterDiscardMode, this);
    };
    MineCarPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mCloseBtn.off("pointerup", this.onCloseHandler, this);
        this.mDiscardBtn.off("Tap", this.enterDiscardMode, this);
    };
    MineCarPanel.prototype.setProp = function () { };
    MineCarPanel.prototype.destroy = function () {
        if (this.mPropGrid) {
            this.mPropGrid.destroy();
        }
        // if (this.mPanel) {
        //   this.mPanel.removeAll(true);
        // }
        if (this.mCategoryTable) {
            this.mCategoryTable.destroy();
        }
        _super.prototype.destroy.call(this);
    };
    MineCarPanel.prototype.preload = function () {
        this.addAtlas(this.key, "mine_car/mine_car.png", "mine_car/mine_car.json");
        _super.prototype.preload.call(this);
    };
    MineCarPanel.prototype.init = function () {
        var _this = this;
        var w = this.scene.cameras.main.width / this.scale;
        var h = this.scene.cameras.main.height / this.scale;
        this.setSize(w, h);
        // this.mPanel = this.scene.make.container(undefined, false);
        // this.mMask = this.scene.make.graphics(undefined, false);
        var zoom = this.mWorld.uiScale;
        this.mBg = this.scene.make
            .image({
            key: this.key,
            frame: "bg.png",
        })
            .setScale(zoom);
        this.mBg.x = w / 2;
        this.mBg.y = h / 2;
        // this.mPanel.setSize(bg.displayWidth, bg.displayHeight);
        this.carIcon = this.scene.make
            .image({
            key: this.key,
            frame: "car_icon.png",
        }, false)
            .setScale(zoom);
        this.carIcon.x = (-(this.mBg.width - this.carIcon.width) * zoom) / 2 + 28 * this.dpr * zoom;
        this.carIcon.y = (-(this.mBg.height - this.carIcon.height / 2) * zoom) / 2 + 10 * this.dpr * zoom;
        this.mCloseBtn = this.scene.make
            .image({
            // x: 110 * this.dpr * zoom,
            // y: -125 * this.dpr * zoom,
            key: this.key,
            frame: "close_btn.png",
        }, false)
            .setScale(zoom);
        this.mCloseBtn.setInteractive();
        this.mCloseBtn.x = (this.mBg.width * zoom) / 2;
        this.mCloseBtn.y = (-(this.mBg.height - this.mCloseBtn.height) * zoom) / 2 + 10 * this.dpr * zoom;
        this.mCounter = this.scene.make.text({
            text: "25/50",
            style: {
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                color: "#FFFFFF",
                fontSize: 12 * this.dpr * zoom,
            },
        }, false);
        this.mCounter.x = -this.displayWidth / 2 + 17 * this.dpr * zoom;
        this.mCounter.y = this.displayHeight / 2 - 18 * this.dpr * zoom - this.mCounter.height;
        this.mCounter.setFontStyle("bold");
        this.mTips = new Tips(this.scene, this.key, this.dpr, zoom);
        this.mTips.scale = zoom;
        this.mTips.x = 40 * this.dpr * zoom; // - this.mTips.width / 2;
        this.mTips.y = (-(this.mBg.height + this.mTips.height) * zoom) / 2 + 15 * this.dpr * zoom;
        this.mDiscardBtn = new DiscardButton(this.scene, this.key, "yellow_btn.png", undefined, "丢弃");
        this.mDiscardBtn.setScale(zoom);
        (this.mDiscardBtn.x = ((this.mBg.width - this.mDiscardBtn.displayWidth) * zoom) / 2 - 17 * this.dpr * zoom),
            (this.mDiscardBtn.y = ((this.mBg.height - this.mDiscardBtn.displayHeight) * zoom) / 2 - 10 * this.dpr * zoom),
            this.mDiscardBtn.setTextStyle({
                color: "##996600",
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 10 * this.dpr * zoom,
            });
        this.mDiscardBtn.changeState(DiscardEnum.Discard);
        this.categoriesBg = this.scene.make
            .image({
            key: this.key,
            frame: "nav_bg.png",
        })
            .setScale(zoom);
        // this.categoriesBg.y = -111 * this.dpr * zoom + this.categoriesBg.height * zoom / 2;
        this.categoriesBg.y = -(this.displayHeight - this.categoriesBg.displayHeight) / 2 + 36 * this.dpr * zoom;
        var propFrame = this.scene.textures.getFrame(this.key, "item_border.png");
        var capW = propFrame.width * zoom + 4 * this.dpr * zoom;
        var capH = propFrame.height * zoom + 4 * this.dpr * zoom;
        // this.cellHeight = capH;
        var gridW = 236 * this.dpr * zoom;
        var propConfig = {
            x: -7 * this.dpr * zoom,
            y: -16 * this.dpr * zoom,
            table: {
                width: gridW,
                height: 295 * this.dpr * zoom,
                columns: 4,
                cellsCount: 25,
                cellWidth: capW,
                cellHeight: capH,
                reuseCellContainer: true,
                cellOriginX: 0,
                cellOriginY: 0
                // mask: false
            },
            scrollMode: 0,
            clamplChildOY: false,
            // background: (<any>this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, .2),
            createCellContainerCallback: function (cell, cellContainer) {
                var scene = cell.scene, item = cell.item;
                if (cellContainer === null) {
                    cellContainer = new PackageItem(scene, _this.key, _this.dpr, zoom);
                    _this.add(cellContainer);
                }
                cellContainer.setData({ item: item });
                cellContainer.setProp(item);
                return cellContainer;
            },
        };
        this.mPropGrid = new _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_5__[/* GameGridTable */ "a"](this.scene, propConfig);
        this.mPropGrid.layout();
        this.mPropGrid.on("cellTap", function (cell) {
            // const item = cell.getData("item");
            // if (item) {
            _this.onSelectItemHandler(cell);
            // }
        });
        var frame = this.scene.textures.getFrame(this.key, "nav_btn_normal.png");
        var categoryTableConfig = {
            x: -9 * this.dpr * zoom,
            y: -155 * this.dpr * zoom,
            table: {
                width: gridW,
                height: this.categoriesBg.displayHeight,
                cellWidth: (frame.width + 4 * this.dpr) * zoom,
                cellHeight: (29 * this.dpr) * zoom,
                reuseCellContainer: true,
                cellOriginX: 0,
                cellOriginY: 0
                // mask: false
            },
            scrollMode: 1,
            // background: (<any>this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, .2),
            createCellContainerCallback: function (cell, cellContainer) {
                var scene = cell.scene, item = cell.item;
                if (cellContainer === null) {
                    cellContainer = new CategorieButton(scene, _this.key, "nav_btn_normal.png", "nav_btn_down.png", "1");
                    cellContainer.setTextStyle({
                        color: "#566ddb",
                        fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                        fontSize: 10 * _this.dpr * zoom
                    });
                    cellContainer.setFontStyle("bold");
                    cellContainer.setScale(zoom);
                    _this.add(cellContainer);
                }
                cellContainer.setText(item.value);
                cellContainer.setData("data", item);
                if (!_this.mPreSelectedCategorie) {
                    _this.onClickCategoryHandler(cellContainer);
                }
                return cellContainer;
            }
        };
        this.mCategoryTable = new _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_5__[/* GameGridTable */ "a"](this.scene, categoryTableConfig);
        this.mCategoryTable.layout();
        this.mCategoryTable.on("cellTap", function (cell) {
            _this.onClickCategoryHandler(cell);
        });
        // this.add(this.mPanel);
        this.add([
            // this.mMask,
            this.mBg,
            this.carIcon,
            this.mCounter,
            this.categoriesBg,
            this.mPropGrid.table,
            this.mCategoryTable.table,
            this.mCloseBtn,
            this.mDiscardBtn,
        ]);
        this.resize(this.scene.cameras.main.width, this.scene.cameras.main.height);
        _super.prototype.init.call(this);
    };
    MineCarPanel.prototype.refreshData = function () {
        var minePackage = this.mShowData;
        var mineItem = minePackage.items || [];
        this.mLimit = minePackage.limit || 0;
        this.mAllItem = [];
        for (var _i = 0, mineItem_1 = mineItem; _i < mineItem_1.length; _i++) {
            var item = mineItem_1[_i];
            this.mAllItem.push({ item: item });
        }
        this.mDiscardBtn.changeState(DiscardEnum.Discard);
        this.mCounter.setText(mineItem.length + "/" + this.mLimit);
        this.setCategories(minePackage.subcategories);
    };
    MineCarPanel.prototype.onCloseHandler = function () {
        this.emit("close");
    };
    MineCarPanel.prototype.onSelectedCategory = function (subcategory) {
        this.mFilterItem = [];
        var pkgItem = null;
        for (var _i = 0, _a = this.mAllItem; _i < _a.length; _i++) {
            var item = _a[_i];
            pkgItem = item.item;
            if (pkgItem && (pkgItem.subcategory === subcategory || subcategory === "all")) {
                this.mFilterItem.push(item);
            }
        }
        var len = this.mLimit - this.mFilterItem.length;
        for (var i = 0; i < len; i++) {
            this.mFilterItem.push({ item: null });
        }
        this.mPropGrid.setItems(this.mFilterItem);
    };
    MineCarPanel.prototype.onSelectItemHandler = function (packageItem) {
        if (this.mDiscardBtn && this.mDiscardBtn.buttonState !== DiscardEnum.Discard) {
            packageItem.switchSelect();
            this.checkMode();
            return;
        }
        if (packageItem && packageItem.item.item) {
            if (!this.mTips.parentContainer) {
                this.add(this.mTips);
            }
            this.mTips.setItem(packageItem.item.item);
        }
        else {
            this.remove(this.mTips);
        }
    };
    MineCarPanel.prototype.onClickCategoryHandler = function (item) {
        var data = item.getData("data");
        if (data) {
            this.onSelectedCategory(data.key);
            if (this.mPreSelectedCategorie) {
                this.mPreSelectedCategorie.changeNormal();
            }
            item.changeDown();
            this.mPreSelectedCategorie = item;
        }
    };
    MineCarPanel.prototype.checkMode = function () {
        if (!this.mFilterItem || this.mFilterItem.length < 1) {
            return;
        }
        for (var _i = 0, _a = this.mFilterItem; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.selected) {
                this.mDiscardBtn.changeState(DiscardEnum.Sutmit);
                return;
            }
        }
        this.mDiscardBtn.changeState(DiscardEnum.Cancel);
    };
    MineCarPanel.prototype.onDiscardSelectedItem = function () {
        var _this = this;
        if (!this.mFilterItem || this.mFilterItem.length < 1) {
            return;
        }
        // const selected = this.mAllItem.filter((item) => item.selected);
        var selected = [];
        var label = [];
        for (var _i = 0, _a = this.mFilterItem; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.item && item.selected) {
                selected.push(item.item);
                label.push(item.item.name + "*" + item.item.count);
            }
        }
        new _components_alert_view__WEBPACK_IMPORTED_MODULE_4__["AlertView"](this.scene, this.mWorld).show({
            text: "\u60A8\u786E\u5B9A\u8981\u4E22\u5F03 [color=#0157BC]" + label.join("、") + "[/color] \u5417\uFF1F",
            title: "丢弃",
            oy: 302 * this.dpr * this.mWorld.uiScale,
            callback: function () {
                _this.emit("discard", selected);
            },
        });
    };
    MineCarPanel.prototype.enterDiscardMode = function () {
        if (!this.mFilterItem) {
            return;
        }
        var state = this.mDiscardBtn.buttonState;
        var visible = false;
        if (state === DiscardEnum.Discard) {
            this.mDiscardBtn.changeState(DiscardEnum.Cancel);
            visible = true;
        }
        else {
            if (state === DiscardEnum.Sutmit) {
                this.onDiscardSelectedItem();
            }
            this.mDiscardBtn.changeState(DiscardEnum.Discard);
        }
        if (this.mFilterItem.length > 0 && this.mFilterItem[0].selectVisible !== visible) {
            this.mFilterItem.map(function (item) {
                item.selectVisible = visible;
                item.selected = false;
            });
            this.mPropGrid.setItems(this.mFilterItem);
        }
    };
    return MineCarPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_2__["BasePanel"]));

var PackageItem = /** @class */ (function (_super) {
    __extends(PackageItem, _super);
    function PackageItem(scene, key, dpr, zoom) {
        var _this = _super.call(this, scene) || this;
        var border = _this.scene.make
            .image({
            key: key,
            frame: "item_border.png",
        }, false)
            .setOrigin(0)
            .setScale(zoom);
        _this.setSize(border.width * zoom, border.height * zoom);
        _this.mItemImage = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__["DynamicImage"](_this.scene, 0, 0);
        _this.mItemImage.setOrigin(0);
        _this.mItemImage.setScale(dpr * zoom);
        _this.mCounter = _this.scene.make
            .text({
            x: border.displayWidth - 2 * dpr,
            y: border.displayHeight - 1 * dpr,
            style: {
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 9 * dpr * zoom,
                color: "#566DDB",
            },
        })
            .setOrigin(1);
        _this.mCounter.setFontStyle("bold");
        _this.mSelectedIcon = _this.scene.make.image({
            key: key,
            frame: "icon_normal.png",
        }, false);
        _this.mSelectedIcon.x = border.width * zoom - 2 * dpr - (_this.mSelectedIcon.width * zoom) / 2;
        _this.mSelectedIcon.y = 2 * dpr + (_this.mSelectedIcon.height * zoom) / 2;
        _this.add(border);
        return _this;
    }
    PackageItem.prototype.setProp = function (data) {
        this.mItem = data;
        var packageItem = data.item;
        if (!data || !packageItem) {
            this.remove([this.mItemImage, this.mCounter, this.mSelectedIcon]);
            return;
        }
        if (this.mItem) {
            this.mItemImage.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getOsdRes(packageItem.display.texturePath), this, this.onLoadCompleteHandler);
            this.add(this.mItemImage);
            if (packageItem.count > 1) {
                this.mCounter.setText(packageItem.count.toString());
                this.add(this.mCounter);
            }
            if (this.mItem.selectVisible) {
                this.add(this.mSelectedIcon);
            }
            else {
                this.remove(this.mSelectedIcon);
            }
            this.setSelected();
        }
    };
    PackageItem.prototype.switchSelect = function () {
        if (!this.mItem.item) {
            return;
        }
        this.mItem.selected = !this.mItem.selected;
        this.setSelected();
    };
    Object.defineProperty(PackageItem.prototype, "item", {
        get: function () {
            return this.mItem;
        },
        enumerable: false,
        configurable: true
    });
    PackageItem.prototype.onLoadCompleteHandler = function () {
        if (this.mItemImage) {
            this.mItemImage.x = (this.width - this.mItemImage.displayWidth) >> 1;
            this.mItemImage.y = (this.height - this.mItemImage.displayHeight) >> 1;
        }
    };
    PackageItem.prototype.setSelected = function () {
        if (this.mItem.selected) {
            this.mSelectedIcon.setFrame("icon_selected.png");
        }
        else {
            this.mSelectedIcon.setFrame("icon_normal.png");
        }
    };
    return PackageItem;
}(Phaser.GameObjects.Container));
var Tips = /** @class */ (function (_super) {
    __extends(Tips, _super);
    function Tips(scene, key, dpr, zoom) {
        if (zoom === void 0) { zoom = 1; }
        var _this = _super.call(this, scene) || this;
        _this.mDpr = dpr;
        var bg = _this.scene.make.image({
            key: key,
            frame: "tips_bg.png",
        }, false);
        _this.mName = _this.scene.make.text({
            x: -bg.width / 2 + 12 * dpr * zoom,
            y: -bg.height / 2 + 5 * dpr * zoom,
            style: {
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 10 * dpr * zoom,
                color: "#000000",
            },
        }, false);
        _this.mDes = _this.scene.make
            .text({
            x: _this.mName.x,
            style: {
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 10 * dpr * zoom,
                color: "#000000",
            },
        }, false)
            .setOrigin(0, 1);
        _this.add([bg, _this.mName, _this.mDes]);
        _this.setSize(bg.width * zoom, bg.height * zoom);
        return _this;
    }
    Tips.prototype.setItem = function (item) {
        if (!item) {
            return;
        }
        var tmpY = this.y;
        var tmpAlpha = this.alpha;
        this.y = tmpY + 50 * this.mDpr;
        this.alpha = 0;
        this.scene.tweens.add({
            targets: this,
            props: {
                alpha: tmpAlpha,
                y: tmpY,
            },
            duration: 200,
            ease: Phaser.Math.Easing.Elastic.Out,
        });
        this.mName.setText(item.shortName || item.name);
        this.mDes.setText(item.des);
    };
    return Tips;
}(Phaser.GameObjects.Container));
var DiscardButton = /** @class */ (function (_super) {
    __extends(DiscardButton, _super);
    function DiscardButton(scene, key, frame, downFrame, text) {
        return _super.call(this, scene, key, frame, downFrame, text) || this;
    }
    DiscardButton.prototype.changeState = function (val) {
        if (this.mState === val) {
            return;
        }
        this.mState = val;
        switch (val) {
            case DiscardEnum.Cancel:
                this.setText("取消");
                this.setFrame("gray_btn.png");
                break;
            case DiscardEnum.Sutmit:
                this.setText("提交");
                this.setFrame("yellow_btn.png");
                break;
            default:
                this.setText("丢弃");
                this.setFrame("yellow_btn.png");
                break;
        }
    };
    Object.defineProperty(DiscardButton.prototype, "buttonState", {
        get: function () {
            return this.mState;
        },
        enumerable: false,
        configurable: true
    });
    return DiscardButton;
}(_lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_6__[/* Button */ "a"]));
var DiscardEnum;
(function (DiscardEnum) {
    DiscardEnum[DiscardEnum["Discard"] = 0] = "Discard";
    DiscardEnum[DiscardEnum["Cancel"] = 1] = "Cancel";
    DiscardEnum[DiscardEnum["Sutmit"] = 2] = "Sutmit";
})(DiscardEnum || (DiscardEnum = {}));
var CategorieButton = /** @class */ (function (_super) {
    __extends(CategorieButton, _super);
    function CategorieButton(scene, key, frame, downFrame, text) {
        var _this = _super.call(this, scene, key, frame, downFrame, text) || this;
        _this.disInteractive();
        _this.removeListen();
        _this.mBackground.setOrigin(0);
        if (_this.mText) {
            _this.mText.setPosition(_this.mBackground.width / 2, _this.mBackground.height / 2);
        }
        return _this;
    }
    return CategorieButton;
}(_lib_rexui_lib_ui_tab_TabButton__WEBPACK_IMPORTED_MODULE_7__[/* TabButton */ "a"]));


/***/ }),
/* 253 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertView", function() { return AlertView; });
/* harmony import */ var _BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(107);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(116);
/* harmony import */ var _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(120);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var AlertView = /** @class */ (function (_super) {
    __extends(AlertView, _super);
    function AlertView(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "pica_alert";
        _this.disInteractive();
        return _this;
    }
    AlertView.prototype.show = function (config) {
        this.mShowData = config;
        _super.prototype.show.call(this, config);
        if (this.mInitialized) {
            this.mWorld.uiManager.getUILayerManager().addToDialogLayer(this);
            var ox = config.ox, oy = config.oy;
            this.x = (ox || this.scene.cameras.main.width / 2);
            this.y = (oy || this.scene.cameras.main.height / 2);
            this.mContent.setText(config.text);
            if (config.title) {
                this.mTitleLabel.setText(config.title);
            }
        }
    };
    AlertView.prototype.preload = function () {
        this.addAtlas(this.key, "pica_alert/pica_alert.png", "pica_alert/pica_alert.json");
        _super.prototype.preload.call(this);
    };
    AlertView.prototype.init = function () {
        var zoom = this.mWorld.uiScale || 1;
        var bg = this.scene.make.image({
            key: this.key,
            frame: "bg.png"
        }, false);
        var title = this.scene.make.image({
            key: this.key,
            frame: "title.png"
        }, false);
        title.y = -bg.height / 2;
        this.mTitleLabel = this.scene.make.text({
            text: "丢弃",
            style: {
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 12 * this.dpr * zoom,
                color: "#905B06"
            }
        }, false).setOrigin(0.5);
        this.mTitleLabel.y = title.y;
        this.mContent = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.scene, 0, -11 * this.dpr, "", {
            fontSize: 12 * this.dpr * zoom + "px",
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT,
            color: "#0",
            wrap: {
                mode: "char",
                width: 218 * this.dpr
            }
        });
        this.mContent.setOrigin(0.5, 0.5);
        this.mContent.setText("[color=#FF0000][/color]");
        this.mOkBtn = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_3__[/* Button */ "a"](this.scene, this.key, "yellow_btn.png", undefined, "确定");
        this.mOkBtn.setTextStyle({
            color: "#905B06",
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT,
            fontSize: 13 * this.dpr * zoom
        });
        this.mOkBtn.x = (bg.width - this.mOkBtn.displayWidth) / 2 - 33 * this.dpr;
        this.mOkBtn.y = (bg.height - this.mOkBtn.displayHeight) / 2 - 16 * this.dpr;
        this.mOkBtn.on("Tap", this.onOkHandler, this);
        this.mCancelBtn = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_3__[/* Button */ "a"](this.scene, this.key, "red_btn.png", undefined, "取消");
        this.mCancelBtn.setTextStyle({
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT,
            fontSize: 13 * this.dpr * zoom
        });
        this.mCancelBtn.x = -(bg.width - this.mCancelBtn.displayWidth) / 2 + 33 * this.dpr;
        this.mCancelBtn.y = this.mOkBtn.y;
        this.mCancelBtn.on("Tap", this.onCancelHandler, this);
        this.add([bg, title, this.mTitleLabel, this.mTitleLabel, this.mContent, this.mOkBtn, this.mCancelBtn]);
        _super.prototype.init.call(this);
    };
    AlertView.prototype.onOkHandler = function () {
        if (!this.mShowData) {
            return;
        }
        var callback = this.mShowData.callback;
        if (callback) {
            callback.call(this.mShowData.content);
        }
        this.onCancelHandler();
    };
    AlertView.prototype.onCancelHandler = function () {
        if (this.parentContainer) {
            this.parentContainer.remove(this);
        }
    };
    return AlertView;
}(_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 254 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var MaskToGameObject = function (mask) {
    return (mask.hasOwnProperty('geometryMask')) ? mask.geometryMask : mask.bitmapMask;
}
/* harmony default export */ __webpack_exports__["a"] = (MaskToGameObject);

/***/ }),
/* 255 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_eventemitter_EventEmitterMethods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(129);
/* harmony import */ var _utils_system_GetSceneObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(142);



const GetValue = Phaser.Utils.Objects.GetValue;

class Button {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.scene = Object(_utils_system_GetSceneObject_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(gameObject);
        // Event emitter
        this.setEventEmitter(GetValue(config, 'eventEmitter', undefined));

        gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
        this.resetFromJSON(config);
        this.boot();
    }

    resetFromJSON(o) {
        this.pointer = undefined;
        this.lastClickTime = undefined;
        this.setEnable(GetValue(o, "enable", true));
        this.setMode(GetValue(o, "mode", 1));
        this.setClickInterval(GetValue(o, "clickInterval", 100));
        this.setDragThreshold(GetValue(o, 'threshold', undefined));
        return this;
    }

    boot() {
        this.gameObject.on('pointerdown', this.onPress, this);
        this.gameObject.on('pointerup', this.onRelease, this);
        this.gameObject.on('pointerout', this.onPointOut, this);
        this.gameObject.on('pointermove', this.onMove, this);
        this.gameObject.on('destroy', this.destroy, this);
    }

    shutdown() {
        this.destroyEventEmitter();
        this.pointer = undefined;
        this.gameObject = undefined;
        this.scene = undefined;
        // gameObject events will be removed when this gameObject destroyed 
    }

    destroy() {
        this.shutdown();
    }

    setEnable(e) {
        if (e === undefined) {
            e = true;
        }

        if (this.enable === e) {
            return this;
        }

        if (!e) {
            this.cancel();
        }
        this.enable = e;
        this.gameObject.input.enabled = e;
        return this;
    }

    setMode(m) {
        if (typeof (m) === 'string') {
            m = CLICKMODE[m];
        }
        this.mode = m;
        return this;
    }

    setClickInterval(interval) {
        this.clickInterval = interval; // ms
        return this;
    }

    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }

    // internal
    onPress(pointer, localX, localY, event) {
        if (this.pointer !== undefined) {
            return;
        }
        this.pointer = pointer;
        if (this.mode === 0) {
            this.click(pointer.downTime, pointer, event);
        }
    }

    onRelease(pointer, localX, localY, event) {
        if (this.pointer !== pointer) {
            return;
        }
        if (this.mode === 1) {
            this.click(pointer.upTime, pointer, event);
        }
        this.pointer = undefined;
    }

    onPointOut(pointer, event) {
        if (this.pointer !== pointer) {
            return;
        }
        this.cancel();
    }

    onMove(pointer, localX, localY, event) {
        if (this.pointer !== pointer) {
            return;
        }

        if (this.dragThreshold === undefined) {
            return;
        }

        if (pointer.getDistance() >= this.dragThreshold) {
            this.cancel();
        }
    }

    click(nowTime, pointer, event) {
        if (nowTime === undefined) {
            // fires 'click' event manually
            this.emit('click', this, this.gameObject, pointer, event);
            return this;
        }

        this.pointer = undefined;
        var lastClickTime = this.lastClickTime;
        if ((lastClickTime !== undefined) &&
            ((nowTime - lastClickTime) <= this.clickInterval)) {
            return this;
        }
        this.lastClickTime = nowTime;
        this.emit('click', this, this.gameObject, pointer, event);
        return this;
    }

    cancel() {
        this.pointer = undefined;
        return this;
    }
}

Object.assign(
    Button.prototype,
    _utils_eventemitter_EventEmitterMethods_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]
);

const CLICKMODE = {
    'press': 0,
    'pointerdown': 0,
    'release': 1,
    'pointerup': 1,
};

/* harmony default export */ __webpack_exports__["a"] = (Button);

/***/ }),
/* 256 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MineCar", function() { return MineCar; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var MineCar = /** @class */ (function (_super) {
    __extends(MineCar, _super);
    function MineCar($world) {
        var _this = _super.call(this) || this;
        _this.world = $world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    MineCar.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_MINING_MODE_QUERY_MINE_PACKAGE, this.onQueryMinePackageHandler);
        }
    };
    MineCar.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    MineCar.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    MineCar.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    MineCar.prototype.discard = function (items) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MINING_MODE_DELETE_MINEPACKAGE_ITEM);
        var content = packet.content;
        content.items = items;
        this.connection.send(packet);
    };
    MineCar.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    MineCar.prototype.onQueryMinePackageHandler = function (packet) {
        var content = packet.content;
        if (content && content.subcategories)
            content.subcategories.unshift({ key: "all", value: "全部" });
        this.mEvent.emit("query", packet.content);
    };
    Object.defineProperty(MineCar.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    return MineCar;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 257 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InteractiveBubbleManager", function() { return InteractiveBubbleManager; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _interactionbubble_container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(258);
/* harmony import */ var _Handler_Handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(140);
/* harmony import */ var _utils_pos__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(111);
/* harmony import */ var _scenes_play__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(163);
/* harmony import */ var _utils_tool__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(155);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(104);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var InteractiveBubbleManager = /** @class */ (function (_super) {
    __extends(InteractiveBubbleManager, _super);
    function InteractiveBubbleManager(layerMgr, mworld) {
        var _this = _super.call(this) || this;
        _this.map = new Map();
        _this.uilayer = layerMgr;
        _this.mworld = mworld;
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_SHOW_INTERACTIVE_BUBBLE, _this.onInteractiveBubble);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_client"].OPCODE._OP_VIRTUAL_WORDL_REQ_CLIENT_REMOVE_INTERACTIVE_BUBBLE, _this.onClearInteractiveBubble);
        return _this;
    }
    InteractiveBubbleManager.prototype.setScene = function (scene) {
        this.connection.removePacketListener(this);
        this.scene = scene;
        this.connection.addPacketListener(this);
    };
    Object.defineProperty(InteractiveBubbleManager.prototype, "connection", {
        get: function () {
            if (this.mworld) {
                return this.mworld.connection;
            }
            _utils_log__WEBPACK_IMPORTED_MODULE_1__[/* Logger */ "a"].getInstance().log("roomManager is undefined");
            return;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InteractiveBubbleManager.prototype, "currentRoom", {
        get: function () {
            return this.mworld.roomManager.currentRoom;
        },
        enumerable: false,
        configurable: true
    });
    InteractiveBubbleManager.prototype.destroy = function () {
        this.connection.removePacketListener(this);
        if (this.map) {
            for (var key in this.map) {
                var bubble = this.map.get(Number(key));
                if (bubble)
                    bubble.destroy();
            }
            this.map.clear();
        }
        if (this.mCurRoom)
            this.mCurRoom.frameManager.remove(this, this.update);
        this.map = null;
        this.mBubble = null;
        this.scene = null;
        this.uilayer = null;
        this.mworld = null;
    };
    InteractiveBubbleManager.prototype.onInteractiveBubble = function (packet) {
        var content = packet.content;
        if (this.mCurRoom !== this.currentRoom) {
            if (this.mCurRoom)
                this.mCurRoom.frameManager.remove(this, this.update);
            this.mCurRoom = this.currentRoom;
            this.mCurRoom.frameManager.add(this, this.update);
        }
        var element = this.currentRoom.elementManager.get(content.receiverId);
        if (!element)
            element = this.currentRoom.playerManager.get(content.receiverId);
        if (element) {
            this.showInteractionBubble(content, element);
        }
    };
    InteractiveBubbleManager.prototype.onClearInteractiveBubble = function (packet) {
        var content = packet.content;
        for (var _i = 0, _a = content.ids; _i < _a.length; _i++) {
            var id = _a[_i];
            this.clearInteractionBubble(id);
        }
    };
    InteractiveBubbleManager.prototype.clearInteractionBubble = function (id) {
        if (this.map.has(id)) {
            var bubble = this.map.get(id);
            bubble.destroy();
            this.map.delete(id);
        }
    };
    InteractiveBubbleManager.prototype.showInteractionBubble = function (content, ele) {
        var _this = this;
        var dpr = Math.round(this.mworld.uiRatio || 1);
        content.display["resName"] = null; // "gems";
        content.display.texturePath = _utils_resUtil__WEBPACK_IMPORTED_MODULE_8__[/* Url */ "h"].getUIRes(dpr, "bubble/bubblebg.png"); // "resources/test/columns";
        content.display.dataPath = _utils_resUtil__WEBPACK_IMPORTED_MODULE_8__[/* Url */ "h"].getUIRes(dpr, "bubble/tipsicon.png"); // "resources/test/columns";
        var key = content.id;
        if (this.mBubble)
            this.mBubble.hide();
        if (this.map.has(key)) {
            this.mBubble = this.map.get(key);
        }
        else {
            this.mBubble = new _interactionbubble_container__WEBPACK_IMPORTED_MODULE_3__["InteractionBubbleContainer"](this.scene, dpr);
            this.map.set(key, this.mBubble);
        }
        this.mBubble.setBubble(content, new _Handler_Handler__WEBPACK_IMPORTED_MODULE_4__[/* Handler */ "a"](this, this.onInteractiveBubbleHandler));
        var playScene = this.mworld.game.scene.getScene(_scenes_play__WEBPACK_IMPORTED_MODULE_6__[/* PlayScene */ "a"].name);
        this.updateBublePos(ele, playScene);
        this.mBubble.setFollow(ele, playScene, function (obj) {
            _this.updateBublePos(ele, obj.scene);
        });
        this.mBubble.show = true;
        this.uilayer.addToDialogLayer(this.mBubble);
    };
    InteractiveBubbleManager.prototype.updateBublePos = function (gameObject, scene) {
        var dpr = this.mworld.uiRatio;
        var zoom = this.mworld.uiScale;
        var position = gameObject.getDisplay().getWorldTransformMatrix();
        if (position) {
            var pos = _utils_tool__WEBPACK_IMPORTED_MODULE_7__[/* Tool */ "a"].getPosByScenes(scene, new _utils_pos__WEBPACK_IMPORTED_MODULE_5__[/* Pos */ "a"](position.tx, (position.ty - 33 * dpr * zoom)));
            this.mBubble.setPosition(pos.x, pos.y);
        }
    };
    InteractiveBubbleManager.prototype.onInteractiveBubbleHandler = function (data) {
        if (typeof data === "number") {
            this.clearInteractionBubble(data);
            return;
        }
        var connection = this.connection;
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_RES_VIRTUAL_WORLD_ACTIVE_BUBBLE);
        var content = packet.content;
        content.id = data.id;
        //  content.receiverId = data.receiverId;
        connection.send(packet);
    };
    InteractiveBubbleManager.prototype.update = function () {
        if (!this.map)
            return;
        this.map.forEach(function (bubble) {
            if (bubble && bubble.show)
                bubble.updatePos();
        });
    };
    return InteractiveBubbleManager;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 258 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InteractionBubbleContainer", function() { return InteractionBubbleContainer; });
/* harmony import */ var _interactionbubble__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(323);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseUI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(125);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var InteractionBubbleContainer = /** @class */ (function (_super) {
    __extends(InteractionBubbleContainer, _super);
    function InteractionBubbleContainer(scene, dpr) {
        return _super.call(this, scene) || this;
    }
    Object.defineProperty(InteractionBubbleContainer.prototype, "show", {
        get: function () {
            return this.mShow;
        },
        set: function (value) {
            this.mShow = value;
        },
        enumerable: false,
        configurable: true
    });
    InteractionBubbleContainer.prototype.hide = function () {
        this.mShow = false;
        if (this.parentContainer) {
            this.parentContainer.remove(this);
        }
    };
    InteractionBubbleContainer.prototype.setFollow = function (gameObject, fromScene, posFunc) {
        _super.prototype.setFollow.call(this, gameObject, fromScene, posFunc);
    };
    InteractionBubbleContainer.prototype.setBubble = function (content, handler) {
        this.id = content.id;
        var resName = content.display["resName"];
        var resUrl = content.display.texturePath;
        var jsonUrl = content.display.dataPath;
        if (!this.mBubble) {
            this.mBubble = new _interactionbubble__WEBPACK_IMPORTED_MODULE_0__["InteractionBubble"](this.scene, this.dpr);
            this.mBubble.load(resName, resUrl, jsonUrl);
            this.add(this.mBubble);
        }
        this.mBubble.setContentData(content, handler);
        this.mBubble.show();
        return this.mBubble;
    };
    InteractionBubbleContainer.prototype.destroy = function () {
        this.hide();
        if (this.mBubble)
            this.mBubble.destroy();
        this.mBubble = null;
        _super.prototype.destroy.call(this);
    };
    return InteractionBubbleContainer;
}(_lib_rexui_lib_ui_baseUI_BaseUI__WEBPACK_IMPORTED_MODULE_1__[/* BaseUI */ "a"]));



/***/ }),
/* 259 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReAwardTipsMediator", function() { return ReAwardTipsMediator; });
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(106);
/* harmony import */ var _ReAwardTip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(260);
/* harmony import */ var _ReAwardTipsPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(261);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var ReAwardTipsMediator = /** @class */ (function (_super) {
    __extends(ReAwardTipsMediator, _super);
    function ReAwardTipsMediator(scene, world) {
        var _this = _super.call(this) || this;
        _this.scene = scene;
        _this.world = world;
        _this.mReAwardTips = new _ReAwardTip__WEBPACK_IMPORTED_MODULE_1__["ReAwardTips"](world);
        _this.mReAwardTips.register();
        _this.mReAwardTips.on("showAward", _this.onShowAwardHandler, _this);
        return _this;
    }
    ReAwardTipsMediator.prototype.show = function (param) {
        if (this.mView) {
            this.mView.appendAward(param);
            return;
        }
        this.mView = new _ReAwardTipsPanel__WEBPACK_IMPORTED_MODULE_2__["ReAwardTipsPanel"](this.scene, this.world);
        this.mView.appendAward(param);
        _super.prototype.show.call(this);
        this.world.uiManager.getUILayerManager().addToDialogLayer(this.mView);
    };
    ReAwardTipsMediator.prototype.destroy = function () {
        if (this.mReAwardTips) {
            this.mReAwardTips.destroy();
        }
        _super.prototype.destroy.call(this);
    };
    ReAwardTipsMediator.prototype.onShowAwardHandler = function (content) {
        this.show(content);
    };
    return ReAwardTipsMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__[/* BaseMediator */ "a"]));



/***/ }),
/* 260 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReAwardTips", function() { return ReAwardTips; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ReAwardTips = /** @class */ (function (_super) {
    __extends(ReAwardTips, _super);
    function ReAwardTips(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    ReAwardTips.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    ReAwardTips.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    ReAwardTips.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_SHOW_REWARD_TIPS, this.onReAwardTipsHandler);
        }
    };
    ReAwardTips.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    ReAwardTips.prototype.destroy = function () {
        this.unregister();
    };
    Object.defineProperty(ReAwardTips.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    ReAwardTips.prototype.onReAwardTipsHandler = function (packet) {
        this.mEvent.emit("showAward", packet.content);
    };
    return ReAwardTips;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 261 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReAwardTipsPanel", function() { return ReAwardTipsPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var ReAwardTipsPanel = /** @class */ (function (_super) {
    __extends(ReAwardTipsPanel, _super);
    function ReAwardTipsPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "reaward_tips";
        _this.mTips = [];
        _this.showingList = [];
        return _this;
    }
    ReAwardTipsPanel.prototype.show = function () {
        _super.prototype.show.call(this);
        if (this.mInitialized) {
            if (this.showingList.length === 0)
                this.showAward();
        }
    };
    ReAwardTipsPanel.prototype.appendAward = function (tips) {
        // const award = new AwardItem(this.scene);
        // this.add(award);
        this.mTips.push(tips);
        this.show();
    };
    ReAwardTipsPanel.prototype.addAward = function () {
    };
    ReAwardTipsPanel.prototype.preload = function () {
        this.addImage(this.key, "reaward_tips/bg.png");
        _super.prototype.preload.call(this);
    };
    ReAwardTipsPanel.prototype.init = function () {
        this.setSize(20, 20);
        _super.prototype.init.call(this);
        this.y = 250 * this.dpr;
    };
    ReAwardTipsPanel.prototype.showAward = function () {
        if (this.mTips.length < 1) {
            return;
        }
        if (this.showingList.length >= 3) {
            return;
        }
        for (var _i = 0, _a = this.showingList; _i < _a.length; _i++) {
            var item = _a[_i];
            // item.y -= 30 * this.dpr;
            item.beUp();
        }
        // TODO 使用对象池创建
        var award = new AwardItem(this.scene, this.key, this.dpr, this.scale);
        award.once("destroy", this.onDestroyHanlder, this);
        award.once("show", this.onAwardItemShowHandler, this);
        award.setProp(this.mTips.pop());
        // award.y = -(this.showingList.length * 30 * this.dpr);
        this.add(award);
        this.showingList.push(award);
    };
    ReAwardTipsPanel.prototype.onAwardItemShowHandler = function () {
        this.showAward();
    };
    ReAwardTipsPanel.prototype.onDestroyHanlder = function (item) {
        var index = this.showingList.indexOf(item);
        if (index > -1) {
            this.showingList.splice(index, 1);
        }
        this.showAward();
    };
    return ReAwardTipsPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));

var AwardItem = /** @class */ (function (_super) {
    __extends(AwardItem, _super);
    function AwardItem(scene, key, dpr, zoom) {
        var _this = _super.call(this, scene) || this;
        _this.mBg = _this.scene.make.image({
            key: key,
        }, false);
        _this.mScaleRatio = dpr * zoom;
        _this.mImage = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__["DynamicImage"](_this.scene, 0, 0);
        _this.mImage.setScale(dpr);
        _this.mImage.setOrigin(0.5, 1);
        _this.mImage.y = _this.mBg.height * zoom / 2;
        _this.mLabel = _this.scene.make.text({
            x: _this.mBg.width * _this.originX - 6 * _this.mScaleRatio,
            style: {
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 11 * _this.mScaleRatio,
                color: "#00FF00"
            }
        }, false).setOrigin(1, 0.5);
        // this.add([this.mBg, this.mImage, this.mLabel]);
        _this.addAt(_this.mBg, 0);
        _this.add([_this.mImage, _this.mLabel]);
        _this.setSize(_this.mBg.width * zoom, _this.mBg.height * zoom);
        return _this;
    }
    AwardItem.prototype.setProp = function (award) {
        if (!award) {
            return;
        }
        if (award.display && award.display.texturePath) {
            this.mImage.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getOsdRes(award.display.texturePath));
        }
        this.mLabel.setText(award.text);
        this.showTween();
    };
    AwardItem.prototype.showTween = function () {
        var _this = this;
        this.scene.tweens.add({
            targets: this,
            props: {
                x: "+=" + this.width * 0.3
            },
            ease: "Bounce.easeOut",
            onComplete: function () {
                _this.emit("show");
                _this.closeDelay = setTimeout(function () {
                    _this.closeTween();
                }, 1000);
            },
            duration: 300
        });
    };
    AwardItem.prototype.closeTween = function () {
        var _this = this;
        if (!this.scene) {
            return;
        }
        this.scene.tweens.add({
            targets: this,
            props: {
                y: "-=" + 50 * this.mScaleRatio,
                alpha: "0"
            },
            ease: "Linear",
            duration: 300,
            onComplete: function () {
                _this.destroy();
            }
        });
    };
    AwardItem.prototype.beUp = function () {
        var _this = this;
        clearTimeout(this.closeDelay);
        this.scene.tweens.add({
            targets: this,
            props: {
                y: "-=" + 50 * this.mScaleRatio
            },
            ease: "Linear",
            duration: 300,
            onComplete: function () {
                _this.closeDelay = setTimeout(function () {
                    _this.closeTween();
                }, 1000);
            }
        });
    };
    return AwardItem;
}(Phaser.GameObjects.Container));


/***/ }),
/* 262 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharacterEditorPanel", function() { return CharacterEditorPanel; });
/* harmony import */ var _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(120);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(118);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(114);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(124);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var CharacterEditorPanel = /** @class */ (function (_super) {
    __extends(CharacterEditorPanel, _super);
    function CharacterEditorPanel(scene, x, y, width, height, key, dpr) {
        var _this = _super.call(this, scene, x, y) || this;
        _this.dpr = 0;
        _this.key = "";
        _this.setSize(width, height);
        _this.key = key;
        _this.dpr = dpr;
        var common_key = "common_key";
        var mfont = "bold " + 15 * _this.dpr + "px Source Han Sans";
        _this.title = _this.scene.make.text({ x: 0, y: -height * 0.5 + 50 * dpr, text: _this.geti18n("edit_profile"), style: { font: mfont, blod: true, color: "#ffffff", fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0.5);
        var bg = _this.scene.make.graphics(undefined, false);
        bg.clear();
        bg.fillStyle(0xffffff, 0.5);
        bg.fillRect(0, 0, 247 * dpr, 350 * dpr);
        bg.setPosition(-width * 0.5, -184 * dpr);
        var posx = -width * 0.5 + 9 * dpr;
        var posy = -170 * dpr;
        var offsetY = 50 * dpr;
        var nameText = _this.scene.make.text({ x: posx, y: posy, style: { blod: true, color: "#0062BB", fontSize: 15 * dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0);
        nameText.setText(_this.geti18n("user_name") + ":");
        _this.inputText = new _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](_this.scene, posx + nameText.width + 20 * dpr, posy, 162 * dpr, 27 * dpr, {
            type: "input",
            fontSize: 18 * dpr + "px",
            color: "#0062BB",
            align: "center",
            placeholder: _this.geti18n("input_nickname")
        }).setOrigin(0);
        var line = _this.createLine(-230 * _this.dpr * 0.5, posy + 32 * _this.dpr);
        _this.add(bg);
        _this.add([_this.title, nameText, _this.inputText, line]);
        _this.idText = _this.createText("I        D:", "49855555", posx, posy + offsetY);
        _this.constellationText = _this.createText(_this.geti18n("constellation") + ":", "双子座", posx, posy + offsetY * 2);
        _this.birthdayText = _this.createText(_this.geti18n("birthday") + ":", "1998-04-24", posx, posy + offsetY * 3);
        _this.cityText = _this.createText(_this.geti18n("city") + ":", "中国·上海", posx, posy + offsetY * 4);
        var signText = _this.scene.make.text({ x: posx, y: posy + offsetY * 5, style: { blod: true, color: "#0062BB", fontSize: 15 * dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0);
        signText.setText(_this.geti18n("signature") + ":");
        _this.signInput = new _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](_this.scene, posx + signText.width + 20 * dpr, posy + offsetY * 5, 162 * dpr, 76 * dpr, {
            type: "input",
            fontSize: 18 * dpr + "px",
            color: "#0062BB",
            align: "center",
            placeholder: _this.geti18n("input_signature")
        }).setOrigin(0);
        _this.add([signText, _this.signInput]);
        var backBtn = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_0__[/* Button */ "a"](_this.scene, common_key, "back_arrow", "back_arrow");
        var saveBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__["NinePatchButton"](_this.scene, 0, height * 0.5 - 40 * dpr, 174 * _this.dpr, 37 * _this.dpr, common_key, "yellow_btn", _this.geti18n("save"), {
            left: 12 * _this.dpr,
            top: 12 * _this.dpr,
            right: 12 * _this.dpr,
            bottom: 12 * _this.dpr
        });
        saveBtn.setTextStyle({ fontSize: 16 * _this.dpr, color: "#ED7814" });
        backBtn.setPosition(posx + 8 * dpr, -height * 0.5 + 50 * dpr);
        backBtn.on("Tap", _this.onBackHandler, _this);
        saveBtn.on("Tap", _this.onSaveHandler, _this);
        _this.add([backBtn, saveBtn]);
        return _this;
    }
    CharacterEditorPanel.prototype.destroy = function () {
        if (this.inputText)
            this.inputText.destroy();
        if (this.signInput)
            this.signInput.destroy();
        _super.prototype.destroy.call(this);
    };
    CharacterEditorPanel.prototype.createText = function (name, value, posx, posy) {
        var nameText = this.scene.make.text({ x: posx, y: posy, style: { blod: true, color: "#0062BB", fontSize: 15 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0, 0);
        nameText.setText(name);
        var valueText = this.scene.make.text({ x: posx + nameText.width + 20 * this.dpr, y: posy, text: value, style: { blod: true, color: "#ffffff", fontSize: 15 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0, 0);
        var line = this.createLine(-230 * this.dpr * 0.5, posy + 32 * this.dpr);
        this.add([nameText, valueText, line]);
        return valueText;
    };
    CharacterEditorPanel.prototype.geti18n = function (name) {
        return _i18n__WEBPACK_IMPORTED_MODULE_4__[/* i18n */ "a"].t("player_info." + name);
    };
    CharacterEditorPanel.prototype.createLine = function (posx, posy) {
        var line = this.scene.make.graphics(undefined, false);
        line.clear();
        line.fillStyle(0x0062BB, 0.6);
        line.fillRect(0, 0, 230 * this.dpr, 3);
        line.setPosition(posx, posy);
        return line;
    };
    CharacterEditorPanel.prototype.onBackHandler = function () {
        this.visible = false;
        this.emit("editorHide");
    };
    CharacterEditorPanel.prototype.onSaveHandler = function () {
    };
    return CharacterEditorPanel;
}(Phaser.GameObjects.Container));



/***/ }),
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharacterInfo", function() { return CharacterInfo; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var CharacterInfo = /** @class */ (function (_super) {
    __extends(CharacterInfo, _super);
    function CharacterInfo(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    CharacterInfo.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_PKT_SELF_PLAYER_INFO, this.onOwnerCharacterInfo);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_PKT_ANOTHER_PLAYER_INFO, this.onOtherCharacterInfo);
        }
    };
    CharacterInfo.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    CharacterInfo.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    CharacterInfo.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    CharacterInfo.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    Object.defineProperty(CharacterInfo.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    CharacterInfo.prototype.queryPlayerInfo = function () {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_PKT_SELF_PLAYER_INFO);
        this.connection.send(packet);
    };
    CharacterInfo.prototype.onOwnerCharacterInfo = function (packge) {
        var content = packge.content;
        this.mEvent.emit("ownerInfo", content);
    };
    CharacterInfo.prototype.onOtherCharacterInfo = function (packge) {
        var content = packge.content;
        this.mEvent.emit("otherInfo", content);
    };
    return CharacterInfo;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 267 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _plugins_gameobjects_shape_roundrectangle_RoundRectangle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(390);

/* harmony default export */ __webpack_exports__["a"] = (_plugins_gameobjects_shape_roundrectangle_RoundRectangle_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);

/***/ }),
/* 268 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(116);

/* harmony default export */ __webpack_exports__["a"] = (_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);

/***/ }),
/* 269 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _plugins_gameobjects_canvas_Canvas_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(387);

/* harmony default export */ __webpack_exports__["a"] = (_plugins_gameobjects_canvas_Canvas_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);

/***/ }),
/* 270 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_scrollable_Scrollable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(320);
/* harmony import */ var _utils_GetScrollMode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(167);
/* harmony import */ var _scrollableblock_ScrollableBlock_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(191);



const GetValue = Phaser.Utils.Objects.GetValue;

class ScrollablePanel extends _utils_scrollable_Scrollable_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {
    constructor(scene, config) {
        if (config === undefined) {
            config = {};
        }

        // Create scrollable-block
        var scrollMode = Object(_utils_GetScrollMode_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(config);
        var panelConfig = GetValue(config, 'panel', undefined);
        if (panelConfig === undefined) {
            panelConfig = {};
        }
        panelConfig.scrollMode = scrollMode;
        panelConfig.clamplChildOY = GetValue(config, 'clamplChildOY', false);
        var scrollableBlock = new _scrollableblock_ScrollableBlock_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](scene, panelConfig);
        var panelWidth = GetValue(panelConfig, 'width', undefined);
        var panelHeight = GetValue(panelConfig, 'height', undefined);
        var proportion, expand;
        if (scrollMode === 0) {
            proportion = (panelWidth === undefined) ? 1 : 0;
            expand = (panelHeight === undefined);
        } else {
            proportion = (panelHeight === undefined) ? 1 : 0;
            expand = (panelWidth === undefined);
        }

        // Fill config of scrollable
        config.type = 'rexScrollablePanel';
        config.child = {
            gameObject: scrollableBlock,
            proportion: proportion,
            expand: expand,
        };
        var spaceConfig = GetValue(config, 'space', undefined);
        if (spaceConfig) {
            spaceConfig.child = spaceConfig.panel;
        }
        super(scene, config);

        this.addChildrenMap('panel', this.childrenMap.child.child);
    }
}

/* harmony default export */ __webpack_exports__["a"] = (ScrollablePanel);

/***/ }),
/* 271 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _TextEdit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(391);


var Edit = function (gameObject, config, onCloseCallback) {
    if (!gameObject._edit) {
        gameObject._edit = new _TextEdit_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](gameObject);
    }
    gameObject._edit.open(config, onCloseCallback);
    return gameObject._edit;
}

/* harmony default export */ __webpack_exports__["a"] = (Edit);

/***/ }),
/* 272 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ScrollerEvent */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GameScroller; });
/* harmony import */ var _plugins_input_scroller_Scroller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(319);
/* harmony import */ var _baseUI_BaseUI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(125);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ScrollerEvent;
(function (ScrollerEvent) {
    ScrollerEvent["downinBound"] = "downinBound";
    ScrollerEvent["downoutBound"] = "downoutBound";
    ScrollerEvent["upinBound"] = "upinBound";
    ScrollerEvent["upoutBound"] = "upoutBound";
})(ScrollerEvent || (ScrollerEvent = {}));
var GetValue = Phaser.Utils.Objects.GetValue;
var GameScroller = /** @class */ (function (_super) {
    __extends(GameScroller, _super);
    function GameScroller(scene, config, gameObject) {
        var _this = _super.call(this, scene) || this;
        /**
         * 是否在移动中
         */
        _this.mMoveing = false;
        _this.soundMap = new Map();
        _this.mConfig = config;
        _this.soundGroup = config.music;
        _this.x = config.x;
        _this.y = config.y;
        _this.width = _this.mConfig.width;
        _this.height = _this.mConfig.height;
        var zoom = config.zoom;
        _this.maskGraphic = scene.make.graphics(undefined, false);
        _this.maskGraphic.fillStyle(0);
        _this.maskGraphic.fillRect(-_this.width * 0.5 * zoom, -_this.height * 0.5 * zoom, _this.width * zoom, _this.height * zoom);
        _this.maskGraphic.setPosition(_this.x * zoom, _this.y * zoom);
        // this.add(this.maskGraphic);
        if (gameObject) {
            _this.mGameObject = gameObject;
        }
        else {
            _this.mGameObject = scene.make.container(undefined, false);
            _this.add(_this.mGameObject);
        }
        // this.mGameObject.setMask(this.maskGraphic.createGeometryMask());
        // const bg1 = scene.make.graphics(undefined, false);
        // bg1.fillStyle(0, .2);
        // bg1.fillRect(0, 0, config.width, config.height);
        // bg1.setPosition(-config.width / 2, -config.height / 2);
        // this.add(bg1);
        if (!config.valuechangeCallback)
            config.valuechangeCallback = function (value) {
                _this.onScrollValueChange(value);
            };
        _this.mScroller = new _plugins_input_scroller_Scroller_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](_this, config);
        _this.mDisDelection = GetValue(config, "interactivedisDetection", 10);
        _this.mCellDownHandler = GetValue(config, "celldownCallBack", undefined);
        _this.mCellUpHandler = GetValue(config, "cellupCallBack", undefined);
        _this.setInteractive();
        _this.addListen();
        return _this;
    }
    Object.defineProperty(GameScroller.prototype, "view", {
        get: function () {
            return this.mGameObject;
        },
        enumerable: false,
        configurable: true
    });
    GameScroller.prototype.setEnable = function (enable) {
        if (this.mScroller)
            this.mScroller.setEnable(enable);
    };
    GameScroller.prototype.setValue = function (value) {
        if (this.mScroller)
            this.mScroller.setValue(value);
    };
    GameScroller.prototype.adjustBackDeceleration = function (deceler) {
        if (this.mScroller)
            this.mScroller.setBackDeceleration(deceler);
    };
    GameScroller.prototype.adjustSlidingDeceleration = function (deceler) {
        if (this.mScroller)
            this.mScroller.setSlidingDeceleration(deceler);
    };
    GameScroller.prototype.adjustScrollMode = function (mode) {
        if (!this.mConfig.orientation || this.mConfig.orientation !== mode) {
            if (this.mScroller)
                this.mScroller.setOrientationMode(mode);
        }
        this.mConfig.orientation = mode;
    };
    GameScroller.prototype.adjustDragThreshol = function (hold) {
        if (this.mScroller)
            this.mScroller.setDragThreshold(hold);
    };
    GameScroller.prototype.updateScrollPos = function (pos) {
        if (this.mConfig.orientation) {
            this.mGameObject.x = pos;
        }
        else {
            this.mGameObject.y = pos;
        }
    };
    /***
    *  调整scroller遮照范围
    * @param width
    * @param height
    * @param x
    * @param y
    */
    GameScroller.prototype.adjustMask = function (width, height, x, y) {
        if (x === void 0) { x = this.mConfig.x; }
        if (y === void 0) { y = this.mConfig.y; }
        this.mGameObject.clearMask();
        var mask = this.scene.make.graphics(undefined, false);
        mask.fillStyle(0);
        mask.fillRect(0, 0, width, height);
        mask.setPosition(x, y);
        this.mGameObject.setMask(mask.createGeometryMask());
    };
    GameScroller.prototype.addItem = function (item) {
        this.mGameObject.add(item);
        this.setInteractiveObject(item);
    };
    GameScroller.prototype.addItemAt = function (item, index) {
        this.mGameObject.addAt(item, index);
        // this.setInteractiveObject(item);
    };
    GameScroller.prototype.getItemList = function () {
        return this.mGameObject.list;
    };
    GameScroller.prototype.setBounds = function (value0, value1) {
        this.mScroller.setBounds(value0, value1);
    };
    /**
     *
     * @param align 2 居左 1居中 0居右 默认居左
     */
    GameScroller.prototype.setAlign = function (align) {
        if (align === void 0) { align = 2; }
        this.mConfig.align = align;
        this.Sort();
    };
    GameScroller.prototype.Sort = function () {
        var value = 0;
        var list = this.mGameObject.list;
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var item = list_1[_i];
            if (this.mConfig.orientation === 1) {
                item.x = item.width * item.originX + value;
                value += item.width;
            }
            else {
                item.y = item.height * item.originY + value;
                value += item.height;
            }
        }
        if (this.mConfig.orientation === 1) {
            this.mGameObject.width = value;
            for (var _a = 0, list_2 = list; _a < list_2.length; _a++) {
                var item = list_2[_a];
                item.x -= value * 0.5;
            }
            value -= this.width;
        }
        else {
            this.mGameObject.height = value;
            for (var _b = 0, list_3 = list; _b < list_3.length; _b++) {
                var item = list_3[_b];
                item.y -= value * 0.5;
            }
            value -= this.height;
        }
        var leftBound = 0, rightBound = 0, bound = 0;
        if (value < 0) {
            if (this.mConfig.align === 0) {
                leftBound = rightBound = -value / 2;
            }
            else if (this.mConfig.align === 1) {
                leftBound = rightBound = 0;
            }
            else {
                leftBound = rightBound = value / 2;
            }
            bound = leftBound;
        }
        else {
            leftBound = -value / 2;
            rightBound = value / 2;
            if (this.mConfig.align === 0) {
                bound = leftBound;
            }
            else if (this.mConfig.align === 1) {
                bound = 0;
            }
            else {
                bound = rightBound;
            }
        }
        this.mLeftBound = leftBound;
        this.mRightBound = rightBound;
        this.setBounds(leftBound, rightBound);
        this.setValue(bound);
    };
    GameScroller.prototype.clearItems = function () {
        var list = this.mGameObject.list;
        for (var _i = 0, list_4 = list; _i < list_4.length; _i++) {
            var item = list_4[_i];
            item.destroy();
        }
        this.mGameObject.list.length = 0;
        this.clearInteractiveObject();
    };
    Object.defineProperty(GameScroller.prototype, "bounds", {
        get: function () {
            return [this.mLeftBound, this.mRightBound];
        },
        enumerable: false,
        configurable: true
    });
    GameScroller.prototype.removeInteractiveObject = function (obj) {
        var index = this.mInteractiveList.indexOf(obj);
        if (index > -1) {
            this.mInteractiveList.splice(index, 1);
        }
    };
    GameScroller.prototype.addListen = function () {
        if (!this.scene)
            return;
        this.removeListen();
        this.scene.input.on("pointermove", this.pointerMoveHandler, this);
        this.scene.input.on("pointerdown", this.pointerDownHandler, this);
        this.scene.input.on("pointerup", this.pointerUpHandler, this);
    };
    GameScroller.prototype.removeListen = function () {
        this.mMoveing = false;
        if (!this.scene)
            return;
        this.scene.input.off("pointerdown", this.pointerDownHandler, this);
        this.scene.input.off("pointerup", this.pointerUpHandler, this);
        this.scene.input.off("pointermove", this.pointerMoveHandler, this);
    };
    Object.defineProperty(GameScroller.prototype, "left", {
        get: function () {
            return -this.mGameObject.width / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GameScroller.prototype, "right", {
        get: function () {
            return this.mGameObject.width / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GameScroller.prototype, "top", {
        get: function () {
            return -this.mGameObject.height / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GameScroller.prototype, "bottom", {
        get: function () {
            return this.mGameObject.height / 2;
        },
        enumerable: false,
        configurable: true
    });
    GameScroller.prototype.setInteractiveObject = function (obj) {
        if (!this.mInteractiveList)
            this.mInteractiveList = [];
        this.mInteractiveList.push(obj);
    };
    GameScroller.prototype.destroy = function () {
        this.mMoveing = false;
        if (this.mGameObject)
            this.mGameObject.clearMask(true);
        if (this.mScroller)
            this.mScroller.destroy();
        _super.prototype.destroy.call(this);
    };
    // /**
    //  * 手动刷新滚动范围
    //  * @param refreshSize刷新滚动范围数值，由于在某些场景下ui的宽高尺寸比较难用单一公式计算，所以可以直接外部传入刷新的数值
    //  */
    // public refreshBound(refreshSize?: number) {
    //     if (!this.mInteractiveList) return;
    //     // 滚动容器尺寸
    //     let totalSize: number = 0;
    //     if (refreshSize !== undefined) {
    //         totalSize = refreshSize;
    //     } else {
    //         this.mInteractiveList.forEach((cell) => {
    //             if (cell) {
    //                 totalSize += this.mConfig.orientation ? cell.width : cell.height;
    //             }
    //         });
    //     }
    //     // // 滚动容器尺寸
    //     // const tmpSize: number = this.mConfig.orientation ? this.mGameObject.width : this.mGameObject.height;
    //     // 父容器初始位置
    //     const baseSize: number = this.mConfig.orientation ? this.mGameObject.parentContainer.x : this.mGameObject.parentContainer.y;
    //     // 视口范围尺寸（滚动不能小于改尺寸）
    //     const baseShowSize: number = this.mConfig.orientation ? this.mConfig.width : this.mConfig.height;
    //     if (totalSize < baseShowSize) totalSize = baseShowSize;
    //     this.setBounds(baseSize, baseSize - totalSize + baseShowSize);
    // }
    GameScroller.prototype.clearInteractiveObject = function () {
        if (!this.mInteractiveList)
            return;
        this.mInteractiveList.length = 0;
        this.mInteractiveList = [];
        this.mScroller.setBounds(0, 0);
    };
    GameScroller.prototype.pointerMoveHandler = function (pointer) {
        if (this.soundGroup && this.soundGroup.move)
            this.playSound(this.soundGroup.move);
        this.mMoveing = true;
    };
    GameScroller.prototype.pointerDownHandler = function (pointer) {
        // this.scene.input.off("pointermove", this.pointerMoveHandler, this);
        if (this.soundGroup && this.soundGroup.down)
            this.playSound(this.soundGroup.down);
        var inBound = this.checkPointerInBounds(this, pointer);
        if (inBound && this.checkPointerDelection(pointer)) {
            if (this.mCellDownHandler && !this.mMoveing) {
                if (!this.mInteractiveList)
                    return;
                for (var i = 0, len = this.mInteractiveList.length; i < len; i++) {
                    var interactiveObj = this.mInteractiveList[i];
                    if (this.checkPointerInBounds(interactiveObj, pointer, true)) {
                        this.mCellDownHandler(interactiveObj);
                        break;
                    }
                }
            }
            var eventName = inBound ? ScrollerEvent.downinBound : ScrollerEvent.downoutBound;
            this.emit(eventName, this);
        }
    };
    GameScroller.prototype.pointerUpHandler = function (pointer, gameObject) {
        // this.scene.input.on("pointermove", this.pointerMoveHandler, this);
        if (this.soundGroup && this.soundGroup.up)
            this.playSound(this.soundGroup.up);
        var inBound = this.checkPointerInBounds(this, pointer);
        if (inBound && this.checkPointerDelection(pointer)) {
            if (this.mCellUpHandler && !this.mMoveing) {
                if (!this.mInteractiveList)
                    return;
                for (var i = 0, len = this.mInteractiveList.length; i < len; i++) {
                    var interactiveObj = this.mInteractiveList[i];
                    if (this.checkPointerInBounds(interactiveObj, pointer, true)) {
                        this.mCellUpHandler(interactiveObj);
                        break;
                    }
                }
            }
            var eventName = inBound ? ScrollerEvent.upinBound : ScrollerEvent.upoutBound;
            this.emit(eventName, this);
        }
        this.mMoveing = false;
    };
    GameScroller.prototype.checkPointerInBounds = function (gameObject, pointer, isCell) {
        if (isCell === void 0) { isCell = false; }
        if (!this.mRectangle) {
            this.mRectangle = new Phaser.Geom.Rectangle(0, 0, 0, 0);
        }
        this.mRectangle.left = -gameObject.width / 2;
        this.mRectangle.right = gameObject.width / 2;
        this.mRectangle.top = -gameObject.height / 2;
        this.mRectangle.bottom = gameObject.height / 2;
        if (pointer) {
            var worldMatrix = gameObject.getWorldTransformMatrix();
            var x = pointer.x - worldMatrix.tx;
            var y = pointer.y - worldMatrix.ty;
            if (this.mRectangle.left <= x && this.mRectangle.right >= x && this.mRectangle.top <= y && this.mRectangle.bottom >= y) {
                return true;
            }
            return false;
        }
        return false;
    };
    GameScroller.prototype.onScrollValueChange = function (value) {
        if (this.mConfig.orientation === 1) {
            this.mGameObject.x = value;
        }
        else {
            this.mGameObject.y = value;
        }
    };
    return GameScroller;
}(_baseUI_BaseUI__WEBPACK_IMPORTED_MODULE_1__[/* BaseUI */ "a"]));



/***/ }),
/* 273 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GridLayoutGroup", function() { return GridLayoutGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlignmentType", function() { return AlignmentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CornerType", function() { return CornerType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AxisType", function() { return AxisType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConstraintType", function() { return ConstraintType; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GridLayoutGroup = /** @class */ (function (_super) {
    __extends(GridLayoutGroup, _super);
    function GridLayoutGroup(scene, x, y) {
        var _this = _super.call(this, scene, x, y) || this;
        _this.layoutElements = [];
        _this._padding = new Phaser.Math.Vector4(0, 0, 0, 0);
        _this._cellSize = new Phaser.Math.Vector2(100, 100);
        _this._spacing = new Phaser.Math.Vector2(0, 0);
        _this._alignmentType = AlignmentType.UpperLeft;
        _this._startCorner = CornerType.UpperLeft;
        _this._startAxis = AxisType.Horizontal;
        _this._constraint = ConstraintType.Flexible;
        _this._constraintCount = 4;
        return _this;
    }
    GridLayoutGroup.prototype.onPlay = function () {
    };
    GridLayoutGroup.prototype.start = function () {
    };
    Object.defineProperty(GridLayoutGroup.prototype, "padding", {
        get: function () {
            return this._padding;
        },
        set: function (value) {
            if (value === undefined)
                return;
            this._padding = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridLayoutGroup.prototype, "cellSize", {
        get: function () {
            return this._cellSize;
        },
        /**
         * vec2(width,height);
         */
        set: function (value) {
            if (value === undefined)
                return;
            if (value.x < 0)
                value.x = 0;
            if (value.y < 0)
                value.y = 0;
            this._cellSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridLayoutGroup.prototype, "spacing", {
        get: function () {
            return this._spacing;
        },
        /**
         * vec2(x,y);
         */
        set: function (value) {
            if (value === undefined)
                return;
            this._spacing = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridLayoutGroup.prototype, "alignmentType", {
        get: function () {
            return this._alignmentType;
        },
        set: function (value) {
            if (value === this._alignmentType)
                return;
            this._alignmentType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridLayoutGroup.prototype, "startCorner", {
        get: function () {
            return this._startCorner;
        },
        set: function (value) {
            if (value === this._startCorner)
                return;
            this._startCorner = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridLayoutGroup.prototype, "startAxis", {
        get: function () {
            return this._startAxis;
        },
        set: function (value) {
            if (value === this._startAxis)
                return;
            this._startAxis = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridLayoutGroup.prototype, "constraint", {
        get: function () {
            return this._constraint;
        },
        set: function (value) {
            if (value === this._constraint)
                return;
            this._constraint = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GridLayoutGroup.prototype, "constraintCount", {
        get: function () {
            return this._constraintCount;
        },
        set: function (value) {
            if (value === undefined || isNaN(value))
                return;
            this._constraintCount = value;
        },
        enumerable: false,
        configurable: true
    });
    GridLayoutGroup.prototype.Layout = function () {
        this.layoutElements.length = 0;
        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
            var child = _a[_i];
            if (child.active)
                this.layoutElements.push(child);
        }
        if (this.layoutElements.length === 0)
            return;
        var cornerX = this._startCorner % 2;
        var cornerY = Math.floor(this._startCorner / 2);
        var cellsPerMainAxis = 0, actualCellCountX = 0, actualCellCountY = 0;
        var cellCount = this.getCellCount();
        if (this._startAxis === AxisType.Horizontal) {
            cellsPerMainAxis = cellCount.x;
            actualCellCountX = Phaser.Math.Clamp(cellCount.x, 1, this.layoutElements.length);
            actualCellCountY = Phaser.Math.Clamp(cellCount.y, 1, Math.ceil(this.layoutElements.length / cellsPerMainAxis));
        }
        else {
            cellsPerMainAxis = cellCount.y;
            actualCellCountY = Phaser.Math.Clamp(cellCount.y, 1, this.layoutElements.length);
            actualCellCountX = Phaser.Math.Clamp(cellCount.x, 1, Math.ceil(this.layoutElements.length / cellsPerMainAxis));
        }
        var requiredSpace = new Phaser.Math.Vector2(actualCellCountX * this._cellSize.x + (actualCellCountX - 1) * this._spacing.x, actualCellCountY * this._cellSize.y + (actualCellCountY - 1) * this._spacing.y);
        var startOffset = new Phaser.Math.Vector2(this.getStartOffset(0, requiredSpace.x), this.getStartOffset(1, requiredSpace.y));
        var positionX = 0;
        var positionY = 0;
        for (var i = 0; i < this.layoutElements.length; i++) {
            if (this._startAxis === AxisType.Horizontal) {
                positionX = i % cellsPerMainAxis;
                positionY = Math.floor(i / cellsPerMainAxis);
            }
            else {
                positionX = Math.floor(i / cellsPerMainAxis);
                positionY = i % cellsPerMainAxis;
            }
            if (cornerX === 1)
                positionX = actualCellCountX - 1 - positionX;
            if (cornerY === 1)
                positionY = actualCellCountY - 1 - positionY;
            this.setChildAlongAxis(this.layoutElements[i], 0, startOffset.x + (this._cellSize.x + this._spacing.x) * positionX, this._cellSize.x);
            this.setChildAlongAxis(this.layoutElements[i], 1, startOffset.y + (this._cellSize.y + this._spacing.y) * positionY, this._cellSize.y);
        }
        var maxWidth = startOffset.x + (this._cellSize.x + this._spacing.x) * (positionX + 1);
        var maxHeight = startOffset.y + (this._cellSize.y + this._spacing.y) * (positionY + 1);
        if (this.startAxis === AxisType.Horizontal) {
            this.height = maxHeight;
            this.setAllChildPositionOffset(0);
        }
        else {
            this.width = maxWidth;
            this.setAllChildPositionOffset(1);
        }
        if (this.width < maxWidth) {
            this.width = maxWidth;
        }
        if (this.height < maxHeight) {
            this.height = maxHeight;
        }
    };
    GridLayoutGroup.prototype.setChildAlongAxis = function (child, axis, pos, size) {
        if (axis === 0) {
            child.width = size;
        }
        else {
            child.height = size;
        }
        var value = pos;
        if (axis === 0) {
            child.x = value + size * child.originX;
        }
        else {
            child.y = value + size * child.originY;
        }
    };
    GridLayoutGroup.prototype.setAllChildPositionOffset = function (axis) {
        for (var _i = 0, _a = this.layoutElements; _i < _a.length; _i++) {
            var child = _a[_i];
            if (axis === 0) {
                var offset = this.width * 0.5;
                child.x -= offset;
            }
            else {
                var offset = this.height * 0.5;
                child.y -= offset;
            }
        }
    };
    GridLayoutGroup.prototype.getStartOffset = function (axis, requiredSpaceWithoutPadding) {
        var requiredSpace = requiredSpaceWithoutPadding + (axis === 0 ? this.paddingHorizontal() : this.paddingVertical());
        var availableSpace = (axis === 0 ? this.width : this.height);
        var surplusSpace = availableSpace - requiredSpace;
        var alignmentOnAxis = this.getAlignmentOnAxis(axis);
        return (axis === 0 ? this._padding.x : this._padding.z) + surplusSpace * alignmentOnAxis;
    };
    GridLayoutGroup.prototype.getAlignmentOnAxis = function (axis) {
        if (axis === 0)
            return (this._alignmentType % 3) * 0.5;
        else
            return Math.floor(this._alignmentType / 3) * 0.5;
    };
    GridLayoutGroup.prototype.getCellCount = function () {
        var cell = new Phaser.Math.Vector2();
        if (this._constraint === ConstraintType.FixedColumnCount) {
            cell.x = this._constraintCount;
            if (this.layoutElements.length >= cell.x) {
                cell.y = Math.floor(this.layoutElements.length / cell.x) + (this.layoutElements.length % cell.x > 0 ? 1 : 0);
            }
        }
        else if (this._constraint === ConstraintType.FixedRowCount) {
            cell.y = this._constraintCount;
            if (this.layoutElements.length >= cell.y) {
                cell.x = Math.floor(this.layoutElements.length / cell.y) + (this.layoutElements.length % cell.y > 0 ? 1 : 0);
            }
        }
        else {
            cell.x = Math.max(1, Math.floor((this.width - this.paddingHorizontal() + this._spacing.x + 0.001) / (this._cellSize.x + this._spacing.x)));
            cell.y = Math.max(1, Math.floor((this.height - this.paddingVertical() + this._spacing.y + 0.001) / (this._cellSize.y + this._spacing.y)));
        }
        return cell;
    };
    GridLayoutGroup.prototype.paddingHorizontal = function () {
        return this._padding.x + this._padding.y;
    };
    GridLayoutGroup.prototype.paddingVertical = function () {
        return this._padding.z + this._padding.w;
    };
    GridLayoutGroup.ClassName = "gridLayoutGroup";
    return GridLayoutGroup;
}(Phaser.GameObjects.Container));

var AlignmentType;
(function (AlignmentType) {
    AlignmentType[AlignmentType["UpperLeft"] = 0] = "UpperLeft";
    AlignmentType[AlignmentType["UpperCenter"] = 1] = "UpperCenter";
    AlignmentType[AlignmentType["UpperRight"] = 2] = "UpperRight";
    AlignmentType[AlignmentType["MiddleLeft"] = 3] = "MiddleLeft";
    AlignmentType[AlignmentType["MiddleCenter"] = 4] = "MiddleCenter";
    AlignmentType[AlignmentType["MiddleRight"] = 5] = "MiddleRight";
    AlignmentType[AlignmentType["LowerLeft"] = 6] = "LowerLeft";
    AlignmentType[AlignmentType["LowerCenter"] = 7] = "LowerCenter";
    AlignmentType[AlignmentType["LowerRight"] = 8] = "LowerRight";
})(AlignmentType || (AlignmentType = {}));
var CornerType;
(function (CornerType) {
    CornerType[CornerType["UpperLeft"] = 0] = "UpperLeft";
    CornerType[CornerType["UpperRight"] = 1] = "UpperRight";
    CornerType[CornerType["LowerLeft"] = 2] = "LowerLeft";
    CornerType[CornerType["LowerRight"] = 3] = "LowerRight";
})(CornerType || (CornerType = {}));
var AxisType;
(function (AxisType) {
    AxisType[AxisType["Horizontal"] = 0] = "Horizontal";
    AxisType[AxisType["Vertical"] = 1] = "Vertical";
})(AxisType || (AxisType = {}));
var ConstraintType;
(function (ConstraintType) {
    ConstraintType[ConstraintType["Flexible"] = 0] = "Flexible";
    ConstraintType[ConstraintType["FixedColumnCount"] = 1] = "FixedColumnCount";
    ConstraintType[ConstraintType["FixedRowCount"] = 2] = "FixedRowCount";
})(ConstraintType || (ConstraintType = {}));


/***/ }),
/* 274 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentRankMediator", function() { return ComponentRankMediator; });
/* harmony import */ var _ComponentRankPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(275);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var ComponentRankMediator = /** @class */ (function (_super) {
    __extends(ComponentRankMediator, _super);
    function ComponentRankMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__[/* UIType */ "a"].Normal;
        _this.mView = new _ComponentRankPanel__WEBPACK_IMPORTED_MODULE_0__["ComponentRankPanel"](scene, worldService);
        layerManager.addToUILayer(_this.mView);
        _this.mLayerManager = layerManager;
        _this.mScene = scene;
        _this.world = worldService;
        return _this;
    }
    ComponentRankMediator.prototype.getName = function () {
        return "";
    };
    ComponentRankMediator.prototype.hide = function () {
        this.mShow = false;
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
        }
    };
    ComponentRankMediator.prototype.isSceneUI = function () {
        return false;
    };
    ComponentRankMediator.prototype.isShow = function () {
        return false;
    };
    ComponentRankMediator.prototype.resize = function () {
        this.mView.resize();
    };
    ComponentRankMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        this.mView = new _ComponentRankPanel__WEBPACK_IMPORTED_MODULE_0__["ComponentRankPanel"](this.mScene, this.world);
        this.mLayerManager.addToUILayer(this.mView);
        this.mView.show();
        if (param && param.length > 0) {
            this.mView.addItem(param[0]);
        }
        _super.prototype.show.call(this, param);
    };
    ComponentRankMediator.prototype.destroy = function () {
        if (this.mView) {
            if (this.mView.parentContainer) {
                this.mView.parentContainer.remove(this.mView);
            }
        }
        _super.prototype.destroy.call(this);
    };
    ComponentRankMediator.prototype.update = function (param) {
        if (param && param.length > 0) {
            this.mView.addItem(param[0]);
        }
    };
    ComponentRankMediator.NAME = "ComponentRankMediator";
    return ComponentRankMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 275 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentRankPanel", function() { return ComponentRankPanel; });
/* harmony import */ var _Rank_BasicRankPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(173);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _ComponentRankMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(274);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var ComponentRankPanel = /** @class */ (function (_super) {
    __extends(ComponentRankPanel, _super);
    function ComponentRankPanel(scene, worldService) {
        return _super.call(this, scene, worldService) || this;
    }
    ComponentRankPanel.prototype.addListen = function () {
        this.mCloseBtn.on("pointerup", this.onCloseHandler, this);
    };
    ComponentRankPanel.prototype.removeListen = function () {
        this.mCloseBtn.off("pointerup", this.onCloseHandler, this);
    };
    ComponentRankPanel.prototype.resize = function (wid, hei) {
        if (!this.scene)
            return;
        var view = this.scene.cameras.main.worldView;
        this.x = view.width - this.width - wid >> 1;
        this.y = view.height - this.height - hei >> 1;
    };
    ComponentRankPanel.prototype.destroy = function () {
        if (this.mCloseBtn) {
            this.mCloseBtn.destroy(true);
            this.mCloseBtn = null;
        }
        _super.prototype.destroy.call(this);
    };
    ComponentRankPanel.prototype.preload = function () {
        this.scene.load.spritesheet(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* CloseButton */ "e"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* CloseButton */ "e"].getPNG(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* CloseButton */ "e"].getFrameConfig());
        _super.prototype.preload.call(this);
    };
    ComponentRankPanel.prototype.init = function () {
        this.mCloseBtn = this.scene.make.image({
            x: 0,
            y: 0,
            key: _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* CloseButton */ "e"].getName(),
            frame: "btn_normal"
        }, false);
        this.mCloseBtn.setTexture(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* CloseButton */ "e"].getName(), "btn_normal");
        this.mCloseBtn.x = (this.width >> 1) - 65;
        this.mCloseBtn.y = (-this.height >> 1);
        _super.prototype.init.call(this);
        this.add(this.mCloseBtn);
        this.mCloseBtn.setInteractive();
        this.mWorld.uiManager.getMediator(_ComponentRankMediator__WEBPACK_IMPORTED_MODULE_2__["ComponentRankMediator"].NAME).resize();
        this.mCloseBtn.x = this.width - 18;
    };
    ComponentRankPanel.prototype.tweenComplete = function (show) {
        _super.prototype.tweenComplete.call(this, show);
        if (show)
            this.mWorld.uiManager.getMediator(_ComponentRankMediator__WEBPACK_IMPORTED_MODULE_2__["ComponentRankMediator"].NAME).resize();
    };
    ComponentRankPanel.prototype.onCloseHandler = function () {
        this.hide();
    };
    return ComponentRankPanel;
}(_Rank_BasicRankPanel__WEBPACK_IMPORTED_MODULE_0__["BasicRankPanel"]));



/***/ }),
/* 276 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compose", function() { return Compose; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Compose = /** @class */ (function (_super) {
    __extends(Compose, _super);
    function Compose(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    Compose.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_MINING_MODE_SHOW_REWARD_PACKAGE, this.onRetFormulaDetial);
        }
    };
    Compose.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    Compose.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    Compose.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    Compose.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    Object.defineProperty(Compose.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    Compose.prototype.onReqFormulaDetail = function (id) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_PKT_CRAFT_QUERY_FORMULA);
        var content = packet.content;
        content.id = id;
        this.connection.send(packet);
    };
    Compose.prototype.onReqUseFormula = function (id) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_PKT_CRAFT_ALCHEMY);
        var content = packet.content;
        content.id = id;
        this.connection.send(packet);
    };
    Compose.prototype.onRetFormulaDetial = function (packge) {
        var content = packge.content;
        this.mEvent.emit("formulaDetial", content);
    };
    return Compose;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 277 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComposePanel", function() { return ComposePanel; });
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(107);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(105);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(114);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(104);
/* harmony import */ var _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(120);
/* harmony import */ var _Market_DetailDisplay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(145);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(113);
/* harmony import */ var _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(134);
/* harmony import */ var _lib_rexui_lib_ui_ui_components__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(392);
/* harmony import */ var _ui_atals_name__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(278);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(124);
/* harmony import */ var _lib_rexui_lib_ui_scroller_GameScroller__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(272);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();













var ComposePanel = /** @class */ (function (_super) {
    __extends(ComposePanel, _super);
    function ComposePanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "compose";
        _this.world = world;
        return _this;
    }
    ComposePanel.prototype.resize = function (width, height) {
        _super.prototype.resize.call(this, width, height);
        this.content.x = width * 0.5;
        this.content.y = height * 0.5;
        this.mGrideTable.refreshPos(width * 0.5 + 10 * this.dpr, height - 70 * this.dpr);
        this.setSize(width, height);
    };
    ComposePanel.prototype.show = function (param) {
        this.mShowData = param;
        if (this.mPreLoad)
            return;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        if (this.mShow)
            return;
        if (this.soundGroup && this.soundGroup.open)
            this.playSound(this.soundGroup.open);
        if (!this.mTweening && this.mTweenBoo) {
            this.showTween(true);
        }
        else {
            this.mShow = true;
        }
        this.setInteractive();
        this.addListen();
    };
    ComposePanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
    };
    ComposePanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
    };
    ComposePanel.prototype.preload = function () {
        this.addAtlas(this.key, "compose/compose.png", "compose/compose.json");
        this.addAtlas(_ui_atals_name__WEBPACK_IMPORTED_MODULE_10__["UIAtlasKey"].commonKey, _ui_atals_name__WEBPACK_IMPORTED_MODULE_10__["UIAtlasName"].common + ".png", _ui_atals_name__WEBPACK_IMPORTED_MODULE_10__["UIAtlasName"].common + ".json");
        _super.prototype.preload.call(this);
    };
    ComposePanel.prototype.init = function () {
        var _this = this;
        var width = this.scaleWidth;
        var height = this.scaleHeight;
        var zoom = this.scale;
        this.content = this.scene.make.container(undefined, false);
        this.content.setSize(width, height);
        this.add(this.content);
        var bggraphics = this.scene.make.graphics(undefined, false);
        bggraphics.clear();
        bggraphics.fillGradientStyle(0x7062EC, 0x7062EC, 0xCC99F5, 0xCC99F5);
        bggraphics.fillRect(-width * 0.5, -height * 0.5, width * zoom, height * zoom);
        var bg = this.scene.make.image({ key: this.key, frame: "main_bg" });
        bg.y = -height * 0.5 + bg.height * 0.5;
        this.content.add([bggraphics, bg]);
        var mfont = "bold " + 17 * this.dpr + "px Source Han Sans";
        var titleBg = this.scene.make.image({ key: this.key, frame: "title_bg" });
        titleBg.y = -height * 0.5 + 23 * this.dpr;
        var titleTex = this.scene.make.text({ x: 0, y: titleBg.y, text: _i18n__WEBPACK_IMPORTED_MODULE_11__[/* i18n */ "a"].t("compose.title"), style: { font: mfont, bold: true, color: "#8B5603", fontSize: 15 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0.5);
        this.content.add([titleBg, titleTex]);
        var backBtn = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_5__[/* Button */ "a"](this.scene, _ui_atals_name__WEBPACK_IMPORTED_MODULE_10__["UIAtlasKey"].commonKey, "back_arrow", "back_arrow");
        backBtn.setPosition(-width * 0.5 + 20 * this.dpr, -height * 0.5 + 30 * this.dpr);
        backBtn.on("Tap", this.onBackHandler, this);
        this.content.add(backBtn);
        this.mDetailDisplay = new _Market_DetailDisplay__WEBPACK_IMPORTED_MODULE_6__["DetailDisplay"](this.scene);
        this.mDetailDisplay.y = -30 * this.dpr;
        this.content.add(this.mDetailDisplay);
        this.mDetailBubble = new DetailBubble(this.scene, this.dpr);
        this.mDetailBubble.x = -width * 0.5;
        this.mDetailBubble.y = height * 0.5 - 380 * this.dpr;
        this.content.add(this.mDetailBubble);
        var makeBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__["NinePatchButton"](this.scene, Math.ceil(width * 0.5 - 60 * this.dpr), Math.ceil(height * 0.5 - 310 * this.dpr), 106 * this.dpr, 40 * this.dpr, _ui_atals_name__WEBPACK_IMPORTED_MODULE_10__["UIAtlasKey"].commonKey, "yellow_btn", _i18n__WEBPACK_IMPORTED_MODULE_11__[/* i18n */ "a"].t("compose.make"), {
            left: 12 * this.dpr,
            top: 12 * this.dpr,
            right: 12 * this.dpr,
            bottom: 12 * this.dpr
        });
        makeBtn.setTextStyle({ fontSize: 16 * this.dpr, color: "#996600" });
        this.content.add(makeBtn);
        var materialConWdith = 360 * this.dpr, materialConHeight = 92 * this.dpr;
        this.materialCon = this.scene.make.container(undefined, false).setSize(materialConWdith, materialConHeight);
        this.content.add(this.materialCon);
        this.materialCon.setPosition(0, height * 0.5 - 230 * this.dpr);
        var materialbg = this.scene.make.image({ x: 0, y: 0, key: this.key, frame: "sourcelist_bg" });
        var materialTitle = this.scene.make.text({
            x: 0,
            y: -materialConHeight * 0.5 + 12 * this.dpr,
            text: _i18n__WEBPACK_IMPORTED_MODULE_11__[/* i18n */ "a"].t("compose.needMaterials"),
            style: {
                color: "#ffffff",
                fontSize: 13 * this.dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                wordWrap: {
                    width: 90 * this.dpr,
                    useAdvancedWrap: true
                }
            }
        }, false).setOrigin(0.5);
        var materialLine = this.scene.make.image({ x: -10 * this.dpr, y: materialTitle.y, key: this.key, frame: "sourcelist_title_1" });
        var materialLine2 = this.scene.make.image({ x: 10 * this.dpr, y: materialTitle.y, key: this.key, frame: "sourcelist_title_1" });
        var linePosx = -materialTitle.width * 0.5 - materialLine.width * 0.5 - 10 * this.dpr;
        materialLine.setPosition(linePosx, materialTitle.y);
        materialLine2.setPosition(-linePosx, materialTitle.y).rotation = -Math.PI;
        var materialLine3 = this.scene.make.image({ x: 0, y: materialTitle.y + 12 * this.dpr, key: this.key, frame: "separator" });
        this.materialCon.add([materialbg, materialTitle, materialLine, materialLine2, materialLine3]);
        this.materialGameScroll = new _lib_rexui_lib_ui_scroller_GameScroller__WEBPACK_IMPORTED_MODULE_12__[/* GameScroller */ "a"](this.scene, {
            x: width * 0.5,
            y: height - 220 * this.dpr,
            width: width,
            height: 70 * this.dpr,
            zoom: this.scale,
            align: 2,
            orientation: 1,
            valuechangeCallback: undefined,
            cellupCallBack: function (gameobject) {
                _this.onMaterialItemHandler(gameobject);
            }
        });
        this.add(this.materialGameScroll);
        var propFrame = this.scene.textures.getFrame(this.key, "bprint_bg_2");
        var capW = propFrame.width + 10 * this.dpr * zoom;
        var capH = propFrame.height + 12 * this.dpr * zoom;
        var tableConfig = {
            x: width * zoom / 2,
            y: height * zoom * 0.5 + 145 * this.dpr * zoom,
            table: {
                width: width * zoom,
                height: 190 * this.dpr * zoom,
                columns: 2,
                cellWidth: capW,
                cellHeight: capH,
                reuseCellContainer: true,
                cellPadX: 40 * this.dpr * zoom,
                zoom: this.scale
            },
            scrollMode: 1,
            clamplChildOY: false,
            // background: (<any>this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, .2),
            createCellContainerCallback: function (cell, cellContainer) {
                var scene = cell.scene, item = cell.item;
                if (cellContainer === null) {
                    cellContainer = new ComposeItem(scene, _this.key, _this.dpr, zoom);
                    _this.add(cellContainer);
                }
                // cellContainer.setSize(width, height);
                cellContainer.setItemData(item);
                if (!_this.mSelectItem)
                    _this.onSelectItemHandler(cellContainer);
                return cellContainer;
            },
        };
        this.mGrideTable = new _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_8__[/* GameGridTable */ "a"](this.scene, tableConfig);
        this.mGrideTable.layout();
        this.mGrideTable.on("cellTap", function (cell) {
            if (cell) {
                _this.onSelectItemHandler(cell);
            }
        });
        this.add(this.mGrideTable.table);
        this.resize(width, height);
        _super.prototype.init.call(this);
        this.setComposeData(this.mShowData.skills);
    };
    ComposePanel.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    ComposePanel.prototype.setComposeData = function (datas) {
        this.mGrideTable.setItems(datas);
    };
    ComposePanel.prototype.setComposeDetialData = function (data) {
        this.mDetailBubble.setDetailData(data.productName, data.productDes);
        this.setDetailDisplay(data);
        this.setMaterialItems(data.materials);
    };
    ComposePanel.prototype.setDetailDisplay = function (data) {
        var resData = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OP_VIRTUAL_WORLD_RES_CLIENT_MARKET_QUERY_PACKAGE_ITEM_RESOURCE();
        resData.animations = data.productAnimations;
        resData.display = data.productDisplay;
        resData.avatar = data.productAvatar;
        if (resData.display) {
            this.mDetailDisplay.loadDisplay(resData);
        }
        else if (resData.avatar) {
            this.mDetailDisplay.loadAvatar(resData);
        }
        else {
            // this.mDetailDisplay.loadUrl(this.mSelectedProp.icon);
        }
    };
    ComposePanel.prototype.onSelectItemHandler = function (item) {
        var data = item.itemData;
        this.emit("reqformula", data.id);
        item.select = true;
        if (this.mSelectItem)
            this.mSelectItem.select = false;
        this.mSelectItem = item;
    };
    ComposePanel.prototype.setMaterialItems = function (datas) {
        var len = datas.length;
        var zoom = this.scale;
        var items = [];
        this.materialGameScroll.clearItems();
        for (var i = 0; i < len; i++) {
            var item = new ComposeMaterialItem(this.scene, this.key, this.dpr, zoom);
            item.y = 0;
            items.push(item);
            item.setItemData(datas[i]);
            item.setData("itemData", datas[i]);
            this.materialGameScroll.addItem(item);
        }
        this.materialGameScroll.Sort();
    };
    ComposePanel.prototype.onMaterialItemHandler = function (item) {
    };
    ComposePanel.prototype.onBackHandler = function () {
        this.emit("hide");
    };
    return ComposePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_2__["BasePanel"]));

var DetailBubble = /** @class */ (function (_super) {
    __extends(DetailBubble, _super);
    function DetailBubble(scene, dpr) {
        var _this = _super.call(this, scene) || this;
        _this.dpr = dpr;
        _this.mDetailBubble = _this.scene.make.graphics(undefined, false);
        var bubbleW = 198 * dpr;
        var bubbleH = 96 * dpr;
        _this.mDetailBubble = _this.scene.make.graphics(undefined, false);
        _this.mDetailBubble.fillStyle(0xFFFFFF, 0.1);
        _this.mDetailBubble.fillRoundedRect(0, 0, bubbleW, bubbleH);
        _this.mItemName = _this.scene.make.text({
            x: 7 * _this.dpr,
            y: 9 * _this.dpr,
            text: "道具名称道具名称",
            style: {
                fontSize: 12 * _this.dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                color: "#8C55E1",
                align: "center"
            }
        });
        _this.mDesText = _this.scene.make.text({
            x: 8 * dpr,
            y: 30 * dpr,
            style: {
                color: "#ffffff",
                fontSize: 10 * dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                wordWrap: {
                    width: 180 * dpr,
                    useAdvancedWrap: true
                }
            }
        }, false);
        _this.add([_this.mDetailBubble, _this.mItemName, _this.mDesText]);
        _this.setSize(bubbleW, bubbleH);
        return _this;
    }
    DetailBubble.prototype.setDetailData = function (name, des) {
        this.mItemName.setText(name);
        this.mDesText.setText(des);
        this.resize();
    };
    DetailBubble.prototype.resize = function (w, h) {
        if (w === undefined)
            w = this.width;
        var bubbleH = this.mDesText.height + 60 * this.dpr;
        if (w === this.width && bubbleH === this.height) {
            return;
        }
        this.mDetailBubble.clear();
        this.mDetailBubble.fillStyle(0xFFFFFF, 0.1);
        this.mDetailBubble.fillRoundedRect(0, 0, w, bubbleH);
        this.setSize(w, bubbleH);
        // this.mDetailBubbleContainer.y = this.height - this.y - this.mDetailBubbleContainer.height - 6 * this.dpr;
    };
    return DetailBubble;
}(Phaser.GameObjects.Container));
var ComposeItem = /** @class */ (function (_super) {
    __extends(ComposeItem, _super);
    function ComposeItem(scene, key, dpr, zoom) {
        var _this = _super.call(this, scene) || this;
        _this.dpr = dpr;
        _this.key = key;
        _this.zoom = zoom;
        _this.bg = _this.scene.make.image({ key: _this.key, frame: "bprint_bg_1" });
        _this.setSize(_this.bg.width, _this.bg.height);
        _this.itemIcon = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_7__["DynamicImage"](_this.scene, 0, 0);
        var width = _this.width;
        var height = _this.height;
        _this.newIcon = _this.scene.make.image({ key: _this.key, frame: "tag_new" });
        _this.newIcon.setPosition(-width * 0.5 + 3 * dpr, -height * 0.5 + 3 * dpr);
        _this.newText = _this.scene.make.text({
            x: _this.newIcon.x,
            y: _this.newIcon.y,
            text: "N",
            style: {
                fontSize: 11 * _this.dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                color: "#ffffff",
                align: "center"
            }
        }).setOrigin(0.5);
        _this.qualityIcon = _this.scene.make.image({ key: _this.key, frame: "tag_rank_a" });
        _this.qualityIcon.setPosition(-width * 0.5 + _this.qualityIcon.width * 0.5 - 2 * dpr, height * 0.5 - _this.qualityIcon.height * 0.5);
        _this.qualityTex = _this.scene.make.text({
            x: _this.qualityIcon.x,
            y: _this.qualityIcon.y,
            text: "A",
            style: {
                fontSize: 11 * _this.dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT,
                color: "#ffffff",
                align: "center"
            }
        }).setOrigin(0.5);
        _this.qualifiedIcon = _this.scene.make.image({ key: _this.key, frame: "tag_ready" });
        _this.qualifiedIcon.setOrigin(1).setPosition(width * 0.5 - 3 * dpr, height * 0.5 - 3 * dpr);
        _this.lockbg = _this.scene.make.image({ key: _this.key, frame: "bprint_mask" });
        _this.lockIcon = _this.scene.make.image({ key: _this.key, frame: "lock" });
        _this.add([_this.bg, _this.itemIcon, _this.newIcon, _this.newText, _this.qualityIcon, _this.qualityTex, _this.qualifiedIcon, _this.lockbg, _this.lockIcon]);
        return _this;
    }
    ComposeItem.prototype.setItemData = function (data) {
        this.itemData = data;
        var active = data.active;
        this.newIcon.visible = active;
        this.newText.visible = active;
        this.qualityIcon.visible = active;
        this.qualityTex.visible = active;
        this.qualityTex.text = data.quality;
        this.qualifiedIcon.visible = active && data.qualified;
        this.lockbg.visible = !data.active;
        this.lockIcon.visible = !data.active;
        this.setQualityTexture(data.quality);
        if (data.display)
            this.setItemIcon(data.display);
        this.select = false;
    };
    Object.defineProperty(ComposeItem.prototype, "select", {
        set: function (value) {
            if (value)
                this.bg.setFrame("bprint_bg_2");
            else
                this.bg.setFrame("bprint_bg_1");
        },
        enumerable: false,
        configurable: true
    });
    ComposeItem.prototype.setItemIcon = function (display) {
        var _this = this;
        var url = _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Url */ "h"].getOsdRes(display.texturePath);
        this.itemIcon.load(url, this, function () {
            _this.itemIcon.scale = _this.dpr * _this.zoom;
            var x = -_this.width * 0.5 + 18 * _this.dpr * _this.zoom;
            _this.itemIcon.setPosition(x, 0);
        });
    };
    ComposeItem.prototype.setQualityTexture = function (quality) {
        if (quality === "A")
            this.qualityIcon.setFrame("tag_rank_a");
        else if (quality === "B")
            this.qualityIcon.setFrame("tag_rank_b");
        else if (quality === "C")
            this.qualityIcon.setFrame("tag_rank_c");
    };
    return ComposeItem;
}(Phaser.GameObjects.Container));
var ComposeMaterialItem = /** @class */ (function (_super) {
    __extends(ComposeMaterialItem, _super);
    function ComposeMaterialItem(scene, key, dpr, zoom) {
        var _this = _super.call(this, scene) || this;
        _this.dpr = dpr;
        _this.key = key;
        _this.zoom = zoom;
        var bg = _this.scene.make.image({ key: _this.key, frame: "source_bg" });
        _this.itemIcon = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_7__["DynamicImage"](scene, 0, 0);
        _this.itemCount = new _lib_rexui_lib_ui_ui_components__WEBPACK_IMPORTED_MODULE_9__[/* BBCodeText */ "a"](_this.scene, 0, 0, {})
            .setOrigin(0.5).setFontSize(11 * dpr).setFontFamily(_utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT);
        _this.add([bg, _this.itemIcon, _this.itemCount]);
        _this.setSize(bg.width, bg.height);
        _this.itemCount.y = _this.height * 0.5;
        return _this;
    }
    ComposeMaterialItem.prototype.setItemData = function (data) {
        this.itemData = data;
        this.itemCount.text = this.getCountText(data.count, data.neededCount);
        // this.itemIcon.setTexture();
        // const url = Url.getOsdRes(data.display.texturePath);
        // this.itemIcon.load(url, this, () => {
        //     this.itemIcon.scale = this.dpr * this.zoom;
        //     const x = -this.width * 0.5 + 18 * this.dpr * this.zoom;
        //     this.itemIcon.setPosition(x, 0);
        // });
    };
    ComposeMaterialItem.prototype.getCountText = function (count, needcount) {
        var color = (count >= needcount ? "#ffffff" : "#ff0000");
        var text = "[stroke=" + color + "][color=" + color + "]" + count + "[/color][/stroke]/" + needcount;
        return text;
    };
    return ComposeMaterialItem;
}(Phaser.GameObjects.Container));


/***/ }),
/* 278 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIAtlasName", function() { return UIAtlasName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UIAtlasKey", function() { return UIAtlasKey; });
var UIAtlasName = /** @class */ (function () {
    function UIAtlasName() {
    }
    UIAtlasName.common = "common/ui_base";
    return UIAtlasName;
}());

var UIAtlasKey = /** @class */ (function () {
    function UIAtlasKey() {
    }
    UIAtlasKey.commonKey = "common_key";
    return UIAtlasKey;
}());



/***/ }),
/* 279 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CutInPanel", function() { return CutInPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var CutInPanel = /** @class */ (function (_super) {
    __extends(CutInPanel, _super);
    function CutInPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "cut_in";
        return _this;
    }
    CutInPanel.prototype.show = function (param) {
        var _this = this;
        this.mShowData = param;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        // if (!param || param.length < 1) return;
        if (param && param.length > 0) {
            var text = param[0].text;
            if (this.mName) {
                this.mName.setText(text[0].text);
            }
        }
        else {
            if (this.mName) {
                this.mName.setText("???");
            }
        }
        var width = this.scene.cameras.main.width;
        this.x = width + this.width / 2;
        // this.view.alpha = 0;
        var _x = this.scene.cameras.main.width / 2;
        this.scene.tweens.timeline({
            targets: this,
            duration: 300,
            tweens: [{
                    x: _x,
                    alpha: 1,
                    ease: "Sine.easeInOut"
                }, {
                    delay: 2000,
                    y: this.y - 10 * this.dpr,
                    alpha: 0
                }],
            onComplete: function () {
                _this.emit("close");
            }
        });
    };
    CutInPanel.prototype.resize = function (w, h) {
        // this.x = w / 2;
        this.y = 140 * this.dpr;
    };
    CutInPanel.prototype.preload = function () {
        this.scene.load.image(this.key, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getUIRes(this.dpr, "cut_in/cut_in_bg.png"));
        _super.prototype.preload.call(this);
    };
    CutInPanel.prototype.init = function () {
        var background = this.scene.make.image({
            key: this.key
        }, false);
        this.setSize(background.width * this.scale, background.height * this.scale);
        this.mName = this.scene.make.text({
            style: {
                color: "#ffcc33",
                fontSize: 18 * this.dpr,
                fotnFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(0.5);
        this.mName.setFontStyle("bold");
        this.mName.setStroke("#000000", 1 * this.dpr);
        this.add([background, this.mName]);
        _super.prototype.init.call(this);
        this.resize(this.scene.cameras.main.width, this.scene.cameras.main.height);
        this.mWorld.uiManager.getUILayerManager().addToToolTipsLayer(this);
    };
    return CutInPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 280 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CutInMenu", function() { return CutInMenu; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var CutInMenu = /** @class */ (function (_super) {
    __extends(CutInMenu, _super);
    function CutInMenu(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    CutInMenu.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            //  this.addHandlerFun(op_client.OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_MINING_MODE_SHOW_REWARD_PACKAGE, this.onMineSettlePackageHandler);
        }
    };
    CutInMenu.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    CutInMenu.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    CutInMenu.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    CutInMenu.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    CutInMenu.prototype.reqRightButton = function (uiid, btnid) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_TARGET_UI);
        var content = packet.content;
        content.uiId = uiid;
        content.componentId = btnid;
        this.connection.send(packet);
    };
    Object.defineProperty(CutInMenu.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    return CutInMenu;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 281 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CutInMenuPanel", function() { return CutInMenuPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(120);
/* harmony import */ var _Handler_Handler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(140);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var CutInMenuPanel = /** @class */ (function (_super) {
    __extends(CutInMenuPanel, _super);
    function CutInMenuPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "cutinmenupanel";
        _this.mapPop = new Map();
        _this.world = world;
        return _this;
    }
    CutInMenuPanel.prototype.resize = function (width, height) {
        _super.prototype.resize.call(this, width, height);
        this.setSize(width, height);
    };
    CutInMenuPanel.prototype.show = function (param) {
        this.mShowData = param;
        if (this.mPreLoad)
            return;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        if (this.mShow)
            return;
        if (this.soundGroup && this.soundGroup.open)
            this.playSound(this.soundGroup.open);
        if (!this.mTweening && this.mTweenBoo) {
            this.showTween(true);
        }
        else {
            this.mShow = true;
        }
        this.addListen();
    };
    CutInMenuPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
    };
    CutInMenuPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
    };
    CutInMenuPanel.prototype.preload = function () {
        this.addAtlas(this.key, "cutInmenu/cutInmenu.png", "cutInmenu/cutInmenu.json");
        _super.prototype.preload.call(this);
    };
    CutInMenuPanel.prototype.init = function () {
        var width = this.scaleWidth;
        var height = this.scaleHeight;
        this.rightPopButton = new RightPopContainer(this.scene, this.key, this.dpr);
        var posx = width + this.rightPopButton.width * 0.5;
        this.rightPopButton.setPosition(posx, height * 0.5);
        this.rightPopButton.setClickHandler(new _Handler_Handler__WEBPACK_IMPORTED_MODULE_2__[/* Handler */ "a"](this, this.onRightClickHandler));
        this.add(this.rightPopButton);
        this.resize(width, height);
        _super.prototype.init.call(this);
        this.openRightPopUI();
    };
    CutInMenuPanel.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    CutInMenuPanel.prototype.openRightPopUI = function () {
        var _this = this;
        var width = this.scaleWidth;
        var posx = width + this.rightPopButton.width * 0.5;
        if (this.mapPop.has(this.rightPopButton)) {
            var timeid = this.mapPop.get(this.rightPopButton);
            clearTimeout(timeid);
            this.mapPop.delete(this.rightPopButton);
        }
        else {
            var posTx = width - 15 * this.dpr;
            var target = this.rightPopButton;
            this.rightPopButton.x = posx;
            this.scene.tweens.add({
                targets: target,
                x: { value: posTx, duration: 300, ease: "Bounce.easeOut" }
            });
        }
        var timeID = setTimeout(function () {
            _this.rightPopButton.visible = false;
            _this.mapPop.delete(_this.rightPopButton);
            _this.rightPopButton.x = posx;
            _this.emit("hide");
        }, 8000);
        this.mapPop.set(this.rightPopButton, timeID);
    };
    CutInMenuPanel.prototype.onRightClickHandler = function () {
        var data = this.mShowData[0];
        this.emit("rightButton", data.id, data.button[0].node.id);
    };
    return CutInMenuPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));

var RightPopContainer = /** @class */ (function (_super) {
    __extends(RightPopContainer, _super);
    function RightPopContainer(scene, key, dpr) {
        var _this = _super.call(this, scene) || this;
        _this.dpr = dpr;
        _this.key = key;
        var minecarbg = _this.scene.make.image({ key: _this.key, frame: "minebag_bg" });
        _this.minecarBtn = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_1__[/* Button */ "a"](_this.scene, _this.key, "minecar", "minecar");
        _this.minecarBtn.setPosition(-12 * dpr, -_this.minecarBtn.height * 0.5);
        _this.teximg = _this.scene.make.image({ key: _this.key, frame: "text_minebag" });
        _this.teximg.setPosition(_this.minecarBtn.x, 2 * dpr);
        _this.add([minecarbg, _this.minecarBtn, _this.teximg]);
        _this.minecarBtn.on("Tap", _this.onClickHandler, _this);
        _this.setSize(minecarbg.width, minecarbg.height);
        return _this;
    }
    RightPopContainer.prototype.setClickHandler = function (handler) {
        this.clickHandler = handler;
    };
    RightPopContainer.prototype.setPopData = function (data) {
        this.popData = data;
    };
    RightPopContainer.prototype.onClickHandler = function () {
        if (this.clickHandler)
            this.clickHandler.runWith(this.popData);
    };
    return RightPopContainer;
}(Phaser.GameObjects.Container));


/***/ }),
/* 282 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugLogger", function() { return DebugLogger; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/* harmony import */ var _DebugLoggerMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(184);
/* harmony import */ var _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(121);
/* harmony import */ var _ui_mediatorType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(122);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(107);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var DebugLogger = /** @class */ (function (_super) {
    __extends(DebugLogger, _super);
    function DebugLogger(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mDelay = 0;
        _this.setTween(false);
        return _this;
    }
    DebugLogger.prototype.addListen = function () {
        // if (this.mWorld.game.device.os.desktop) {
        this.mClsBtn.on("pointerup", this.closeHandler, this);
        // }
    };
    DebugLogger.prototype.removeListen = function () {
        if (!this.mWorld.game.device.os.desktop) {
            this.mClsBtn.off("pointerup", this.closeHandler, this);
        }
    };
    DebugLogger.prototype.show = function (param) {
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        this.mShow = true;
        this.resize();
    };
    DebugLogger.prototype.resize = function (wid, hei) {
        var size = this.mWorld.getSize();
        this.showDescTxT();
        // if (this.mWorld.game.device.os.desktop) {
        //     this.x = ((this.width >> 1) + 60) * this.mWorld.uiScale;
        //     this.y = (this.height >> 1) * this.mWorld.uiScale;
        // } else {
        //     if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
        //         this.x = size.width >> 1;
        //         this.y = size.height >> 1;
        //     } else {
        //         this.x = size.width >> 1;
        //         this.y = size.height >> 1;
        //     }
        // }
        this.update(0);
    };
    DebugLogger.prototype.update = function (param) {
        var now = this.mWorld.roomManager.currentRoom.now();
        if (this.mDelay - now < 3000) {
            this.showDescTxT();
            this.mTimeTF.setText("FPS:" + param);
            this.mDescTF.setText(this.mDescTxt);
            this.mDelay = now;
        }
    };
    DebugLogger.prototype.preload = function () {
        if (!this.mScene) {
            return;
        }
        this.mScene.load.atlas("clsBtn", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.json"));
        _super.prototype.preload.call(this);
    };
    DebugLogger.prototype.init = function () {
        this.mWorld.uiManager.getUILayerManager().addToToolTipsLayer(this);
        var size = this.mWorld.getSize();
        this.mBgWidth = 400;
        this.mBgHeight = size.height >> 1;
        // this.mBackground = new NinePatch(this.mScene, 0, 0,
        //     this.mBgWidth,
        //     this.mBgHeight,
        //     "logger",
        //     null,
        //     Background.getConfig()
        // );
        var width = this.scene.cameras.main.width / 2;
        var height = this.scene.cameras.main.height;
        this.mBackground = this.scene.make.graphics(undefined, false);
        this.mBackground.fillStyle(0, 0.6);
        this.mBackground.fillRect(0, 0, width, height);
        this.setSize(width, height);
        this.add(this.mBackground);
        this.mTimeTF = this.mScene.make.text({
            style: {
                x: 0,
                y: 0,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_6__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 14 * this.dpr,
                origin: { x: 0, y: 0 },
                wordWrap: { width: size.width - 10, height: 20, useAdvancedWrap: true }
            }
        }, false);
        this.mDescTF = this.mScene.make.text({
            style: {
                x: 0,
                y: 20 * this.dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_6__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 14 * this.dpr,
                origin: { x: 0, y: 0 },
                wordWrap: { width: this.width - 10 * this.dpr, height: this.height - 30, useAdvancedWrap: true }
            }
        }, false);
        // this.mTimeTF.x = -this.width / 2 + 5;
        // this.mDescTF.x = -this.width / 2 + 5;
        // this.mTimeTF.y = -this.height / 2 + 5;
        // this.mDescTF.y = -this.height / 2 + 23;
        this.add(this.mTimeTF);
        this.add(this.mDescTF);
        // this.setSize(this.mBgWidth, this.mBgHeight);
        if (!this.mWorld.game.device.os.desktop) {
            this.mClsBtn = new _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_4__["IconBtn"](this.mScene, this.mWorld, {
                key: _ui_mediatorType__WEBPACK_IMPORTED_MODULE_5__["UIMediatorType"].Close_Btn, bgResKey: "clsBtn", bgTextures: ["btn_normal", "btn_over", "btn_click"],
                iconResKey: "", iconTexture: "", scale: 1, pngUrl: "ui/common/common_clsBtn.png", jsonUrl: "ui/common/common_clsBtn.json"
            });
            this.mClsBtn.x = this.width;
            this.mClsBtn.y = 10 * this.dpr;
            this.mClsBtn.scaleX = this.mClsBtn.scaleY = 2;
            this.add(this.mClsBtn);
        }
        _super.prototype.init.call(this);
        this.addListen();
    };
    DebugLogger.prototype.tweenComplete = function (show) {
        _super.prototype.tweenComplete.call(this, show);
        if (show)
            this.mWorld.uiManager.getMediator(_DebugLoggerMediator__WEBPACK_IMPORTED_MODULE_3__["DebugLoggerMediator"].NAME).resize();
    };
    DebugLogger.prototype.showDescTxT = function () {
        var orientation = this.mWorld.getSize().width > this.mWorld.getSize().height ? "LANDSCAPE" : "PORTRAIT";
        var renderType = "WEBGL";
        if (this.mWorld.game.config.renderType === Phaser.CANVAS) {
            renderType = "CANVAS";
        }
        else if (this.mWorld.game.config.renderType === Phaser.HEADLESS) {
            renderType = "HEADLESS";
        }
        // this.mDescTxt = "rendertype:" + renderType + "\n" + " width: " + this.mWorld.getSize().width + "\n" + "height: " + this.mWorld.getSize().height + "\n" + "orientation: " + orientation + "\n" + "devicePixelRatio: " + window.devicePixelRatio;
        var config = this.mWorld.getConfig();
        this.mDescTxt = "\n            rendertype: " + renderType + "\n            size: " + config.width + " " + config.height + "\n            device size: " + this.mWorld.getSize().width.toFixed(2) + " " + this.mWorld.getSize().height.toFixed(2) + "\n            scene scale: " + this.mWorld.scaleRatio + "\n            devicePixel: " + this.mWorld.uiRatio + "\n            ui scale: " + this.mWorld.uiScale.toFixed(4);
        // this.showErrTxt();
    };
    DebugLogger.prototype.closeHandler = function () {
        var med = this.mWorld.uiManager.getMediator(_DebugLoggerMediator__WEBPACK_IMPORTED_MODULE_3__["DebugLoggerMediator"].NAME);
        med.hide();
    };
    DebugLogger.prototype.showErrTxt = function () {
        var errList = _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().getErrorList();
        if (!errList) {
            return;
        }
        var errStr = "";
        errList.forEach(function (str) {
            errStr += "\n" + str;
        });
        this.mDescTxt += errStr;
    };
    return DebugLogger;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 283 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquipUpgrade", function() { return EquipUpgrade; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var EquipUpgrade = /** @class */ (function (_super) {
    __extends(EquipUpgrade, _super);
    function EquipUpgrade(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    EquipUpgrade.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_MINING_MODE_ACTIVE_EQUIPMENT, this.onActiveEquipmend);
        }
    };
    EquipUpgrade.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    EquipUpgrade.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    EquipUpgrade.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    EquipUpgrade.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    Object.defineProperty(EquipUpgrade.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    EquipUpgrade.prototype.reqEquipedEquipment = function (id) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_RES_VIRTUAL_WORLD_MINING_MODE_EQUIP_EQUIPMENT);
        var content = packet.content;
        content.equipmentId = id;
        this.connection.send(packet);
    };
    EquipUpgrade.prototype.reqActiveEquipment = function (id) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_RES_VIRTUAL_WORLD_MINING_MODE_ACTIVE_EQUIPMENT);
        var content = packet.content;
        content.equipmentId = id;
        this.connection.send(packet);
    };
    EquipUpgrade.prototype.onActiveEquipmend = function (packge) {
        var content = packge.content;
        this.mEvent.emit("activeEquip", content.mineEquipment);
    };
    return EquipUpgrade;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 284 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquipUpgradeItem", function() { return EquipUpgradeItem; });
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(107);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(104);
/* harmony import */ var _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(134);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(110);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var EquipUpgradeItem = /** @class */ (function (_super) {
    __extends(EquipUpgradeItem, _super);
    function EquipUpgradeItem(scene, container, dpr, zoom, key, commonKey) {
        var _this = _super.call(this) || this;
        _this.haveEquiped = false;
        _this.cellWidth = 0;
        _this.cellHeight = 0;
        _this.dpr = dpr;
        _this.zoom = zoom;
        _this.key = key;
        _this.commonKey = commonKey;
        _this.mScene = scene;
        _this.mContainer = container;
        _this.create();
        return _this;
    }
    EquipUpgradeItem.prototype.setEquipItems = function (data) {
        var name = data.equipmentType;
        var items = data.mineEquipments;
        this.titleName.text = name;
        var index = 0;
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            if (item.selected) {
                this.haveEquiped = true;
                break;
            }
            index++;
        }
        this.gridTable.setItems(items);
        if (this.haveEquiped)
            // this.gridTable.setT((index + 1) / items.length);
            this.setBgTexture(data["isblue"]);
    };
    EquipUpgradeItem.prototype.setTransPosition = function (x, y) {
        // const w = this.mScene.cameras.main.width, h = this.mScene.cameras.main.height;
        // const posX = w * 0.5 + this.mContainer.x * this.zoom;
        // const posY = h * 0.5 + this.mContainer.y * this.zoom - 20 * this.dpr;
        //  -posX + this.cellWidth / 2 * this.zoom, -posY);
        this.bg.x += x;
        this.bg.y += y;
        this.titleName.x += x;
        this.titleName.y += y;
        this.bottombg.x += x;
        this.bottombg.y += y;
        this.equipName.x += x;
        this.equipName.y += y;
        this.penetrationText.x += x;
        this.penetrationText.y += y;
        this.equipDes.x += x;
        this.equipDes.y += y;
        this.topbg.x += x;
        this.topbg.y += y;
        this.unlockbtn.x += x;
        this.unlockbtn.y += y;
        this.costNum.x += x;
        this.costNum.y += y;
        this.diamondIcon.x += x;
        this.diamondIcon.y += y;
        this.curEquipItem.x += x;
        this.curEquipItem.y += y;
        this.gridTable.refreshPos(x, y - 10 * this.dpr * this.zoom);
        // this.gridTable.x = posX;
        // this.gridTable.y = posY;
        // this.gridTable.layout();
        // this.mScrollContainer.setPosition(-this.gridTable.x + this.cellWidth / 2 * this.zoom, -this.gridTable.y);
    };
    Object.defineProperty(EquipUpgradeItem.prototype, "displayList", {
        get: function () {
            return [this.bg, this.topbg, this.bottombg, this.titleName, this.equipName, this.penetrationText, this.equipDes];
        },
        enumerable: false,
        configurable: true
    });
    EquipUpgradeItem.prototype.refreshEquipData = function (data, index) {
        this.gridTable.items[index] = data;
        this.gridTable.refresh();
        // this.gridTable.setT((index + 1) / this.gridTable.items.length);
        this.updateEquipItem(this.curEquipItem);
    };
    EquipUpgradeItem.prototype.destroy = function () {
        if (this.unlockbtn)
            this.unlockbtn.off("pointerup", this.onUnlockEquipHandler, this);
        _super.prototype.destroy.call(this);
        if (this.gridTable)
            this.gridTable.destroy();
        this.bg = null;
        this.topbg = null;
        this.bottombg = null;
        this.gridTable = null;
        this.titleName = null;
        this.equipName = null;
        this.penetrationText = null;
        this.equipDes = null;
        this.unlockbtn = null;
        this.costNum = null;
        this.diamondIcon = null;
        this.curEquipItem = null;
    };
    EquipUpgradeItem.prototype.setBgTexture = function (isblue) {
        var topName = !isblue ? "topbg" : "topbg1";
        var bottombg = !isblue ? "bottombg" : "bottombg1";
        var fontColor = !isblue ? "#8F4300" : "#0867AE";
        this.topbg.setTexture(this.key, topName);
        this.bottombg.setTexture(this.key, bottombg);
        this.titleName.setColor(fontColor).setStroke(fontColor, 1);
        this.equipName.setColor(fontColor).setStroke(fontColor, 1);
        this.penetrationText.setColor(fontColor).setStroke(fontColor, 1);
    };
    EquipUpgradeItem.prototype.create = function () {
        this.bg = this.mScene.make.image({ x: 0, y: -21 * this.dpr, key: this.key, frame: "bg1" });
        this.topbg = this.mScene.make.image({ x: 0, y: -61 * this.dpr, key: this.key, frame: "topbg" });
        this.titleName = this.mScene.make.text({ x: 0, y: this.topbg.y + 0 * this.dpr, text: "矿镐", style: { blod: true, color: "#8F4300", fontSize: 14 * this.dpr, font: this.getBoldFont(14 * this.dpr) } }).setOrigin(0.5, 0.5);
        this.bottombg = this.mScene.make.image({ x: 0, y: 42 * this.dpr, key: this.key, frame: "bottombg" });
        this.equipName = this.mScene.make.text({ x: -120 * this.dpr, y: 15 * this.dpr, text: "精铁镐", style: { color: "#8F4300", fontSize: 14 * this.dpr, font: this.getBoldFont(14 * this.dpr) } });
        this.penetrationText = this.mScene.make.text({ x: -60 * this.dpr, y: 16 * this.dpr, text: "穿透力:10", style: { color: "#8F4300", fontSize: 12 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT } });
        this.equipDes = this.mScene.make.text({ x: -120 * this.dpr, y: 35 * this.dpr, text: "描述文字", style: { color: "#000000", fontSize: 10 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT, wordWrap: { width: 130 * this.dpr, useAdvancedWrap: true } } });
        this.equipDes.setStroke("#000000", 1);
        this.mContainer.add([this.bg, this.topbg, this.bottombg, this.titleName, this.equipName, this.penetrationText, this.equipDes]);
        this.createGridTable();
        this.createBtn();
    };
    EquipUpgradeItem.prototype.createGridTable = function () {
        var _this = this;
        // this.mScrollContainer = this.mScene.make.container(undefined, false);
        // this.mScrollContainer.setPosition(0, 0);
        var propFrame = this.mScene.textures.getFrame(this.key, "equipbg");
        var capW = (propFrame.width + 10 * this.dpr * this.zoom);
        var capH = (propFrame.height + 30 * this.dpr * this.zoom);
        this.cellWidth = capW;
        this.cellHeight = capH;
        var config = {
            scrollMode: 1,
            // background: (<any>this.mScene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFFFFF, .5),
            table: {
                width: 259 * this.dpr * this.zoom,
                height: 77 * this.dpr * this.zoom,
                columns: 1,
                cellWidth: capW,
                cellHeight: capH,
                reuseCellContainer: true,
                cellOriginX: 0,
                cellOriginY: 0
            },
            clamplChildOY: false,
            createCellContainerCallback: function (cell, cellContainer) {
                var scene = cell.scene, item = cell.item;
                var index = cell.index;
                if (cellContainer === null) {
                    cellContainer = new EquipItemCell(scene, _this.dpr, _this.key, _this.zoom);
                    cellContainer.setSize(capW, capH);
                    _this.mContainer.add(cellContainer);
                    cellContainer.setChildPosition();
                }
                cellContainer.setData({ item: item });
                cellContainer.setItemData(item, index);
                if (_this.curEquipItem == null) {
                    if (_this.haveEquiped) {
                        if (item.selected)
                            _this.onSelectItemHandler(cellContainer);
                    }
                    else {
                        _this.onSelectItemHandler(cellContainer);
                    }
                }
                // Logger.getInstance().log(item);
                return cellContainer;
            }
        };
        this.gridTable = new _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_3__[/* GameGridTable */ "a"](this.mScene, config);
        this.gridTable.layout();
        this.gridTable.on("cellTap", function (cell) {
            _this.onSelectItemHandler(cell);
        });
        this.mContainer.add(this.gridTable.table);
    };
    EquipUpgradeItem.prototype.onSelectItemHandler = function (cell) {
        // Logger.getInstance().log(cell.itemData);
        if (this.curEquipItem)
            this.curEquipItem.setSelect(false);
        var data = cell.itemData;
        this.updateEquipItem(cell);
        this.curEquipItem = cell;
        if (data.owned && !data.selected)
            this.emit("reqEquiped", data.id);
    };
    EquipUpgradeItem.prototype.updateEquipItem = function (cell) {
        var data = cell.itemData;
        this.penetrationText.text = data.buffDisplayNames[0];
        this.equipDes.text = data.description;
        this.equipName.text = data.name;
        this.costNum.text = data.price + "";
        if (data.owned)
            this.unlockbtn.visible = false;
        else
            this.unlockbtn.visible = true;
        if (data.qualified) {
            this.unlockCondition.visible = false;
            this.unlockbtn.setInteractive();
        }
        else if (!data.owned) {
            this.unlockCondition.visible = true;
            this.unlockCondition.text = data.conditionDisplayNames[0];
            this.unlockbtn.disableInteractive();
        }
        if (data.price == null) {
            this.costNum.visible = false;
            this.diamondIcon.visible = false;
            this.btnName.setPosition(0, 0 * this.dpr);
        }
        else {
            this.costNum.visible = true;
            this.diamondIcon.visible = true;
            this.btnName.setPosition(0, 6 * this.dpr);
        }
        cell.setSelect(true);
    };
    EquipUpgradeItem.prototype.onUnlockEquipHandler = function () {
        this.emit("reqActive", this.curEquipItem.itemData.id);
    };
    EquipUpgradeItem.prototype.createBtn = function () {
        this.unlockCondition = this.mScene.make.text({ x: 0, y: -26 * this.dpr, text: "解锁条件", style: { color: "#000000", fontSize: 10 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0.5, 0.5);
        this.unlockbtn = this.mScene.make.container(undefined, false);
        var btnBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__["NinePatch"](this.mScene, 0, 0, 88 * this.dpr * this.zoom, 31 * this.dpr * this.zoom, this.commonKey, "yellow_btn_normal", {
            left: 12 * this.dpr * this.zoom,
            top: 12 * this.dpr * this.zoom,
            right: 12 * this.dpr * this.zoom,
            bottom: 12 * this.dpr * this.zoom
        });
        this.diamondIcon = this.mScene.make.image({ x: -15 * this.dpr, y: -8 * this.dpr, key: this.commonKey, frame: "test_diamond" });
        this.costNum = this.mScene.make.text({ x: 0, y: -8 * this.dpr, text: "1000", style: { color: "#ffffff", fontSize: 10 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0, 0.5);
        this.btnName = this.mScene.make.text({ x: 0, y: 6 * this.dpr, text: "立即解锁", style: { color: "#8F4300", fontSize: 13 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0.5, 0.5);
        this.costNum.setStroke("#ffffff", 1);
        this.btnName.setStroke("#8F4300", 1);
        this.unlockCondition.setStroke("#000000", 1);
        this.unlockbtn.setPosition(70 * this.dpr, 48 * this.dpr);
        this.unlockbtn.setSize(btnBg.width, btnBg.height);
        this.unlockbtn.add([this.unlockCondition, btnBg, this.diamondIcon, this.costNum, this.btnName]);
        this.unlockbtn.on("pointerup", this.onUnlockEquipHandler, this);
        this.mContainer.add(this.unlockbtn);
    };
    EquipUpgradeItem.prototype.getBoldFont = function (size) {
        var font = "bold " + size + "px Source Han Sans";
        return font;
    };
    return EquipUpgradeItem;
}(Phaser.Events.EventEmitter));

var EquipItemCell = /** @class */ (function (_super) {
    __extends(EquipItemCell, _super);
    function EquipItemCell(scene, dpr, key, zoom) {
        var _this = _super.call(this, scene) || this;
        _this.index = 0;
        _this.isSelect = false;
        _this.isUnlock = false;
        _this.dpr = dpr;
        _this.key = key;
        _this.zoom = zoom;
        _this.create();
        return _this;
    }
    EquipItemCell.prototype.setItemData = function (data, index) {
        var _this = this;
        this.itemData = data;
        this.index = index;
        var url = _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getOsdRes(data.display.texturePath);
        this.equipIcon.load(url, this, function () {
            _this.equipIcon.scale = _this.dpr * _this.zoom;
            // const x = this.equipIcon.width * 0.5 + 18 * this.dpr * this.zoom;
            // const y = this.equipIcon.height * 0.5 + 15 * this.dpr * this.zoom;
            // this.equipIcon.setPosition(x, y);
        });
        this.setEquiped(data.selected, data.owned);
        this.setSelect(this.isSelect);
    };
    EquipItemCell.prototype.setSelect = function (isSelect) {
        this.isSelect = isSelect;
        var bgName = "equipbg";
        if (!isSelect) {
            if (this.isUnlock)
                bgName = "equipbg2";
            else
                bgName = "equipbg1";
        }
        this.bg.setTexture(this.key, bgName);
    };
    EquipItemCell.prototype.setChildPosition = function () {
        var x = this.bg.width * 0.5 + 10 * this.dpr * this.zoom;
        var y = this.height - 10 * this.dpr * this.zoom;
        this.bg.setPosition(x, y);
        x = x + 1 * this.dpr * this.zoom;
        y = this.height * 0.5 + 2 * this.dpr * this.zoom;
        this.equipIcon.setPosition(x, y);
        x = x + 22 * this.dpr * this.zoom;
        y = 8 * this.dpr * this.zoom;
        this.unlock.setPosition(x, y);
    };
    EquipItemCell.prototype.setEquiped = function (isequiped, unlock) {
        this.isUnlock = unlock;
        this.unlock.visible = false;
        if (isequiped) {
            this.isUnlock = true;
            this.unlock.visible = true;
            this.unlock.setTexture(this.key, "ok");
        }
        else if (!this.isUnlock) {
            this.unlock.visible = true;
            this.unlock.setTexture(this.key, "lock");
        }
    };
    EquipItemCell.prototype.create = function () {
        this.bg = this.scene.make.image({ x: 0, y: -10 * this.dpr * this.zoom, key: this.key, frame: "equipbg" });
        this.equipIcon = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__["DynamicImage"](this.scene, 15 * this.dpr * this.zoom, 0 * this.dpr * this.zoom);
        this.unlock = this.scene.make.image({ x: 30 * this.dpr * this.zoom, y: -10 * this.dpr * this.zoom, key: this.key, frame: "lock" });
        this.add([this.bg, this.equipIcon, this.unlock]);
    };
    return EquipItemCell;
}(Phaser.GameObjects.Container));


/***/ }),
/* 285 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(107);
/* harmony import */ var _EquipUpgradeItem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(284);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(110);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var EquipUpgradePanel = /** @class */ (function (_super) {
    __extends(EquipUpgradePanel, _super);
    function EquipUpgradePanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "equip_upgrade";
        _this.commonkey = "common_key";
        _this.equipItems = [];
        _this.scale = 1;
        return _this;
    }
    EquipUpgradePanel.prototype.resize = function (width, height) {
        var w = this.scene.cameras.main.width / this.scale;
        var h = this.scene.cameras.main.height / this.scale;
        _super.prototype.resize.call(this, width, height);
        this.setSize(w, h);
        this.bg.x = w / 2; // - 24 * this.dpr * this.scale;
        this.bg.y = h / 2; // - 20 * this.dpr * this.scale;
        this.tilteName.x = this.bg.x;
        this.tilteName.y = this.bg.y - this.bg.height / 2;
        this.titlebg.x = this.bg.x;
        this.titlebg.y = this.bg.y - this.bg.height / 2;
        this.closeBtn.x = this.bg.x + this.bg.width / 2 - 10 * this.dpr * this.scale; // + this.bg.width / 2 - this.dpr * 8;
        this.closeBtn.y = this.bg.y - this.bg.height / 2 + 10 * this.dpr * this.scale; // + posY + this.dpr * 8;
        this.blackBg.clear();
        this.blackBg.fillStyle(0, 0.5);
        this.blackBg.fillRoundedRect(-this.x, -this.y, w, h);
        this.add([this.blackBg, this.bg, this.closeBtn, this.titlebg, this.tilteName]);
    };
    EquipUpgradePanel.prototype.show = function (param) {
        this.mShowData = param;
        if (this.mPreLoad)
            return;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        if (this.mShow)
            return;
        if (this.soundGroup && this.soundGroup.open)
            this.playSound(this.soundGroup.open);
        if (!this.mTweening && this.mTweenBoo) {
            this.showTween(true);
        }
        else {
            this.mShow = true;
        }
        this.refreshData();
        this.addListen();
    };
    EquipUpgradePanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.closeBtn.on("pointerup", this.OnClosePanel, this);
    };
    EquipUpgradePanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.closeBtn.off("pointerup", this.OnClosePanel, this);
    };
    EquipUpgradePanel.prototype.preload = function () {
        this.addAtlas(this.key, "equip_upgrade/mine_eqpm.png", "equip_upgrade/mine_eqpm.json");
        this.addAtlas(this.commonkey, "common/ui_base.png", "common/ui_base.json");
        _super.prototype.preload.call(this);
    };
    EquipUpgradePanel.prototype.init = function () {
        var w = this.scene.cameras.main.width / this.scale;
        var h = this.scene.cameras.main.height / this.scale;
        this.setSize(w, h);
        this.blackBg = this.scene.make.graphics(undefined, false);
        this.bg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__["NinePatch"](this.scene, 0, 0, 300 * this.dpr, 300 * this.dpr, this.commonkey, "bg", {
            left: 40,
            top: 40,
            bottom: 40,
            right: 40,
        });
        var posY = -this.bg.height * 0.5;
        this.titlebg = this.scene.make.image({ x: 0, y: posY, key: this.key, frame: "titlebg" });
        var mfont = "bold " + 15 * this.dpr + "px Source Han Sans";
        this.tilteName = this.scene.make.text({ x: 0, y: posY, text: "装备", style: { font: mfont, color: "#8F4300", fontSize: 15 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT } }).setOrigin(0.5, 0);
        this.closeBtn = this.scene.make.image({ x: this.bg.width * 0.5 - this.dpr * 5, y: posY + this.dpr * 5, key: this.commonkey, frame: "close" });
        this.tilteName.setStroke("#8F4300", 1);
        this.closeBtn.setInteractive();
        this.add([this.blackBg, this.bg, this.closeBtn, this.titlebg, this.tilteName]);
        this.resize(this.scene.cameras.main.width, this.scene.cameras.main.height);
        _super.prototype.init.call(this);
    };
    EquipUpgradePanel.prototype.setEquipDatas = function (content) {
        this.content = content;
        if (!this.mInitialized)
            return;
        var w = this.scene.cameras.main.width / this.scale;
        var h = this.scene.cameras.main.height / this.scale;
        var arr = content.mineEquipments; // this.getEuipDatas();// [content.minePicks, content.minePicks];
        var height = 175 * this.dpr;
        var bgHeight = height * arr.length - (arr.length >= 2 ? 40 * (arr.length - 2) : 0);
        var cellHeight = 155 * this.dpr;
        this.resetPosition(this.bg.width, bgHeight);
        var posY = -bgHeight * 0.5 + 100 * this.dpr;
        var index = 0;
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var value = arr_1[_i];
            value["isblue"] = (index % 2 === 0 ? false : true);
            var item = new _EquipUpgradeItem__WEBPACK_IMPORTED_MODULE_2__["EquipUpgradeItem"](this.scene, this, this.dpr, this.scale, this.key, this.commonkey);
            item.on("reqActive", this.onReqActiveEquipment, this);
            item.on("reqEquiped", this.onReqEquipedEquipment, this);
            item.setEquipItems(value);
            item.setTransPosition(w / 2, posY + h / 2);
            this.equipItems.push(item);
            posY += cellHeight;
            index++;
        }
        this.resize(w, h);
    };
    EquipUpgradePanel.prototype.setActiveEquipment = function (equip) {
        var index = 0;
        for (var _i = 0, _a = this.content.mineEquipments; _i < _a.length; _i++) {
            var value = _a[_i];
            var item = this.equipItems[index];
            var activeIndex = -1;
            // tslint:disable-next-line: prefer-for-of
            for (var i = 0; i < value.mineEquipments.length; i++) {
                var data = value.mineEquipments[i];
                if (data.id === equip.id) {
                    value.mineEquipments[i] = equip;
                    item.refreshEquipData(equip, i);
                    activeIndex = i;
                }
                else {
                    if (data.selected)
                        data.selected = false;
                }
            }
            if (activeIndex >= 0) {
                item.refreshEquipData(equip, activeIndex);
            }
            index++;
        }
    };
    EquipUpgradePanel.prototype.destroy = function () {
        if (this.equipItems) {
            for (var _i = 0, _a = this.equipItems; _i < _a.length; _i++) {
                var item = _a[_i];
                item.destroy();
            }
            this.equipItems.length = 0;
        }
        this.equipItems = null;
        this.content = null;
        _super.prototype.destroy.call(this);
    };
    EquipUpgradePanel.prototype.getEuipDatas = function () {
        var arr = [];
        for (var i = 0; i < 3; i++) {
            var obj = {};
            obj["name"] = i === 0 ? "矿镐" : "矿车";
            obj["items"] = [];
            obj["isblue"] = !(i % 2 === 0);
            for (var j = 0; j < 15; j++) {
                var item = {};
                item["name"] = "矿镐" + j;
                item["penetration"] = 10 + j;
                item["des"] = "describle";
                item["cost"] = 100 * j;
                item["unlock"] = false;
                obj["items"].push(item);
            }
            arr.push(obj);
        }
        return arr;
    };
    EquipUpgradePanel.prototype.refreshData = function () {
        var upgradeData = this.getData("upgradeData");
        if (upgradeData)
            this.setEquipDatas(upgradeData);
    };
    EquipUpgradePanel.prototype.resetPosition = function (width, height) {
        this.bg.resize(width, height);
        var posY = -height * 0.5;
        this.titlebg.setPosition(0, posY);
        this.tilteName.setPosition(0, posY);
        this.closeBtn.setPosition(width * 0.5 - this.dpr * 8, posY + this.dpr * 8);
    };
    EquipUpgradePanel.prototype.OnClosePanel = function () {
        this.emit("hide");
    };
    EquipUpgradePanel.prototype.onReqActiveEquipment = function (id) {
        this.emit("reqActive", id);
    };
    EquipUpgradePanel.prototype.onReqEquipedEquipment = function (id) {
        this.emit("reqEquiped", id);
    };
    return EquipUpgradePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));
/* harmony default export */ __webpack_exports__["default"] = (EquipUpgradePanel);


/***/ }),
/* 286 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FurniBag", function() { return FurniBag; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var FurniBag = /** @class */ (function (_super) {
    __extends(FurniBag, _super);
    function FurniBag($world, sceneType) {
        var _this = _super.call(this) || this;
        _this.world = $world;
        _this.mSceneType = sceneType;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    FurniBag.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_GET_PACKAGE_CATEGORIES, this.onPackageCategoriesHandler);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_MARKET_QUERY_PACKAGE, this.onQueryMarketPackage);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_MARKET_QUERY_PACKAGE_ITEM_RESOURCE, this.onQueryCommodityResultHandler);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_QUERY_EDIT_PACKAGE, this.onQueryEditPackage);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_PKT_RESET_AVATAR, this.onQueryResetAvatar);
        }
    };
    FurniBag.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    FurniBag.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    FurniBag.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    FurniBag.prototype.getCategories = function (categoryType) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_GET_PACKAGE_CATEGORIES);
        var content = packet.content;
        content.category = categoryType;
        this.connection.send(packet);
        this.categoryType = categoryType;
    };
    FurniBag.prototype.queryPackage = function (key, queryString) {
        if (this.mSceneType === pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].SceneTypeEnum.NORMAL_SCENE_TYPE) {
            this.queryMarketPackage(key, queryString);
        }
        else {
            this.queryEditPackage(key, queryString);
        }
    };
    FurniBag.prototype.queryCommodityResource = function (id) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MARKET_QUERY_PACKAGE_ITEM_RESOURCE);
        var content = packet.content;
        content.id = id;
        this.connection.send(packet);
    };
    FurniBag.prototype.addFurniToScene = function (id) {
        if (this.mSceneType !== pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].SceneTypeEnum.EDIT_SCENE_TYPE) {
            return;
        }
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_SELECTED_SPRITE);
        var content = packet.content;
        content.id = id;
        this.connection.send(packet);
    };
    FurniBag.prototype.enterEditAndSelectedSprite = function (id) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_ENABLE_AND_SELECTED_SPRITE);
        var content = packet.content;
        content.id = id;
        this.connection.send(packet);
    };
    FurniBag.prototype.seachPackage = function (seach, category) {
        this.queryPackage(category, seach);
    };
    FurniBag.prototype.sellProps = function (prop, count, category) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MARKET_SELL_PACKAGE_ITEM);
        var content = packet.content;
        content.category = category;
        var item = pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].CountablePackageItem.create(prop);
        item.count = count;
        content.items = [item];
        content.totalPrice = item.sellingPrice;
        content.totalPrice.price *= count;
        this.connection.send(packet);
    };
    FurniBag.prototype.querySaveAvatar = function (avatar) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_PKT_DRESS_UP_AVATAR);
        var content = packet.content;
        content.avatar = avatar;
        this.connection.send(packet);
    };
    FurniBag.prototype.queryResetAvatar = function (avatar) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_PKT_RESET_AVATAR);
        this.connection.send(packet);
    };
    FurniBag.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    FurniBag.prototype.onPackageCategoriesHandler = function (packet) {
        var content = packet.content;
        if (content.category === this.categoryType) {
            this.mEvent.emit("packageCategory", content.subcategory);
        }
    };
    FurniBag.prototype.onQueryMarketPackage = function (packge) {
        // OP_VIRTUAL_WORLD_RES_CLIENT_MARKET_QUERY_PACKAGE
        var content = packge.content;
        if (content.category === this.categoryType) {
            this.mEvent.emit("queryPackage", content);
        }
    };
    FurniBag.prototype.onQueryEditPackage = function (packet) {
        var content = packet.content;
        if (content.category === this.categoryType) {
            this.mEvent.emit("queryPackage", content);
        }
    };
    FurniBag.prototype.onQueryCommodityResultHandler = function (packet) {
        this.mEvent.emit("queryCommodityResource", packet.content);
    };
    FurniBag.prototype.onQueryResetAvatar = function (packet) {
        var content = packet.content;
        this.mEvent.emit("queryResetAvatar", content);
    };
    FurniBag.prototype.queryMarketPackage = function (key, queryString) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MARKET_QUERY_PACKAGE);
        var content = packet.content;
        content.category = this.categoryType;
        content.page = 1;
        content.perPage = 30;
        content.subcategory = key;
        content.queryString = queryString;
        this.connection.send(packet);
    };
    FurniBag.prototype.queryEditPackage = function (key, queryString) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_QUERY_EDIT_PACKAGE);
        var content = packet.content;
        content.category = this.categoryType;
        content.page = 1;
        content.perPage = 30;
        content.subcategory = key;
        content.queryString = queryString;
        this.connection.send(packet);
    };
    Object.defineProperty(FurniBag.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    return FurniBag;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 287 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FurniBagPanel", function() { return FurniBagPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(114);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(124);
/* harmony import */ var _Market_DetailDisplay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(145);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(107);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(113);
/* harmony import */ var _Market_TextButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(185);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(104);
/* harmony import */ var _components_input_panel__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(180);
/* harmony import */ var _components_checkbox_group__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(157);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(110);
/* harmony import */ var _Handler_Handler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(140);
/* harmony import */ var _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(120);
/* harmony import */ var _lib_rexui_lib_ui_tab_TabButton__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(182);
/* harmony import */ var _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(134);
/* harmony import */ var _lib_rexui_lib_ui_scroller_GameScroller__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(272);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

















var FurniBagPanel = /** @class */ (function (_super) {
    __extends(FurniBagPanel, _super);
    function FurniBagPanel(scene, world, sceneType) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "furni_bag";
        _this.commonkey = "common_key";
        _this.seachKey = "key.seach";
        _this.topBtns = [];
        _this.mEnableEdit = false;
        _this.mInputBoo = false;
        _this.scrollItemWidth = 0;
        _this.mSceneType = sceneType;
        _this.scale = 1;
        _this.setInteractive();
        return _this;
    }
    FurniBagPanel.prototype.resize = function (w, h) {
        var width = this.scaleWidth;
        var height = this.scaleHeight;
        _super.prototype.resize.call(this, width, height);
        var zoom = this.mWorld.uiScale;
        this.mBackground.clear();
        this.mBackground.fillGradientStyle(0x6f75ff, 0x6f75ff, 0x04cbff, 0x04cbff);
        this.mBackground.fillRect(0, 0, width * zoom, height * zoom);
        this.mShelfContainer.setSize(width, 295 * this.dpr * zoom);
        this.mShelfContainer.y = height - this.mShelfContainer.height;
        this.mDetailBubble.y = this.mShelfContainer.y - 10 * this.dpr * zoom - this.mDetailBubble.height;
        this.mCategoriesBar.clear();
        this.mCategoriesBar.fillStyle(0x33ccff);
        this.mCategoriesBar.fillRect(0, 0, width, 40 * this.dpr * zoom);
        this.mCategoriesBar.fillStyle(0x00cccc);
        this.mCategoriesBar.fillRect(0, 40 * this.dpr * zoom, width, 3 * this.dpr * zoom);
        this.mBg.x = width / 2;
        this.mBg.y = this.mBg.height / 2 + 10 * this.dpr * zoom;
        //  this.mTiltle.x = width / 2;
        // this.mCategoryScroll.resize(width, 41 * this.dpr * zoom);
        this.mAdd.x = width - this.mAdd.width / 2 - 10 * this.dpr;
        this.mAdd.y = this.mShelfContainer.y - this.mAdd.height / 2 - 9 * this.dpr * zoom;
        this.useBtn.x = this.mAdd.x;
        this.useBtn.y = this.mAdd.y;
        this.sellBtn.x = this.mAdd.x - this.sellBtn.width - 10 * this.dpr;
        this.sellBtn.y = this.mAdd.y;
        this.resetBtn.x = this.mAdd.x + 25 * this.dpr;
        this.resetBtn.y = this.mAdd.y;
        this.saveBtn.x = this.resetBtn.x - (this.saveBtn.width + this.resetBtn.width) / 2 - 10 * this.dpr;
        this.saveBtn.y = this.resetBtn.y;
        this.mDetailDisplay.x = width / 2;
        this.mDetailDisplay.y = this.mBg.y;
        this.mPropGrid.refreshPos(this.mShelfContainer.width / 2, this.mShelfContainer.y + 170 * this.dpr * zoom, 8 * this.dpr * zoom, 3 * this.dpr * zoom);
        // this.mPropGrid.y = this.mShelfContainer.y + 43 * this.dpr * zoom + 120 * this.dpr * zoom;
        this.setSize(width, height);
    };
    FurniBagPanel.prototype.setCategories = function (subcategorys) {
        // subcategorys.unshift({ key: this.seachKey, value: "搜索" });
        this.mPreCategoryBtn = null;
        this.mSelectedCategeories = null;
        var zoom = this.mWorld.uiScale;
        var capW = 60 * this.dpr * zoom;
        var capH = 41 * this.dpr * zoom;
        this.scrollItemWidth = capW;
        var items = [];
        if (this.mSeachInput.parentContainer)
            this.closeSeach(null);
        this.mCategoryScroll.clearItems();
        var seachBtn = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_13__[/* Button */ "a"](this.scene, this.key, "seach_normal", "seach_down");
        seachBtn.setData("item", { key: this.seachKey, value: "搜索" });
        seachBtn.y = capH - 40 * this.dpr * zoom;
        this.mCategoryScroll.addItem(seachBtn);
        for (var i = 0; i < subcategorys.length; i++) {
            var item = new _Market_TextButton__WEBPACK_IMPORTED_MODULE_7__["TextButton"](this.scene, this.dpr, zoom, subcategorys[i].value, 0, 0);
            item.x = i * capW;
            item.y = capH - item.text.height - 40 * this.dpr * zoom >> 1;
            item.setData("item", subcategorys[i]);
            item.setSize(capW, capH);
            this.mCategoryScroll.addItem(item);
            items[i] = item;
            item.setFontSize(17 * this.dpr * zoom);
            item.setFontStyle("bold");
        }
        if (items.length > 1)
            this.onSelectSubCategoryHandler(items[0]);
        // this.mSeachInput.x = capW - this.mSeachInput.width / 2;
        this.mPropGrid.refreshPos(this.mShelfContainer.width / 2, this.mShelfContainer.y + 170 * this.dpr * zoom, 8 * this.dpr * zoom, 10 * this.dpr * zoom);
        this.updateCategeoriesLoc(false);
    };
    FurniBagPanel.prototype.setProp = function (props) {
        this.mSelectItem = null;
        if (!props) {
            return;
        }
        var len = props.length;
        if (len < 24) {
            props = props.concat(new Array(24 - len));
        }
        this.mPropGrid.setItems(props);
        var isNull = false;
        if (this.mSelectItem) {
            this.onSelectItemHandler(this.mSelectItem);
            if (!this.mSelectedItemData) {
                isNull = true;
            }
        }
        else {
            isNull = true;
        }
        if (isNull) {
            this.sellBtn.enable = false;
            this.useBtn.enable = false;
            this.mAdd.enable = false;
            this.saveBtn.enable = false;
            this.resetBtn.enable = false;
        }
    };
    FurniBagPanel.prototype.setSelectedResource = function (content) {
        if (content.display) {
            this.mDetailDisplay.loadDisplay(content);
        }
        else if (content.avatar) {
            this.mDetailDisplay.loadAvatar(content);
        }
        else {
            // this.mDetailDisplay.loadUrl(this.mSelectedProp.icon);
        }
    };
    FurniBagPanel.prototype.resetAvatar = function (avatar) {
        var content = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__["op_client"].OP_VIRTUAL_WORLD_RES_CLIENT_MARKET_QUERY_COMMODITY_RESOURCE();
        content.avatar = avatar.avatar;
        this.mDetailDisplay.loadAvatar(content);
    };
    FurniBagPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.mCloseBtn.on("pointerup", this.onCloseHandler, this);
        this.mSeachInput.on("seach", this.onSeachHandler, this);
        this.mAdd.on("pointerup", this.onAddFurniToSceneHandler, this);
        this.sellBtn.on("pointerup", this.onSellBtnHandler, this);
        this.useBtn.on("pointerup", this.onUseBtnHandler, this);
        this.saveBtn.on("pointerup", this.onSaveBtnHandler, this);
        this.resetBtn.on("pointerup", this.onResetBtnHandler, this);
    };
    FurniBagPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mCloseBtn.off("pointerup", this.onCloseHandler, this);
        this.mSeachInput.off("seach", this.onSeachHandler, this);
        this.mAdd.off("pointerup", this.onAddFurniToSceneHandler, this);
        this.sellBtn.off("pointerup", this.onSellBtnHandler, this);
        this.useBtn.off("pointerup", this.onUseBtnHandler, this);
        this.saveBtn.on("pointerup", this.onSaveBtnHandler, this);
        this.resetBtn.on("pointerup", this.onResetBtnHandler, this);
    };
    FurniBagPanel.prototype.destroy = function () {
        var _this = this;
        if (this.mCategoryScroll) {
            this.mCategoryScroll.destroy();
        }
        if (this.mPropGrid) {
            this.mPropGrid.destroy();
        }
        if (this.itemPopPanel) {
            this.itemPopPanel.off("itempopclose", function () {
                _this.mCategoryScroll.addListen();
            });
            this.itemPopPanel.destroy();
        }
        _super.prototype.destroy.call(this);
    };
    FurniBagPanel.prototype.preload = function () {
        this.addAtlas(this.key, "furni_bag/furni_bag.png", "furni_bag/furni_bag.json");
        this.addAtlas(this.commonkey, "common/ui_base.png", "common/ui_base.json");
        _super.prototype.preload.call(this);
    };
    FurniBagPanel.prototype.init = function () {
        var _this = this;
        var width = this.scene.cameras.main.width;
        var height = this.scene.cameras.main.height;
        this.mBackground = this.scene.make.graphics(undefined, false);
        var zoom = this.mWorld.uiScale;
        this.mBg = this.scene.make.image({
            key: this.key,
            frame: "bg"
        }, false).setScale(zoom);
        this.mShelfContainer = this.scene.make.container(undefined, false);
        this.mShelfContainer.setSize(width, 295 * this.dpr * zoom);
        this.mShelfContainer.y = height - this.mShelfContainer.height;
        // this.mPropsContainer = this.scene.make.container(undefined, false);
        // this.mCategeoriesContainer = this.scene.make.container(undefined, false);
        // this.mCategeoriesContainer.x = this.mShelfContainer.x;
        // this.mCategeoriesContainer.y = this.mShelfContainer.y;
        this.mCategoriesBar = this.scene.make.graphics(undefined, false);
        this.mBackground.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.scene.cameras.main.width, this.scene.cameras.main.height), Phaser.Geom.Rectangle.Contains);
        this.mCloseBtn = this.scene.make.image({
            key: this.key,
            frame: "back_arrow",
            x: 21 * this.dpr,
            y: 30 * this.dpr
        }).setScale(zoom).setInteractive();
        var btnwidth = 90 * this.dpr * zoom;
        var btnHeight = 40 * this.dpr * zoom;
        var btnPosX = width - btnwidth / 2 - 20 * this.dpr;
        var btnPosY = this.mShelfContainer.y - 25 * this.dpr * zoom;
        this.mAdd = this.createNineButton(btnPosX + 100 * this.dpr * zoom, btnPosY, btnwidth, btnHeight, this.commonkey, "yellow_btn", _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("furni_bag.add"), "#996600");
        this.sellBtn = this.createNineButton(btnPosX, btnPosY, btnwidth, btnHeight, this.commonkey, "red_btn", _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("furni_bag.sold"), "#FFFFFF");
        this.useBtn = this.createNineButton(btnPosX + 100 * this.dpr * zoom, btnPosY, btnwidth, btnHeight, this.commonkey, "yellow_btn", _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("furni_bag.use"), "#996600");
        this.saveBtn = this.createNineButton(btnPosX + 100 * this.dpr * zoom, btnPosY, btnwidth, btnHeight, this.commonkey, "yellow_btn", _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("furni_bag.save"), "#996600");
        this.resetBtn = this.createNineButton(btnPosX + 100 * this.dpr * zoom, btnPosY - btnHeight - 5 * this.dpr * zoom, 40 * this.dpr, 40 * this.dpr, this.commonkey, "red_btn");
        var reseticon = this.scene.make.image({ key: this.key, frame: "restore" });
        this.resetBtn.add(reseticon);
        this.mDetailDisplay = new _Market_DetailDisplay__WEBPACK_IMPORTED_MODULE_3__["DetailDisplay"](this.scene);
        this.mDetailDisplay.setTexture(this.key, "ghost");
        this.mDetailDisplay.setNearest();
        this.mDetailDisplay.y = this.mBg.y + this.mBg.height / 2;
        this.mDetailBubble = new DetailBubble(this.scene, this.key, this.dpr, zoom);
        this.mDetailBubble.x = 10 * this.dpr;
        this.mDetailDisplay.scale = this.mWorld.scaleRatio * zoom;
        this.mSeachInput = new SeachInput(this.scene, this.mWorld, this.key, this.dpr);
        // this.mSeachInput.x = this.mSeachInput.width / 2 + 6 * this.dpr;
        var inputWid = this.mInputBoo ? 260 * this.dpr * zoom : 0;
        var w = this.scene.cameras.main.width + inputWid;
        this.mCategoryScroll = new _lib_rexui_lib_ui_scroller_GameScroller__WEBPACK_IMPORTED_MODULE_16__[/* GameScroller */ "a"](this.scene, {
            x: w * .5,
            y: this.mShelfContainer.y + 20 * this.dpr * zoom,
            width: this.scene.cameras.main.width,
            height: 41 * this.dpr * zoom,
            zoom: this.scale,
            orientation: 1,
            // valuechangeCallback: (newValue) => {
            //   this.refreshPos(newValue);
            // },
            cellupCallBack: function (gameobject) {
                _this.onSelectSubCategoryHandler(gameobject);
            }
        });
        this.add([this.mBackground, this.mBg, this.mCloseBtn, this.mDetailDisplay, this.mDetailBubble, this.mShelfContainer, this.mCategoryScroll]);
        this.add([this.sellBtn, this.useBtn, this.mAdd, this.saveBtn, this.resetBtn]);
        this.mShelfContainer.add(this.mCategoriesBar);
        // this.mCategeoriesContainer.add([this.mCategoriesBar]);
        if (this.mWorld && this.mWorld.roomManager && this.mWorld.roomManager.currentRoom) {
            this.mEnableEdit = this.mWorld.roomManager.currentRoom.enableEdit;
        }
        // if (this.mSceneType === op_def.SceneTypeEnum.EDIT_SCENE_TYPE || this.mEnableEdit) {
        //   this.add(this.mAdd);
        // }
        var topCapW = 67 * this.dpr * zoom;
        var topCapH = 30 * this.dpr * zoom;
        var topPosY = 30 * this.dpr * zoom;
        var topStyle = {
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT,
            fontSize: 20 * this.dpr * zoom,
            color: "#FFFFFF"
        };
        this.topCheckBox = new _components_checkbox_group__WEBPACK_IMPORTED_MODULE_10__["CheckboxGroup"]();
        var topCategorys = [pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__["op_def"].EditModePackageCategory.EDIT_MODE_PACKAGE_CATEGORY_ITEM, pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__["op_def"].EditModePackageCategory.EDIT_MODE_PACKAGE_CATEGORY_FURNITURE, pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__["op_def"].EditModePackageCategory.EDIT_MODE_PACKAGE_CATEGORY_AVATAR];
        var topBtnTexts = [_i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("furni_bag.Props"), _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("furni_bag.furni"), _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("furni_bag.decorate")];
        if (!this.mEnableEdit) {
            // const index = topCategorys.indexOf(op_def.EditModePackageCategory.EDIT_MODE_PACKAGE_CATEGORY_FURNITURE);
            // topCategorys.splice(index, 1);
            // topBtnTexts.splice(index, 1);
        }
        var topPosX = width * 0.5 - topCapW * 0.5 * (topCategorys.length - 1);
        for (var key in topCategorys) {
            var index = Number(key);
            var category = topCategorys[index];
            var button = new _lib_rexui_lib_ui_tab_TabButton__WEBPACK_IMPORTED_MODULE_14__[/* TabButton */ "a"](this.scene, this.key, "tab_normal", "tab_down", topBtnTexts[index]);
            button.setTextStyle(topStyle);
            button.setData("data", category);
            button.setSize(topCapW, topCapH);
            button.setFontStyle("bold");
            button.y = topPosY;
            button.x = topPosX + topCapW * index;
            this.topBtns.push(button);
        }
        this.topCheckBox.appendItemAll(this.topBtns);
        this.topCheckBox.on("selected", this.onTopCategoryHandler, this);
        this.topBtns.forEach(function (btn) {
            _this.add(btn);
        });
        if (this.mEnableEdit) {
            var index = topCategorys.indexOf(pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__["op_def"].EditModePackageCategory.EDIT_MODE_PACKAGE_CATEGORY_FURNITURE);
            this.topCheckBox.selectIndex(index);
        }
        else {
            this.topCheckBox.selectIndex(0);
        }
        var propFrame = this.scene.textures.getFrame(this.key, "prop_bg");
        var capW = (propFrame.width + 10 * this.dpr) * zoom;
        var capH = (propFrame.height + 10 * this.dpr) * zoom;
        w = this.scene.cameras.main.width + 35 * this.dpr * zoom + inputWid;
        var tableConfig = {
            x: 0,
            y: 0,
            table: {
                width: this.scene.cameras.main.width - 16 * this.dpr * zoom,
                height: 250 * this.dpr * zoom,
                columns: 4,
                cellWidth: capW,
                cellHeight: capH,
                reuseCellContainer: true,
                cellOriginX: 0,
                cellOriginY: 0,
            },
            scrollMode: 1,
            clamplChildOY: false,
            // background: (<any>this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, .2),
            createCellContainerCallback: function (cell, cellContainer) {
                var scene = cell.scene, item = cell.item;
                if (cellContainer === null) {
                    cellContainer = new Item(scene, 0, 0, _this.key, _this.dpr, zoom);
                    _this.add(cellContainer);
                }
                cellContainer.setData({ item: item });
                cellContainer.setProp(item);
                if (_this.mSelectItem === null)
                    _this.mSelectItem = cellContainer;
                if (item && (_this.mSelectedItemData === undefined || _this.mSelectedItemData.id === item.id)) {
                    _this.onSelectItemHandler(cellContainer);
                }
                return cellContainer;
            },
        };
        this.mPropGrid = new _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_15__[/* GameGridTable */ "a"](this.scene, tableConfig);
        this.mPropGrid.layout();
        this.mPropGrid.on("cellTap", function (cell) {
            if (cell) {
                _this.onSelectItemHandler(cell);
            }
        });
        this.add(this.mPropGrid.table);
        this.resize(0, 0);
        _super.prototype.init.call(this);
    };
    FurniBagPanel.prototype.createNineButton = function (x, y, width, height, key, frame, text, color) {
        var zoom = this.scale;
        var btn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_1__["NinePatchButton"](this.scene, x, y, width, height, key, frame, text, {
            left: 12 * this.dpr * zoom,
            top: 12 * this.dpr * zoom,
            right: 12 * this.dpr * zoom,
            bottom: 12 * this.dpr * zoom
        });
        if (text) {
            btn.setTextStyle({
                color: color,
                fontSize: 16 * this.dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT
            });
            btn.setFontStyle("bold");
        }
        return btn;
    };
    FurniBagPanel.prototype.setSelectedItem = function (prop) {
        if (!prop) {
            this.sellBtn.enable = prop.recyclable;
            this.useBtn.enable = prop.executable;
            this.saveBtn.enable = false;
            this.resetBtn.enable = false;
            return;
        }
        this.mSelectedItemData = prop;
        var url = _utils_resUtil__WEBPACK_IMPORTED_MODULE_8__[/* Url */ "h"].getOsdRes(prop.display.texturePath);
        this.mDetailDisplay.loadUrl(url);
        this.emit("queryPropResource", prop);
        this.mDetailBubble.setProp(prop);
        this.mDetailBubble.y = this.mShelfContainer.y - 10 * this.dpr - this.mDetailBubble.height;
        this.sellBtn.enable = prop.recyclable;
        this.useBtn.enable = prop.executable;
        this.mAdd.enable = (this.mSceneType === pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__["op_def"].SceneTypeEnum.EDIT_SCENE_TYPE || this.mEnableEdit);
    };
    FurniBagPanel.prototype.onSelectSubCategoryHandler = function (gameobject) {
        var type = gameobject.getData("type");
        if (type) {
            if (type === "seachBtn") {
                this.onSeachHandler(this.mSeachInput.seachText);
            }
            else if (type === "label") {
                this.mSeachInput.showInputPanel();
            }
            return;
        }
        // if (!(gameobject instanceof TextButton)) {
        //   return;
        // }
        var category = gameobject.getData("item");
        if (category) {
            if (this.mPreCategoryBtn && (this.mPreCategoryBtn instanceof _Market_TextButton__WEBPACK_IMPORTED_MODULE_7__["TextButton"])) {
                this.mPreCategoryBtn.changeNormal();
            }
            if (gameobject instanceof _Market_TextButton__WEBPACK_IMPORTED_MODULE_7__["TextButton"])
                gameobject.changeDown();
            var key = category.key;
            if (key === this.seachKey) {
                this.showSeach(gameobject);
            }
            else {
                if (this.mPreCategoryBtn) {
                    var preBtn = this.mPreCategoryBtn.getData("item");
                    key = preBtn.key;
                    if (key === this.seachKey) {
                        this.closeSeach(gameobject);
                    }
                }
                else {
                    this.closeSeach(gameobject);
                }
                this.mSelectedCategeories = category;
                this.emit("queryPackage", category.key);
            }
            this.mPreCategoryBtn = gameobject;
        }
    };
    FurniBagPanel.prototype.onCloseHandler = function () {
        this.emit("close");
    };
    FurniBagPanel.prototype.onSelectItemHandler = function (cell) {
        var item = cell.getData("item");
        if (item) {
            if (this.mSelectItem)
                this.mSelectItem.isSelect = false;
            this.mSelectItem = cell;
            this.mSelectItem.isSelect = true;
            this.setSelectedItem(item);
        }
    };
    FurniBagPanel.prototype.onSeachHandler = function (val) {
        if (this.mSelectedCategeories && val.length > 0) {
            this.emit("seachPackage", val, this.mSelectedCategeories.key);
        }
    };
    FurniBagPanel.prototype.onAddFurniToSceneHandler = function () {
        if (!this.mSelectedItemData) {
            return;
        }
        this.emit("addFurniToScene", this.mSelectedItemData.id);
    };
    FurniBagPanel.prototype.onTopCategoryHandler = function (item) {
        var categoryType = item.getData("data");
        var width = this.scaleWidth;
        if (categoryType) {
            this.onSelectedCategory(categoryType);
            if (categoryType === pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__["op_def"].EditModePackageCategory.EDIT_MODE_PACKAGE_CATEGORY_FURNITURE) {
                this.sellBtn.visible = true;
                this.mAdd.visible = true;
                this.useBtn.visible = false;
                this.saveBtn.visible = false;
                this.resetBtn.visible = false;
            }
            else if (categoryType === pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__["op_def"].EditModePackageCategory.EDIT_MODE_PACKAGE_CATEGORY_AVATAR) {
                this.sellBtn.visible = false;
                this.saveBtn.visible = true;
                this.resetBtn.visible = true;
                this.useBtn.visible = false;
                this.mAdd.visible = false;
            }
            else {
                this.sellBtn.visible = true;
                this.useBtn.visible = true;
                this.mAdd.visible = false;
                this.saveBtn.visible = false;
                this.resetBtn.visible = false;
            }
        }
        this.layoutTopBtn(item);
    };
    FurniBagPanel.prototype.layoutTopBtn = function (button) {
        var width = this.scene.cameras.main.width;
        var zoom = this.mWorld.uiScale;
        var allRadiu = 0;
        for (var _i = 0, _a = this.topBtns; _i < _a.length; _i++) {
            var btn = _a[_i];
            allRadiu += btn.width;
        }
        allRadiu /= 2;
        var offsetX = width * 0.5 - allRadiu;
        for (var _b = 0, _c = this.topBtns; _b < _c.length; _b++) {
            var btn = _c[_b];
            var posY = 0;
            if (btn !== button) {
                btn.setTextStyle({
                    fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT,
                    fontSize: 12 * this.dpr * zoom,
                    color: "#2B4BB5"
                });
                posY = btn.height * 0.5;
            }
            else {
                btn.setTextStyle({
                    fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT,
                    fontSize: 16 * this.dpr * zoom,
                    color: "#8B5603"
                });
                posY = btn.height * 0.5 + 2 * this.dpr * zoom;
            }
            var radiu = btn.width * 0.5;
            btn.x = offsetX + radiu;
            btn.y = posY;
            offsetX += radiu * 2 + 12 * this.dpr * zoom;
        }
    };
    FurniBagPanel.prototype.onSelectedCategory = function (categoryType) {
        this.categoryType = categoryType;
        this.emit("getCategories", categoryType);
    };
    FurniBagPanel.prototype.onSellBtnHandler = function () {
        this.popItemsPopPanle();
        if (this.mSelectedItemData)
            this.itemPopPanel.setProp(this.mSelectedItemData, 0, this.categoryType, new _Handler_Handler__WEBPACK_IMPORTED_MODULE_12__[/* Handler */ "a"](this, this.onSellPropsHandler));
    };
    FurniBagPanel.prototype.onUseBtnHandler = function () {
        this.popItemsPopPanle();
        if (this.mSelectedItemData)
            this.itemPopPanel.setProp(this.mSelectedItemData, 1, this.categoryType, new _Handler_Handler__WEBPACK_IMPORTED_MODULE_12__[/* Handler */ "a"](this, this.onUsePropsHandler));
    };
    FurniBagPanel.prototype.onSaveBtnHandler = function () {
        if (this.mSelectedItemData)
            this.emit("querySaveAvatar", this.mSelectedItemData);
    };
    FurniBagPanel.prototype.onResetBtnHandler = function () {
        if (this.mSelectedItemData)
            this.emit("queryResetAvatar");
    };
    FurniBagPanel.prototype.onSellPropsHandler = function (prop, count, category) {
        this.emit("sellProps", prop, count, category);
    };
    FurniBagPanel.prototype.onUsePropsHandler = function (prop, count, category) {
    };
    FurniBagPanel.prototype.popItemsPopPanle = function () {
        var _this = this;
        var zoom = this.mWorld.uiScale;
        var width = this.scene.cameras.main.width;
        var height = this.scene.cameras.main.height;
        if (!this.itemPopPanel) {
            this.itemPopPanel = new ItemsPopPanel(this.scene, width * 0.5, height * 0.5, this.key, this.commonkey, this.dpr, zoom);
        }
        this.itemPopPanel.once("itempopclose", function () {
            _this.mCategoryScroll.addListen();
        });
        this.mCategoryScroll.removeListen();
        this.add(this.itemPopPanel);
    };
    FurniBagPanel.prototype.showSeach = function (parent) {
        this.mCategoryScroll.addItemAt(this.mSeachInput, 1);
        this.mCategoryScroll.setInteractiveObject(this.mSeachInput.seachBtn);
        this.mCategoryScroll.setInteractiveObject(this.mSeachInput.label);
        this.updateCategeoriesLoc(true);
    };
    FurniBagPanel.prototype.closeSeach = function (parent) {
        if (this.mSeachInput.parentContainer) {
            this.mSeachInput.parentContainer.remove(this.mSeachInput);
        }
        this.mCategoryScroll.removeInteractiveObject(this.mSeachInput.seachBtn);
        this.mCategoryScroll.removeInteractiveObject(this.mSeachInput.label);
        this.updateCategeoriesLoc(false);
    };
    FurniBagPanel.prototype.updateCategeoriesLoc = function (inputBoo) {
        var list = this.mCategoryScroll.getItemList();
        var zoom = this.scale;
        var h = 41 * this.dpr * zoom;
        var preBtn = null;
        var offset = 30 * this.dpr * zoom;
        var w = this.mScene.cameras.main.width;
        var tmpW = offset;
        for (var i = 0; i < list.length; i++) {
            var item = list[i];
            if (i > 0) {
                preBtn = list[i - 1];
                item.x = preBtn.x + preBtn.width; // - item.width * item.originX;
            }
            else {
                item.x = tmpW;
            }
            tmpW += item.width;
        }
        // let pad0: number = 0;
        // let pad1: number = 1;
        // if (tmpW > w) {
        //   tmpW = tmpW + inputWid;
        // pad0 = 75 * this.dpr * zoom + inputWid;
        // pad1 = -180 * this.dpr * zoom - inputWid;
        // } else {
        //   tmpW = w + inputWid;
        // pad0 = 410 * this.dpr * zoom + inputWid;
        // pad1 = 30 * this.dpr * zoom - inputWid;
        // }
        // const updateWid: number = tmpW;
        this.mCategoryScroll.setAlign();
        // this.mCategoryScroll.setValue(updateWid / 2);
        // this.mCategoryScroll.resize(tmpW, h, -updateWid / 2 + pad0, updateWid / 2 + pad1);
        // this.mCategoryScroll.resize(updateWid, h);
    };
    Object.defineProperty(FurniBagPanel.prototype, "enableEdit", {
        get: function () {
            return this.mEnableEdit;
        },
        enumerable: false,
        configurable: true
    });
    return FurniBagPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));

var SeachInput = /** @class */ (function (_super) {
    __extends(SeachInput, _super);
    function SeachInput(scene, world, key, dpr) {
        var _this = _super.call(this, scene) || this;
        _this.mWorldService = world;
        _this.bg = scene.make.image({
            key: key,
            frame: "seach_bg"
        }, false).setOrigin(0.5, 0.5);
        // this.mLabelInput = new LabelInput(this.scene, {
        //   x: -10 * dpr,
        //   y: 0,
        //   width: 160,
        //   height: 60,
        //   fontSize: 14 * dpr + "px",
        //   color: "#666666",
        // });
        _this.mLabelInput = _this.scene.make.text({
            x: 0,
            width: _this.bg.width,
            height: _this.bg.height,
            style: {
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 14 * dpr,
                wordWrap: { width: 200, useAdvancedWrap: true },
            }
        }, false).setData("type", "label").setOrigin(0, 0.5);
        _this.mLabelInput.setSize(_this.bg.width, _this.bg.height);
        _this.mLabelInput.setInteractive();
        _this.mSeachBtn = scene.make.image({
            key: key,
            frame: "seach_normal"
        }, false).setData("type", "seachBtn");
        _this.mLabelInput.x = -_this.bg.width / 2 + 6 * dpr * world.uiScale;
        _this.mSeachBtn.x = _this.bg.width / 2 - _this.mSeachBtn.width,
            _this.add([_this.bg, _this.mLabelInput, _this.mSeachBtn]);
        _this.disableInteractive();
        _this.setSize(_this.bg.width, _this.bg.height);
        return _this;
    }
    SeachInput.prototype.showInputPanel = function () {
        if (this.mInputText) {
            return;
        }
        this.mInputText = new _components_input_panel__WEBPACK_IMPORTED_MODULE_9__["InputPanel"](this.scene, this.mWorldService, this.mLabelInput.text);
        this.mInputText.once("close", this.sendChat, this);
    };
    SeachInput.prototype.sendChat = function (val) {
        this.mInputText.destroy();
        this.mInputText = null;
        this.mLabelInput.setText(val);
        this.mLabelInput.setSize(this.bg.width, this.bg.height);
    };
    Object.defineProperty(SeachInput.prototype, "seachBtn", {
        get: function () {
            return this.mSeachBtn;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SeachInput.prototype, "label", {
        get: function () {
            return this.mLabelInput;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SeachInput.prototype, "seachText", {
        get: function () {
            return this.mLabelInput.text;
        },
        enumerable: false,
        configurable: true
    });
    return SeachInput;
}(Phaser.GameObjects.Container));
var DetailBubble = /** @class */ (function (_super) {
    __extends(DetailBubble, _super);
    function DetailBubble(scene, key, dpr, zoom) {
        if (zoom === void 0) { zoom = 1; }
        var _this = _super.call(this, scene) || this;
        _this.dpr = dpr;
        _this.mDetailBubble = _this.scene.make.graphics(undefined, false);
        var bubbleW = 100 * dpr * zoom;
        var bubbleH = 96 * dpr * zoom;
        _this.mDetailBubble = _this.scene.make.graphics(undefined, false);
        _this.mDetailBubble.fillStyle(0xFFFFFF, 0.1);
        _this.mDetailBubble.fillRoundedRect(0, 0, bubbleW, bubbleH);
        _this.mNickName = _this.scene.make.text({
            x: 7 * _this.dpr,
            y: 9 * _this.dpr,
            text: "背包里空空如也",
            style: {
                fontSize: 12 * _this.dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT,
                color: "#FFFF00",
                align: "center"
            }
        });
        _this.mPriceText = _this.scene.make.text({
            x: 7 * _this.dpr,
            y: 28 * _this.dpr,
            text: "不可交易",
            style: {
                fontSize: 10 * _this.dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT,
                color: "#DC143C",
                align: "center"
            }
        });
        _this.mSource = _this.scene.make.text({
            x: 8 * dpr,
            y: 47 * dpr,
            text: "可通过商城购物获得",
            style: {
                fontSize: 10 * dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT,
            }
        }, false);
        _this.mDesText = _this.scene.make.text({
            x: 8 * dpr,
            y: 66 * dpr,
            style: {
                color: "#32347b",
                fontSize: 10 * dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT,
                wordWrap: {
                    width: 90 * dpr,
                    useAdvancedWrap: true
                }
            }
        }, false);
        _this.add([_this.mDetailBubble, _this.mNickName, _this.mDesText, _this.mSource, _this.mPriceText]);
        _this.setSize(bubbleW, bubbleH);
        return _this;
    }
    DetailBubble.prototype.setProp = function (prop) {
        this.mNickName.setText(prop.shortName || prop.name);
        var posY = 9 * this.dpr;
        var offsetY = 21 * this.dpr;
        // this.mDesText.setText(prop.des);
        if (prop.sellingPrice) {
            posY += offsetY;
            this.mPriceText.y = posY;
            this.mPriceText.setText("\u53EF\u552E\u5356\uFF1A" + prop.sellingPrice.price);
        }
        else {
            posY += offsetY;
            this.mPriceText.y = posY;
            this.mPriceText.setText("\u4E0D\u53EF\u4EA4\u6613");
        }
        if (prop.source) {
            this.mSource.setText("\u6765\u6E90\uFF1A " + prop.source);
            posY += offsetY;
            this.mSource.y = posY;
        }
        else {
            this.mSource.setText("");
        }
        if (prop.des) {
            posY += offsetY;
            this.mDesText.setText(prop.des);
            this.mDesText.y = posY;
        }
        else {
            this.mDesText.setText("");
        }
        this.resize();
        return this;
    };
    DetailBubble.prototype.resize = function (w, h) {
        if (w === undefined)
            w = this.width;
        var bubbleH = this.mDesText.height + 60 * this.dpr;
        if (w === this.width && bubbleH === this.height) {
            return;
        }
        this.mDetailBubble.clear();
        this.mDetailBubble.fillStyle(0xFFFFFF, 0.1);
        this.mDetailBubble.fillRoundedRect(0, 0, w, bubbleH);
        this.setSize(w, bubbleH);
        // this.mDetailBubbleContainer.y = this.height - this.y - this.mDetailBubbleContainer.height - 6 * this.dpr;
    };
    return DetailBubble;
}(Phaser.GameObjects.Container));
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item(scene, x, y, key, dpr, zoom) {
        if (zoom === void 0) { zoom = 1; }
        var _this = _super.call(this, scene, x, y) || this;
        _this.dpr = dpr;
        _this.zoom = zoom;
        var background = scene.make.image({
            key: key,
            frame: "grid_bg"
        }, false).setOrigin(0).setScale(zoom);
        _this.selectbg = scene.make.image({
            key: key,
            frame: "grid_choose"
        }, false).setOrigin(0).setScale(zoom).setPosition(-2 * dpr * zoom, -2 * dpr * zoom);
        _this.mPropImage = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_6__["DynamicImage"](_this.scene, 0, 0);
        _this.mPropImage.scale = dpr * zoom;
        _this.mCounter = scene.make.text({
            x: background.width - 4 * dpr,
            y: background.height + 2 * dpr,
            style: {
                fontSize: 12 * dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(1);
        _this.add([background, _this.selectbg]);
        _this.isSelect = false;
        _this.setSize(background.width, background.height);
        return _this;
        // this.setInteractive(new Phaser.Geom.Rectangle(0, 0, background.width, background.height), Phaser.Geom.Rectangle.Contains);
        // this.on("pointerup", this.onSelectedHandler, this);
    }
    Item.prototype.setProp = function (prop) {
        this.mProp = prop;
        this.isSelect = false;
        if (!prop) {
            // this.mPropImage.setFrame("");
            this.mCounter.setText("");
            this.remove(this.mPropImage);
            return;
        }
        this.mPropImage.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_8__[/* Url */ "h"].getOsdRes(prop.display.texturePath), this, this.onPropLoadCompleteHandler);
        this.add(this.mPropImage);
        if (prop.count > 1) {
            this.mCounter.setText(prop.count.toString());
            this.add(this.mCounter);
        }
        else {
            if (this.mCounter.parentContainer)
                this.remove(this.mCounter);
        }
    };
    Item.prototype.onPropLoadCompleteHandler = function () {
        if (this.mPropImage && this.mPropImage.texture) {
            var texture = this.mPropImage.texture;
            // this.mPropImage.setPosition((this.mPropImage.width) / 2, (this.mPropImage.height) / 2);
            this.mPropImage.x = this.width + 3 * this.dpr * this.zoom >> 1;
            this.mPropImage.y = this.height + 3 * this.dpr * this.zoom >> 1;
            if (texture) {
                texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
            }
        }
    };
    Object.defineProperty(Item.prototype, "isSelect", {
        set: function (value) {
            this.selectbg.visible = value;
        },
        enumerable: false,
        configurable: true
    });
    Item.prototype.onSelectedHandler = function () {
        this.emit("select", this.mProp);
    };
    return Item;
}(Phaser.GameObjects.Container));
var ItemsPopPanel = /** @class */ (function (_super) {
    __extends(ItemsPopPanel, _super);
    function ItemsPopPanel(scene, x, y, key, commonKey, dpr, zoom) {
        if (zoom === void 0) { zoom = 1; }
        var _this = _super.call(this, scene, x, y) || this;
        _this.itemCount = 1;
        _this.popState = 0; // 0 卖出 1 使用
        var bg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_11__["NinePatch"](_this.scene, 0, 0, 286 * dpr * zoom, 331 * dpr * zoom, commonKey, "bg", {
            top: 40,
            bottom: 40
        });
        _this.blackBg = _this.scene.make.graphics(undefined, false);
        _this.blackBg.clear();
        _this.blackBg.fillStyle(0, 0.5);
        var w = _this.scene.cameras.main.width / _this.scale;
        var h = _this.scene.cameras.main.height / _this.scale;
        _this.blackBg.fillRect(-w / 2, -h / 2, w, h);
        bg.setInteractive(new Phaser.Geom.Rectangle(0, 0, w, h), Phaser.Geom.Rectangle.Contains);
        var posY = -bg.height * 0.5 + 3 * dpr * zoom;
        var titlebg = _this.scene.make.image({ x: 0, y: posY, key: key, frame: "title" });
        _this.titleName = scene.make.text({
            x: 0,
            y: posY + 3 * dpr * zoom,
            text: "售出",
            style: {
                color: "#905B06",
                fontSize: 15 * dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(0.5);
        _this.titleName.setFontStyle("bold");
        _this.itemName = scene.make.text({
            x: 0,
            y: posY + 40 * dpr * zoom,
            style: {
                color: "#000000",
                fontSize: 15 * dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(0.5);
        var iconOffset = -56 * dpr * zoom;
        var iconBg = _this.scene.make.image({ x: 0, y: iconOffset, key: key, frame: "sell_bg" });
        _this.icon = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_6__["DynamicImage"](_this.scene, 0, iconOffset);
        _this.icon.scale = dpr * zoom;
        var priceOffset = 10 * dpr * zoom;
        _this.priceBg = _this.scene.make.image({ x: 0, y: priceOffset, key: commonKey, frame: "price_bg" });
        _this.pricText = scene.make.text({
            x: 0,
            y: priceOffset,
            style: {
                color: "#FFFFFF",
                fontSize: 15 * dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(0.5);
        // this.pricText.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.priceBg.width, this.priceBg.height),Phaser.Geom.Rectangle.Contains);
        var countOffsetY = 50 * dpr * zoom;
        var countOffsetX = -58 * dpr * zoom;
        var countBg = _this.scene.make.image({ x: 0, y: countOffsetY, key: commonKey, frame: "input_bg" });
        _this.itemCountText = scene.make.text({
            x: 0,
            y: countOffsetY,
            style: {
                color: "#0771AC",
                fontSize: 15 * dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(0.5);
        var minusBtn = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_13__[/* Button */ "a"](_this.scene, commonKey, "reduce", "reduce");
        var addBtn = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_13__[/* Button */ "a"](_this.scene, commonKey, "increase", "increase");
        minusBtn.x = countOffsetX;
        minusBtn.y = countOffsetY;
        addBtn.x = -countOffsetX;
        addBtn.y = countOffsetY;
        var bottomOffsetY = bg.height * 0.5 - 50 * dpr * zoom;
        var bottomOffsetX = -66 * dpr * zoom;
        var cancelBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_1__["NinePatchButton"](_this.scene, bottomOffsetX, bottomOffsetY, 112 * dpr * zoom, 40 * dpr * zoom, commonKey, "red_btn", _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("common.cancel"), {
            left: 12 * dpr * zoom,
            top: 12 * dpr * zoom,
            right: 12 * dpr * zoom,
            bottom: 12 * dpr * zoom
        });
        var confirmBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_1__["NinePatchButton"](_this.scene, -bottomOffsetX, bottomOffsetY, 112 * dpr * zoom, 40 * dpr * zoom, commonKey, "yellow_btn", _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("common.confirm"), {
            left: 12 * dpr * zoom,
            top: 12 * dpr * zoom,
            right: 12 * dpr * zoom,
            bottom: 12 * dpr * zoom
        });
        cancelBtn.setTextStyle({
            color: "#FFFFFF",
            fontSize: 16 * dpr * zoom,
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT
        });
        confirmBtn.setTextStyle({
            color: "#976400",
            fontSize: 16 * dpr * zoom,
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].DEFULT_FONT
        });
        _this.add([_this.blackBg, bg, titlebg, _this.titleName, _this.itemName, iconBg, _this.icon, _this.priceBg, _this.pricText, countBg, _this.itemCountText, minusBtn, addBtn, cancelBtn, confirmBtn]);
        minusBtn.on("Tap", _this.onMinusBtnHandler, _this);
        addBtn.on("Tap", _this.onAddBtnHandler, _this);
        cancelBtn.on("click", _this.onCancelBtnHandler, _this);
        confirmBtn.on("click", _this.onConfirmBtnHandler, _this);
        return _this;
    }
    ItemsPopPanel.prototype.setProp = function (prop, stated, category, handler) {
        this.itemData = prop;
        this.itemCount = 1;
        this.icon.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_8__[/* Url */ "h"].getOsdRes(prop.display.texturePath), this, this.onPropLoadCompleteHandler);
        this.itemName.text = prop.name || prop.shortName;
        this.pricText.text = prop.sellingPrice.price * this.itemCount + "  银币";
        this.itemCountText.text = this.itemCount + "";
        this.popState = stated;
        if (stated === 0) {
            this.titleName.text = _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("furni_bag.sold");
            this.pricText.visible = true;
            this.priceBg.visible = true;
        }
        else {
            this.titleName.text = _i18n__WEBPACK_IMPORTED_MODULE_2__[/* i18n */ "a"].t("furni_bag.use");
            this.pricText.visible = false;
            this.priceBg.visible = false;
        }
        this.handler = handler;
        this.category = category;
    };
    ItemsPopPanel.prototype.onMinusBtnHandler = function () {
        if (this.itemCount === 1)
            return;
        this.itemCount--;
        this.updateData();
    };
    ItemsPopPanel.prototype.onAddBtnHandler = function () {
        if (this.itemCount === this.itemData.count)
            return;
        this.itemCount++;
        this.updateData();
    };
    ItemsPopPanel.prototype.updateData = function () {
        this.itemCountText.text = this.itemCount + "";
        this.pricText.text = this.itemData.sellingPrice.price * this.itemCount + "  银币";
    };
    ItemsPopPanel.prototype.onCancelBtnHandler = function () {
        this.emit("itempopclose");
        if (this.parentContainer)
            this.parentContainer.remove(this);
    };
    ItemsPopPanel.prototype.onConfirmBtnHandler = function () {
        this.emit("itempopclose");
        if (this.parentContainer)
            this.parentContainer.remove(this);
        if (this.handler)
            this.handler.runWith([this.itemData, this.itemCount, this.category]);
    };
    ItemsPopPanel.prototype.onPropLoadCompleteHandler = function () {
        if (this.icon && this.icon.texture) {
            var texture = this.icon.texture;
            if (texture) {
                texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
            }
        }
    };
    return ItemsPopPanel;
}(Phaser.GameObjects.Container));


/***/ }),
/* 288 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfoPanel", function() { return InfoPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);
/* harmony import */ var _lib_rexui_lib_ui_textarea_TextArea__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(127);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(116);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(114);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(104);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_ninepatch_NinePatch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(136);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(107);
/* harmony import */ var _InfoPanelMediator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(289);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var GetValue = Phaser.Utils.Objects.GetValue;
var InfoPanel = /** @class */ (function (_super) {
    __extends(InfoPanel, _super);
    function InfoPanel(scene, worldService) {
        var _this = _super.call(this, scene, worldService) || this;
        _this.mWorld = worldService;
        return _this;
    }
    InfoPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        if (this.mCloseBtn)
            this.mCloseBtn.on("pointerup", this.closeHandler, this);
    };
    InfoPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        if (this.mCloseBtn)
            this.mCloseBtn.off("pointerup", this.closeHandler, this);
    };
    InfoPanel.prototype.resize = function (wid, hei) {
        if (!this.mInitialized)
            return;
        var size = this.mWorld.getSize();
        var scale = this.mWorld.uiScale;
        var zoom = this.mWorld.uiRatio;
        this.x = size.width >> 1;
        this.y = size.height >> 1;
        this.mActor.x = -this.width / 2 + 80 * scale * zoom;
        this.mActor.y = -this.height / 2 + 160 * scale * zoom;
        this.mNameTextArea.setMinSize(220 * this.dpr * scale, 222 * this.dpr * scale);
        this.mNameTextArea.setPosition(size.width / 2 + 60 * this.dpr * scale, size.height / 2 - 110 * this.dpr * scale);
        this.mNameTextArea.layout();
        var textMask = this.mNameTextArea.childrenMap.text;
        textMask.x = -10 * this.dpr * scale;
        textMask.y = -200 * this.dpr * scale;
        this.mAttributesTextArea.setMinSize(360 * this.dpr * scale, 180 * this.dpr * scale);
        this.mAttributesTextArea.setPosition(size.width / 2 + 3 * this.dpr * scale, size.height / 2 + 95 * this.dpr * scale);
        this.mAttributesTextArea.layout();
        var attributesMask = this.mAttributesTextArea.childrenMap.text;
        attributesMask.x = -this.width / 2 + 30 * this.dpr * scale;
        attributesMask.y = 5 * this.dpr * scale;
    };
    InfoPanel.prototype.show = function (param) {
        if (this.mShow)
            return;
        _super.prototype.show.call(this, param);
        if (this.mInitialized) {
            var size = this.mWorld.getSize();
            this.setData("data", param);
            this.setInfo(param);
            this.resize(size.width, size.height);
        }
    };
    InfoPanel.prototype.hide = function () {
        _super.prototype.hide.call(this);
    };
    InfoPanel.prototype.setInfo = function (data) {
        var _this = this;
        if (!this.mInitialized || !data)
            return;
        if (data.actors) {
            if (data.actors.length === 0) {
                return;
            }
            var actor = data.actors[0];
            this.mWorld.httpService.userDetail(actor.platformId).then(function (response) {
                if (response.code === 200) {
                    var resData = response.data;
                    if (resData) {
                        _this.mActor.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Url */ "h"].getOsdRes("show/" + resData.username + ".png"), _this, undefined, _this.loadDefaultAvatar);
                        // this.mNickName.setText(resData.nickname);
                        // this.mLv.setText(resData.level);
                    }
                }
            });
        }
        var text = data.text;
        if (text[0]) {
            this.mNameTextArea.setText(this.checkValue(text[0]));
        }
        if (text[1]) {
            this.mAttributesTextArea.setText(this.checkValue(text[1]));
        }
    };
    InfoPanel.prototype.destroy = function () {
        if (this.mActor) {
            this.mActor.destroy(true);
            this.mActor = null;
        }
        if (this.mNameTextArea) {
            this.mNameTextArea.destroy();
            this.mNameTextArea = null;
        }
        if (this.mAttributesTextArea) {
            this.mAttributesTextArea.destroy();
            this.mAttributesTextArea = null;
        }
        this.mWorld = null;
        _super.prototype.destroy.call(this);
    };
    InfoPanel.prototype.preload = function () {
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Border */ "d"].getPNG());
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Background */ "a"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Background */ "a"].getPNG());
        this.scene.load.atlas(_utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* BlueButton */ "c"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* BlueButton */ "c"].getPNG(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* BlueButton */ "c"].getJSON());
        _super.prototype.preload.call(this);
    };
    InfoPanel.prototype.init = function () {
        var size = this.mWorld.getSize();
        var scale = this.mWorld.uiScale;
        this.setSize(400 * this.dpr * scale, 500 * this.dpr * scale);
        var background = new _lib_rexui_lib_plugins_gameobjects_ninepatch_NinePatch__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](this.scene, {
            width: this.width,
            height: this.height,
            key: _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Background */ "a"].getName(),
            columns: _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Background */ "a"].getColumns(),
            rows: _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Background */ "a"].getRows()
        });
        var border = new _lib_rexui_lib_plugins_gameobjects_ninepatch_NinePatch__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](this.scene, {
            width: this.width - 20 * this.dpr * scale,
            height: this.height - 20 * this.dpr * scale,
            key: _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Border */ "d"].getName(),
            columns: _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Border */ "d"].getColumns(),
            rows: _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Border */ "d"].getRows()
        });
        this.mNameBBCodeText = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](this.scene, 0, 0, "", {
            fontSize: 14 * this.dpr * scale + "px",
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_7__[/* Font */ "a"].DEFULT_FONT,
            textMask: false,
            wrap: {
                mode: "char",
                width: 270 * this.dpr * scale
            }
        });
        this.mNameTextArea = new _lib_rexui_lib_ui_textarea_TextArea__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.scene, {
            x: this.width / 2 - 80 * scale * this.dpr,
            y: -75 * scale * this.dpr,
            textWidth: 270 * this.dpr * scale,
            textHeight: 180 * this.dpr * scale,
            textMask: true,
            // background: (<any>this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, .2),
            text: this.mNameBBCodeText,
        })
            .layout();
        this.mAttributesBBCodeText = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](this.scene, 0, 0, "", {
            fontSize: 14 * this.dpr * scale + "px",
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_7__[/* Font */ "a"].DEFULT_FONT,
            textMask: false,
            wrap: {
                mode: "char",
                width: this.width - 30 * this.dpr * scale
            }
        });
        this.mAttributesTextArea = new _lib_rexui_lib_ui_textarea_TextArea__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this.scene, {
            x: size.width / 2 + 3 * this.dpr * scale,
            y: size.height / 2 + 95 * this.dpr * scale,
            textMask: true,
            textWidth: this.width - 60 * this.dpr * scale,
            textHeight: 180 * this.dpr * scale,
            // background: (<any>this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, .2),
            text: this.mAttributesBBCodeText,
        })
            .layout();
        this.mCloseBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_4__["NinePatchButton"](this.scene, 258, 145, 80, 34, _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* BlueButton */ "c"].getName(), "", "关闭", _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* BlueButton */ "c"].getConfig());
        this.mCloseBtn.x = 0;
        this.mCloseBtn.y = this.height - 100 * this.mWorld.uiRatio * scale >> 1;
        this.mCloseBtn.setTextStyle({ font: _utils_font__WEBPACK_IMPORTED_MODULE_7__[/* Font */ "a"].YAHEI_16_BOLD });
        this.mActor = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__["DynamicImage"](this.scene, 300, 125).setOrigin(0.5, 1);
        this.mActor.scale = 2;
        this.mWorld.uiManager.getMediator(_InfoPanelMediator__WEBPACK_IMPORTED_MODULE_8__["InfoPanelMediator"].NAME).resize();
        this.add([background, border,
            this.mNameBBCodeText, this.mAttributesBBCodeText, this.mCloseBtn, this.mActor]);
        // this.mAttributesTextArea, this.mAttributesBBCodeText,this.mNameTextArea, this.mNameTextArea,
        this.addListen();
        _super.prototype.init.call(this);
        this.setInfo(this.getData("data"));
    };
    InfoPanel.prototype.closeHandler = function (pointer) {
        if (this.checkPointerDis(pointer)) {
            this.hide();
        }
    };
    InfoPanel.prototype.checkPointerDis = function (pointer) {
        if (!this.mWorld)
            return true;
        return Math.abs(pointer.downX - pointer.upX) < 10 * this.mWorld.uiRatio * this.mWorld.uiScale ||
            Math.abs(pointer.downY - pointer.upY) < 10 * this.mWorld.uiRatio * this.mWorld.uiScale;
    };
    InfoPanel.prototype.loadDefaultAvatar = function () {
        var url = _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Url */ "h"].getOsdRes("show/avatar_default.png");
        if (this.scene.textures.exists(url)) {
            this.mActor.setTexture(url);
            return;
        }
        this.mActor.load(url);
    };
    InfoPanel.prototype.checkValue = function (data) {
        return GetValue(data, "text", "");
    };
    return InfoPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 289 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfoPanelMediator", function() { return InfoPanelMediator; });
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(109);
/* harmony import */ var _InfoPanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(288);
/* harmony import */ var _utils_tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(155);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var InfoPanelMediator = /** @class */ (function (_super) {
    __extends(InfoPanelMediator, _super);
    function InfoPanelMediator(mLayerManager, mScene, world) {
        var _this = _super.call(this) || this;
        _this.mLayerManager = mLayerManager;
        _this.mScene = mScene;
        _this.world = world;
        return _this;
    }
    InfoPanelMediator.prototype.hide = function () {
        this.mShow = false;
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].SCENE_BACKGROUND_CLICK, this.onClosePanel, this);
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
        }
    };
    InfoPanelMediator.prototype.isSceneUI = function () {
        return false;
    };
    InfoPanelMediator.prototype.isShow = function () {
        if (!this.mView)
            return false;
        return this.mView.isShow();
    };
    InfoPanelMediator.prototype.resize = function () {
        if (this.mView)
            this.mView.resize();
    };
    InfoPanelMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        if (!param || param.length === 0) {
            return;
        }
        this.mView = new _InfoPanel__WEBPACK_IMPORTED_MODULE_1__["InfoPanel"](this.mScene, this.world);
        this.mView.show(param[0]);
        this.mLayerManager.addToUILayer(this.mView);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].SCENE_BACKGROUND_CLICK, this.onClosePanel, this);
        _super.prototype.show.call(this, param);
    };
    InfoPanelMediator.prototype.destroy = function () {
        if (this.mView)
            this.mView.destroy();
    };
    InfoPanelMediator.prototype.update = function (param) {
        if (this.mView)
            this.mView.update(param);
    };
    InfoPanelMediator.prototype.onClosePanel = function (pointer) {
        if (_utils_tool__WEBPACK_IMPORTED_MODULE_2__[/* Tool */ "a"].checkPointerContains(this.mView, pointer))
            return;
        this.hide();
    };
    InfoPanelMediator.NAME = "InfoPanelMediator";
    return InfoPanelMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__[/* BaseMediator */ "a"]));



/***/ }),
/* 290 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InteractivePanel", function() { return InteractivePanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(110);
/* harmony import */ var _components_radio__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(177);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(116);
/* harmony import */ var _InteractivePanelMediator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(291);
/* harmony import */ var _lib_rexui_lib_ui_textarea_TextArea__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(127);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








var InteractivePanel = /** @class */ (function (_super) {
    __extends(InteractivePanel, _super);
    function InteractivePanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mRadioCom = false;
        _this.mLeftBaseScaleX = 1;
        _this.mLeftBaseScaleY = 1;
        _this.mMidBaseScaleX = 1;
        _this.mMidBaseScaleY = 1;
        _this.mRightBaseScaleX = 1;
        _this.mRightBaseScaleY = 1;
        _this.mDisDelection = 10;
        // this.setEnabled(false);
        _this.setTween(false);
        return _this;
    }
    /**
     * 通過參數進行ui佈局
     * @param param
     * @param radioClick
     */
    InteractivePanel.prototype.show = function (param) {
        var _this = this;
        _super.prototype.show.call(this, param);
        var size = this.mWorld.getSize();
        this.mShowData = param;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        this.mShow = true;
        var med = this.mWorld.uiManager.getMediator(_InteractivePanelMediator__WEBPACK_IMPORTED_MODULE_6__["InteractivePanelMediator"].NAME);
        var data = this.mShowData[0];
        if (this.mLeftFaceIcon)
            this.mLeftFaceIcon.visible = false;
        if (this.mRightFaceIcon)
            this.mRightFaceIcon.visible = false;
        if (this.mMidFaceIcon)
            this.mMidFaceIcon.visible = false;
        if (data.display && data.display.length > 0) {
            var uiDisplay = data.display[0];
            var url = _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getOsdRes(uiDisplay.texturePath);
            if (this.scene.cache.obj.get(url)) {
                this.onLoadComplete();
            }
            else {
                this.scene.load.image(url, url);
                this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadComplete, this);
                this.scene.load.once(Phaser.Loader.Events.FILE_LOAD_ERROR, this.onLoadError, this);
                this.scene.load.start();
            }
        }
        this.mDescTF.text = "";
        this.mNameTF.text = "";
        if (data.text) {
            if (data.text.length > 0) {
                var descData = data.text[0];
                this.mDescCon.setData("nodeID", descData.node.id);
                this.mTextArea.setText(descData.text);
                // this.mDescTF.text = descData.text;
                this.mDescCon.off("pointerup", this.descConClick, this);
                this.mDescCon.on("pointerup", this.descConClick, this);
                if (data.text[1]) {
                    var nameData = data.text[1];
                    this.mNameCon.setData("nodeID", nameData.node.id);
                    this.mNameTF.text = nameData.text;
                    this.mNameTF.x = -this.mNameTF.width >> 1;
                    this.mNameCon.off("pointerup", this.nameConClick, this);
                    this.mNameCon.on("pointerup", this.nameConClick, this);
                }
            }
        }
        if (this.mRadio)
            this.mRadio.visible = false;
        if (data.button && data.button.length > 0) {
            var tmpHei = (data.button.length - 1) * 33 + 46;
            if (!this.mRadio) {
                this.mRadio = new _components_radio__WEBPACK_IMPORTED_MODULE_3__["Radio"](this.mScene, {
                    wid: 350,
                    hei: tmpHei,
                    resKey: "juqing",
                    resPng: "./resources/ui/juqing/juqing.png",
                    resJson: "./resources/ui/juqing/juqing.json",
                    resBg: "radio_bg.png",
                    resArrow: "radio_arrow.png",
                    fontStyle: { size: 20, color: "#ffcc00", bold: false },
                    completeBack: function () {
                        _this.radioComplete();
                    },
                    clickCallBack: function (itemShowData) {
                        if (!itemShowData || !med)
                            return;
                        med.componentClick(itemShowData.data);
                    }
                });
                this.radioComplete();
            }
            this.setRadioData(data.button);
            this.mRadio.visible = true;
        }
        this.resize();
        if (this.mShow) {
            return;
        }
    };
    InteractivePanel.prototype.hide = function () {
        _super.prototype.hide.call(this);
    };
    InteractivePanel.prototype.update = function (param) {
        this.show(param);
    };
    InteractivePanel.prototype.getRadio = function () {
        return this.mRadio;
    };
    InteractivePanel.prototype.setRadioData = function (data) {
        this.mRadio.setRadioData(data);
    };
    InteractivePanel.prototype.resize = function (wid, hei) {
        if (wid === void 0) { wid = 0; }
        if (hei === void 0) { hei = 0; }
        this.scale = this.mWorld.uiScale;
        var size = this.mWorld.getSize();
        var width = this.mWorld.getSize().width;
        var height = this.mWorld.getSize().height;
        var zoom = this.mWorld.uiScale;
        this.mNameCon.add(this.mNameBg);
        this.mNameCon.add(this.mNameTF);
        this.mDescCon.add(this.mBg);
        this.mDescCon.add(this.mBorder);
        this.mDescCon.add(this.mDescTF);
        this.mDescCon.add(this.mTextArea);
        this.add(this.mNameCon);
        this.add(this.mDescCon);
        this.setSize(width, height);
        if (this.mWorld.game.device.os.desktop) {
            this.y = size.height / 2 - 250;
        }
        else {
            if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
                this.mBg.resize((size.width - 10) / this.mWorld.uiScale, size.height * .5 / this.mWorld.uiScale);
                this.mBorder.resize((size.width - 20) / this.mWorld.uiScale, (size.height * .5 - 20) / this.mWorld.uiScale);
            }
            else {
                this.mBg.resize((size.width - 10) / this.mWorld.uiScale, size.height * .5 / this.mWorld.uiScale);
                this.mBorder.resize((size.width - 20) / this.mWorld.uiScale, (size.height * .5 - 20) / this.mWorld.uiScale);
            }
            this.y = this.mBg.height * 1.5 * this.mWorld.uiScale;
        }
        // this.y = 0;
        this.x = size.width >> 1;
        this.refreshUIPos();
        if (this.mRadio) {
            this.add(this.mRadio);
        }
        this.mTextArea.childrenMap.child.setMinSize(this.mBorder.width - 10 * this.dpr * zoom, this.mBorder.height - 3 * this.dpr * zoom);
        this.mTextArea.layout();
        this.mTextArea.setPosition(width / 2, this.y + this.mDescCon.y);
        var textMask = this.mTextArea.childrenMap.text;
        textMask.x = -this.mBorder.width >> 1;
        textMask.y = -this.mBorder.height / 2 + 20 * this.dpr;
        textMask.resize(this.mBorder.width, this.mDescTF.displayHeight + 2000);
        // textMask.bottomChildOY = this.mDescTF.displayHeight + 20 * this.dpr * zoom;
        this.mTextArea.scrollToBottom();
        _super.prototype.resize.call(this, wid, hei);
    };
    // public addListen() {
    // super.addListen();
    // this.on("panelClick", this.panelClick, this);
    // }
    // public removeListen() {
    //     super.removeListen();
    //     this.off("panelClick", this.panelClick, this);
    // }
    InteractivePanel.prototype.destroy = function () {
        this.mInitialized = false;
        if (this.mNameCon) {
            this.mNameCon.destroy(true);
        }
        if (this.mDescCon) {
            this.mDescCon.destroy(true);
        }
        if (this.mLeftFaceIcon) {
            this.mLeftFaceIcon.destroy(true);
        }
        if (this.mMidFaceIcon) {
            this.mMidFaceIcon.destroy(true);
        }
        if (this.mRightFaceIcon) {
            this.mRightFaceIcon.destroy(true);
        }
        if (this.mNameTF) {
            this.mNameTF.destroy(true);
        }
        if (this.mDescTF) {
            this.mDescTF.destroy(true);
        }
        if (this.mRadio) {
            this.mRadio.destroy();
        }
        this.mNameCon = null;
        this.mDescCon = null;
        this.mLeftFaceIcon = null;
        this.mMidFaceIcon = null;
        this.mRightFaceIcon = null;
        this.mNameTF = null;
        this.mDescTF = null;
        this.mRadio = null;
        _super.prototype.destroy.call(this);
    };
    InteractivePanel.prototype.preload = function () {
        if (!this.mScene) {
            return;
        }
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getPNG());
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getPNG());
        this.mScene.load.atlas("juqing", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/juqing/juqing.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/juqing/juqing.json"));
        _super.prototype.preload.call(this);
    };
    InteractivePanel.prototype.init = function () {
        var width = this.mWorld.getSize().width;
        var height = this.mWorld.getSize().height;
        var zoom = this.mWorld.uiScale;
        this.mWorld.uiManager.getUILayerManager().addToToolTipsLayer(this);
        this.mNameCon = this.mScene.make.container(undefined, false);
        this.mDescCon = this.mScene.make.container(undefined, false);
        this.mBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](this.scene, 0, 0, 1080, 320, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getConfig());
        this.setSize(width, height);
        this.mBorder = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_2__["NinePatch"](this.scene, 0, 0, 1040, 280, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getConfig());
        this.mLeftFaceIcon = this.mScene.make.image(undefined, false);
        this.mMidFaceIcon = this.mScene.make.image(undefined, false);
        this.mRightFaceIcon = this.mScene.make.image(undefined, false);
        this.mNameTF = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](this.mScene, 0, 0, "", {
            fontSize: "20px",
            wrap: {
                mode: "char",
                width: this.mBorder.width
            },
        });
        this.mNameBg = this.mScene.make.image(undefined, false);
        this.mNameBg.setTexture("juqing", "juqing_name.png");
        this.mDescTF = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](this.mScene, 0, 0, "", {
            // width: this.mBorder.width - 20 * this.dpr * zoom,
            fontSize: "20px",
            halign: "left",
            textMask: false,
            padding: {
                top: 0,
                bottom: 0,
                left: 8 * this.dpr * zoom,
                right: 3 * this.dpr * zoom,
            },
            wrap: {
                mode: "character",
                width: this.mBorder.width - 12 * this.dpr * zoom,
            },
        });
        this.mTextArea = new _lib_rexui_lib_ui_textarea_TextArea__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"](this.mScene, {
            x: width / 2,
            y: this.mBorder.y + this.mBorder.height / 2 + 80 * this.dpr * zoom,
            width: this.mBorder.width,
            height: this.mBorder.height - 20 * this.dpr * zoom,
            // background: (<any>this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, .2),
            textWidth: this.mBorder.width - 12 * this.dpr * zoom,
            textHeight: 0,
            text: this.mDescTF,
        })
            .layout();
        // const bg1 = this.mScene.make.graphics(undefined, false);
        // bg1.fillStyle(0xffcc00);
        // bg1.fillRect(-this.mBg.width >> 1, -this.mBg.height >> 1, this.mBg.width, this.mBg.height);
        // this.mDescCon.add(bg1);
        this.mDescCon.setSize(this.mBg.width, this.mBg.height);
        this.mNameCon.setSize(this.mNameBg.width, this.mNameBg.height);
        this.mDescCon.setInteractive();
        this.mNameCon.setInteractive();
        _super.prototype.init.call(this);
    };
    InteractivePanel.prototype.tweenComplete = function (show) {
        _super.prototype.tweenComplete.call(this, show);
        if (show)
            this.resize();
    };
    // private panelClick(pointer: Phaser.Input.Pointer) {
    //     if (Tool.checkPointerContains(this.mNameCon, pointer)) {
    //         this.nameConClick(pointer);
    //         return;
    //     }
    //     if (Tool.checkPointerContains(this.mDescCon, pointer)) {
    //         this.descConClick(pointer);
    //         return;
    //     }
    //     if (this.mLeftFaceIcon && Tool.checkPointerContains(this.mLeftFaceIcon, pointer)) {
    //         this.leftFaceClick(pointer);
    //         return;
    //     }
    //     if (this.mMidFaceIcon && Tool.checkPointerContains(this.mMidFaceIcon, pointer)) {
    //         this.midFaceClick(pointer);
    //         return;
    //     }
    //     if (this.mRightFaceIcon && Tool.checkPointerContains(this.mRightFaceIcon, pointer)) {
    //         this.rightFaceClick(pointer);
    //         return;
    //     }
    // }
    InteractivePanel.prototype.refreshUIPos = function () {
        var size = this.mWorld.getSize();
        var zoom = this.mWorld.uiScale;
        this.mDescCon.setSize(this.mBg.width, this.mBg.height);
        this.mNameCon.setSize(this.mNameBg.width, this.mNameBg.height);
        this.mNameTF.y = -8 * this.mWorld.uiScale;
        // this.mDescTF.x = -this.mBorder.width / 2;
        // this.mDescTF.y = -this.mBorder.height / 2;
        this.mDescCon.y = this.mWorld.game.device.os.desktop ? size.height / 2 + 80 : 0;
        this.mNameCon.x = 150 - this.mDescCon.width / 2;
        this.mNameCon.y = this.mDescCon.y - this.mDescCon.height / 2 - this.mNameCon.height / 2 - 10;
        this.mNameTF.setWrapWidth(this.mBorder.width);
        this.mDescTF.setWrapWidth(this.mBorder.width - 10 * this.dpr * zoom);
        this.mNameTF.x = -this.mNameTF.width >> 1;
        var desConWorldY = this.mDescCon.getWorldTransformMatrix().ty;
        if (!this.mWorld.game.device.os.desktop) {
            var leftIconWid = this.mLeftFaceIcon.width * this.mWorld.uiScale;
            var leftIconHei = this.mLeftFaceIcon.height * this.mWorld.uiScale;
            var leftScale = this.getScale(InteractivePanel.baseWidth, InteractivePanel.baseHeight, leftIconWid, leftIconHei);
            this.mLeftFaceIcon.scaleX = this.mLeftBaseScaleX * leftScale * .7;
            this.mLeftFaceIcon.scaleY = this.mLeftBaseScaleY * leftScale * .7;
            this.mLeftFaceIcon.x = this.mNameCon.x;
            this.mLeftFaceIcon.y = this.mNameTF.y - this.mLeftFaceIcon.height; // desConWorldY - this.mLeftFaceIcon.height / 2 - this.mDescCon.height / 2; // this.mNameCon.y + this.mNameCon.height / 2 + 10 - this.mLeftFaceIcon.height * leftScale * .7 / 2;
            var midIconWid = this.mMidFaceIcon.width * this.mWorld.uiScale;
            var midIconHei = this.mMidFaceIcon.height * this.mWorld.uiScale;
            var midScale = this.getScale(InteractivePanel.baseWidth, InteractivePanel.baseHeight, midIconWid, midIconHei);
            this.mMidFaceIcon.scaleX = this.mMidBaseScaleX * midScale * .7;
            this.mMidFaceIcon.scaleY = this.mMidBaseScaleY * midScale * .7;
            this.mMidFaceIcon.x = 0;
            this.mMidFaceIcon.y = this.mNameTF.y - this.mMidFaceIcon.height;
            // this.mMidFaceIcon.y = this.mNameCon.y + this.mNameCon.height / 2 + 10 - this.mMidFaceIcon.height * midScale * .7 / 2;
            var rightIconWid = this.mRightFaceIcon.width * this.mWorld.uiScale;
            var rightIconHei = this.mRightFaceIcon.height * this.mWorld.uiScale;
            var rightScale = this.getScale(InteractivePanel.baseWidth, InteractivePanel.baseHeight, rightIconWid, rightIconHei);
            this.mRightFaceIcon.scaleX = this.mRightBaseScaleX * rightScale * .7;
            this.mRightFaceIcon.scaleY = this.mRightBaseScaleY * rightScale * .7;
            this.mRightFaceIcon.x = -this.mNameCon.x;
            this.mRightFaceIcon.y = this.mNameTF.y - this.mRightFaceIcon.height;
            // this.mRightFaceIcon.y = this.mNameCon.y + this.mNameCon.height / 2 + 10 - this.mRightFaceIcon.height * rightScale * .7 / 2;
        }
        if (this.mRadioCom) {
            if (this.mWorld.game.device.os.desktop) {
                this.mRadio.x = this.mBg.x + this.mBg.width / 2 - this.mRadio.width;
                this.mRadio.y = this.mDescCon.y + this.mDescCon.height / 2 - this.mRadio.height;
            }
            else {
                this.mRadio.x = this.mBg.width / 2 - this.mRadio.width;
                this.mRadio.y = this.mBg.height / 2 - this.mRadio.height;
            }
        }
    };
    InteractivePanel.prototype.getScale = function (baseWid, baseHei, curWid, curHei) {
        return baseWid / curWid > baseHei / curHei ? baseWid / curWid : baseHei / curHei;
    };
    InteractivePanel.prototype.onLoadComplete = function () {
        var size = this.mWorld.getSize();
        var data = this.mShowData[0];
        var uiDisplay = data.display[0];
        var url = _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getOsdRes(uiDisplay.texturePath);
        var imgX = -this.mBorder.width / 2;
        var imgY = -this.mBorder.height / 2;
        var scaleX = uiDisplay.scaleX;
        var scaleY = uiDisplay.scaleY;
        var scale = 1;
        var med = this.mWorld.uiManager.getMediator(_InteractivePanelMediator__WEBPACK_IMPORTED_MODULE_6__["InteractivePanelMediator"].NAME);
        switch (uiDisplay.horizontal) {
            case pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__["op_def"].HorizontalAlignment.HORIZONTAL_LEFT:
                this.mLeftFaceIcon.setTexture(url);
                this.mLeftFaceIcon.setData("nodeID", uiDisplay.node.id);
                this.mLeftBaseScaleX = scaleX;
                this.mLeftBaseScaleY = scaleY;
                scale = this.getScale(InteractivePanel.baseWidth, InteractivePanel.baseHeight, this.mLeftFaceIcon.width, this.mLeftFaceIcon.height);
                this.mLeftFaceIcon.scaleX = scaleX * scale;
                this.mLeftFaceIcon.scaleY = scaleY * scale;
                this.mLeftFaceIcon.x = imgX + 200;
                // this.mLeftFaceIcon.y = desConWorldY - this.mLeftFaceIcon.height / 2;
                // this.mLeftFaceIcon.y = imgY + this.mLeftFaceIcon.height / 4;
                this.mLeftFaceIcon.setInteractive();
                this.addAt(this.mLeftFaceIcon, 0);
                this.mLeftFaceIcon.visible = true;
                this.mLeftFaceIcon.off("pointerup", this.leftFaceClick, this);
                this.mLeftFaceIcon.on("pointerup", this.leftFaceClick, this);
                break;
            case pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__["op_def"].HorizontalAlignment.HORIZONTAL_CENTER:
                this.mMidFaceIcon.setTexture(url);
                this.mMidFaceIcon.setData("nodeID", uiDisplay.node.id);
                this.mMidBaseScaleX = scaleX;
                this.mMidBaseScaleY = scaleY;
                scale = this.getScale(InteractivePanel.baseWidth, InteractivePanel.baseHeight, this.mMidFaceIcon.width, this.mMidFaceIcon.height);
                this.mMidFaceIcon.scaleX = scaleX * scale;
                this.mMidFaceIcon.scaleY = scaleY * scale;
                this.mMidFaceIcon.x = 0;
                // this.mMidFaceIcon.y = desConWorldY - this.mMidFaceIcon.height / 2;
                // this.mMidFaceIcon.y = imgY + this.mMidFaceIcon.height / 4;
                this.addAt(this.mMidFaceIcon, 0);
                this.mMidFaceIcon.visible = true;
                this.mMidFaceIcon.setInteractive();
                this.mLeftFaceIcon.off("pointerup", this.midFaceClick, this);
                this.mMidFaceIcon.on("pointerup", this.midFaceClick, this);
                break;
            case pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__["op_def"].HorizontalAlignment.HORIZONTAL_RIGHT:
                this.mRightFaceIcon.setTexture(url);
                this.mRightFaceIcon.setData("nodeID", uiDisplay.node.id);
                this.mRightBaseScaleX = scaleX;
                this.mRightBaseScaleY = scaleY;
                scale = this.getScale(InteractivePanel.baseWidth, InteractivePanel.baseHeight, this.mRightFaceIcon.width, this.mRightFaceIcon.height);
                this.mRightFaceIcon.scaleX = scaleX * scale;
                this.mRightFaceIcon.scaleY = scaleY * scale;
                this.mRightFaceIcon.x = 200;
                // this.mRightFaceIcon.y = desConWorldY - this.mRightFaceIcon.height / 2;
                // this.mRightFaceIcon.y = imgY + this.mRightFaceIcon.height / 4;
                this.addAt(this.mRightFaceIcon, 0);
                this.mRightFaceIcon.visible = true;
                this.mRightFaceIcon.setInteractive();
                this.mRightFaceIcon.off("pointerup", this.rightFaceClick, this);
                this.mRightFaceIcon.on("pointerup", this.rightFaceClick, this);
                break;
        }
        this.resize();
    };
    InteractivePanel.prototype.rightFaceClick = function (pointer) {
        if (!this.checkPointer(pointer))
            return;
        var med = this.mWorld.uiManager.getMediator(_InteractivePanelMediator__WEBPACK_IMPORTED_MODULE_6__["InteractivePanelMediator"].NAME);
        if (!med)
            return;
        med.componentClick(this.mRightFaceIcon.getData("nodeID"));
    };
    InteractivePanel.prototype.midFaceClick = function (pointer) {
        if (!this.checkPointer(pointer))
            return;
        var med = this.mWorld.uiManager.getMediator(_InteractivePanelMediator__WEBPACK_IMPORTED_MODULE_6__["InteractivePanelMediator"].NAME);
        if (!med)
            return;
        med.componentClick(this.mMidFaceIcon.getData("nodeID"));
    };
    InteractivePanel.prototype.leftFaceClick = function (pointer) {
        if (!this.checkPointer(pointer))
            return;
        var med = this.mWorld.uiManager.getMediator(_InteractivePanelMediator__WEBPACK_IMPORTED_MODULE_6__["InteractivePanelMediator"].NAME);
        if (!med)
            return;
        med.componentClick(this.mLeftFaceIcon.getData("nodeID"));
    };
    InteractivePanel.prototype.descConClick = function (pointer) {
        if (!this.checkPointer(pointer))
            return;
        var med = this.mWorld.uiManager.getMediator(_InteractivePanelMediator__WEBPACK_IMPORTED_MODULE_6__["InteractivePanelMediator"].NAME);
        if (!this.mDescCon.getData("nodeID") || !med)
            return;
        med.componentClick(this.mDescCon.getData("nodeID"));
    };
    InteractivePanel.prototype.nameConClick = function (pointer) {
        if (!this.checkPointer(pointer))
            return;
        var med = this.mWorld.uiManager.getMediator(_InteractivePanelMediator__WEBPACK_IMPORTED_MODULE_6__["InteractivePanelMediator"].NAME);
        if (!this.mNameCon.getData("nodeID") || !med)
            return;
        med.componentClick(this.mNameCon.getData("nodeID"));
    };
    InteractivePanel.prototype.checkPointer = function (pointer) {
        return Math.abs(pointer.downX - pointer.upX) < this.mDisDelection &&
            Math.abs(pointer.downY - pointer.upY) < this.mDisDelection;
    };
    InteractivePanel.prototype.onLoadError = function (file) {
    };
    InteractivePanel.prototype.radioComplete = function () {
        this.mRadioCom = true;
        if (!this.mRadio)
            return;
        this.mRadio.x = 220;
        this.mRadio.y = this.mDescCon.height + 200;
        this.resize();
    };
    InteractivePanel.baseWidth = 720;
    InteractivePanel.baseHeight = 720;
    return InteractivePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 291 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InteractivePanelMediator", function() { return InteractivePanelMediator; });
/* harmony import */ var _InteractivePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(290);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var InteractivePanelMediator = /** @class */ (function (_super) {
    __extends(InteractivePanelMediator, _super);
    function InteractivePanelMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__[/* UIType */ "a"].Monopoly;
        _this.mScene = scene;
        _this.world = world;
        return _this;
    }
    InteractivePanelMediator.prototype.isShow = function () {
        if (!this.mView)
            return false;
        return this.mView.isShow();
    };
    InteractivePanelMediator.prototype.isSceneUI = function () {
        return false;
    };
    InteractivePanelMediator.prototype.resize = function () {
        if (this.mView && this.mView.isShow)
            return this.mView.resize();
    };
    InteractivePanelMediator.prototype.getView = function () {
        return this.mView;
    };
    InteractivePanelMediator.prototype.show = function (param) {
        if (this.mView && this.isShow()) {
            return;
        }
        this.mView = new _InteractivePanel__WEBPACK_IMPORTED_MODULE_0__["InteractivePanel"](this.mScene, this.world);
        this.mView.show(param);
        _super.prototype.show.call(this, param);
    };
    InteractivePanelMediator.prototype.update = function (param) {
        if (!this.mView || !this.mView.isShow) {
            return;
        }
        _super.prototype.update.call(this, param);
    };
    InteractivePanelMediator.prototype.hide = function () {
        this.mShow = false;
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
        }
    };
    InteractivePanelMediator.prototype.destroy = function () {
        this.world = null;
        this.mScene = null;
        this.mParam = null;
        _super.prototype.destroy.call(this);
    };
    InteractivePanelMediator.prototype.componentClick = function (componentID) {
        if (this.mParam) {
            this.world.roomManager.currentRoom.playerManager.actor.getInteractive().requestTargetUI(this.mParam[0].id, componentID);
        }
    };
    InteractivePanelMediator.NAME = "InteractivePanelMediator";
    return InteractivePanelMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 292 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemDetail", function() { return ItemDetail; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _bag_dragDropIcon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(154);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(114);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var ItemDetail = /** @class */ (function (_super) {
    __extends(ItemDetail, _super);
    function ItemDetail(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mBtnWid = 100;
        _this.mBtnHei = 40;
        _this.mWid = 0;
        _this.mHei = 0;
        return _this;
    }
    ItemDetail.prototype.getBtnList = function () {
        return this.mBtnList;
    };
    ItemDetail.prototype.resize = function (wid, hei) {
        if (wid === void 0) { wid = 0; }
        if (hei === void 0) { hei = 0; }
        var size = this.mWorld.getSize();
        if (this.mWorld.game.device.os.desktop) {
            this.x = size.width - (this.width + this.mBtnWid) / 2 * this.mWorld.uiScale >> 1;
            this.y = size.height - this.height * this.mWorld.uiScale >> 1;
        }
        else {
            this.x = size.width - (this.width + this.mBtnWid) / 2 * this.mWorld.uiScale >> 1;
            this.y = size.height - this.height * this.mWorld.uiScale >> 1;
        }
        this.scale = this.mWorld.uiScale;
    };
    ItemDetail.prototype.show = function (param) {
        this.mShowData = param;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        this.mShow = true;
        var data = this.mShowData[0];
        if (data.display.length > 0) {
            this.loadIcon(data.display[0]);
        }
        if (data.text.length > 0) {
            this.setText(data.text[0].text);
        }
        if (data.button.length > 0) {
            this.mBtnList = [];
            var btn = void 0;
            var len = data.button.length;
            var preY = 20;
            var preX = this.mWid + 50;
            for (var i = 0; i < len; i++) {
                var btnData = data.button[i];
                btn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__["NinePatchButton"](this.mScene, 0, 0, this.mBtnWid, this.mBtnHei, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* BlueButton */ "c"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* BlueButton */ "c"].getName(), btnData.text, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* BlueButton */ "c"].getConfig(), btnData);
                this.mBtnList.push(btn);
                btn.x = preX;
                btn.y = preY;
                preY += btn.height + 40;
                this.add(btn);
            }
        }
        var bg = this.mScene.add.graphics();
        bg.fillStyle(0, .6);
        bg.fillRoundedRect(0, 0, this.mWid, this.mHei, 6);
        this.addAt(bg, 0);
        this.setSize(this.mWid + 120, this.mHei);
        this.resize();
        this.setInteractive();
    };
    ItemDetail.prototype.setText = function (value) {
        this.mDescTF.setText(value);
        this.mHei += this.mDescTF.y + this.mDescTF.height + 10;
    };
    ItemDetail.prototype.loadIcon = function (value) {
        var _this = this;
        if (this.mIcon) {
            this.mIcon.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getOsdRes(value), function () {
                _this.mHei += _this.mIcon.y + _this.mIcon.height;
                // if (this.mCallBack) this.mCallBack();
            });
        }
    };
    ItemDetail.prototype.hide = function () {
        this.disInteractive();
        _super.prototype.hide.call(this);
    };
    ItemDetail.prototype.destroy = function () {
        if (this.mBtnList) {
            this.mBtnList.forEach(function (btn) {
                btn.destroy(true);
                btn = null;
            });
            this.mBtnList = null;
        }
        this.mResStr = "";
        this.mResPng = "";
        this.mResJson = "";
        if (this.mNameTF)
            this.mNameTF.destroy(true);
        if (this.mDescTF)
            this.mDescTF.destroy(true);
        if (this.mIcon)
            this.mIcon.destroy();
        this.mNameTF = null;
        this.mDescTF = null;
        this.mIcon = null;
        this.mWid = 0;
        this.mHei = 0;
        _super.prototype.destroy.call(this);
    };
    ItemDetail.prototype.preload = function () {
        this.mResStr = "itemDetail";
        this.mResPng = "ui/bag/bagView.png";
        this.mResJson = "ui/bag/bagView.json";
        if (!this.mScene) {
            return;
        }
        this.mScene.load.atlas(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* BlueButton */ "c"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* BlueButton */ "c"].getPNG(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* BlueButton */ "c"].getJSON());
        this.mScene.load.atlas("itemDetail", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/bag/bagView.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/bag/bagView.json"));
        _super.prototype.preload.call(this);
    };
    ItemDetail.prototype.init = function () {
        var size = this.mWorld.getSize();
        this.mWid = 290;
        this.mHei = 0;
        this.mIcon = new _bag_dragDropIcon__WEBPACK_IMPORTED_MODULE_2__["DragDropIcon"](this.mScene, 30, 25);
        this.add(this.mIcon);
        this.mNameTF = this.scene.make.text({
            style: {
                fontFamily: "YaHei",
                fontSize: 20,
                origin: { x: 0, y: 0 },
                wordWrap: { width: 250, useAdvancedWrap: true }
            }
        }, false);
        this.mNameTF.setFontStyle("bold");
        this.mNameTF.setAlign("left");
        this.mNameTF.x = this.mIcon.x + this.mIcon.width;
        this.mNameTF.y = this.mIcon.y;
        this.add(this.mNameTF);
        this.mDescTF = this.scene.make.text({
            style: {
                fontFamily: "YaHei",
                fontSize: 25,
                origin: { x: 0, y: 0 },
                wordWrap: { width: 250, useAdvancedWrap: true }
            }
        }, false);
        this.mDescTF.setFontStyle("bold");
        this.mDescTF.setAlign("left");
        this.mDescTF.x = this.mIcon.x - this.mIcon.width / 2;
        this.mDescTF.y = this.mIcon.y + this.mIcon.height + 20;
        this.add(this.mDescTF);
        this.mInitialized = true;
        this.show(this.mShowData);
    };
    return ItemDetail;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 293 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemPopCardPanel", function() { return ItemPopCardPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(124);
/* harmony import */ var copy_text_to_clipboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(427);
/* harmony import */ var copy_text_to_clipboard__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(copy_text_to_clipboard__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Market_DetailDisplay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(145);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(109);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(107);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var ItemPopCardPanel = /** @class */ (function (_super) {
    __extends(ItemPopCardPanel, _super);
    function ItemPopCardPanel(scene, worldService) {
        var _this = _super.call(this, scene, worldService) || this;
        _this.key = "item_pop_card";
        _this.mPressDelay = 1000;
        _this.setTween(false);
        return _this;
    }
    ItemPopCardPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.mDetailDisplay.on("show", this.onShowHandler, this);
        this.on("pointerup", this.onCloseHandler, this);
        this.mCloseBtn.on("pointerup", this.onCloseHandler, this);
        this.mNickName.on("pointerup", this.onPointerNickNameHandler, this);
        this.mNickName.on("pointerdown", this.onPointerNickNameDownHandler, this);
        this.mDesText.on("pointerdown", this.onPointerDesDownHandler, this);
        this.mDesText.on("pointerup", this.onPointerNickNameHandler, this);
    };
    ItemPopCardPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mDetailDisplay.off("show", this.onShowHandler, this);
        this.off("pointerup", this.onCloseHandler, this);
        this.mCloseBtn.off("pointerup", this.onCloseHandler, this);
        this.mNickName.off("pointerup", this.onPointerNickNameHandler, this);
        this.mNickName.off("pointerdown", this.onPointerNickNameDownHandler, this);
        this.mDesText.off("pointerdown", this.onPointerDesDownHandler, this);
        this.mDesText.off("pointerup", this.onPointerNickNameHandler, this);
    };
    ItemPopCardPanel.prototype.resize = function (w, h) {
        // const scale = this.scene.cameras.main.height / 1920;
        var zoom = this.mWorld.uiScale;
        var width = this.scene.cameras.main.width / zoom;
        var height = this.scene.cameras.main.height / zoom;
        var centerX = this.scene.cameras.main.centerX / zoom;
        var centerY = this.scene.cameras.main.centerY / zoom;
        // this.setScale(scale);
        this.setSize(width, height);
        // this.mCardContainer.setScale(scale);
        this.mCardContainer.x = centerX; // - this.mCardContainer.width / 2;
        this.mCardContainer.y = centerY; // - this.mCardContainer.height / 2;
        this.mCloseBtn.x = centerX;
        this.mCloseBtn.y = centerY + this.mCardContainer.height / 2 + 48 * this.dpr;
        // this.setInteractive(new Phaser.Geom.Rectangle(0, 0, width, height), Phaser.Geom.Rectangle.Contains);
        // this.mDetailDisplay.scale = 1 / scale;
        // this.mCloseBtn.x = centerX;
        // this.mCloseBtn.y = centerY;
        // const graphics = this.scene.make.graphics(undefined, false);
        // graphics.fillStyle(0xFF9900, 0.7);
        // graphics.fillRect(0, 0, centerX, centerY);
        // this.add(graphics);
        // this.setSize(width, height);
        _super.prototype.resize.call(this, w, h);
    };
    ItemPopCardPanel.prototype.setProp = function () {
        if (!this.mShowData) {
            return;
        }
        var prop = this.mShowData[0].prop;
        if (!prop) {
            return;
        }
        this.mDesText.setText(prop.des);
        this.mNickName.setText(prop.name);
        if (prop.source) {
            this.mSource.setText(_i18n__WEBPACK_IMPORTED_MODULE_1__[/* i18n */ "a"].t("item.source") + prop.source);
        }
        else {
            this.mSource.setText("");
        }
        var resource = this.mShowData[0].display;
        if (resource) {
            if (resource.display) {
                this.mDetailDisplay.loadDisplay(resource);
            }
            else if (resource.avatar) {
                this.mDetailDisplay.loadAvatar(resource.avatar);
            }
            else {
                this.mDetailDisplay.loadUrl(prop.icon);
            }
        }
    };
    ItemPopCardPanel.prototype.preload = function () {
        this.addAtlas(this.key, "item_pop_card/item_pop_card.png", "item_pop_card/item_pop_card.json");
        // this.scene.load.atlas(this.key, Url.getRes("ui/item_pop_card/item_pop_card.png"), Url.getRes("ui/item_pop_card/item_pop_card.json"));
        _super.prototype.preload.call(this);
    };
    ItemPopCardPanel.prototype.init = function () {
        this.mCardContainer = this.scene.make.container({
            width: 325 * this.dpr,
            height: 468 * this.dpr
        }, false);
        this.mCardContainer.setSize(325 * this.dpr, 468 * this.dpr);
        this.mCardContainer.setInteractive();
        this.mBorder = this.scene.make.graphics(undefined, false);
        this.mBorder.fillGradientStyle(0x6f75ff, 0x6f75ff, 0x01cdff, 0x01cdff);
        this.mBorder.fillRect(-this.mCardContainer.width / 2, -this.mCardContainer.height / 2, this.mCardContainer.width, this.mCardContainer.height);
        // this.mBorder.setInteractive();
        var background = this.scene.make.image({
            key: this.key,
            frame: "bg.png"
        }, false);
        background.y = 23 * this.dpr - background.height / 2;
        var nickNameBg = this.scene.make.image({
            y: 42 * this.dpr,
            key: this.key,
            frame: "name_bg.png"
        });
        this.mNickName = this.scene.make.text({
            y: 42 * this.dpr,
            style: {
                fontSize: 18 * this.dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_5__[/* Font */ "a"].DEFULT_FONT
            }
        }, false).setOrigin(0.5).setInteractive();
        var desBg = this.scene.make.image({
            y: 138 * this.dpr,
            key: this.key,
            frame: "des_bg.png"
        }, false);
        this.mDesText = this.scene.make.text({
            x: desBg.x - desBg.width / 2 + 12 * this.dpr,
            y: desBg.y - desBg.height / 2 + 10 * this.dpr,
            style: {
                fontSize: 10 * this.dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_5__[/* Font */ "a"].DEFULT_FONT,
                wordWrap: {
                    width: 240 * this.dpr,
                    useAdvancedWrap: true
                }
            }
        }, false).setInteractive();
        this.mDetailDisplay = new _Market_DetailDisplay__WEBPACK_IMPORTED_MODULE_3__["DetailDisplay"](this.scene);
        this.mDetailDisplay.scale = this.dpr * 2;
        // this.mDetailDisplay.y = -150;
        this.mCloseBtn = this.scene.make.image({
            key: this.key,
            frame: "close.png"
        }, false).setInteractive();
        this.mSource = this.scene.make.text({
            x: desBg.x - desBg.width / 2 + 12 * this.dpr,
            y: desBg.y + desBg.height / 2 - 23 * this.dpr,
            style: {
                fontSize: 10 * this.dpr,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_5__[/* Font */ "a"].DEFULT_FONT
            }
        }, false);
        this.add(this.mCardContainer);
        this.mCardContainer.add([this.mBorder, background, desBg, this.mDetailDisplay, nickNameBg, this.mNickName, this.mDesText, this.mSource]);
        this.add(this.mCloseBtn);
        this.resize(0, 0);
        _super.prototype.init.call(this);
        this.setInteractive();
        this.setProp();
    };
    ItemPopCardPanel.prototype.onCloseHandler = function () {
        this.emit("close");
        clearTimeout(this.mPressTime);
        this.mNickNameDown = false;
    };
    ItemPopCardPanel.prototype.onPointerNickNameHandler = function () {
        // if (this.mNickNameDown) {
        //   copy(this.mNickName.text);
        //   const content = {
        //     noticeContext: "复制名字成功"
        //   };
        //   this.mWorld.emitter.emit(MessageType.SHOW_NOTICE, { content });
        // }
        clearTimeout(this.mPressTime);
        this.mNickNameDown = false;
    };
    ItemPopCardPanel.prototype.onPointerNickNameDownHandler = function () {
        var _this = this;
        // this.mNickNameDown = true;
        this.mPressTime = setTimeout(function () {
            _this.copyName();
        }, this.mPressDelay);
    };
    ItemPopCardPanel.prototype.onPointerDesDownHandler = function () {
        var _this = this;
        this.mPressTime = setTimeout(function () {
            _this.copyDes();
        }, this.mPressDelay);
    };
    ItemPopCardPanel.prototype.copyName = function () {
        if (this.mNickName) {
            copy_text_to_clipboard__WEBPACK_IMPORTED_MODULE_2__(this.mNickName.text);
            var content = {
                noticeContext: _i18n__WEBPACK_IMPORTED_MODULE_1__[/* i18n */ "a"].t("item.copy_suc", { name: _i18n__WEBPACK_IMPORTED_MODULE_1__[/* i18n */ "a"].t("item.name") })
            };
            this.mWorld.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_4__[/* MessageType */ "a"].SHOW_NOTICE, { content: content });
        }
    };
    ItemPopCardPanel.prototype.copyDes = function () {
        if (this.mDesText) {
            copy_text_to_clipboard__WEBPACK_IMPORTED_MODULE_2__(this.mDesText.text);
            var content = {
                noticeContext: _i18n__WEBPACK_IMPORTED_MODULE_1__[/* i18n */ "a"].t("item.copy_suc", { name: _i18n__WEBPACK_IMPORTED_MODULE_1__[/* i18n */ "a"].t("item.des") })
            };
            this.mWorld.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_4__[/* MessageType */ "a"].SHOW_NOTICE, { content: content });
        }
    };
    ItemPopCardPanel.prototype.onShowHandler = function (image) {
        this.mDetailDisplay.y = -this.mCardContainer.height / 4;
    };
    return ItemPopCardPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 294 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementDetail", function() { return ElementDetail; });
/* harmony import */ var _NumberCounter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(295);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(114);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(124);
/* harmony import */ var _DetailDisplay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(145);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(107);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var ElementDetail = /** @class */ (function (_super) {
    __extends(ElementDetail, _super);
    function ElementDetail(scene, world, $key, dpr, uiScale) {
        var _this = _super.call(this, scene) || this;
        _this.key = $key;
        _this.mWorld = world;
        _this.uiScale = uiScale || 1;
        _this.dpr = dpr;
        _this.setPosition(0, 0);
        // this.mBackground = this.scene.make.image({
        //   x: this.scene.cameras.main.width >> 1,
        //   key: this.key,
        //   frame: "bg.png"
        // });
        // this.mBackground.y = (this.mBackground.height >> 1) + 43 * this.dpr;
        _this.mCounter = new _NumberCounter__WEBPACK_IMPORTED_MODULE_0__["NumberCounter"](_this.scene, $key, 360, 700, _this.dpr, uiScale);
        var frame = _this.scene.textures.getFrame(_this.key, "yellow_button_normal");
        var w = 60;
        var h = 65;
        if (frame) {
            w = frame.width;
            h = frame.height;
        }
        _this.mBuyBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_2__["NinePatchButton"](_this.scene, 440, 700, 81 * _this.dpr, 41 * _this.dpr, _this.key, "yellow_button", _i18n__WEBPACK_IMPORTED_MODULE_3__[/* i18n */ "a"].t("market.buy_button"), {
            left: 14 * _this.dpr,
            top: 14 * _this.dpr,
            right: w - 2 - 14 * _this.dpr,
            bottom: h - 2 - 14 * _this.dpr
        }).setScale(uiScale);
        _this.mBuyBtn.setTextStyle({
            color: "#976400",
            fontSize: 16 * _this.dpr * uiScale,
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_5__[/* Font */ "a"].DEFULT_FONT
        });
        _this.mBuyBtn.setFontStyle("bold");
        // this.mBuyBtn.setTextOffset(0, 10 * this.dpr);
        _this.mBuyBtn.on("pointerup", _this.onBuyHandler, _this);
        // this.mNickNameContainer = this.scene.make.container(undefined, false);
        // this.mNickNameBg = this.scene.make.image({
        //   key: this.key,
        //   frame: "name_bg.png"
        // }, false);
        // this.mNickNameContainer.setSize(this.mNickNameBg.width, this.mNickNameBg.height);
        _this.mNickName = _this.scene.make.text({
            x: 7 * _this.dpr,
            y: 9 * _this.dpr,
            style: {
                fontSize: 12 * _this.dpr * uiScale,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_5__[/* Font */ "a"].DEFULT_FONT,
                color: "#FFFF00",
                align: "center"
            }
        });
        _this.mPriceContainer = _this.scene.make.container(undefined, false);
        _this.mPriceIcon = _this.scene.make.image({
            x: -78,
            key: _this.key,
            frame: "tuding_icon.png"
        }, false).setScale(uiScale);
        _this.mPriceText = _this.scene.make.text({
            x: 0,
            style: {
                fontSize: 14 * _this.dpr * uiScale,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_5__[/* Font */ "a"].DEFULT_FONT
            }
        }).setOrigin(0.5);
        var priceBg = _this.scene.make.image({
            key: _this.key,
            frame: "price_bg.png"
        }).setScale(uiScale);
        _this.mDetailDisplay = new _DetailDisplay__WEBPACK_IMPORTED_MODULE_4__["DetailDisplay"](_this.scene);
        _this.mDetailDisplay.scale = _this.dpr;
        _this.mDetailDisplay.y = 110 * _this.dpr;
        var bubbleW = 110 * _this.dpr * _this.uiScale;
        var bubbleH = 96 * _this.dpr * _this.uiScale;
        _this.mDetailBubble = _this.scene.make.graphics(undefined, false);
        _this.mDetailBubble.fillStyle(0xFFFFFF, 0.1);
        _this.mDetailBubble.fillRoundedRect(0, 0, bubbleW, bubbleH);
        _this.mDetailBubbleContainer = _this.scene.make.container(undefined, false);
        _this.mDetailBubbleContainer.setSize(bubbleW, bubbleH);
        _this.mDesText = _this.scene.make.text({
            x: 8 * _this.dpr,
            y: 56 * _this.dpr,
            style: {
                color: "#32347b",
                fontSize: 10 * _this.dpr * uiScale,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_5__[/* Font */ "a"].DEFULT_FONT,
                wordWrap: {
                    width: 90 * _this.dpr * uiScale,
                    useAdvancedWrap: true
                }
            }
        }, false);
        _this.mSource = _this.scene.make.text({
            x: 8 * _this.dpr,
            y: 38 * _this.dpr,
            style: {
                fontSize: 10 * _this.dpr * uiScale,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_5__[/* Font */ "a"].DEFULT_FONT,
            }
        }, false);
        _this.add([_this.mDetailDisplay, _this.mPriceContainer, _this.mCounter, _this.mBuyBtn, _this.mDetailBubbleContainer]);
        _this.mDetailBubbleContainer.add([_this.mDetailBubble, _this.mNickName, _this.mDesText, _this.mSource]);
        _this.mPriceContainer.add([priceBg, _this.mPriceIcon, _this.mPriceText]);
        // this.mNickNameContainer.add([this.mNickNameBg, this.mNickName]);
        _this.addActionListener();
        return _this;
    }
    ElementDetail.prototype.resize = function (w, h) {
        var width = (this.scene.cameras.main.width);
        var height = ((this.scene.cameras.main.height) >> 1) - 150;
        var centerX = this.scene.cameras.main.centerX;
        this.mBuyBtn.x = width - this.mBuyBtn.displayWidth / 2 - 10 * this.dpr * this.uiScale;
        this.mBuyBtn.y = this.height - this.y - this.mBuyBtn.displayHeight / 2 - 12 * this.dpr * this.uiScale;
        var counterX = this.mBuyBtn.x - this.mBuyBtn.displayWidth / 2 - this.mCounter.displayWidth / 2 - 17 * this.dpr * this.uiScale;
        // if (counterX < this.mCounter.displayWidth / 2 + 10) {
        //   counterX = this.mCounter.displayWidth / 2 + 10;
        // }
        this.mCounter.x = counterX;
        this.mCounter.y = this.mBuyBtn.y;
        this.mDetailBubbleContainer.x = 10 * this.dpr;
        var endW = width - (width - this.mCounter.x) - this.mCounter.width / 2;
        if (this.mDetailBubbleContainer.displayWidth + this.mDetailBubbleContainer.x + 10 * this.dpr > endW) {
            var bubbleW = endW - 16 * this.dpr * this.uiScale;
            this.mDesText.setWordWrapWidth(bubbleW - 10 * this.dpr * this.uiScale, true);
            this.resizeDesBubble(bubbleW, this.mDetailBubbleContainer.height);
        }
        // this.mDetailBubbleContainer.y = this.height - this.y - this.mDetailBubbleContainer.height - 6 * this.dpr;
        this.mPriceContainer.x = this.mCounter.x;
        this.mPriceContainer.y = this.mCounter.y - 35 * this.dpr;
        this.mDetailDisplay.x = centerX;
        this.mDetailDisplay.y = (this.height - this.y) / 2;
        // this.mDetailBubbleContainer.y = this.mDetailDisplay.y;
        var clickW = width * 0.8;
        var clickH = height * 0.7;
        this.setInteractive(new Phaser.Geom.Rectangle((width >> 1) + (width - clickW >> 1), height >> 1, clickW, clickH), Phaser.Geom.Rectangle.Contains);
        // test interactive
        // const graphics = this.scene.make.graphics(undefined, false);
        // graphics.fillStyle(0xFF9900, 0.5);
        // graphics.fillRect(width - clickW >> 1, 0, clickW, clickH);
        // this.add(graphics);
        this.mCounter.resize();
    };
    ElementDetail.prototype.addActionListener = function () {
        if (!this.mCounter) {
            return;
        }
        this.mCounter.addActionListener();
        this.mCounter.on("change", this.onChangeCounterHandler, this);
        // this.mDetailDisplay.on("show", this.onShowDisplayHandler, this);
        this.on("pointerup", this.onPointerUpHandler, this);
    };
    ElementDetail.prototype.removeActionListener = function () {
        if (!this.mCounter) {
            return;
        }
        this.mCounter.removeActionListener();
        this.mCounter.off("change", this.onChangeCounterHandler, this);
        // this.mDetailDisplay.off("show", this.onShowDisplayHandler, this);
        this.off("gameobjectup", this.onPointerUpHandler, this);
    };
    ElementDetail.prototype.setProp = function (prop) {
        this.mSelectedProp = prop;
        this.mNickName.setText(prop.shortName || prop.name);
        this.mDesText.setText(prop.des);
        if (prop.price && prop.price.length > 0) {
            this.mPriceIcon.setTexture(this.key, "tuding_icon.png");
            this.updatePrice(prop.price[0].price.toString());
        }
        else {
            this.mPriceText.setText("");
        }
        if (prop.source) {
            this.mSource.setText("\u6765\u6E90\uFF1A " + prop.source);
        }
        else {
            this.mSource.setText("");
        }
        this.resizeDesBubble();
        this.mCounter.setCounter(1);
    };
    ElementDetail.prototype.setResource = function (content) {
        if (content.display) {
            this.mDetailDisplay.loadDisplay(content);
        }
        else if (content.avatar) {
            this.mDetailDisplay.loadAvatar(content);
        }
        else {
            this.mDetailDisplay.loadUrl(this.mSelectedProp.icon);
        }
        // this.mDetailDisplay.loadDisplay(content.display || this.mSelectedProp.icon);
    };
    ElementDetail.prototype.updatePrice = function (price) {
        this.mPriceText.setText(price);
        this.mPriceIcon.x = this.mPriceText.x - this.mPriceText.width / 2 - 16 * this.dpr;
    };
    ElementDetail.prototype.onBuyHandler = function () {
        if (!this.mSelectedProp) {
            return;
        }
        var prop = pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].OrderCommodities.create();
        prop.id = this.mSelectedProp.id;
        prop.quantity = this.mCounter.number;
        prop.category = this.mSelectedProp.category;
        this.emit("buyItem", prop);
    };
    ElementDetail.prototype.onChangeCounterHandler = function (num) {
        if (!this.mSelectedProp) {
            return;
        }
        if (!this.mSelectedProp.price || this.mSelectedProp.price.length < 1) {
            return;
        }
        this.updatePrice((this.mSelectedProp.price[0].price * this.mCounter.number).toString());
    };
    ElementDetail.prototype.onPointerUpHandler = function () {
        this.emit("popItemCard", this.mSelectedProp, this.mDetailDisplay.display);
        this.mCounter.setBlur();
    };
    ElementDetail.prototype.resizeDesBubble = function (w, h) {
        // const bubbleW = 110 * this.dpr;
        if (w === undefined)
            w = this.mDetailBubbleContainer.width;
        var bubbleH = this.mDesText.height + 60 * this.dpr * this.uiScale;
        if (w === this.mDetailBubbleContainer.width && bubbleH === this.mDetailBubbleContainer.height) {
            return;
        }
        this.mDetailBubble.clear();
        this.mDetailBubble.fillStyle(0xFFFFFF, 0.1);
        this.mDetailBubble.fillRoundedRect(0, 0, w, bubbleH);
        this.mDetailBubbleContainer.setSize(w, bubbleH);
        this.mDetailBubbleContainer.y = this.height - this.y - this.mDetailBubbleContainer.height - 6 * this.dpr;
    };
    ElementDetail.prototype.onShowDisplayHandler = function (image) {
        if (!image) {
            return;
        }
        // this.mNickNameContainer.x = this.mDetailDisplay.x; // + this.mDetailDisplay.width / 2 - this.mNickNameContainer.width / 2;
        // let _y = this.mDetailDisplay.y + this.mDetailDisplay.height / 2 + this.mNickNameContainer.height / 2 + 45;
        // if (_y > this.mCounter.y - this.mNickNameContainer.height - 45) {
        //   _y = this.mCounter.y - this.mNickNameContainer.height - 45;
        // }
        // this.mNickNameContainer.y = _y;
    };
    return ElementDetail;
}(Phaser.GameObjects.Container));



/***/ }),
/* 295 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberCounter", function() { return NumberCounter; });
/* harmony import */ var _components_label_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(296);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var NumberCounter = /** @class */ (function (_super) {
    __extends(NumberCounter, _super);
    function NumberCounter(scene, key, x, y, dpr, scale) {
        if (dpr === void 0) { dpr = 1; }
        if (scale === void 0) { scale = 1; }
        var _this = _super.call(this, scene, x, y) || this;
        _this.pressDelay = 500;
        _this.mMinNum = 1;
        _this.mMaxNum = 99;
        // this.mBackground = new Phaser.GameObjects.Image(this.scene, 0, 0, 200, 144, key, "input_bg.png", {
        //   left: 50,
        //   top: 48,
        //   right: 50,
        //   bottom: 48
        // });
        _this.mBackground = _this.scene.make.image({
            key: key,
            frame: "input_bg.png"
        }).setScale(scale);
        _this.mReduceBtn = _this.scene.make.image({
            key: key,
            frame: "reduce.png",
        }, false).setInteractive().setScale(scale);
        _this.mReduceBtn.x = -(_this.mBackground.displayWidth / 2) - _this.mReduceBtn.displayWidth / 2 - 7 * dpr * scale;
        _this.mIncreaseBtn = _this.scene.make.image({
            key: key,
            frame: "increase.png",
        }, false).setInteractive().setScale(scale);
        _this.mIncreaseBtn.x = (_this.mBackground.displayWidth + _this.mIncreaseBtn.displayWidth) / 2 + 7 * dpr * scale;
        // this.mInputText = new InputText(this.scene, 0, 0, 200, 80, {
        //   fontSize: "46px",
        //   color: "#666666",
        //   align: "center",
        //   type: "number",
        //   text: 1
        // }).setOrigin(0.5);
        _this.mLabelInput = new _components_label_input__WEBPACK_IMPORTED_MODULE_0__["LabelInput"](_this.scene, {
            x: 0,
            y: 0,
            width: 160,
            height: 80,
            fontSize: 14 * dpr * scale + "px",
            color: "#666666",
            align: "center",
            type: "number",
        });
        _this.mLabelInput.setOrigin(0.5);
        _this.mLabelInput.setText("1");
        _this.mLabelInput.on("textchange", _this.onTextChangeHandler, _this);
        _this.add([_this.mBackground, _this.mLabelInput, _this.mReduceBtn, _this.mIncreaseBtn]);
        _this.setSize(_this.mIncreaseBtn.displayWidth + _this.mReduceBtn.displayWidth + _this.mBackground.displayWidth + 14 * dpr * scale, _this.mBackground.displayHeight);
        return _this;
    }
    NumberCounter.prototype.resize = function () {
    };
    NumberCounter.prototype.setMinNumber = function (val) {
        this.mMinNum = val;
    };
    NumberCounter.prototype.setMaxNumber = function (val) {
        this.mMaxNum = val;
    };
    NumberCounter.prototype.addActionListener = function () {
        this.mIncreaseBtn.on("pointerup", this.onIncreaseHandler, this);
        this.mIncreaseBtn.on("pointerdown", this.onIncreaseDownHandler, this);
        this.mReduceBtn.on("pointerup", this.onReduceHandler, this);
        this.mReduceBtn.on("pointerdown", this.onReduceDownHandler, this);
    };
    NumberCounter.prototype.removeActionListener = function () {
        this.mIncreaseBtn.off("pointerup", this.onIncreaseHandler, this);
        this.mIncreaseBtn.off("pointerdown", this.onIncreaseDownHandler, this);
        this.mReduceBtn.off("pointerup", this.onReduceHandler, this);
        this.mReduceBtn.off("pointerdown", this.onReduceDownHandler, this);
    };
    NumberCounter.prototype.setCounter = function (num) {
        if (isNaN(num)) {
            num = 0;
        }
        if (num < this.mMinNum) {
            num = this.mMinNum;
        }
        else if (num > this.mMaxNum) {
            num = this.mMaxNum;
        }
        this.mLabelInput.setText(num.toString());
        this.emit("change", num);
    };
    NumberCounter.prototype.setBlur = function () {
        this.mLabelInput.setBlur();
    };
    Object.defineProperty(NumberCounter.prototype, "number", {
        get: function () {
            return parseInt(this.mLabelInput.text, 10);
        },
        enumerable: false,
        configurable: true
    });
    NumberCounter.prototype.onReduceHandler = function () {
        var num = parseInt(this.mLabelInput.text, 10);
        this.setCounter(--num);
        this.clearTween();
    };
    NumberCounter.prototype.onIncreaseHandler = function () {
        var num = parseInt(this.mLabelInput.text, 10);
        this.setCounter(++num);
        this.clearTween();
    };
    NumberCounter.prototype.onTextChangeHandler = function () {
        this.setCounter(parseInt(this.mLabelInput.text, 10));
    };
    NumberCounter.prototype.onReduceDownHandler = function () {
        var _this = this;
        this.pressTimeout = setTimeout(function () {
            _this.delayTweenNumber(_this.mMinNum);
        }, this.pressDelay);
        this.setBlur();
    };
    NumberCounter.prototype.onIncreaseDownHandler = function () {
        var _this = this;
        this.pressTimeout = setTimeout(function () {
            _this.delayTweenNumber(_this.mMaxNum);
        }, this.pressDelay);
        this.setBlur();
    };
    NumberCounter.prototype.delayTweenNumber = function (to) {
        var _this = this;
        var number = this.number;
        this.tween = this.scene.tweens.addCounter({
            from: number,
            to: to,
            onUpdate: function () {
                _this.setCounter(_this.tween.getValue() >> 0);
            },
            duration: Math.abs(number - to) * 50
        });
    };
    NumberCounter.prototype.clearTween = function () {
        clearTimeout(this.pressTimeout);
        if (this.tween) {
            this.tween.stop();
            this.tween = undefined;
        }
    };
    return NumberCounter;
}(Phaser.GameObjects.Container));



/***/ }),
/* 296 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelInput", function() { return LabelInput; });
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(118);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(107);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var LabelInput = /** @class */ (function (_super) {
    __extends(LabelInput, _super);
    function LabelInput(scene, config) {
        var _this = _super.call(this, scene) || this;
        var labelConfig = {
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_1__[/* Font */ "a"].DEFULT_FONT
        };
        var clickW = config.width || 100;
        var clickH = config.height || 100;
        _this.mLabel = _this.scene.make.text({
            style: Object.assign(labelConfig, config)
        }, false).setInteractive(new Phaser.Geom.Rectangle(-(clickW >> 1), -(clickH >> 1), clickW, clickH), Phaser.Geom.Rectangle.Contains);
        _this.mLabel.on("pointerup", _this.onShowInputHandler, _this);
        _this.add(_this.mLabel);
        _this.mInputConfig = config;
        return _this;
    }
    LabelInput.prototype.setText = function (val) {
        this.mLabel.setText(val);
        if (this.mInputText) {
            this.mInputText.text = val;
        }
    };
    LabelInput.prototype.setOrigin = function (x, y) {
        this.mLabel.setOrigin(x, y);
        if (this.mInputText)
            this.mInputText.setOrigin(x, y);
    };
    LabelInput.prototype.setBlur = function () {
        this.onShowLabel();
    };
    LabelInput.prototype.destroy = function () {
        this.mLabel.destroy();
        this.destroyInput();
        _super.prototype.destroy.call(this);
    };
    LabelInput.prototype.createInputText = function () {
        var _this = this;
        if (this.mInputText) {
            this.mInputText.destroy();
        }
        this.mInputText = new _lib_rexui_lib_plugins_gameobjects_inputtext_InputText__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](this.scene, Object.assign({}, this.mInputConfig));
        this.mInputText.on("textchange", this.onTextChangeHandler, this);
        this.mInputText.node.addEventListener("keypress", function (e) {
            var keycode = e.keyCode || e.which;
            if (keycode === 13) {
                _this.onShowLabel();
            }
        });
    };
    LabelInput.prototype.onShowInputHandler = function () {
        this.createInputText();
        this.remove(this.mLabel);
        this.add(this.mInputText);
        this.mInputText.setText(this.mLabel.text);
        this.mInputText.setFocus();
    };
    LabelInput.prototype.onShowLabel = function () {
        if (this.mInputText) {
            this.mLabel.setText(this.mInputText.text);
            this.destroyInput();
        }
        this.add(this.mLabel);
    };
    LabelInput.prototype.destroyInput = function () {
        if (this.mInputText) {
            this.mInputText.destroy();
            this.mInputText = undefined;
        }
    };
    LabelInput.prototype.onTextChangeHandler = function () {
        this.emit("textchange");
    };
    Object.defineProperty(LabelInput.prototype, "object", {
        get: function () {
            return this.mInputText || this.mLabel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LabelInput.prototype, "text", {
        get: function () {
            if (this.mInputText) {
                return this.mInputText.text;
            }
            return this.mLabel.text;
        },
        enumerable: false,
        configurable: true
    });
    return LabelInput;
}(Phaser.GameObjects.Container));



/***/ }),
/* 297 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Market", function() { return Market; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Market = /** @class */ (function (_super) {
    __extends(Market, _super);
    function Market($world) {
        var _this = _super.call(this) || this;
        _this.world = $world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    Market.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_GET_MARKET_CATEGORIES, this.onGetMarketCategoriesHandler);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_MARKET_QUERY, this.onQueryMarketHandler);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_MARKET_QUERY_COMMODITY_RESOURCE, this.onQueryCommodityResultHandler);
        }
    };
    Market.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    Market.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    Market.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    /**
     * 获取商品分类
     */
    Market.prototype.getMarkCategories = function () {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MARKET_GET_CATEGORIES);
        this.connection.send(packet);
    };
    Market.prototype.queryMarket = function (page, category, subCategory) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MARKET_QUERY);
        var content = packet.content;
        content.page = page;
        content.category = category;
        content.subcategory = subCategory;
        this.connection.send(packet);
    };
    Market.prototype.buyMarketCommodities = function (commodities) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MARKET_BUY_ORDER_COMMODITIES);
        var content = packet.content;
        content.orderCommodities = commodities;
        this.connection.send(packet);
    };
    Market.prototype.queryCommodityResource = function (id, category) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MARKET_QUERY_COMMODITY_RESOURCE);
        var content = packet.content;
        content.id = id;
        content.category = category;
        this.connection.send(packet);
    };
    Market.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    Market.prototype.onGetMarketCategoriesHandler = function (packet) {
        // const content: op_client.IOP_VIRTUAL_WORLD_RES_CLIENT_GET_MARKET_CATEGORIES = ;
        this.mEvent.emit("getMarketCategories", packet.content);
    };
    Market.prototype.onQueryMarketHandler = function (packet) {
        this.mEvent.emit("queryMarket", packet.content);
    };
    Market.prototype.onQueryCommodityResultHandler = function (packet) {
        var content = packet.content;
        this.mEvent.emit("queryCommodityResource", packet.content);
    };
    Object.defineProperty(Market.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    return Market;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 298 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MarketItem", function() { return MarketItem; });
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(113);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var MarketItem = /** @class */ (function (_super) {
    __extends(MarketItem, _super);
    function MarketItem(scene, x, y, dpr, zoom) {
        var _this = _super.call(this, scene, x, y) || this;
        _this.dpr = dpr;
        _this.mBackground = _this.scene.make.image({
            key: "market",
            frame: "border.png"
        }, false).setOrigin(0).setScale(zoom);
        _this.mBorder = _this.scene.make.image({
            x: 3 * dpr * zoom,
            y: 3 * dpr * zoom,
            key: "market",
            frame: "item_border.png"
        }, false).setOrigin(0).setScale(zoom);
        // this.mBorder.x = -42 * this.dpr;
        // this.mBorder.x = -this.mBackground.width / 2 + this.mBorder.width / 2 + (this.mBackground.height - this.mBorder.height / 2);
        // this.mBorder.x = -(this.mBackground.displayWidth - this.mBorder.displayWidth) / 2 + (this.mBackground.displayHeight - this.mBorder.displayHeight) / 2;
        _this.mPropImage = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_0__["DynamicImage"](scene, 0, 0);
        _this.mPropImage.scale = _this.dpr * zoom;
        _this.mNickName = _this.scene.make.text({
            x: 62 * _this.dpr * zoom,
            y: 6 * _this.dpr * zoom,
            style: {
                fontSize: 14 * _this.dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT,
                color: "#3399cc"
            }
        }, false);
        var priceBg = _this.scene.make.image({
            x: 62 * _this.dpr * zoom,
            y: 34 * _this.dpr * zoom,
            // y: 17 * this.dpr,
            key: "market",
            frame: "price_border.png"
        }, false).setOrigin(0).setScale(zoom);
        // priceBg.y = this.mBorder.y + this.mBorder.displayHeight / 2 - priceBg.displayHeight / 2;
        _this.mCoinIcon = _this.scene.make.image({
            x: 48 * _this.dpr * zoom,
            y: 35 * _this.dpr * zoom,
            // y: 17 * this.dpr,
            key: "market",
            frame: "tuding_icon.png"
        }, false).setOrigin(0).setScale(zoom);
        // this.mCoinIcon.y = priceBg.y;
        _this.mPriceText = _this.scene.make.text({
            x: 67 * _this.dpr * zoom,
            y: 38 * _this.dpr * zoom,
            // y: 12 * this.dpr,
            style: {
                fontSize: 14 * _this.dpr * zoom,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT,
                color: "#996600"
            }
        });
        // this.mPriceText.y = this.mCoinIcon.y + this.mPriceText.displayHeight / 2;
        _this.mTagIcon = _this.scene.make.image({
            key: "market",
            frame: "tip_red.png",
            x: -86 * _this.dpr,
            y: -34 * _this.dpr
        }, false).setOrigin(0).setScale(zoom);
        _this.add([_this.mBackground, _this.mBorder, _this.mPropImage, _this.mNickName, priceBg, _this.mCoinIcon, _this.mPriceText]);
        _this.setSize(_this.mBackground.displayWidth, _this.mBackground.displayHeight);
        return _this;
        // this.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.mBackground.width, this.mBackground.height), Phaser.Geom.Rectangle.Contains);
        // this.on("pointerup", this.onPointerUpHandler, this);
    }
    MarketItem.prototype.setProp = function (content) {
        this.mProp = content;
        this.mPropImage.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getOsdRes(content.icon), this, this.onPropLoadComplete);
        this.mPropImage.x = this.mBorder.x + this.mBorder.displayWidth / 2;
        this.mPropImage.y = this.mBorder.y + this.mBorder.displayHeight / 2;
        this.mNickName.setText(content.shortName || content.name);
        this.mPriceText.setText(content.price[0].price.toString());
    };
    MarketItem.prototype.onPropLoadComplete = function () {
        if (this.mPropImage) {
            var texture = this.mPropImage.texture;
            if (texture) {
                texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
            }
        }
    };
    MarketItem.prototype.onPointerUpHandler = function () {
        this.emit("select", this.mProp);
    };
    return MarketItem;
}(Phaser.GameObjects.Container));



/***/ }),
/* 299 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageBoxView", function() { return MessageBoxView; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(114);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(104);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(110);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(116);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var MessageBoxView = /** @class */ (function (_super) {
    __extends(MessageBoxView, _super);
    function MessageBoxView(scene, world) {
        return _super.call(this, scene, world) || this;
    }
    MessageBoxView.prototype.resize = function () {
        var size = this.mWorld.getSize();
        if (this.mWorld.game.device.os.desktop) {
            this.x = size.width >> 1;
            this.y = size.height >> 1;
        }
        else {
            this.x = size.width >> 1;
            this.y = size.height >> 1;
        }
    };
    MessageBoxView.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        if (!this.mInitialized) {
            return;
        }
        this.mButtons = [];
        if (param[0] && param[0].text && param[0].text[0]) {
            this.mTxt.setText(param[0].text[0].text);
        }
        var buttons = param[0].button;
        // buttons.push({text:"测试",});
        if (buttons) {
            var btnWid = 46;
            var btnHei = 24;
            var w = (this.mWidth) / buttons.length;
            var btnSp = this.mScene.make.container(undefined, false);
            btnSp.y = this.mHeight - btnHei - 100;
            for (var i = 0; i < buttons.length; i++) {
                var txt = buttons[i] ? buttons[i].text : "";
                var btn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_1__["NinePatchButton"](this.mScene, 0, 0, btnWid, btnHei, "button_blue", "button_blue", buttons[i].text, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getConfig(), buttons[i]);
                btn.x = i * w + btnWid / 2;
                this.mButtons.push(btn);
                btnSp.add(btn);
            }
            btnSp.setSize((buttons.length - 1) * w + btnWid, btnHei);
            btnSp.x = this.width - btnSp.width >> 1;
            this.add(btnSp);
        }
        this.resize();
    };
    MessageBoxView.prototype.destroy = function () {
        if (this.mTxt) {
            this.mTxt.destroy(true);
        }
        if (this.mButtons && this.mButtons.length > 0) {
            this.mButtons.forEach(function (btn) {
                if (!btn)
                    return;
                btn.destroy(true);
            });
            this.mButtons.length = 0;
            this.mButtons = [];
        }
        this.mTxt = null;
        this.mButtons = null;
        _super.prototype.destroy.call(this);
    };
    Object.defineProperty(MessageBoxView.prototype, "buttons", {
        get: function () {
            return this.mButtons;
        },
        enumerable: false,
        configurable: true
    });
    MessageBoxView.prototype.preload = function () {
        if (!this.mScene) {
            return;
        }
        this.mScene.load.atlas(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getPNG(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getJSON());
        this.mScene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getPNG());
        _super.prototype.preload.call(this);
    };
    MessageBoxView.prototype.init = function () {
        var size = this.mWorld.getSize();
        this.mWidth = 300;
        this.mHeight = 200;
        var border = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__["NinePatch"](this.scene, 0, 0, this.mWidth, this.mHeight, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getConfig());
        border.x = 0;
        border.y = 0;
        this.add(border);
        this.mTxt = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](this.mScene, 0, 0, "", {
            fontSize: "16px",
            wrap: {
                mode: "char",
                width: border.width
            },
            halign: "center"
        });
        this.mTxt.x = -this.mWidth / 2 + 10;
        this.mTxt.y = -this.mHeight / 2 + 10;
        this.add(this.mTxt);
        _super.prototype.init.call(this);
    };
    return MessageBoxView;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 300 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MineSettle", function() { return MineSettle; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var MineSettle = /** @class */ (function (_super) {
    __extends(MineSettle, _super);
    function MineSettle(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    MineSettle.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_MINING_MODE_SHOW_REWARD_PACKAGE, this.onMineSettlePackageHandler);
        }
    };
    MineSettle.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    MineSettle.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    MineSettle.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    MineSettle.prototype.reqMineSettlePacket = function () {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MINING_MODE_STORAGE_REWARD);
        this.connection.send(packet);
    };
    MineSettle.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    Object.defineProperty(MineSettle.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    MineSettle.prototype.onMineSettlePackageHandler = function (packge) {
        var content = packge.content;
        this.mEvent.emit("minesettlepacket", content);
    };
    return MineSettle;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 301 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MineSettlePanel", function() { return MineSettlePanel; });
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(107);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(105);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(110);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(114);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(104);
/* harmony import */ var _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(134);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var MineSettlePanel = /** @class */ (function (_super) {
    __extends(MineSettlePanel, _super);
    function MineSettlePanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "mine_settle";
        return _this;
    }
    MineSettlePanel.prototype.resize = function (w, h) {
        var width = this.scene.cameras.main.width / this.scale;
        var height = this.scene.cameras.main.height / this.scale;
        var zoom = this.mWorld.uiScale;
        _super.prototype.resize.call(this, width, height);
        this.bg.x = width / 2;
        this.bg.y = height / 2;
        this.titleimage.x = width / 2;
        this.titleimage.y = this.bg.y - this.bg.displayHeight / 2 - 8 * this.dpr * zoom;
        this.confirmBtn.x = width / 2;
        this.confirmBtn.y = this.bg.y + 100 * this.dpr * zoom;
        this.titleName.x = width / 2;
        this.titleName.y = this.titleimage.y + 32 * this.dpr * zoom;
        this.blackGraphic.clear();
        this.blackGraphic.fillStyle(0, 0.66);
        this.blackGraphic.fillRect(0, 0, width / this.scale * zoom, height / this.scale * zoom);
        this.mPropGrid.refreshPos(width >> 1, this.bg.y - 5 * this.dpr * zoom);
        this.setSize(width * this.scale * this.scale, height * this.scale * this.scale);
    };
    MineSettlePanel.prototype.show = function (param) {
        this.mShowData = param;
        this.refreshData();
        if (this.mPreLoad)
            return;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        if (this.mShow)
            return;
        if (this.soundGroup && this.soundGroup.open)
            this.playSound(this.soundGroup.open);
        if (!this.mTweening && this.mTweenBoo) {
            this.showTween(true);
        }
        else {
            this.mShow = true;
        }
        this.setInteractive();
        this.addListen();
    };
    MineSettlePanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.confirmBtn.on("click", this.onConfirmBtnClick, this);
    };
    MineSettlePanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.confirmBtn.off("click", this.onConfirmBtnClick, this);
    };
    MineSettlePanel.prototype.preload = function () {
        this.addAtlas(this.key, "minesettle/settlement.png", "minesettle/settlement.json");
        _super.prototype.preload.call(this);
    };
    MineSettlePanel.prototype.init = function () {
        var _this = this;
        var zoom = this.mWorld.uiScale;
        this.bg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__["NinePatch"](this.scene, 0, 0, 293 * this.dpr * zoom, 260 * this.dpr * zoom, this.key, "bg", {
            left: 10,
            top: 10,
            right: 10,
            bottom: 10
        });
        this.blackGraphic = this.scene.make.graphics(undefined, false);
        this.blackGraphic.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.scene.cameras.main.width, this.scene.cameras.main.height), Phaser.Geom.Rectangle.Contains);
        var propFrame = this.scene.textures.getFrame(this.key, "icon_test");
        var capW = (propFrame.width + 20 * this.dpr * zoom);
        var capH = (propFrame.height + 25 * this.dpr * zoom);
        var width = this.scene.cameras.main.width;
        var height = this.scene.cameras.main.height;
        var config = {
            x: 0,
            y: 0,
            table: {
                width: 280 * this.dpr * zoom,
                height: 180 * this.dpr * zoom,
                columns: 5,
                cellWidth: capW,
                cellHeight: capH,
                reuseCellContainer: true,
                cellOriginX: 0,
                cellOriginY: 0
            },
            // background: (<any>this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, .2),
            clamplChildOY: false,
            createCellContainerCallback: function (cell, cellContainer) {
                var scene = cell.scene, item = cell.item;
                if (cellContainer === null) {
                    cellContainer = new MineSettleItem(scene, _this.dpr);
                    _this.add(cellContainer);
                }
                cellContainer.setData({ item: item });
                cellContainer.setItemData(item);
                return cellContainer;
            },
        };
        this.mPropGrid = new _lib_rexui_lib_ui_gridtable_GameGridTable__WEBPACK_IMPORTED_MODULE_6__[/* GameGridTable */ "a"](this.scene, config);
        this.mPropGrid.layout();
        this.mPropGrid.on("cellTap", function (cell) {
            var data = cell.itemData;
            if (data) {
                _this.onSelectItemHandler(data);
            }
        });
        this.titleimage = this.scene.make.image({ x: 0, y: -this.bg.displayWidth * 0.5 - 10 * this.dpr * zoom, key: this.key, frame: "title" }, false);
        this.titleName = this.scene.make.text({
            x: 0, y: this.titleimage.y + 32 * this.dpr * zoom, text: "获得物品",
            style: { fontSize: 15 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT }
        }).setOrigin(0.5, 0.5);
        this.confirmBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_4__["NinePatchButton"](this.scene, 0, 100 * this.dpr * zoom, 90 * this.dpr * zoom, 40 * this.dpr * zoom, this.key, "button", "存入背包", {
            left: 20,
            top: 20,
            right: 20,
            bottom: 20
        });
        this.confirmBtn.setTextStyle({
            color: "#976400",
            fontSize: 16 * this.dpr,
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT
        });
        this.add([this.blackGraphic, this.bg, this.titleimage, this.titleName, this.confirmBtn]);
        this.add(this.mPropGrid.table);
        this.resize(0, 0);
        _super.prototype.init.call(this);
    };
    MineSettlePanel.prototype.setMineSettlePacket = function (content) {
        if (this.mInitialized) {
            this.mPropGrid.setItems(content.items);
        }
    };
    MineSettlePanel.prototype.destroy = function () {
        if (this.mPropGrid)
            this.mPropGrid.destroy();
        if (this.confirmBtn)
            this.confirmBtn.destroy();
        this.mPropGrid = null;
        this.confirmBtn = null;
        _super.prototype.destroy.call(this);
    };
    MineSettlePanel.prototype.refreshData = function () {
        var settleData = this.getData("settleData");
        if (settleData)
            this.setMineSettlePacket(settleData);
    };
    MineSettlePanel.prototype.onSelectItemHandler = function (data) {
    };
    MineSettlePanel.prototype.onConfirmBtnClick = function (pointer) {
        if (!this.checkPointerDis(pointer))
            return;
        this.emit("hide");
    };
    MineSettlePanel.prototype.checkPointerDis = function (pointer) {
        if (!this.mWorld)
            return true;
        return Math.abs(pointer.downX - pointer.upX) < 10 * this.mWorld.uiRatio * this.mWorld.uiScale &&
            Math.abs(pointer.downY - pointer.upY) < 10 * this.mWorld.uiRatio * this.mWorld.uiScale;
    };
    return MineSettlePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_2__["BasePanel"]));

var MineSettleItem = /** @class */ (function (_super) {
    __extends(MineSettleItem, _super);
    function MineSettleItem(scene, dpr) {
        var _this = _super.call(this, scene) || this;
        _this.dpr = dpr;
        _this.icon = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__["DynamicImage"](scene, 0, 0);
        _this.itemCount = _this.scene.make.text({
            text: "600",
            style: {
                fontSize: 18,
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT
            }
        }, false);
        _this.itemCount.setOrigin(0.5, 0);
        _this.icon.setOrigin(0, 0);
        _this.icon.setScale(_this.dpr);
        // this.icon.setSize(50, 50);
        _this.itemCount.setPosition(0, _this.icon.height);
        _this.add(_this.icon);
        _this.add(_this.itemCount);
        return _this;
    }
    MineSettleItem.prototype.setItemData = function (data) {
        var _this = this;
        this.itemData = data;
        this.itemCount.setFontSize(this.dpr * 14);
        this.itemCount.text = data.count + "";
        var url = _utils_resUtil__WEBPACK_IMPORTED_MODULE_5__[/* Url */ "h"].getOsdRes(data.display.texturePath);
        this.icon.load(url, this, function () {
            ///  this.icon.setDisplaySize(33 * this.dpr, 33 * this.dpr);
            _this.icon.setScale(33 * _this.dpr / _this.icon.width);
            _this.icon.setPosition(0, 3 * _this.dpr);
            _this.itemCount.setPosition(_this.icon.displayWidth * 0.5, _this.icon.x + _this.icon.displayHeight + 3 * _this.dpr);
        });
    };
    MineSettleItem.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.icon)
            this.icon.destroy();
        if (this.itemCount)
            this.itemCount.destroy();
        this.itemData = null;
        this.icon = null;
        this.itemCount = null;
        this.scene = null;
    };
    return MineSettleItem;
}(Phaser.GameObjects.Container));


/***/ }),
/* 302 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NpcDialogue", function() { return NpcDialogue; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var NpcDialogue = /** @class */ (function (_super) {
    __extends(NpcDialogue, _super);
    function NpcDialogue(world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    NpcDialogue.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
        }
    };
    NpcDialogue.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    NpcDialogue.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    NpcDialogue.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    NpcDialogue.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    Object.defineProperty(NpcDialogue.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    return NpcDialogue;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 303 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NpcDialoguePanel", function() { return NpcDialoguePanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
/* harmony import */ var _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(120);
/* harmony import */ var _Handler_Handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(140);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var NpcDialoguePanel = /** @class */ (function (_super) {
    __extends(NpcDialoguePanel, _super);
    function NpcDialoguePanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "commonkey";
        _this.listItems = [];
        return _this;
    }
    NpcDialoguePanel.prototype.resize = function (w, h) {
        var zoom = this.mWorld.uiScale;
        var width = this.scene.cameras.main.width / zoom;
        var height = this.scene.cameras.main.height / zoom;
        var cheight = 177 * this.dpr * zoom;
        _super.prototype.resize.call(this, width, height);
        this.x = width / 2;
        this.y = height / 2;
        this.content.setPosition(0, (height - cheight) / 2);
        this.setSize(width, height);
    };
    NpcDialoguePanel.prototype.preload = function () {
        this.addAtlas(this.key, "common/ui_base.png", "common/ui_base.json");
        _super.prototype.preload.call(this);
    };
    NpcDialoguePanel.prototype.init = function () {
        var zoom = this.mWorld.uiScale;
        var width = this.scene.cameras.main.width / zoom;
        var height = this.scene.cameras.main.height / zoom;
        var cheight = 177 * this.dpr * zoom;
        this.content = this.scene.make.container({ x: 0 * this.dpr * zoom, y: (height - cheight) / 2, width: width, height: cheight }, false);
        this.content.setSize(width, cheight);
        var bg = this.scene.make.image({ x: 0, y: 0, key: this.key, frame: "menu_bg_l" });
        bg.scaleY = zoom;
        bg.texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
        bg.displayWidth = width;
        bg.displayHeight = cheight;
        var whiteGraphic = this.scene.make.graphics(undefined, false);
        var graphicWidth = width - 30 * this.dpr * zoom;
        var graphicHeight = 122 * this.dpr * zoom;
        whiteGraphic.setPosition(-graphicWidth >> 1, -graphicHeight * 0.5 + 13 * this.dpr * zoom);
        whiteGraphic.clear();
        whiteGraphic.fillStyle(0xffffff, 1);
        whiteGraphic.fillRoundedRect(0, 0, graphicWidth, graphicHeight, 8 * this.dpr * zoom);
        var iconPosx = -width * 0.5 + 38 * this.dpr * zoom;
        var iconPosy = -cheight * 0.5 + 25 * this.dpr * zoom;
        this.npcIcon = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__["DynamicImage"](this.scene, iconPosx, iconPosy);
        var nameBg = this.scene.make.image({ x: iconPosx + 100 * this.dpr * zoom, y: iconPosy, key: this.key, frame: "name_bg" });
        this.npcName = this.scene.make.text({
            x: nameBg.x - (48 * this.dpr * zoom), y: nameBg.y, text: "尼古拉斯.赵二",
            style: { fontSize: 15 * this.dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT }
        }).setOrigin(0, 0.5);
        var closeBtn = new _lib_rexui_lib_ui_button_Button__WEBPACK_IMPORTED_MODULE_3__[/* Button */ "a"](this.scene, this.key, "close_1", "close_1");
        closeBtn.setPosition(width * 0.5 - 30 * this.dpr * zoom, -cheight * 0.5 + 10 * this.dpr * zoom);
        closeBtn.on("Tap", this.onCloseHandler, this);
        this.content.add([bg, whiteGraphic, this.npcIcon, nameBg, this.npcName, closeBtn]);
        this.add(this.content);
        this.resize(0, 0);
        _super.prototype.init.call(this);
        this.layoutItem(undefined);
    };
    NpcDialoguePanel.prototype.layoutItem = function (arr) {
        arr = ["聊天", "购买物品", "威威"];
        var len = arr.length;
        var scaleRadio = (len > 4 ? 2 : 1);
        var zoom = this.mWorld.uiScale;
        var height = 177 * this.dpr * zoom;
        var width = 295 * this.dpr * zoom;
        var cheight = 27 * this.dpr * zoom;
        var cwidth = width / scaleRadio;
        var offsetY = 4 * this.dpr * zoom;
        if (len === 2)
            offsetY = 15 * this.dpr * zoom;
        else if (len === 3)
            offsetY = 10 * this.dpr * zoom;
        var posX = 0;
        var posy = (124 * this.dpr * zoom - (offsetY + cheight) * (len < 4 ? len : 4) - offsetY) / 2 - 42 * this.dpr * zoom;
        for (var i = 0; i < len; i++) {
            var item = new NpcDialogueItem(this.scene, this.dpr, zoom, this.key);
            var x = (width - cwidth) * 0.5 * (i < 4 ? -1 : 1);
            var y = posy + cheight * 0.5 + (cheight + offsetY) * (i % 4);
            item.setItemSize(cwidth, cheight);
            item.setPosition(x, y);
            item.setItemData(arr[i], new _Handler_Handler__WEBPACK_IMPORTED_MODULE_4__[/* Handler */ "a"](this, this.onItemHandler));
            this.content.add(item);
        }
    };
    NpcDialoguePanel.prototype.onItemHandler = function (item) {
        if (this.curSelectItem)
            this.curSelectItem.select = false;
        item.select = true;
        this.curSelectItem = item;
    };
    NpcDialoguePanel.prototype.onCloseHandler = function () {
        this.hide();
    };
    return NpcDialoguePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));

var NpcDialogueItem = /** @class */ (function (_super) {
    __extends(NpcDialogueItem, _super);
    function NpcDialogueItem(scene, dpr, zoom, key) {
        var _this = _super.call(this, scene) || this;
        _this.dpr = 0;
        _this.zoom = 0;
        _this.zoom = zoom;
        _this.dpr = dpr;
        _this.selectBg = _this.scene.make.image({ x: 0, y: 0, key: key, frame: "select_bg" });
        _this.arrImg = _this.scene.make.image({ x: -_this.selectBg.width * 0.5, y: 0, key: key, frame: "arrow_r" });
        _this.content = _this.scene.make.text({
            x: 0, y: 0, text: "购买物品",
            style: { color: "#000000", fontSize: 15 * dpr, fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT }
        }).setOrigin(0, 0.5);
        _this.add([_this.selectBg, _this.arrImg, _this.content]);
        _this.width = _this.selectBg.width;
        _this.height = _this.selectBg.height;
        _this.on("pointerdown", _this.onClickHandler, _this);
        return _this;
    }
    NpcDialogueItem.prototype.setItemData = function (data, handler) {
        this.itemData = data;
        this.content.text = data;
        this.handler = handler;
        this.select = false;
    };
    Object.defineProperty(NpcDialogueItem.prototype, "select", {
        set: function (value) {
            this.selectBg.visible = value;
        },
        enumerable: false,
        configurable: true
    });
    NpcDialogueItem.prototype.setItemSize = function (width, height) {
        _super.prototype.setSize.call(this, width, height);
        this.selectBg.displayWidth = width;
        this.arrImg.x = -width * 0.5 * 0.9;
        this.content.x = this.arrImg.x + 20 * this.dpr * this.zoom;
        this.removeInteractive();
        this.setInteractive(new Phaser.Geom.Rectangle(0, 0, width, height), Phaser.Geom.Rectangle.Contains);
    };
    NpcDialogueItem.prototype.onClickHandler = function () {
        if (this.handler)
            this.handler.runWith(this);
    };
    return NpcDialogueItem;
}(Phaser.GameObjects.Container));


/***/ }),
/* 304 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaMessageBoxPanel", function() { return PicaMessageBoxPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(110);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(114);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(116);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var PicaMessageBoxPanel = /** @class */ (function (_super) {
    __extends(PicaMessageBoxPanel, _super);
    function PicaMessageBoxPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "pica_message_box";
        _this.disInteractive();
        return _this;
    }
    PicaMessageBoxPanel.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        if (!this.mInitialized) {
            return;
        }
        this.mButtons = [];
        if (param[0] && param[0].text && param[0].text[0]) {
            this.mText.setText(param[0].text[0].text);
            this.mText.x = -this.mText.width / 2;
            this.mText.y = -this.mText.height;
        }
        var buttons = param[0].button;
        if (buttons) {
            var btnWid = 114 * this.dpr;
            var btnHei = 40 * this.dpr;
            var w = (this.width - 42 * this.dpr) / buttons.length;
            // const mButtonsContainer = this.mScene.make.container(undefined, false);
            this.mButtonContaier.y = this.height / 2 - btnHei;
            var frame = this.scene.textures.getFrame(this.key, "yellow_btn_normal");
            if (!frame) {
                return;
            }
            var config = {
                left: 13 * this.dpr,
                top: 13 * this.dpr,
                bottom: frame.width - 2 - 13 * this.dpr,
                right: frame.height - 2 - 13 * this.dpr
            };
            var totalW = 0;
            for (var i = 0; i < buttons.length; i++) {
                var txt = buttons[i] ? buttons[i].text : "";
                var btn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__["NinePatchButton"](this.mScene, 0, 0, btnWid, btnHei, this.key, i === 0 ? "yellow_btn" : "red_btn", buttons[i].text, config, buttons[i]);
                btn.setTextStyle({
                    fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT,
                    fontSize: 16 * this.dpr
                });
                btn.x = i * w + btnWid / 2;
                totalW += i * w + btnWid / 2;
                this.mButtons.push(btn);
                btn.on("click", this.onClickHandler, this);
            }
            this.mButtonContaier.add(this.mButtons);
            // btnSp.setSize((buttons.length - 1) * w + btnWid, btnHei);
            this.mButtonContaier.x = -totalW / 2;
        }
        this.resize(0, 0);
    };
    PicaMessageBoxPanel.prototype.resize = function (w, h) {
        var width = this.scene.cameras.main.width;
        var height = this.scene.cameras.main.height;
        this.x = width / 2;
        this.y = height / 2;
        _super.prototype.resize.call(this, w, h);
    };
    PicaMessageBoxPanel.prototype.preload = function () {
        this.addAtlas(this.key, "pica_message_box/pica_message_box.png", "pica_message_box/pica_message_box.json");
        _super.prototype.preload.call(this);
    };
    PicaMessageBoxPanel.prototype.init = function () {
        var frame = this.scene.textures.getFrame(this.key, "bg");
        var background = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_1__["NinePatch"](this.scene, 0, 0, 286 * this.dpr, frame.height, this.key, "bg", {
            left: 22 * this.dpr,
            top: frame.height,
            right: 22 * this.dpr,
            bottom: 0
        });
        this.setSize(background.width, background.height);
        this.mButtonContaier = this.scene.make.container(undefined, false);
        var title = this.scene.make.image({
            y: -background.height / 2,
            key: this.key,
            frame: "title"
        });
        this.mTitleLabel = this.scene.make.text({
            y: title.y - 6 * this.dpr,
            style: {
                fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT,
                fontSize: 16 * this.dpr,
                color: "#3366cc"
            }
        }, false).setOrigin(0.5);
        this.mText = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](this.mScene, 0, 0, "", {
            fontSize: 14 * this.dpr + "px",
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT,
            color: "#000000",
            origin: { x: 0.5, y: 0.5 },
            wrap: {
                mode: "char",
                width: this.width
            },
            align: "center"
        });
        // this.mText.x = -this.mWidth / 2 + 10;
        // this.mText.y = -this.mHeight / 2 + 10;
        this.add([background, title, this.mTitleLabel, this.mText, this.mButtonContaier]);
        _super.prototype.init.call(this);
        this.resize(0, 0);
    };
    PicaMessageBoxPanel.prototype.onClickHandler = function (pointer, gameobject) {
        if (!gameobject) {
            return;
        }
        var btn = gameobject.getBtnData();
        if (!btn) {
            return;
        }
        this.emit("click", btn);
    };
    return PicaMessageBoxPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 305 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaNoticePanel", function() { return PicaNoticePanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(116);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var PicaNoticePanel = /** @class */ (function (_super) {
    __extends(PicaNoticePanel, _super);
    function PicaNoticePanel(scene, world) {
        return _super.call(this, scene, world) || this;
    }
    PicaNoticePanel.prototype.show = function (param) {
        var _this = this;
        this.mShowData = param;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        if (param && param.length > 0) {
            var text = param[0].text;
            if (this.mContent) {
                this.mContent.setText(text[0].text);
            }
            var width = this.scene.cameras.main.width;
            // this.view.alpha = 0;
            this.scene.tweens.timeline({
                targets: this,
                duration: 500,
                tweens: [{
                        y: "-=" + 20 * this.dpr,
                        ease: "Bounce.easeOut",
                    }, {
                        delay: 2000,
                        y: "-=" + 20 * this.dpr,
                        ease: "Linear",
                        alpha: 0
                    }],
                onComplete: function () {
                    _this.emit("close");
                }
            });
        }
    };
    PicaNoticePanel.prototype.resize = function () {
        this.x = this.scene.cameras.main.width / 2;
        this.y = 170 * this.dpr;
    };
    PicaNoticePanel.prototype.preload = function () {
        this.addImage("pica_notice_bg", "pica_notice/bg.png");
        _super.prototype.preload.call(this);
    };
    PicaNoticePanel.prototype.init = function () {
        var bg = this.scene.make.image({
            key: "pica_notice_bg"
        }, false);
        this.mContent = new _lib_rexui_lib_plugins_gameobjects_text_bbcodetext_BBCodeText_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](this.mScene, 0, 0, "", {
            fontSize: 16 * this.dpr + "px",
            fontFamily: _utils_font__WEBPACK_IMPORTED_MODULE_2__[/* Font */ "a"].DEFULT_FONT,
            stroke: "#000000",
            strokeThickness: 1 * this.dpr,
            align: "center",
            textMask: false,
            shadow: {
                offsetX: 0,
                offsetY: 0,
                color: "#000",
                blur: 4,
                stroke: true,
                fill: true
            },
            wrap: {
                mode: "char",
                width: bg.width * this.scale - 12 * this.dpr
            }
        }).setOrigin(0.5, 0.5);
        this.mContent.setFontStyle("bold");
        this.add([bg, this.mContent]);
        this.mWorld.uiManager.getUILayerManager().addToToolTipsLayer(this);
        _super.prototype.init.call(this);
        this.resize();
    };
    return PicaNoticePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 306 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoomList", function() { return RoomList; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var RoomList = /** @class */ (function (_super) {
    __extends(RoomList, _super);
    function RoomList($world) {
        var _this = _super.call(this) || this;
        _this.world = $world;
        _this.mEvent = new Phaser.Events.EventEmitter();
        return _this;
    }
    RoomList.prototype.register = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.addPacketListener(this);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_ROOM_LIST, this.onRoomListHandler);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_GET_PLAYER_ENTER_ROOM_HISTORY, this.onMyRoomListHandler);
            this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_ENTER_ROOM, this.onEnterRoomResultHandler);
        }
    };
    RoomList.prototype.unregister = function () {
        var connection = this.connection;
        if (connection) {
            this.connection.removePacketListener(this);
        }
    };
    RoomList.prototype.on = function (event, fn, context) {
        this.mEvent.on(event, fn, context);
    };
    RoomList.prototype.off = function (event, fn, context) {
        this.mEvent.off(event, fn, context);
    };
    RoomList.prototype.destroy = function () {
        this.unregister();
        this.mEvent.destroy();
    };
    RoomList.prototype.sendGetRoomList = function () {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_GET_ROOM_LIST);
        this.connection.send(packet);
    };
    RoomList.prototype.sendMyHistory = function () {
        this.connection.send(new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_GET_PLAYER_ENTER_ROOM_HISTORY));
    };
    RoomList.prototype.sendEnterRoom = function (roomID, password) {
        var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_ENTER_ROOM);
        var content = packet.content;
        content.roomId = roomID;
        content.password = password;
        this.connection.send(packet);
    };
    RoomList.prototype.onRoomListHandler = function (packet) {
        this.mEvent.emit("roomList", packet.content);
    };
    RoomList.prototype.onMyRoomListHandler = function (packet) {
        this.mEvent.emit("myRoomList", packet.content);
    };
    RoomList.prototype.onEnterRoomResultHandler = function (packet) {
        this.mEvent.emit("enterRoomResult", packet);
    };
    Object.defineProperty(RoomList.prototype, "connection", {
        get: function () {
            if (this.world) {
                return this.world.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    return RoomList;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 307 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShopMediator", function() { return ShopMediator; });
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(109);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ShopPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(308);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var ShopMediator = /** @class */ (function (_super) {
    __extends(ShopMediator, _super);
    function ShopMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this._perPage = 50;
        _this.isEnd = false;
        _this.world = world;
        _this.mScene = scene;
        _this.mLayerManager = layerManager;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__[/* UIType */ "a"].Normal;
        return _this;
    }
    ShopMediator.prototype.isSceneUI = function () {
        return false;
    };
    ShopMediator.prototype.resize = function () {
        if (this.mView)
            return this.mView.resize();
    };
    ShopMediator.prototype.getView = function () {
        return this.mView;
    };
    ShopMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow() || this.mShow) {
            return;
        }
        this.mView = new _ShopPanel__WEBPACK_IMPORTED_MODULE_3__["ShopPanel"](this.mScene, this.world);
        this.mView.show(param);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].QUERY_PACKAGE, this.queryPackageHandler, this);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].SYNC_USER_BALANCE, this.onSyncUserBalanceHandler, this);
        this.requestVirtualWorldQueryPackage(param[0].id, 1, _ShopPanel__WEBPACK_IMPORTED_MODULE_3__["ShopPanel"].ShopSlotCount);
        this.mLayerManager.addToUILayer(this.mView);
        this.world.uiManager.checkUIState(ShopMediator.NAME, false);
        _super.prototype.show.call(this, param);
    };
    ShopMediator.prototype.update = function (param) {
        if (this.mView)
            this.mView.update(param);
    };
    ShopMediator.prototype.hide = function () {
        if (!this.mView)
            return;
        this.mShow = false;
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].QUERY_PACKAGE, this.queryPackageHandler, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].SYNC_USER_BALANCE, this.onSyncUserBalanceHandler, this);
        this.mView.hide();
        this.mView = null;
        this.world.uiManager.checkUIState(ShopMediator.NAME, true);
        _super.prototype.hide.call(this);
    };
    ShopMediator.prototype.destroy = function () {
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].QUERY_PACKAGE, this.queryPackageHandler, this);
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_0__[/* MessageType */ "a"].SYNC_USER_BALANCE, this.onSyncUserBalanceHandler, this);
        this.world = null;
        this.mScene = null;
        this._curPage = 0;
        this.fetching = false;
        this.isEnd = false;
        _super.prototype.destroy.call(this);
    };
    ShopMediator.prototype.isShow = function () {
        return this.mView ? this.mView.isShow() : false;
    };
    ShopMediator.prototype.requestVirtualWorldQueryPackage = function (bagId, page, perPage) {
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_QUERY_PACKAGE);
        var content = pkt.content;
        content.id = bagId;
        content.page = page;
        content.perPage = perPage;
        this.world.connection.send(pkt);
    };
    ShopMediator.prototype.queryShopProps = function (page, perPage) {
        if (page === void 0) { page = 1; }
        if (perPage === void 0) { perPage = 50; }
        if (!!this.mParam === false)
            return;
        this.fetching = true;
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_QUERY_PACKAGE);
        var content = pkt.content;
        content.id = this.mParam[0].id;
        content.page = page;
        content.perPage = perPage;
        this.world.connection.send(pkt);
    };
    ShopMediator.prototype.queryPackageHandler = function (data) {
        if (data.items.length > 0 && data.id === this.mParam[0].id) {
            this.mView.setDataList(data);
            //  this.mView.addItems(data.items);
        }
        else {
            this.isEnd = true;
        }
        this.fetching = false;
    };
    ShopMediator.prototype.onShowItemHandler = function (item) {
        var prices = item.price;
        for (var _i = 0, prices_1 = prices; _i < prices_1.length; _i++) {
            var price = prices_1[_i];
            if (price.coinType === pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].CoinType.TU_DING_COIN) {
                // if (price.price > this.mView.price) {
                // todo alert
                // Globals.PromptManager.showAlert("图钉不足，是否前往充值？", this.onPayTuDingHandler, this, AlertmView.OK | AlertmView.CANCEL);
                // return;
                // }
            }
        }
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_TARGET_UI);
        var content = pkt.content;
        content.uiId = this.mParam[0].id;
        content.componentId = item.id;
        this.world.connection.send(pkt);
        // Globals.SocketManager.send(pkt);
    };
    ShopMediator.prototype.syncUserBalance = function () {
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_SYNC_USER_BALANCE);
        this.world.connection.send(pkt);
        // Globals.SocketManager.send(pkt);
    };
    ShopMediator.prototype.onChangeIndex = function (rate) {
        if (rate >= 0.9 && this.fetching === false && this.isEnd === false) {
            this._curPage++;
            this.queryShopProps(this._curPage);
        }
    };
    ShopMediator.prototype.onSyncUserBalanceHandler = function (balance) {
        if (!!this.mView === false) {
            return;
        }
        // this.mView.setUserBalance(balance);
    };
    ShopMediator.prototype.onPayTuDingHandler = function () {
        // shell.openExternal("https://www.tooqing.com/recharge");
    };
    ShopMediator.NAME = "ShopMediator";
    return ShopMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__[/* BaseMediator */ "a"]));



/***/ }),
/* 308 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShopPanel", function() { return ShopPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _shop_itemSlot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(331);
/* harmony import */ var _ShopMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(307);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(110);
/* harmony import */ var _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(121);
/* harmony import */ var _ui_mediatorType__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(122);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var ShopPanel = /** @class */ (function (_super) {
    __extends(ShopPanel, _super);
    function ShopPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mWorld = world;
        return _this;
    }
    ShopPanel.prototype.resize = function (wid, hei) {
        var size = this.mWorld.getSize();
        if (this.mWorld.game.device.os.desktop) {
            this.x = size.width + wid >> 1;
            this.y = size.height + hei >> 1;
        }
        else {
            if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
                this.x = size.width + wid >> 1;
                this.y = size.height + hei >> 1;
            }
            else {
                this.x = size.width + wid >> 1;
                this.y = size.height + hei >> 1;
            }
        }
        this.scale = this.mWorld.uiScale;
    };
    ShopPanel.prototype.setDataList = function (value) {
        this.mShopData = value;
        if (!this.mInitialized) {
            return;
        }
        this.refreshDataList();
    };
    ShopPanel.prototype.destroy = function () {
        if (this.mShopItemSlotList) {
            this.mShopItemSlotList.forEach(function (slot) {
                if (slot)
                    slot.destroy();
            });
            this.mShopItemSlotList.length = 0;
            this.mShopItemSlotList = null;
        }
        this.mShopData = null;
        this.mInitialized = false;
        _super.prototype.destroy.call(this);
    };
    ShopPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.mClsBtn.on("pointerup", this.shopMedClose, this);
    };
    ShopPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mClsBtn.off("pointerup", this.shopMedClose, this);
    };
    ShopPanel.prototype.preload = function () {
        if (!this.mScene) {
            return;
        }
        this.mScene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getPNG());
        this.mScene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getPNG());
        this.mScene.load.atlas("itemChose", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/bag/itemChose.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/bag/itemChose.json"));
        this.mScene.load.atlas("clsBtn", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.json"));
        this.mScene.load.atlas("shopView", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/shop/shopView.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/shop/shopView.json"));
        _super.prototype.preload.call(this);
    };
    ShopPanel.prototype.loadComplete = function (loader, totalComplete, totalFailed) {
        var selectFramesObj = this.mScene.textures.get("itemChose").frames;
        var tmpSelectFrames = [];
        for (var key in selectFramesObj) {
            if (key === "__BASE")
                continue;
            var frame = selectFramesObj[key];
            if (!frame)
                continue;
            tmpSelectFrames.push(key);
        }
        // 手动把json配置中的frames给予anims
        this.mScene.anims.create({
            key: "itemSelectFrame",
            frames: this.mScene.anims.generateFrameNumbers("itemChose", { start: 0, end: 8, frames: tmpSelectFrames }),
            frameRate: 33,
            yoyo: true,
            repeat: -1
        });
        _super.prototype.loadComplete.call(this, loader, totalComplete, totalFailed);
    };
    ShopPanel.prototype.init = function () {
        var size = this.mWorld.getSize();
        this.mBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__["NinePatch"](this.scene, 0, 0, 500, 350, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getConfig());
        this.mBg.x = 0;
        this.mBg.y = 0;
        this.setSize(this.mBg.width, this.mBg.height);
        this.addAt(this.mBg, 0);
        this.mBorder = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_4__["NinePatch"](this.scene, 0, 0, this.mBg.width - 10, this.mBg.height - 30, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getConfig());
        this.mBorder.x = this.mBg.x;
        this.mBorder.y = this.mBg.y + 10;
        this.addAt(this.mBorder, 1);
        if (this.mWorld.game.device.os.desktop) {
            this.x = size.width >> 1;
            this.y = size.height - 300;
        }
        else {
            if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
                this.x = size.width >> 1;
                this.y = size.height >> 1;
            }
            else {
                this.x = size.width >> 1;
                this.y = size.height >> 1;
            }
        }
        var titleCon = this.mScene.make.sprite(undefined, false);
        titleCon.setTexture("shopView", "shopView_titleIcon");
        titleCon.x = (-this.mBg.width >> 1) + 35;
        titleCon.y = -this.mBg.height >> 1;
        this.add(titleCon);
        var titleTF = this.mScene.make.text(undefined, false);
        titleTF.setFontFamily("Tahoma");
        titleTF.setFontStyle("bold");
        titleTF.setFontSize(20);
        titleTF.setText("内购商城");
        titleTF.x = titleCon.x + titleCon.width - 10;
        titleTF.y = titleCon.y - (titleTF.height >> 1);
        this.add(titleTF);
        this.mShopItemSlotList = [];
        var itemSlot;
        var tmpX;
        var tmpY;
        for (var i = 0; i < 20; i++) {
            tmpX = (i % 5) * 88 - this.mBg.width / 2 + 75;
            tmpY = Math.floor(i / 5) * 82 - this.mBg.height / 2 + 72;
            itemSlot = new _shop_itemSlot__WEBPACK_IMPORTED_MODULE_2__["ShopItemSlot"](this.mScene, this.mWorld, this, tmpX, tmpY, "shopView", "ui/shop/shopView.png", "ui/shop/shopView.json", "shopView_bagSlot", "itemSelectFrame");
            itemSlot.createUI();
            this.mShopItemSlotList.push(itemSlot);
        }
        this.mClsBtn = new _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_5__["IconBtn"](this.mScene, this.mWorld, {
            key: _ui_mediatorType__WEBPACK_IMPORTED_MODULE_6__["UIMediatorType"].Close_Btn, bgResKey: "clsBtn", bgTextures: ["btn_normal", "btn_over", "btn_click"],
            iconResKey: "", iconTexture: "", scale: 1, pngUrl: "ui/shop/shopView.png", jsonUrl: "ui/shop/shopView.json"
        });
        this.mClsBtn.x = (this.width >> 1) - 65;
        this.mClsBtn.y = -this.height >> 1;
        this.mClsBtn.scaleX = this.mClsBtn.scaleY = 2;
        this.add(this.mClsBtn);
        this.mWorld.uiManager.getUILayerManager().addToToolTipsLayer(this);
        // 异步加载过程中会导致数据过来，面板仍然没有加载完毕，所以缓存数据等ui加载完毕再做显示
        if (this.mShopData) {
            this.refreshDataList();
        }
        _super.prototype.init.call(this);
    };
    ShopPanel.prototype.tweenComplete = function (show) {
        _super.prototype.tweenComplete.call(this, show);
        if (show)
            this.mWorld.uiManager.getMediator(_ShopMediator__WEBPACK_IMPORTED_MODULE_3__["ShopMediator"].NAME).resize();
    };
    ShopPanel.prototype.refreshDataList = function () {
        if (!this.mShopData) {
            // Logger.getInstance().error("this.mDataList is undefiend");
            return;
        }
        var len = ShopPanel.ShopSlotCount;
        var item;
        for (var i = 0; i < len; i++) {
            item = this.mShopItemSlotList[i];
            if (!item)
                continue;
            item.shopDataChange(this.mShopData.items[i], this.mShopData.id);
        }
    };
    ShopPanel.prototype.shopMedClose = function () {
        var med = this.mWorld.uiManager.getMediator(_ShopMediator__WEBPACK_IMPORTED_MODULE_3__["ShopMediator"].NAME);
        med.hide();
    };
    ShopPanel.ShopSlotCount = 20;
    return ShopPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 309 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserInfoMediator", function() { return UserInfoMediator; });
/* harmony import */ var _UserInfoPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(310);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(109);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var UserInfoMediator = /** @class */ (function (_super) {
    __extends(UserInfoMediator, _super);
    function UserInfoMediator(mLayerManager, mScene, world) {
        var _this = _super.call(this) || this;
        _this.mLayerManager = mLayerManager;
        _this.mScene = mScene;
        _this.world = world;
        return _this;
    }
    UserInfoMediator.prototype.getView = function () {
        return this.mView;
    };
    UserInfoMediator.prototype.hide = function () {
        this.mShow = false;
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].SCENE_BACKGROUND_CLICK, this.onClosePanel, this);
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
        }
    };
    UserInfoMediator.prototype.isSceneUI = function () {
        return false;
    };
    UserInfoMediator.prototype.isShow = function () {
        if (!this.mView)
            return false;
        return this.mView.isShow();
    };
    UserInfoMediator.prototype.resize = function () {
        if (this.mView)
            this.mView.resize();
    };
    UserInfoMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        if (!param || param.length === 0) {
            return;
        }
        this.mView = new _UserInfoPanel__WEBPACK_IMPORTED_MODULE_0__["UserInfoPanel"](this.mScene, this.world);
        this.mView.show(param[0]);
        this.mLayerManager.addToUILayer(this.mView);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_1__[/* MessageType */ "a"].SCENE_BACKGROUND_CLICK, this.onClosePanel, this);
        _super.prototype.show.call(this, param);
    };
    UserInfoMediator.prototype.destroy = function () {
        if (this.mView)
            this.mView.destroy();
    };
    UserInfoMediator.prototype.update = function (param) {
        if (this.mView)
            this.mView.update(param);
    };
    UserInfoMediator.prototype.onClosePanel = function () {
        this.hide();
    };
    UserInfoMediator.NAME = "UserInfoMediator";
    return UserInfoMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__[/* BaseMediator */ "a"]));



/***/ }),
/* 310 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserInfoPanel", function() { return UserInfoPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(104);
/* harmony import */ var _lib_rexui_lib_plugins_gameobjects_ninepatch_NinePatch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(136);
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(107);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(114);
/* harmony import */ var _UserInfoMediator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(309);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var UserInfoPanel = /** @class */ (function (_super) {
    __extends(UserInfoPanel, _super);
    function UserInfoPanel(scene, worldService) {
        var _this = _super.call(this, scene, worldService) || this;
        _this.mBadgeImages = [];
        _this.mWorld = worldService;
        return _this;
    }
    UserInfoPanel.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        this.setData("data", param);
        this.setInfo(param);
    };
    UserInfoPanel.prototype.hide = function () {
        this.clearBadge();
        _super.prototype.hide.call(this);
    };
    UserInfoPanel.prototype.resize = function (wid, hei) {
        var size = this.mWorld.getSize();
        this.x = size.width - this.width - 8;
        this.y = size.height - 100 - (this.height);
    };
    UserInfoPanel.prototype.setInfo = function (data) {
        var _this = this;
        if (!this.mInitialized || !data)
            return;
        if (data.actors.length === 0) {
            return;
        }
        var actor = data.actors[0];
        this.mWorld.httpService.userDetail(actor.platformId).then(function (response) {
            if (response.code === 200) {
                var resData = response.data;
                if (resData) {
                    _this.mActor.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getOsdRes("show/" + resData.username + ".png"), _this, undefined, _this.loadDefaultAvatar);
                    _this.mNickName.setText(resData.nickname);
                    _this.mLv.setText(resData.level);
                }
            }
        });
        this.mWorld.httpService.badgecards(actor.platformId).then(function (response) {
            if (response.code === 200) {
                _this.createBadge(response.data);
            }
        });
        this.updateFollwer(actor.platformId);
    };
    UserInfoPanel.prototype.destroy = function () {
        if (this.mActor) {
            this.mActor.destroy(true);
            this.mActor = null;
        }
        if (this.mBadgeImages) {
            this.mBadgeImages.forEach(function (image) {
                image.destroy(true);
                image = null;
            });
            this.mBadgeImages = [];
        }
        if (this.mNickName) {
            this.mNickName.destroy(true);
            this.mNickName = null;
        }
        if (this.mLv) {
            this.mLv.destroy(true);
            this.mLv = null;
        }
        if (this.mFollwerBtn) {
            this.mFollwerBtn.destroy(true);
            this.mFollwerBtn = null;
        }
        this.mWorld = null;
        _super.prototype.destroy.call(this);
    };
    UserInfoPanel.prototype.preload = function () {
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getPNG());
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getPNG());
        this.scene.load.atlas(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getPNG(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getJSON());
        _super.prototype.preload.call(this);
    };
    UserInfoPanel.prototype.init = function () {
        this.setSize(359, 199);
        var background = new _lib_rexui_lib_plugins_gameobjects_ninepatch_NinePatch__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](this.scene, {
            width: 359,
            height: 199,
            key: _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getName(),
            columns: _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getColumns(),
            rows: _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Background */ "a"].getRows()
        }).setOrigin(0, 0);
        this.add(background);
        var border = new _lib_rexui_lib_plugins_gameobjects_ninepatch_NinePatch__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](this.scene, {
            x: 7,
            y: 19,
            width: 345,
            height: 173,
            key: _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(),
            columns: _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getColumns(),
            rows: _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getRows()
        }).setOrigin(0, 0);
        this.add(border);
        var nickNameLabel = this.scene.make.text({
            x: 20,
            y: -5,
            text: "昵称：",
            stroke: "#000000",
            strokeThickness: 2,
            style: { color: "#b4b4b4", font: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].YAHEI_18_BOLD }
        }, false);
        this.add(nickNameLabel);
        var lvLabel = this.scene.make.text({
            x: 20,
            y: 30,
            text: "等级：",
            stroke: "#000000",
            strokeThickness: 2,
            color: "#b4b4b4",
            style: { color: "#b4b4b4", font: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].YAHEI_18_BOLD }
        }, false);
        this.add(lvLabel);
        this.mNickName = this.scene.make.text({
            x: nickNameLabel.x + 50,
            y: nickNameLabel.y,
            stroke: "#000000",
            strokeThickness: 2,
            color: "#FFFFFF",
            style: { font: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].YAHEI_18_BOLD }
        }, false);
        this.add(this.mNickName);
        this.mLv = this.scene.make.text({
            x: lvLabel.x + 50,
            y: lvLabel.y,
            stroke: "#000000",
            strokeThickness: 2,
            color: "#FFFFFF",
            style: { font: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].YAHEI_18_BOLD }
        });
        this.add(this.mLv);
        this.mFollwerBtn = new _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_5__["NinePatchButton"](this.scene, 258, 145, 80, 34, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getName(), "关注", _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* BlueButton */ "c"].getConfig());
        this.mFollwerBtn.x = 258 + (this.mFollwerBtn.width >> 1);
        this.mFollwerBtn.y = 145 + (this.mFollwerBtn.height >> 1);
        this.mFollwerBtn.setTextStyle({ font: _utils_font__WEBPACK_IMPORTED_MODULE_4__[/* Font */ "a"].YAHEI_16_BOLD });
        this.add(this.mFollwerBtn);
        this.mActor = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__["DynamicImage"](this.scene, 300, 125).setOrigin(0.5, 1);
        this.mActor.scale = 2;
        this.add(this.mActor);
        this.mWorld.uiManager.getMediator(_UserInfoMediator__WEBPACK_IMPORTED_MODULE_6__["UserInfoMediator"].NAME).resize();
        _super.prototype.init.call(this);
        this.setInfo(this.getData("data"));
    };
    UserInfoPanel.prototype.updateFollwer = function (platformId) {
        var _this = this;
        var mainPlayer = this.mWorld.roomManager.currentRoom.playerManager.actor.model;
        if (!mainPlayer)
            return;
        if (platformId === mainPlayer.platformId) {
            // this.mFollwerBtn.visible = false;
            return;
        }
        // this.mFollwerBtn.visible = true;
        this.mWorld.httpService.checkFollowed([platformId])
            .then(function (response) {
            if (response.code === 200) {
                var resData = response.data;
                if (resData.length > 0) {
                    _this.mFollwerBtn.setText("取消关注");
                }
                else {
                    _this.mFollwerBtn.setText("关注");
                }
                _this.mFollwerBtn.setData("node", { text: _this.mFollwerBtn.getText(), platformId: platformId });
            }
        });
    };
    UserInfoPanel.prototype.createBadge = function (badges) {
        if (!badges)
            return;
        for (var i = 0; i < badges.length; i++) {
            var badge = new _components_dynamic_image__WEBPACK_IMPORTED_MODULE_1__["DynamicImage"](this.scene, i * 70 + 60, 100);
            badge.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getOsdRes(badges[i].target_entity.thumbnail));
            this.add(badge);
            this.mBadgeImages.push(badge);
        }
    };
    UserInfoPanel.prototype.loadDefaultAvatar = function () {
        this.mActor.load(_utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Url */ "h"].getOsdRes("show/avatar_default.png"));
    };
    UserInfoPanel.prototype.clearBadge = function () {
        for (var _i = 0, _a = this.mBadgeImages; _i < _a.length; _i++) {
            var badge = _a[_i];
            badge.destroy();
            this.remove(badge);
        }
        this.mBadgeImages.length = 0;
    };
    return UserInfoPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 311 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MenuItem", function() { return MenuItem; });
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(114);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(110);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(104);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var MenuItem = /** @class */ (function (_super) {
    __extends(MenuItem, _super);
    function MenuItem(scene, x, y, width, height, key, text, config) {
        return _super.call(this, scene, x, y, width, height, key, "", text, config) || this;
    }
    MenuItem.prototype.appendItem = function (menu) {
        if (!this.mChild) {
            this.mMenus = [];
            this.mChild = this.scene.make.container(undefined, false);
            // this.mChild.x = 42;
            this.mArrow = this.scene.make.image({
                x: this.width * this.originX - 3,
                key: "usermenu_arrow"
            });
            this.add(this.mArrow);
            this.mBackground = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_1__["NinePatch"](this.scene, 0, 0, 0, 0, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_2__[/* Border */ "d"].getConfig());
        }
        this.mChild.add(menu);
        this.mMenus.push(menu);
        this.mBackground.resize(74, this.mMenus.length * 32);
        this.mBackground.x = this.mBackground.width;
        this.mBackground.y = this.mBackground.height / 2 - 32 / 2;
        this.mChild.addAt(this.mBackground, 0);
        this.mChild.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.mBackground.width, this.mBackground.height), Phaser.Geom.Rectangle.Contains);
    };
    MenuItem.prototype.show = function () {
        this.add(this.mChild);
    };
    MenuItem.prototype.destroy = function (fromScene) {
        if (this.mMenus) {
            var len = this.mMenus.length;
            for (var i = 0; i < len; i++) {
                var item = this.mMenus[i];
                if (!item)
                    continue;
                item.destroy(true);
                item = null;
            }
            this.mMenus = [];
        }
        if (this.mBackground) {
            this.mBackground.destroy();
            this.mBackground = null;
        }
        if (this.mChild) {
            this.mChild.destroy(true);
            this.mChild = null;
        }
        if (this.mArrow) {
            this.mArrow.destroy(true);
            this.mArrow = null;
        }
        _super.prototype.destroy.call(this, fromScene);
    };
    Object.defineProperty(MenuItem.prototype, "menus", {
        get: function () {
            return this.mMenus || [];
        },
        enumerable: false,
        configurable: true
    });
    return MenuItem;
}(_components_ninepatch_button__WEBPACK_IMPORTED_MODULE_0__["NinePatchButton"]));



/***/ }),
/* 312 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserMenuPanel", function() { return UserMenuPanel; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _MenuItem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(311);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(110);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var UserMenuPanel = /** @class */ (function (_super) {
    __extends(UserMenuPanel, _super);
    function UserMenuPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.mMenus = [];
        _this.disInteractive();
        _this.scale = 2;
        return _this;
    }
    UserMenuPanel.prototype.show = function (param) {
        _super.prototype.show.call(this, param);
        if (!this.scene) {
            return;
        }
        this.setData("data", param);
        this.addItem(param);
        this.x = this.scene.input.activePointer.x + 32;
        this.y = this.scene.input.activePointer.y + 32;
        this.scaleX = this.scaleY = this.scale;
        // this.scene.input.on("gameobjectdown", this.onClickMenu, this);
    };
    UserMenuPanel.prototype.hide = function () {
        // this.scene.input.off("gameobjectdown", this.onClickMenu, this);
        this.disInteractive();
        this.clear();
        _super.prototype.hide.call(this);
    };
    UserMenuPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.scene.input.on("gameobjectdown", this.onClickMenu, this);
    };
    UserMenuPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.scene.input.off("gameobjectdown", this.onClickMenu, this);
    };
    UserMenuPanel.prototype.setSize = function (width, height) {
        _super.prototype.setSize.call(this, width, height);
        if (this.mBackground) {
            this.mBackground.resize(width, height);
            // this.mBackground.x = this.mBackground.width * this.originX;
            // this.mBackground.y = this.mBackground.height * this.originY;
        }
        return this;
    };
    UserMenuPanel.prototype.destroy = function () {
        if (this.mBackground) {
            this.mBackground.destroy();
        }
        if (this.mMenus) {
            var len = this.mMenus.length;
            for (var i = 0; i < len; i++) {
                var item = this.mMenus[i];
                if (item)
                    continue;
                item.destroy(true);
                item = null;
            }
            this.mMenus = [];
        }
        _super.prototype.destroy.call(this);
    };
    UserMenuPanel.prototype.addItem = function (params) {
        if (!this.mInitialized)
            return;
        this.clear();
        var menu = params.menuItem;
        for (var i = 0; i < menu.length; i++) {
            var btn = this.appendItem(menu[i], 0, i * 32);
            this.add(btn);
            this.mMenus.push(btn);
        }
        // this.resizeBackground(60, this.mMenus.length * 30);
        // this.resizeBackground(60, this.mMenus.length * 32);
        this.setSize(70, this.mMenus.length * 30);
        var mainPlayer = this.mWorld.roomManager.currentRoom.playerManager.actor.model;
        if (!mainPlayer)
            return;
        var actor = params.actors[0];
        if (!actor)
            return;
        if (mainPlayer.platformId !== actor.platformId) {
            var fn_1 = { text: "关注", platformid: actor.platformId };
            var follow_1 = this.appendItem({ text: "关注", node: undefined }, 0, this.mMenus.length * 31);
            follow_1.setData("node", fn_1);
            this.add(follow_1);
            this.mMenus.push(follow_1);
            this.mWorld.httpService.checkFollowed([actor.platformId])
                .then(function (response) {
                if (response.code === 200) {
                    var data = response.data;
                    if (data.length > 0) {
                        follow_1.setText("取消关注");
                    }
                    fn_1.text = follow_1.getText();
                    follow_1.setData("node", fn_1);
                }
            });
        }
    };
    UserMenuPanel.prototype.preload = function () {
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* BlackButton */ "b"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* BlackButton */ "b"].getPNG());
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getPNG());
        this.scene.load.image("usermenu_arrow", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/usermenu/arrow.png"));
        this.scene.load.atlas(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* TransparentButton */ "g"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* TransparentButton */ "g"].getPNG(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* TransparentButton */ "g"].getJSON());
        _super.prototype.preload.call(this);
    };
    UserMenuPanel.prototype.init = function () {
        this.mBackground = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__["NinePatch"](this.scene, 0, 0, 70, 30, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getConfig());
        this.add(this.mBackground);
        // this.mBackground.x = this.mBackground.width * this.mBackground.originX;
        // this.mBackground.y = this.mBackground.height * this.mBackground.originY;
        _super.prototype.init.call(this);
        if (this.mShowData)
            this.addItem(this.showData);
    };
    UserMenuPanel.prototype.appendItem = function (menu, x, y) {
        var item = new _MenuItem__WEBPACK_IMPORTED_MODULE_2__["MenuItem"](this.scene, 0, 0, 59, 29, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* TransparentButton */ "g"].getName(), menu.text, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* TransparentButton */ "g"].getConfig());
        item.x = x;
        item.y = y - (item.height >> 1);
        item.setData("node", menu.node);
        if (menu.child && menu.child.length > 0) {
            var menuChild = menu.child;
            for (var i = 0, len = menuChild.length; i < len; i++) {
                var child = menuChild[i];
                // parent的宽，高需要加入
                var btn = this.appendItem(child, 31 + 42, i * 31 - 31 / 2 + this.mMenus.length * 31);
                item.appendItem(btn);
            }
        }
        return item;
    };
    UserMenuPanel.prototype.onClickMenu = function (pointer, gameobject) {
        if (gameobject instanceof _MenuItem__WEBPACK_IMPORTED_MODULE_2__["MenuItem"]) {
            if (gameobject.menus.length > 0) {
                gameobject.show();
            }
            else {
                this.emit("menuClick", gameobject.getData("node"));
            }
        }
    };
    UserMenuPanel.prototype.resizeBackground = function (width, height) {
        if (this.mBackground) {
            this.mBackground.resize(width, height);
        }
    };
    UserMenuPanel.prototype.clear = function () {
        for (var _i = 0, _a = this.mMenus; _i < _a.length; _i++) {
            var menu = _a[_i];
            this.remove(menu);
            menu.off("pointerup", this.onClickMenu);
            menu.destroy();
        }
        this.mMenus.length = 0;
    };
    return UserMenuPanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 313 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopUpTextUI", function() { return PopUpTextUI; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var PopUpTextUI = /** @class */ (function (_super) {
    __extends(PopUpTextUI, _super);
    function PopUpTextUI(world, scene) {
        var _this = _super.call(this, scene, world) || this;
        _this.mWorld = world;
        _this.scene = scene;
        _this.disInteractive();
        return _this;
    }
    PopUpTextUI.prototype.show = function (param) {
        var _this = this;
        var size = this.mWorld.getSize();
        var text = this.scene.make.text({
            x: 0,
            y: 0,
            text: param,
            style: { fill: "#FF0000", fontSize: 20 }
        });
        this.add(text);
        this.setSize(text.width, text.height);
        this.setPosition(size.width - this.width >> 1, size.height >> 1);
        this.scene.tweens.add({
            targets: this,
            duration: 1000,
            ease: "Linear",
            props: {
                y: { value: (size.height >> 1) - 80 },
                alhpa: { value: 0 },
            },
            onComplete: function (tween, targets, element) {
                _this.destroy();
            },
            onCompleteParams: [this],
        });
        _super.prototype.show.call(this, param);
    };
    PopUpTextUI.prototype.resize = function () {
        if (!this.mInitialized)
            return;
        var size = this.mWorld.getSize();
        this.x = size.width - this.width >> 1;
    };
    PopUpTextUI.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    return PopUpTextUI;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 314 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageMediator", function() { return StorageMediator; });
/* harmony import */ var _storagePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(315);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var StorageMediator = /** @class */ (function (_super) {
    __extends(StorageMediator, _super);
    function StorageMediator(layerManager, mworld, scene) {
        var _this = _super.call(this) || this;
        _this.mLayerManager = layerManager;
        _this.world = mworld;
        _this.mScene = scene;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_2__[/* UIType */ "a"].Normal;
        return _this;
    }
    StorageMediator.prototype.isShow = function () {
        return this.mView.isShow();
    };
    StorageMediator.prototype.resize = function () {
        if (this.mView)
            this.mView.resize();
    };
    StorageMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        if (!this.mView) {
            this.mView = new _storagePanel__WEBPACK_IMPORTED_MODULE_0__["StoragePanel"](this.mScene, this.world);
        }
        this.mView.show(param);
        this.world.uiManager.checkUIState(StorageMediator.NAME, false);
        _super.prototype.show.call(this, param);
    };
    StorageMediator.prototype.update = function (param) {
        if (this.mView)
            this.mView.update(param);
    };
    StorageMediator.prototype.hide = function () {
        if (this.mView) {
            this.mView.hide();
            this.world.uiManager.checkUIState(StorageMediator.NAME, true);
        }
    };
    StorageMediator.prototype.destroy = function () {
        if (this.mView) {
            this.mView.destroy();
            this.mView = null;
        }
    };
    StorageMediator.NAME = "StorageMediator";
    return StorageMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 315 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StoragePanel", function() { return StoragePanel; });
/* harmony import */ var _item_slot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(132);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(121);
/* harmony import */ var _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(110);
/* harmony import */ var _storageMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(314);
/* harmony import */ var _ui_mediatorType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(122);
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(105);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var StoragePanel = /** @class */ (function (_super) {
    __extends(StoragePanel, _super);
    function StoragePanel(scene, world) {
        return _super.call(this, scene, world) || this;
    }
    StoragePanel.prototype.resize = function (wid, hei) {
        var size = this.mWorld.getSize();
        this.x = size.width + wid >> 1;
        this.y = size.height + hei - 200;
    };
    StoragePanel.prototype.destroy = function () {
        if (this.mBagItemSlotList) {
            var len = this.mBagItemSlotList.length;
            for (var i = 0; i < len; i++) {
                var item = this.mBagItemSlotList[i];
                if (!item)
                    continue;
                item.destroy();
                item = null;
            }
            this.mBagItemSlotList = null;
        }
        this.mWorld = null;
        _super.prototype.destroy.call(this);
    };
    StoragePanel.prototype.addListen = function () {
        this.mClsBtn.on("pointerup", this.hide, this);
    };
    StoragePanel.prototype.removeListen = function () {
        this.mClsBtn.off("pointerup", this.hide, this);
    };
    StoragePanel.prototype.init = function () {
        if (this.mInitialized)
            return;
        _super.prototype.init.call(this);
        this.mBg = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__["NinePatch"](this.scene, 0, 0, 500, 350, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getConfig());
        this.addAt(this.mBg, 0);
        this.setSize(this.mBg.width, this.mBg.height);
        this.mBorder = new _components_nine_patch__WEBPACK_IMPORTED_MODULE_3__["NinePatch"](this.scene, 0, 0, this.mBg.width - 10, this.mBg.height - 30, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), null, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getConfig());
        this.mBorder.x = this.mBg.x;
        this.mBorder.y = this.mBg.y + 10;
        this.addAt(this.mBorder, 1);
        this.setSize(this.mBg.width, this.mBg.height);
        var titleIcon = this.scene.make.image(undefined, false);
        titleIcon.setTexture(this.mResStr, "itemBagView_title.png");
        titleIcon.x = (-this.mBg.width >> 1) + 80;
        titleIcon.y = -this.mBg.height >> 1;
        this.add(titleIcon);
        var titleTF = this.scene.make.text(undefined, false);
        titleTF.setFontFamily("Tahoma");
        titleTF.setFontStyle("bold");
        titleTF.setFontSize(20);
        titleTF.setText("书柜");
        titleTF.x = titleIcon.x + titleIcon.width - 10;
        titleTF.y = titleIcon.y - (titleTF.height >> 1);
        this.add(titleTF);
        var itemSlot;
        var tmpX = 0;
        var tmpY = 0;
        // 多排背包格位
        this.mBagItemSlotList = [];
        for (var i = 0; i < 9; i++) {
            tmpX = i % 9 * 60 + 32 - 724 / 2;
            tmpY = Math.floor(i / 9) * 60 - 55;
            itemSlot = new _item_slot__WEBPACK_IMPORTED_MODULE_0__["ItemSlot"](this.scene, this.mWorld, this, tmpX, tmpY, this.mResStr, this.mResPng, this.mResJson, "bagView_slot.png", "bagView_itemSelect.png");
            itemSlot.createUI();
            this.mBagItemSlotList.push(itemSlot);
        }
        this.mClsBtn = new _baseView_icon_btn__WEBPACK_IMPORTED_MODULE_2__["IconBtn"](this.scene, this.mWorld, {
            key: _ui_mediatorType__WEBPACK_IMPORTED_MODULE_5__["UIMediatorType"].Close_Btn, bgResKey: "clsBtn", bgTextures: ["btn_normal", "btn_over", "btn_click"],
            iconResKey: "", iconTexture: "", scale: 1, pngUrl: "ui/common/common_clsBtn.png", jsonUrl: "ui/common/common_clsBtn.json"
        });
        this.mClsBtn.x = (this.width >> 1) - 65;
        this.mClsBtn.y = -this.height >> 1;
        this.mClsBtn.scaleX = this.mClsBtn.scaleY = 2;
        this.add(this.mClsBtn);
    };
    StoragePanel.prototype.preload = function () {
        if (!this.scene) {
            return;
        }
        this.mResStr = "bagView";
        this.mResPng = "ui/bag/bagView.png";
        this.mResJson = "ui/bag/bagView.json";
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Border */ "d"].getPNG());
        this.scene.load.image(_utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getName(), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Background */ "a"].getPNG());
        this.scene.load.atlas("clsBtn", _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/common/common_clsBtn.json"));
        this.scene.load.atlas(this.mResStr, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes(this.mResPng), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes(this.mResJson));
        _super.prototype.preload.call(this);
    };
    StoragePanel.prototype.tweenComplete = function (show) {
        _super.prototype.tweenComplete.call(this, show);
        if (show)
            this.mWorld.uiManager.getMediator(_storageMediator__WEBPACK_IMPORTED_MODULE_4__["StorageMediator"].NAME).resize();
    };
    return StoragePanel;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_6__["BasePanel"]));



/***/ }),
/* 316 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopBtnGroup", function() { return TopBtnGroup; });
/* harmony import */ var _components_BasePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(104);
/* harmony import */ var _icon_btn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(121);
/* harmony import */ var _DebugLogger_DebugLoggerMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(184);
/* harmony import */ var _ui_mediatorType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(122);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var TopBtnGroup = /** @class */ (function (_super) {
    __extends(TopBtnGroup, _super);
    function TopBtnGroup(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        // private mWid: number = 0;
        _this.mBtnPad = 10;
        _this.mBtnX = 0;
        _this.mExpandBoo = false;
        _this.mOrientation = Phaser.Scale.Orientation.LANDSCAPE;
        _this.disInteractive();
        return _this;
    }
    TopBtnGroup.prototype.show = function (param) {
        this.scale = this.mWorld.uiScale;
        _super.prototype.show.call(this, param);
    };
    TopBtnGroup.prototype.resize = function () {
        var size = this.mWorld.getSize();
        this.x = size.width - 50 * this.mWorld.uiScale;
        this.y = this.height / 2 + 10 * this.mWorld.uiScale;
        this.scale = this.mWorld.uiScale;
    };
    TopBtnGroup.prototype.destroy = function () {
        this.mBtnX = 0;
        if (this.mTurnBtn) {
            this.mTurnBtn.destroy();
        }
        if (this.mReturnBtn) {
            this.mReturnBtn.destroy();
        }
        if (this.mDebugBtn) {
            this.mDebugBtn.destroy();
        }
        if (this.mBtnList) {
            this.mBtnList.forEach(function (btn) {
                if (btn) {
                    btn.destroy();
                    btn = null;
                }
            });
        }
        this.mResKey = "";
        this.mBtnList = null;
        this.mTurnBtn = null;
        this.mReturnBtn = null;
        _super.prototype.destroy.call(this);
    };
    TopBtnGroup.prototype.tweenView = function (show) {
        if (!this.scene)
            return;
        var baseY = this.height / 2 + 10 * this.mWorld.uiScale;
        var toY = show === true ? baseY : baseY - 50;
        var toAlpha = show === true ? 1 : 0;
        this.scene.tweens.add({
            targets: this,
            duration: 200,
            ease: "Cubic.Out",
            props: {
                y: { value: toY },
                alpha: { value: toAlpha },
            },
        });
    };
    TopBtnGroup.prototype.addBtn = function (data) {
        if (!this.mAddBtnDataList)
            this.mAddBtnDataList = [];
        if (!this.mInitialized) {
            this.mAddBtnDataList.push(data);
            return;
        }
        var btn = new _icon_btn__WEBPACK_IMPORTED_MODULE_2__["IconBtn"](this.scene, this.mWorld, data);
        this.mBtnList.push(btn);
        this.btnRefreshPos();
    };
    TopBtnGroup.prototype.removeBtn = function (key) {
        if (this.mRemoveBtnKeyList)
            this.mRemoveBtnKeyList = [];
        if (!this.mInitialized) {
            this.mRemoveBtnKeyList.push(key);
            return;
        }
        for (var i = 0, len = this.mBtnList.length; i < len; i++) {
            var btn = this.mBtnList[i];
            if (!btn)
                continue;
            var btnKey = btn.getKey();
            if (btnKey && btnKey === key) {
                btn.destroy();
                btn = null;
                this.mBtnList.splice(i, 1);
                break;
            }
        }
        this.btnRefreshPos();
    };
    TopBtnGroup.prototype.preload = function () {
        if (!this.scene) {
            return;
        }
        this.mResKey = "baseView";
        this.scene.load.atlas(this.mResKey, _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.png"), _utils_resUtil__WEBPACK_IMPORTED_MODULE_1__[/* Url */ "h"].getRes("ui/baseView/mainui_mobile.json"));
        _super.prototype.preload.call(this);
    };
    TopBtnGroup.prototype.init = function () {
        var _this = this;
        var hei = 0;
        var wid = 0;
        this.mWorld.uiManager.getUILayerManager().addToToolTipsLayer(this);
        this.mBtnList = [];
        this.mBtnX = 0;
        this.mTurnBtn = new _icon_btn__WEBPACK_IMPORTED_MODULE_2__["IconBtn"](this.scene, this.mWorld, {
            key: _ui_mediatorType__WEBPACK_IMPORTED_MODULE_4__["UIMediatorType"].Turn_Btn_Top, bgResKey: this.mResKey, bgTextures: ["btnGroup_yellow_normal.png", "btnGroup_yellow_light.png", "btnGroup_yellow_select.png"],
            iconResKey: this.mResKey, iconTexture: "btnGroup_top_expand.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
        });
        this.mTurnBtn.x = this.mBtnX;
        this.mTurnBtn.setPos(this.mBtnX, 0);
        wid += this.mTurnBtn.width + this.mBtnPad;
        this.add(this.mTurnBtn);
        this.mBtnX += -this.mTurnBtn.width - this.mBtnPad;
        hei += this.mTurnBtn.height / 2 + 20;
        if (!this.mWorld.game.device.os.desktop) {
            this.mReturnBtn = new _icon_btn__WEBPACK_IMPORTED_MODULE_2__["IconBtn"](this.scene, this.mWorld, {
                key: _ui_mediatorType__WEBPACK_IMPORTED_MODULE_4__["UIMediatorType"].App_Back, bgResKey: this.mResKey, bgTextures: ["btnGroup_white_normal.png", "btnGroup_white_light.png", "btnGroup_white_select.png"],
                iconResKey: this.mResKey, iconTexture: "btnGroup_top_expand.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
            });
            this.mReturnBtn.x = this.mBtnX;
            this.mReturnBtn.setPos(this.mBtnX, 0);
            this.mBtnList.push(this.mReturnBtn);
            wid += this.mReturnBtn.width + this.mBtnPad;
            this.add(this.mReturnBtn);
            this.mBtnX += -this.mReturnBtn.width - this.mBtnPad;
            this.mDebugBtn = new _icon_btn__WEBPACK_IMPORTED_MODULE_2__["IconBtn"](this.scene, this.mWorld, {
                key: _DebugLogger_DebugLoggerMediator__WEBPACK_IMPORTED_MODULE_3__["DebugLoggerMediator"].NAME, bgResKey: this.mResKey, bgTextures: ["btnGroup_blue_normal.png", "btnGroup_blue_light.png", "btnGroup_blue_select.png"],
                iconResKey: this.mResKey, iconTexture: "btnGroup_top_expand.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json"
            });
            this.mDebugBtn.x = this.mBtnX;
            this.mDebugBtn.setPos(this.mBtnX, 0);
            this.mBtnList.push(this.mDebugBtn);
            wid += this.mDebugBtn.width + this.mBtnPad;
            this.add(this.mDebugBtn);
            this.mReturnBtn.setClick(function () {
                _this.mWorld.closeGame();
            });
            this.mDebugBtn.setClick(function () {
                var debugLogMed = _this.mWorld.uiManager.getMediator(_DebugLogger_DebugLoggerMediator__WEBPACK_IMPORTED_MODULE_3__["DebugLoggerMediator"].NAME);
                if (!debugLogMed) {
                    _this.mWorld.uiManager.setMediator(_DebugLogger_DebugLoggerMediator__WEBPACK_IMPORTED_MODULE_3__["DebugLoggerMediator"].NAME, new _DebugLogger_DebugLoggerMediator__WEBPACK_IMPORTED_MODULE_3__["DebugLoggerMediator"](_this.mWorld.uiManager.getUILayerManager(), _this.scene, _this.mWorld));
                    debugLogMed = _this.mWorld.uiManager.getMediator(_DebugLogger_DebugLoggerMediator__WEBPACK_IMPORTED_MODULE_3__["DebugLoggerMediator"].NAME);
                }
                if (debugLogMed.isShow()) {
                    debugLogMed.hide();
                    return;
                }
                debugLogMed.show();
            });
        }
        this.setSize(wid, hei);
        this.mTurnBtn.setClick(function () {
            _this.turnHandler();
        });
        this.resize();
        _super.prototype.init.call(this);
    };
    TopBtnGroup.prototype.tweenComplete = function (show) {
        var _this = this;
        _super.prototype.tweenComplete.call(this, show);
        if (show) {
            if (this.mAddBtnDataList) {
                this.mAddBtnDataList.forEach(function (btnData) {
                    _this.addBtn(btnData);
                });
            }
            if (this.mRemoveBtnKeyList) {
                this.mRemoveBtnKeyList.forEach(function (key) {
                    _this.removeBtn(key);
                });
            }
        }
    };
    TopBtnGroup.prototype.turnHandler = function () {
        var _this = this;
        if (!this.mBtnList && this.mBtnList.length < 1) {
            return;
        }
        var len = this.mBtnList.length;
        var _loop_1 = function (i) {
            var btn = this_1.mBtnList[i];
            var toX = this_1.mExpandBoo ? btn.getPos().x : this_1.mTurnBtn.width >> 1;
            var toAlpha = this_1.mExpandBoo ? 1 : 0;
            var easeType = this_1.mExpandBoo ? "Sine.easeIn" : "Sine.easeOut";
            this_1.scene.tweens.add({
                targets: btn,
                duration: 300,
                ease: easeType,
                props: {
                    x: { value: toX },
                    alpha: { value: toAlpha }
                },
                onComplete: function (tween, targets, ship) {
                    if (i === len - 1) {
                        _this.mExpandBoo = !_this.mExpandBoo;
                    }
                },
                onCompleteParams: [this_1]
            });
        };
        var this_1 = this;
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
    };
    TopBtnGroup.prototype.btnRefreshPos = function () {
        var _this = this;
        if (this.mBtnList && this.mBtnList.length > 1) {
            this.mBtnX = -this.mTurnBtn.width - this.mBtnPad;
            var hei = this.mTurnBtn.height / 2 + 20;
            var wid_1 = 0;
            this.mBtnList.forEach(function (btn) {
                if (!btn)
                    return;
                btn.x = _this.mBtnX;
                // btn.setBtnData({});
                btn.setPos(_this.mBtnX, 0);
                _this.mBtnX += -btn.width - _this.mBtnPad;
                wid_1 += btn.width + _this.mBtnPad;
                // btn.setClick(() => {
                //     // todo connect
                // });
                _this.add(btn);
            });
            this.setSize(wid_1, hei);
        }
        this.resize();
    };
    return TopBtnGroup;
}(_components_BasePanel__WEBPACK_IMPORTED_MODULE_0__["BasePanel"]));



/***/ }),
/* 317 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/basesizer/BaseSizer.js + 31 modules
var BaseSizer = __webpack_require__(187);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/GetDisplaySize.js
var GetDisplaySize = __webpack_require__(112);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/GetChildrenWidth.js


var GetChildrenWidth = function () {
    if (this.rexSizer.hidden) {
        return 0;
    }

    var result = 0,
        columnWidth;
    var children = this.gridChildren;
    var child, padding, childWidth, proportion;

    for (var i = 0; i < this.columnCount; i++) {
        proportion = this.columnProportions[i];
        columnWidth = 0;
        if ((proportion === undefined) || (proportion === 0)) {
            for (var j = 0; j < this.rowCount; j++) {
                child = children[(j * this.columnCount) + i];
                if (!child) {
                    continue;
                }
                if (child.rexSizer.hidden) {
                    continue;
                }

                childWidth = (child.isRexSizer) ?
                    Math.max(child.minWidth, child.childrenWidth) :
                    Object(GetDisplaySize["b" /* GetDisplayWidth */])(child);
                padding = child.rexSizer.padding;
                childWidth += (padding.left + padding.right);
                columnWidth = Math.max(columnWidth, childWidth);
            }
            result += columnWidth;
        }
        this.columnWidth[i] = columnWidth;
    }
    return result;
}

/* harmony default export */ var gridsizer_GetChildrenWidth = (GetChildrenWidth);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/GetChildrenHeight.js


var GetChildrenHeight = function () {
    if (this.rexSizer.hidden) {
        return 0;
    }

    var result = 0,
        rowHeight;
    var children = this.gridChildren;
    var child, padding, childHeight, proportion;

    for (var i = 0; i < this.rowCount; i++) {
        proportion = this.rowProportions[i];
        rowHeight = 0;
        if ((proportion === undefined) || (proportion === 0)) {
            for (var j = 0; j < this.columnCount; j++) {
                child = children[(i * this.columnCount) + j];
                if (!child) {
                    continue;
                }
                if (child.rexSizer.hidden) {
                    continue;
                }

                childHeight = (child.isRexSizer) ?
                    Math.max(child.minHeight, child.childrenHeight) :
                    Object(GetDisplaySize["a" /* GetDisplayHeight */])(child);
                padding = child.rexSizer.padding;
                childHeight += (padding.top + padding.bottom);
                rowHeight = Math.max(rowHeight, childHeight);
            }
            result += rowHeight;
        }
        this.rowHeight[i] = rowHeight;
    }
    return result;
}

/* harmony default export */ var gridsizer_GetChildrenHeight = (GetChildrenHeight);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/GetChildrenSizers.js
var GetChildrenSizers = function (out) {
    if (out === undefined) {
        out = [];
    }
    var children = this.gridChildren,
        child;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
        child = children[i];
        if (child && child.isRexSizer) {
            out.push(child);
        }
    }
    return out;
}
/* harmony default export */ var gridsizer_GetChildrenSizers = (GetChildrenSizers);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/GetExpandedChildWidth.js
var GetExpandedChildWidth = function (child, colWidth) {
    var newWidth;
    var childConfig = child.rexSizer;    
    if (childConfig.expand) {
        var padding = childConfig.padding;
        newWidth = colWidth - padding.left - padding.right;
    }
    return newWidth;
}

/* harmony default export */ var gridsizer_GetExpandedChildWidth = (GetExpandedChildWidth);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/GetExpandedChildHeight.js
var GetExpandedChildHeight = function (child, rowHeight) {
    var newHeight;
    var childConfig = child.rexSizer;    
    if (childConfig.expand) {
        var padding = childConfig.padding;
        newHeight = rowHeight - padding.top - padding.bottom;
    }
    return newHeight;
}

/* harmony default export */ var gridsizer_GetExpandedChildHeight = (GetExpandedChildHeight);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/ResizeGameObject.js
var ResizeGameObject = __webpack_require__(130);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/actions/GlobZone.js
var GlobZone = __webpack_require__(150);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/align/align/in/QuickSet.js + 23 modules
var QuickSet = __webpack_require__(135);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/Layout.js






var Layout = function (parent, newWidth, newHeight) {
    // Skip invisible sizer
    if (this.rexSizer.hidden) {
        return this;
    }

    this.preLayout(parent);

    var totalColumnProportions = this.totalColumnProportions;
    var totalRowProportions = this.totalRowProportions;

    // Set size
    if (newWidth === undefined) {
        if (parent && (totalColumnProportions > 0)) { // Expand to parent width
            var padding = this.rexSizer.padding;
            newWidth = parent.width - padding.left - padding.right;
        } else {
            newWidth = Math.max(this.childrenWidth, this.minWidth);
        }
    }
    if (newHeight === undefined) {
        if (parent && (totalRowProportions > 0)) { // Expand to parent height
            var padding = this.rexSizer.padding;
            newHeight = parent.height - padding.top - padding.bottom;
        } else {
            newHeight = Math.max(this.childrenHeight, this.minHeight);
        }
    }
    this.resize(newWidth, newHeight);

    var proportionWidthLength;
    if (totalColumnProportions > 0) {
        proportionWidthLength = (this.width - this.childrenWidth) / totalColumnProportions;
    } else {
        proportionWidthLength = 0;
    }
    var proportionHeightLength;
    if (totalRowProportions > 0) {
        proportionHeightLength = (this.height - this.childrenHeight) / totalRowProportions;
    } else {
        proportionHeightLength = 0;
    }

    // Layout children
    var child, childConfig, padding;
    var startX = this.left,
        startY = this.top;
    var itemX = startX,
        itemY = startY;
    var x, y, width, height; // Align zone
    var childWidth, childHeight;
    // Layout grid children
    var colProportion, rowProportion,
        colWidth, rowHeight;
    for (var rowIndex = 0; rowIndex < this.rowCount; rowIndex++) {
        rowProportion = this.rowProportions[rowIndex] || 0;
        rowHeight = (rowProportion === 0) ? this.rowHeight[rowIndex] : (rowProportion * proportionHeightLength);

        itemX = startX;
        for (var columnIndex = 0; columnIndex < this.columnCount; columnIndex++) {
            colProportion = this.columnProportions[columnIndex] || 0;
            colWidth = (colProportion === 0) ? this.columnWidth[columnIndex] : (colProportion * proportionWidthLength);

            child = this.gridChildren[(rowIndex * this.columnCount) + columnIndex];
            if ((!child) || (child.rexSizer.hidden)) {
                itemX += colWidth;
                continue;
            }

            childWidth = gridsizer_GetExpandedChildWidth(child, colWidth);
            childHeight = gridsizer_GetExpandedChildHeight(child, rowHeight);
            if (child.isRexSizer) {
                child.layout(this, childWidth, childHeight);
            } else {
                Object(ResizeGameObject["a" /* default */])(child, childWidth, childHeight);
            }

            childConfig = child.rexSizer;
            padding = childConfig.padding;
            x = (itemX + padding.left);
            width = colWidth - padding.left - padding.right;
            y = (itemY + padding.top);
            height = rowHeight - padding.top - padding.bottom;

            GlobZone["a" /* default */].setPosition(x, y).setSize(width, height);
            Object(QuickSet["a" /* default */])(child, GlobZone["a" /* default */], childConfig.align);
            this.resetChildPositionState(child);

            itemX += colWidth;
        }

        itemY += rowHeight;
    }


    // Layout background children
    this.layoutBackgrounds();

    return this.postLayout();
}

/* harmony default export */ var gridsizer_Layout = (Layout);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/_layoutInit.js
var LayoutInitChild = function () {
    this._childrenWidth = undefined;
    this._childrenHeight = undefined;
}
/* harmony default export */ var _layoutInit = (LayoutInitChild);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/Methods.js






/* harmony default export */ var Methods = ({
    getChildrenWidth: gridsizer_GetChildrenWidth,
    getChildrenHeight: gridsizer_GetChildrenHeight,
    getChildrenSizers: gridsizer_GetChildrenSizers,
    layout: gridsizer_Layout,
    _layoutInit: _layoutInit,
});
// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetBoundsConfig.js
var GetBoundsConfig = __webpack_require__(216);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/AlignConst.js
var AlignConst = __webpack_require__(214);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/GridSizer.js





const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;
const RemoveItem = Phaser.Utils.Array.Remove;
const ALIGN_CENTER = Phaser.Display.Align.CENTER;

class GridSizer_GridSizer extends BaseSizer["a" /* default */] {
    constructor(scene, x, y, minWidth, minHeight, columnCount, rowCount, columnProportions, rowProportions) {
        var config;
        if (IsPlainObject(x)) {
            config = x;
            x = GetValue(config, 'x', 0);
            y = GetValue(config, 'y', 0);
            minWidth = GetValue(config, 'width', undefined);
            minHeight = GetValue(config, 'height', undefined);
            columnCount = GetValue(config, 'column', 0);
            rowCount = GetValue(config, 'row', 0);
            columnProportions = GetValue(config, 'columnProportions', undefined);
            rowProportions = GetValue(config, 'rowProportions', undefined);
        } else if (IsPlainObject(minWidth)) {
            config = minWidth;
            minWidth = GetValue(config, 'width', undefined);
            minHeight = GetValue(config, 'height', undefined);
            columnCount = GetValue(config, 'column', 0);
            rowCount = GetValue(config, 'row', 0);
            columnProportions = GetValue(config, 'columnProportions', undefined);
            rowProportions = GetValue(config, 'rowProportions', undefined);
        } else if (IsPlainObject(columnCount)) {
            config = columnCount;
            columnCount = GetValue(config, 'column', 0);
            rowCount = GetValue(config, 'row', 0);
            columnProportions = GetValue(config, 'columnProportions', undefined);
            rowProportions = GetValue(config, 'rowProportions', undefined);
        } else if (IsPlainObject(columnProportions)) {
            config = columnProportions;
            columnProportions = GetValue(config, 'columnProportions', undefined);
            rowProportions = GetValue(config, 'rowProportions', undefined);
        }
        super(scene, x, y, minWidth, minHeight, config);

        this.type = 'rexGridSizer';
        this.initialGrid(columnCount, rowCount, columnProportions, rowProportions);

    }

    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene) {
            return;
        }
        this.gridChildren.length = 0;
        super.destroy(fromScene);
    }

    setColumnProportion(columnIndex, proportion) {
        if (columnIndex >= this.columnProportions.length) {
            return this;
        }
        this.columnProportions[columnIndex] = proportion;
        return this;
    }

    setRowProportion(rowIndex, proportion) {
        if (rowIndex >= this.rowProportions.length) {
            return this;
        }
        this.rowProportions[rowIndex] = proportion;
        return this;
    }

    add(gameObject, columnIndex, rowIndex, align, paddingConfig, expand, childKey) {
        super.add(gameObject);
        if (IsPlainObject(columnIndex)) {
            var config = columnIndex;
            columnIndex = GetValue(config, 'column', 0);
            rowIndex = GetValue(config, 'row', 0);
            align = GetValue(config, 'align', ALIGN_CENTER);
            paddingConfig = GetValue(config, 'padding', 0);
            expand = GetValue(config, 'expand', false);
            childKey = GetValue(config, 'key', undefined);
        }
        if (typeof (align) === 'string') {
            align = AlignConst["a" /* default */][align];
        }
        if (align === undefined) {
            align = ALIGN_CENTER;
        }
        if (paddingConfig === undefined) {
            paddingConfig = 0;
        }
        if (expand === undefined) {
            expand = true;
        }

        var config = this.getSizerConfig(gameObject);
        config.parent = this;
        config.align = align;
        config.padding = Object(GetBoundsConfig["a" /* default */])(paddingConfig);
        config.expand = expand;
        this.gridChildren[(rowIndex * this.columnCount) + columnIndex] = gameObject;

        if (childKey !== undefined) {
            this.addChildrenMap(childKey, gameObject)
        }
        return this;
    }

    remove(gameObject) {
        var config = this.getSizerConfig(gameObject);
        if (config.parent !== this) {
            return this;
        }
        config.parent = undefined;
        RemoveItem(this.gridChildren, gameObject);

        if (this.backgroundChildren !== undefined) {
            RemoveItem(this.backgroundChildren, gameObject);
        }
        super.remove(gameObject);
        return this;
    }

    get totalColumnProportions() {
        var result = 0,
            proportion;
        for (var i = 0; i < this.columnCount; i++) {
            proportion = this.columnProportions[i];
            if (proportion > 0) {
                result += proportion;
            }
        }
        return result;
    }

    get totalRowProportions() {
        var result = 0,
            proportion;
        for (var i = 0; i < this.rowCount; i++) {
            proportion = this.rowProportions[i];
            if (proportion > 0) {
                result += proportion;
            }
        }
        return result;
    }

    initialGrid(columnCount, rowCount, columnProportions, rowProportions) {
        this.columnCount = columnCount;
        this.rowCount = rowCount;
        this.gridChildren = [];
        this.gridChildren.length = columnCount * rowCount;
        this.columnProportions = [];
        this.columnProportions.length = columnCount;
        this.columnWidth = [];
        this.columnWidth.length = columnCount;
        this.rowProportions = [];
        this.rowProportions.length = rowCount;
        this.rowHeight = [];
        this.rowHeight.length = rowCount;

        if (columnProportions) {
            var columnProportionsIsNumber = (typeof (columnProportions) === 'number');
            for (var i = 0; i < columnCount; i++) {
                if (columnProportionsIsNumber) {
                    this.setColumnProportion(i, columnProportions);
                } else {
                    var columnProportion = columnProportions[i];
                    if (columnProportion > 0) {
                        this.setColumnProportion(i, columnProportion);
                    }
                }
            }
        }
        if (rowProportions) {
            var rowProportionsIsNumber = (typeof (rowProportions) === 'number');
            for (var i = 0; i < rowCount; i++) {
                if (rowProportionsIsNumber) {
                    this.setRowProportion(i, rowProportions);
                } else {
                    var rowProportion = rowProportions[i];
                    if (rowProportion > 0) {
                        this.setRowProportion(i, rowProportion);
                    }
                }
            }
        }

        return this;
    }
}

Object.assign(
    GridSizer_GridSizer.prototype,
    Methods
);

/* harmony default export */ var gridsizer_GridSizer = __webpack_exports__["a"] = (GridSizer_GridSizer);

/***/ }),
/* 318 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/buttons/Buttons.js + 6 modules
var Buttons = __webpack_require__(190);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/ExpandSubMenu.js
var ExpandSubMenu = function (parentButton, items) {
    this.collapseSubMenu();

    var orientation
    if (this.root.toggleOrientation) {
        orientation = (this.orientation === 0) ? 1 : 0;
    } else {
        orientation = this.orientation;
    }

    var subMenu = new this.constructor(this.scene, {
        items: items,
        orientation: orientation,

        createBackgroundCallback: this.root.createBackgroundCallback,
        createBackgroundCallbackScope: this.root.createBackgroundCallbackScope,
        createButtonCallback: this.root.createButtonCallback,
        createButtonCallbackScope: this.root.createButtonCallbackScope,
        easeIn: this.root.easeIn,
        easeOut: this.root.easeOut,

        _rootMenu: this.root,
        _parentMenu: this,
        _parentButton: parentButton
    });
    this.pin(subMenu);
    this.childrenMap.subMenu = subMenu;
    this.root.emit('expand', subMenu, parentButton, this);
    return this;
}

/* harmony default export */ var menu_ExpandSubMenu = (ExpandSubMenu);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/GetEaseConfig.js
var GetEaseConfig = function (menu, config) {
    config.orientation = menu.orientation;
    return config;
};

/* harmony default export */ var menu_GetEaseConfig = (GetEaseConfig);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/Collapse.js


var Collapse = function () {
    this.root.emit('collapse', this, this.parentButton, this.parentMenu);
    this.scaleDownDestroy(menu_GetEaseConfig(this, this.root.easeOut));
    this.collapseSubMenu();
    return this;
}
/* harmony default export */ var menu_Collapse = (Collapse);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/CollapseSubMenu.js
var CollapseSubMenu = function () {
    if (this.childrenMap.subMenu === undefined) {
        return this;
    }

    var subMenu = this.childrenMap.subMenu;
    this.childrenMap.subMenu = undefined;
    this.remove(subMenu);
    subMenu.collapse();
    return this;
}
/* harmony default export */ var menu_CollapseSubMenu = (CollapseSubMenu);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/Methods.js




/* harmony default export */ var Methods = ({
    expandSubMenu: menu_ExpandSubMenu,
    collapse: menu_Collapse,
    collapseSubMenu: menu_CollapseSubMenu,
});
// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/CreateBackground.js
var CreateBackground = function (scene, items, callback, scope) {
    var background;
    if (callback) {
        items.scene = scene;
        if (scope) {
            background = callback.call(scope, items);
        } else {
            background = callback(items);
        }
        items.scene = undefined;
    }

    return background;
}

/* harmony default export */ var menu_CreateBackground = (CreateBackground);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/CreateButtons.js
var CreateButtons = function (scene, items, callback, scope) {
    var item;
    var buttons = [],
        button;
    if (items && callback) {
        for (var i = 0, cnt = items.length; i < cnt; i++) {
            item = items[i];
            item.scene = scene;
            if (scope) {
                button = callback.call(scope, item, i, items);
            } else {
                button = callback(item, i, items);
            }
            item.scene = undefined;
            buttons.push(button);
        }
    }

    return buttons;
}

/* harmony default export */ var menu_CreateButtons = (CreateButtons);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/defaultbounds/GetDefaultBounds.js
var GetDefaultBounds = __webpack_require__(345);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/MenuSetInteractive.js
var MenuSetInteractive = function (menu) {
    menu
        // Expand sub event
        .on(menu.root.expandEventName, function (button, index) {
            if (this._isPassedEvent) {
                return;
            }
            var subItems = this.items[index].children;
            if (subItems) {
                this.expandSubMenu(button, subItems);
            } else {
                // this.root.on('button.click', button); // TODO
            }
        }, menu)
        // Click any button
        .on('button.click', function (button, index, pointer, event) {
            // Pass event to root menu object
            if (this !== this.root) {
                this.root._isPassedEvent = true;
                this.root.emit('button.click', button, index, pointer, event);
                this.root._isPassedEvent = false;
            }
        }, menu)
        //Pointer over any button
        .on('button.over', function (button, index, pointer, event) {
            // Pass event to root menu object
            if (this !== this.root) {
                this.root._isPassedEvent = true;
                this.root.emit('button.over', button, index, pointer, event);
                this.root._isPassedEvent = false;
            }
        }, menu)
        //Pointer out any button
        .on('button.out', function (button, index, pointer, event) {
            // Pass event to root menu object
            if (this !== this.root) {
                this.root._isPassedEvent = true;
                this.root.emit('button.out', button, index, pointer, event);
                this.root._isPassedEvent = false;
            }
        }, menu);
};

/* harmony default export */ var menu_MenuSetInteractive = (MenuSetInteractive);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/Menu.js








const GetValue = Phaser.Utils.Objects.GetValue;

class Menu_Menu extends Buttons["a" /* default */] {
    constructor(scene, config) {
        if (config === undefined) {
            config = {};
        }

        // Orientation
        if (!config.hasOwnProperty('orientation')) {
            config.orientation = 1; // y
        }

        // Parent
        var rootMenu = config._rootMenu;
        var parentMenu = config._parentMenu;
        var parentButton = config._parentButton;
        // Items
        var items = GetValue(config, 'items', undefined);
        // Background
        var createBackgroundCallback = GetValue(config, 'createBackgroundCallback', undefined);
        var createBackgroundCallbackScope = GetValue(config, 'createBackgroundCallbackScope', undefined);
        config.background = menu_CreateBackground(scene, items, createBackgroundCallback, createBackgroundCallbackScope);
        // Buttons
        var createButtonCallback = GetValue(config, 'createButtonCallback', undefined);
        var createButtonCallbackScope = GetValue(config, 'createButtonCallbackScope', undefined);
        config.buttons = menu_CreateButtons(scene, items, createButtonCallback, createButtonCallbackScope);

        super(scene, config);
        this.type = 'rexMenu';

        this.items = items;        
        this.root = (rootMenu === undefined) ? this : rootMenu;
        this.parentMenu = parentMenu;
        this.parentButton = parentButton;
        var isRootMenu = (this.root === this);
        if (isRootMenu) {
            // Bounds
            var bounds = config.bounds;
            if (bounds === undefined) {
                bounds = Object(GetDefaultBounds["a" /* default */])(scene);
            }
            this.bounds = bounds;

            // Expand mode
            this.expandEventName = GetValue(config, 'expandEvent', 'button.click');
            // toggleOrientation mode
            this.toggleOrientation = GetValue(config, 'toggleOrientation', false);
            // Transition
            this.easeIn = GetValue(config, 'easeIn', 0);
            if (typeof (this.easeIn) === 'number') {
                this.easeIn = { duration: this.easeIn };
            }
            this.easeOut = GetValue(config, 'easeOut', 0);
            if (typeof (this.easeOut) === 'number') {
                this.easeOut = { duration: this.easeOut };
            }
            // Callbacks
            this.createBackgroundCallback = createBackgroundCallback;
            this.createBackgroundCallbackScope = createBackgroundCallbackScope;
            this.createButtonCallback = createButtonCallback;
            this.createButtonCallbackScope = createButtonCallbackScope;

            // Event flag
            this._isPassedEvent = false;
        }
        this
            .setOrigin(0)
            .layout();

        var bounds = this.root.bounds;
        // Align to parentButton
        if (isRootMenu) {
            this.expandOrientation = [
                ((this.y < bounds.centerY) ? 1 : 3), // Expand down(1)/up(3)
                ((this.x < bounds.centerX) ? 0 : 2)  // Expand right(0)/left(2)
            ];

        } else { // Sub-menu, align to parent button
            var expandOrientation = this.root.expandOrientation[parentMenu.orientation];
            switch (expandOrientation) {
                case 0: //Expand right
                    this.alignTop(parentButton.top).alignLeft(parentButton.right);
                    break;
                case 1: //Expand down
                    this.alignLeft(parentButton.left).alignTop(parentButton.bottom);
                    break;
                case 2: //Expand left
                    this.alignTop(parentButton.top).alignRight(parentButton.left);
                    break;
                case 3: //Expand up
                    this.alignLeft(parentButton.left).alignBottom(parentButton.top);
                    break;
            }
        }
        this.pushIntoBounds(bounds);

        menu_MenuSetInteractive(this);

        // Ease in menu
        this.popUp(menu_GetEaseConfig(this, this.root.easeIn));
    }

    isInTouching(pointer) {
        if (super.isInTouching(pointer)) {
            return true;
        } else if (this.childrenMap.subMenu) {
            return this.childrenMap.subMenu.isInTouching(pointer);
        } else {
            return false;
        }
    }
}

Object.assign(
    Menu_Menu.prototype,
    Methods
);
/* harmony default export */ var menu_Menu = __webpack_exports__["a"] = (Menu_Menu);

/***/ }),
/* 319 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/system/GetSceneObject.js
var GetSceneObject = __webpack_require__(142);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/eventemitter/EventEmitterMethods.js
var EventEmitterMethods = __webpack_require__(129);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/fsm.js + 1 modules
var fsm = __webpack_require__(137);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/scroller/State.js


class State_State extends fsm["a" /* default */] {
    constructor(parent, config) {
        super(config);
        this.parent = parent;
        this.init();
    }

    init() {
        this.start('IDLE');
    }

    // IDLE -> DRAGBEGIN|DRAG
    next_IDLE() {
        var nextState,
            parent = this.parent,
            dragState = parent.dragState;
        if (dragState.isDown) {
            nextState = (parent.dragThreshold === 0) ? 'DRAG' : 'DRAGBEGIN';
        }
        return nextState;
    }
    update_IDLE(time, delta) {
        this.next();
    }
    // IDLE

    // DRAGBEGIN -> DRAG|IDLE
    next_DRAGBEGIN() {
        var nextState,
            parent = this.parent,
            dragState = parent.dragState;
        if (dragState.isDown) {
            nextState = (dragState.pointer.getDistance() >= parent.dragThreshold) ? 'DRAG' : 'DRAGBEGIN';
        } else { // dragState.isUp
            nextState = 'IDLE';
        }
        return nextState;
    }
    update_DRAGBEGIN(time, delta) {
        this.next();
    }
    // DRAGBEGIN

    // DRAG -> BACK|SLIDE|IDLE
    next_DRAG() {
        var nextState,
            parent = this.parent,
            dragState = parent.dragState;
        if (dragState.isUp) {
            if (parent.outOfBounds) {
                nextState = 'BACK';
            } else if (parent.slidingEnable) {
                nextState = 'SLIDE';
            } else {
                nextState = 'IDLE';
            }
        }
        return nextState;
    }
    update_DRAG(time, delta) {
        var parent = this.parent,
            dragState = parent.dragState;
        if (dragState.justMoved) {
            parent.dragging();
        }
        this.next();
    }
    // DRAG    

    // SLIDE -> DRAG|IDLE
    next_SLIDE() {
        var nextState,
            parent = this.parent,
            dragState = parent.dragState;
        if (dragState.isDown) {
            nextState = 'DRAG';
        } else if (!parent.isSliding) {
            nextState = 'IDLE';
        }
        return nextState;
    }
    enter_SLIDE() {
        this.parent.onSliding();
    }
    exit_SLIDE() {
        this.parent.stop();
    }
    update_SLIDE(time, delta) {
        this.parent.sliding(time, delta);
        this.next();
    }
    // SLIDE    

    // BACK -> DRAG|IDLE
    next_BACK() {
        var nextState,
            parent = this.parent,
            dragState = parent.dragState;
        if (dragState.isDown) {
            nextState = 'DRAG';
        } else if (!parent.isPullBack) {
            nextState = 'IDLE';
        }
        return nextState;
    }
    enter_BACK() {
        this.parent.onPullBack();
    }
    exit_BACK() {
        this.parent.stop();
    }
    update_BACK(time, delta) {
        this.parent.pullBack(time, delta);
        this.next();
    }
    // BACK
}

/* harmony default export */ var scroller_State = (State_State);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/dragspeed/DragSpeed.js



const GetValue = Phaser.Utils.Objects.GetValue;
const DistanceBetween = Phaser.Math.Distance.Between;

class DragSpeed_DragSpeed {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.scene = Object(GetSceneObject["a" /* default */])(gameObject);
        // Event emitter
        this.setEventEmitter(GetValue(config, 'eventEmitter', undefined));

        gameObject.setInteractive(GetValue(config, "inputConfig", undefined));
        this.resetFromJSON(config);
        this.boot();
    }

    resetFromJSON(o) {
        this.pointer = undefined;
        this.isInTouched = false;
        this.holdStartTime = undefined;
        this.x = undefined;
        this.y = undefined;
        this.preX = undefined;
        this.preY = undefined;
        this.localX = undefined;
        this.localY = undefined;
        this.justMoved = false;
        this.setEnable(GetValue(o, "enable", true));
        this.holdThreshold = GetValue(o, "holdThreshold", 50); // ms
        return this;
    }

    boot() {
        this.gameObject.on('pointerdown', this.onPointIn, this);
        this.gameObject.on('pointerover', this.onPointIn, this);
        this.gameObject.on('pointerup', this.onPointOut, this);
        this.gameObject.on('pointerout', this.onPointOut, this);
        this.gameObject.on('pointermove', this.onPointerMove, this);
        this.gameObject.on('destroy', this.destroy, this);
        this.scene.events.on('preupdate', this.preupdate, this);
    }

    shutdown() {
        if (this.scene) { // Scene might be destoryed
            this.scene.events.off('preupdate', this.preupdate, this);
        }
        this.pointer = undefined;
        this.gameObject = undefined;
        this.scene = undefined;
        // GameObject events will be removed when this gameObject destroyed 
        this.destroyEventEmitter();
    }

    destroy() {
        this.shutdown();
    }

    setEnable(e) {
        if (e === undefined) {
            e = true;
        }

        if (this.enable === e) {
            return this;
        }

        if (!e) {
            this.isInTouched = false;
            this.pointer = undefined;
        }
        this.enable = e;
        this.gameObject.input.enabled = e;
        return this;
    }

    get isDown() {
        return this.pointer && this.pointer.isDown;
    }

    get isUp() {
        return !this.isDown;
    }

    get dx() {
        return this.x - this.preX;
    }

    get dy() {
        return this.y - this.preY;
    }

    get dt() {
        var game = this.scene.sys.game;
        var delta = game.loop.delta;
        return delta;
    }

    get speed() {
        if ((this.x === this.preX) && (this.y === this.preY)) {
            return 0;
        }
        var d = DistanceBetween(this.preX, this.preY, this.x, this.y);
        var speed = d / (this.dt * 0.001);
        return speed;
    }

    get speedX() {
        return this.dx / (this.dt * 0.001);
    }

    get speedY() {
        return this.dy / (this.dt * 0.001);
    }

    // internal
    onPointIn(pointer, localX, localY) {
        if (!pointer.isDown ||
            (this.pointer !== undefined)) {
            return;
        }
        this.pointer = pointer;
        this.localX = localX;
        this.localY = localY;
    }

    onPointOut(pointer) {
        if (this.pointer !== pointer) {
            return;
        }
        this.pointer = undefined;
    }

    onPointerMove(pointer, localX, localY) {
        if (!pointer.isDown ||
            (this.pointer !== pointer)) {
            return;
        }
        this.localX = localX;
        this.localY = localY;
    }

    preupdate(time, delta) {
        var pointer = this.pointer;
        this.justMoved = false;
        if (pointer && (!this.isInTouched)) {
            // Touch start
            this.x = pointer.x;
            this.y = pointer.y;
            this.preX = pointer.x;
            this.preY = pointer.y;
            this.isInTouched = true;
            this.holdStartTime = undefined;
            this.emit('touchstart', pointer, this.localX, this.localY);

        } else if (pointer && this.isInTouched) {
            // In touch
            if ((this.x === pointer.x) && (this.y === pointer.y)) {
                // Hold
                if (this.holdStartTime === undefined) {
                    this.holdStartTime = time;
                } else if (time - this.holdStartTime > this.holdThreshold) {
                    this.preX = this.x;
                    this.preY = this.y;
                }
            } else {
                // Move
                this.preX = this.x;
                this.preY = this.y;
                this.x = pointer.x;
                this.y = pointer.y;
                this.holdStartTime = undefined;
                this.justMoved = true;
                this.emit('touchmove', pointer, this.localX, this.localY);
            }

        } else if ((!pointer) && this.isInTouched) {
            // Touch end
            this.isInTouched = false;
            this.holdStartTime = undefined;
            this.emit('touchend', pointer);

        }
    }
}

Object.assign(
    DragSpeed_DragSpeed.prototype,
    EventEmitterMethods["a" /* default */]
);

/* harmony default export */ var dragspeed_DragSpeed = (DragSpeed_DragSpeed);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/dragspeed.js

/* harmony default export */ var dragspeed = (dragspeed_DragSpeed);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/movement/Movement.js
const Movement_GetValue = Phaser.Utils.Objects.GetValue;

class Movement {
    constructor(config) {
        this.resetFromJSON(config);
    }

    resetFromJSON(o) {
        this.setValue(Movement_GetValue(o, 'value', 0));
        this.setSpeed(Movement_GetValue(o, 'speed', 0));
        this.setAcceleration(Movement_GetValue(o, 'acceleration', 0));
        return this;
    }

    reset() {
        this.setValue(0);
        this.setSpeed(0);
        this.setAcceleration(0);
    }

    setValue(value) {
        this.value = value;
        return this;
    }

    setSpeed(speed) {
        // speed == 0 : stop
        // speed  > 0 : move
        this.speed = speed;
        return this;        
    }

    setAcceleration(acc) {
        // acc == 0 : constant speed
        // acc  > 0 : acceleration
        // acc  < 0 : deceleration
        this.acceleration = acc;
        return this;
    }

    updateSpeed(delta) {
        // delta in sec
        if (this.acceleration !== 0) {
            this.speed += (this.acceleration * delta);
            if (this.speed < 0) {
                this.speed = 0;
            }
        }
        return this;
    }

    getDeltaValue(delta) {
        // delta in sec
        this.updateSpeed(delta);
        if (this.speed <= 0) {
            return 0;
        }
        return (this.speed * delta);
    }

    update(delta) {
        // delta in sec
        this.updateSpeed(delta);
        if (this.speed > 0) {
            this.value += this.getDeltaValue(delta);
        }
        return this;
    }

    get isMoving() {
        return (this.speed > 0);
    }
}
/* harmony default export */ var movement_Movement = (Movement);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/movement/SlowDown.js


class SlowDown_SlowDown {
    constructor() {
        this.value;
        this.dir; // true:+, false:-
        this.movement = new movement_Movement();
    }

    init(start, dir, speed, dec, end) {
        this.value = start;
        this.end = end;
        if (end !== undefined) {
            this.dir = (start < end);
        } else {
            this.dir = dir;
        }

        this.movement
            .setSpeed(speed)
            .setAcceleration(-dec);
        return this;
    }

    stop() {
        this.movement.reset();
    }

    update(delta) {
        // delta in sec
        var d = this.movement.getDeltaValue(delta);
        if (!this.dir) {
            d = -d;
        }

        if (this.end === undefined) {
            this.value += d;
        } else {
            if (d === 0) {
                this.value = this.end;
            } else {
                this.value += d;
                if (this.dir) { // +
                    if (this.value > this.end) {
                        this.value = this.end;
                    }
                } else { // -
                    if (this.value < this.end) {
                        this.value = this.end;
                    }
                }
            }
        }
        return this;
    }

    get isMoving() {
        return this.movement.isMoving;
    }
}
/* harmony default export */ var movement_SlowDown = (SlowDown_SlowDown);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/scroller/Scroller.js






const Scroller_GetValue = Phaser.Utils.Objects.GetValue;

class Scroller_Scroller {
    constructor(gameObject, config) {
        this.gameObject = gameObject;
        this.scene = Object(GetSceneObject["a" /* default */])(gameObject);
        // Event emitter
        this.setEventEmitter(Scroller_GetValue(config, 'eventEmitter', undefined));

        var enable = Scroller_GetValue(config, 'enable', true);
        var stateConfig = {
            enable: enable,
            eventEmitter: false,
        }
        this._state = new scroller_State(this, stateConfig);

        var drapSpeedConfig = {
            inputConfig: Scroller_GetValue(config, 'inputConfig', undefined),
            enable: enable,
            eventEmitter: false,
        };
        this.dragState = new dragspeed(gameObject, drapSpeedConfig);

        this._value = undefined;
        this._slowDown = new movement_SlowDown();

        var callback = Scroller_GetValue(config, 'valuechangeCallback', null);
        if (callback !== null) {
            var scope = Scroller_GetValue(config, 'valuechangeCallbackScope', undefined);
            this.on('valuechange', callback, scope);
        }
        callback = Scroller_GetValue(config, 'overmaxCallback', null);
        if (callback !== null) {
            var scope = Scroller_GetValue(config, 'overmaxCallbackScope', undefined);
            this.on('overmax', callback, scope);
        }
        callback = Scroller_GetValue(config, 'overminCallback', null);
        if (callback !== null) {
            var scope = Scroller_GetValue(config, 'overminCallbackScope', undefined);
            this.on('overmin', callback, scope);
        }

        this.resetFromJSON(config);
        this.boot();
    }

    resetFromJSON(o) {
        this.setOrientationMode(Scroller_GetValue(o, 'orientation', 0));
        this.setDragThreshold(Scroller_GetValue(o, 'threshold', 10));
        this.setSlidingDeceleration(Scroller_GetValue(o, 'slidingDeceleration', 5000));
        this.setBackDeceleration(Scroller_GetValue(o, 'backDeceleration', 2000));
        this.boundPad0 = Scroller_GetValue(o, 'boundPad0', 0);
        this.boundPad1 = Scroller_GetValue(o, 'boundPad1', 0);
        var bounds = Scroller_GetValue(o, 'bounds', undefined);
        if (bounds) {
            this.setBounds(bounds);
        } else {
            this.setBounds(Scroller_GetValue(o, 'max', 0), Scroller_GetValue(o, 'min', 0));
        }
        this.setValue(Scroller_GetValue(o, 'value', this.maxValue || 0 + this.boundPad1));
        this.setEnable(Scroller_GetValue(o, "enable", true));
        return this;
    }

    boot() {
        this.scene.events.on('update', this._state.update, this._state);
        this.gameObject.on('destroy', this.destroy, this);
    }

    shutdown() {
        this.destroyEventEmitter();
        if (this.scene) { // Scene might be destoryed
            this.scene.events.off('update', this._state.update, this._state);
        }
        this.gameObject = undefined;
        this.scene = undefined;
        this._state.destroy();
        this.dragState.destroy();
        // gameObject events will be removed when this gameObject destroyed 
    }

    destroy() {
        this.shutdown();
    }

    setOrientationMode(m) {
        if (typeof (m) === 'string') {
            m = ORIENTATIONMODE[m];
        }
        this.orientationMode = m;
        return this;
    }

    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }

    setSlidingDeceleration(dec) {
        this.slidingDeceleration = dec;
        return this;
    }

    setBackDeceleration(dec) {
        this.backDeceleration = dec;
        return this;
    }

    setBounds(value0, value1) {
        if (Array.isArray(value0)) {
            var bounds = value0;
            value0 = bounds[0];
            value1 = bounds[1];
        }
        if (value0 < value1) {
            this.minValue = value0 + this.boundPad0;
            this.maxValue = value1 + this.boundPad1;
        } else {
            this.minValue = value1 + this.boundPad0;
            this.maxValue = value0 + this.boundPad1;
        }
        return this;
    }

    get value() {
        return this._value;
    }

    set value(value) {
        if (value === this._value) {
            return;
        }

        var oldValue = this._value;
        var isOverMax = this.overMax(value);
        var isOverMin = this.overMin(value);
        if (isOverMax) {
            this.emit('overmax', value, oldValue);
        }
        if (isOverMin) {
            this.emit('overmin', value, oldValue);
        }
        if (!this.backEnable) {
            if (isOverMax) {
                value = this.maxValue;
            }
            if (isOverMin) {
                value = this.minValue;
            }
        }

        this._value = value;
        this.emit('valuechange', value, oldValue);
    }

    setValue(value) {
        this.value = value;
    }

    setEnable(e) {
        this._state.setEnable(e);
        this.dragState.setEnable(e);
        return this;
    }

    get state() {
        return this._state.state;
    }

    get isDragging() {
        return this.dragState.isInTouched;
    }

    get outOfMaxBound() {
        return this.overMax(this.value);
    }

    get outOfMinBound() {
        return this.overMin(this.value);
    }

    get outOfBounds() {
        return this.outOfMinBound || this.outOfMaxBound;
    }

    // internal
    overMax(value) {
        return (this.maxValue != null) && (value > this.maxValue);
    }

    overMin(value) {
        return (this.minValue != null) && (value < this.minValue);
    }

    get backEnable() {
        return (typeof (this.backDeceleration) === 'number');
    }

    get isPullBack() {
        return this._slowDown.isMoving;
    }

    get slidingEnable() {
        return (typeof (this.slidingDeceleration) === 'number');
    }

    get isSliding() {
        return this._slowDown.isMoving;
    }

    get dragDelta() {
        if (this.orientationMode === 0) { // y
            return this.dragState.dy;
        } else if (this.orientationMode === 1) { // x
            return this.dragState.dx;
        } else {
            return 0;
        }
    }

    get dragSpeed() {
        if (this.orientationMode === 0) { // y
            return this.dragState.speedY;
        } else if (this.orientationMode === 1) { // x
            return this.dragState.speedX;
        } else {
            return 0;
        }
    }

    // everyTick_DRAG
    dragging() {
        this.value += this.dragDelta;
    }

    // enter_SLIDE 
    onSliding() {
        var start = this.value;
        var speed = this.dragSpeed;
        if (speed === 0) {
            this._slowDown.stop();
            this._state.next();
            return;
        }
        var dec = this.slidingDeceleration;
        this._slowDown.init(start, (speed > 0), Math.abs(speed), dec)
    }

    // everyTick_SLIDE
    sliding(time, delta) {
        delta *= 0.001;
        var newValue = this._slowDown.update(delta).value;
        if (this.overMax(newValue)) {
            this.value = this.maxValue;
            this._slowDown.stop();
        } else if (this.overMin(newValue)) {
            this.value = this.minValue;
            this._slowDown.stop();
        } else {
            this.value = newValue;
        }
    }

    // enter_BACK
    onPullBack() {
        var start = this.value;
        var end = (this.outOfMinBound) ? this.minValue : this.maxValue;
        var dist = Math.abs(end - start);
        var dec = this.backDeceleration;
        var speed = Math.sqrt(2 * dec * dist);
        this._slowDown.init(start, undefined, speed, dec, end);
    }

    // everyTick_BACK
    pullBack(time, delta) {
        delta *= 0.001;
        this.value = this._slowDown.update(delta).value;

        if (!this._slowDown.isMoving) {
            this._state.next();
        }
    }

    // exit_SLIDE, exit_BACK
    stop() {
        this._slowDown.stop();
    }

}

Object.assign(
    Scroller_Scroller.prototype,
    EventEmitterMethods["a" /* default */]
);

/** @private */
const ORIENTATIONMODE = {
    y: 0,
    v: 0,
    vertical: 0,
    x: 1,
    h: 1,
    horizontal: 1,
};

/* harmony default export */ var scroller_Scroller = __webpack_exports__["a"] = (Scroller_Scroller);

/***/ }),
/* 320 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/sizer/Sizer.js + 11 modules
var Sizer = __webpack_require__(126);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetScrollMode.js
var GetScrollMode = __webpack_require__(167);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/slider/Slider.js + 9 modules
var Slider = __webpack_require__(189);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/scroller/Scroller.js + 5 modules
var Scroller = __webpack_require__(319);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/scroller.js

/* harmony default export */ var plugins_scroller = (Scroller["a" /* default */]);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/utils/scrollable/CreateScrollableSizer.js





const GetValue = Phaser.Utils.Objects.GetValue;

var CreateScrollableSizer = function (config) {
    var scene = this.scene;
    var scrollMode = Object(GetScrollMode["a" /* default */])(config);
    var scrollableSizer = new Sizer["a" /* default */](scene, { orientation: scrollMode });

    var child = GetValue(config, 'child.gameObject', undefined);
    var sliderConfig = GetValue(config, 'slider', undefined), slider;
    var scrollerConfig = GetValue(config, 'scroller', true), scroller;

    // Child, slider, scroller
    if (child) {
        var childSpace = GetValue(config, 'space.child', 0);
        this.childPadding = {};
        if (typeof (childSpace) !== 'number') {
            var childPadding = childSpace;
            if (scrollMode === 0) {
                childSpace = GetValue(childPadding, 'right', 0);
                this.childPadding.top = GetValue(childPadding, 'top', 0);
                this.childPadding.bottom = GetValue(childPadding, 'bottom', 0);
            } else {
                childSpace = GetValue(childPadding, 'bottom', 0);
                this.childPadding.top = GetValue(childPadding, 'left', 0);
                this.childPadding.bottom = GetValue(childPadding, 'right', 0);
            }
        } else {
            this.childPadding.top = 0;
            this.childPadding.bottom = 0;
        }

        var proportion = GetValue(config, 'child.proportion', 1);
        var expand = GetValue(config, 'child.expand', true);
        var padding;
        if (scrollMode === 0) {
            padding = {
                right: (sliderConfig) ? childSpace : 0,
            };
        } else {
            padding = {
                bottom: (sliderConfig) ? childSpace : 0
            };
        }
        scrollableSizer.add(child, proportion, 'center', padding, expand);

        if (sliderConfig) {
            if (sliderConfig === true) {
                sliderConfig = {};
            }
            sliderConfig.orientation = scrollableSizer.orientation;
            slider = new Slider["a" /* default */](scene, sliderConfig);
            scrollableSizer.add(slider, 0, 'center', 0, true);
        }


        if (scrollerConfig) {
            if (scrollerConfig === true) {
                scrollerConfig = {};
            }
            scrollerConfig.orientation = scrollMode;
            scroller = new plugins_scroller(child, scrollerConfig);
        }
    }

    // Control
    if (slider) {
        slider.on('valuechange', function (newValue) {
            this.t = newValue;
        }, this);
    }
    if (scroller) {
        scroller.on('valuechange', function (newValue) {
            this.childOY = newValue;
        }, this);
    }

    this.addChildrenMap('child', child);
    this.addChildrenMap('slider', slider);
    this.addChildrenMap('scroller', scroller);

    return scrollableSizer;
}

/* harmony default export */ var scrollable_CreateScrollableSizer = (CreateScrollableSizer);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/utils/scrollable/ResizeController.js
var ResizeController = function () {
    var topChildOY = this.topChildOY;
    var bottomChildOY = this.bottomChildOY;
    var scroller = this.childrenMap.scroller;
    var slider = this.childrenMap.slider;
    if (scroller) {
        scroller.setBounds(bottomChildOY, topChildOY);
    }
    if (slider) {
        slider.setEnable(bottomChildOY !== topChildOY);
    }
    this.updateController();
    return this;
}

/* harmony default export */ var scrollable_ResizeController = (ResizeController);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/utils/scrollable/UpdateController.js
var UpdateController = function () {
    var scroller = this.childrenMap.scroller;
    var slider = this.childrenMap.slider;
    if (scroller) {
        scroller.setValue(this.childOY);
    }
    if (slider) {
        slider.setValue(this.t);
    }
}

/* harmony default export */ var scrollable_UpdateController = (UpdateController);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/utils/scrollable/Scrollable.js






const Scrollable_GetValue = Phaser.Utils.Objects.GetValue;
class Scrollable_Scrollable extends Sizer["a" /* default */] {
    constructor(scene, config) {
        if (config === undefined) {
            config = {};
        }

        var scrollMode = Object(GetScrollMode["a" /* default */])(config); // Left-to-right, or top-to-bottom
        // Create sizer
        config.orientation = (scrollMode === 0) ? 1 : 0;
        super(scene, config);
        this.type = Scrollable_GetValue(config, 'type', 'rexScrollable');

        // Add elements
        var background = Scrollable_GetValue(config, 'background', undefined);
        var scrollableSizer = scrollable_CreateScrollableSizer.call(this, config);
        var header = Scrollable_GetValue(config, 'header', undefined);
        var footer = Scrollable_GetValue(config, 'footer', undefined);

        // Space
        var paddingLeft = Scrollable_GetValue(config, 'space.left', 0);
        var paddingRight = Scrollable_GetValue(config, 'space.right', 0);
        var paddingTop = Scrollable_GetValue(config, 'space.top', 0);
        var paddingBottom = Scrollable_GetValue(config, 'space.bottom', 0);

        // Background
        if (background) {
            this.addBackground(background);
        }

        if (header) {
            var align = Scrollable_GetValue(config, 'align.header', 'center');
            var headerSpace = Scrollable_GetValue(config, 'space.header', 0);
            var padding;
            if (scrollMode === 0) {
                padding = {
                    left: paddingLeft,
                    right: paddingRight,
                    top: paddingTop,
                    bottom: headerSpace,
                };
            } else {
                padding = {
                    left: paddingLeft,
                    right: headerSpace,
                    top: paddingTop,
                    bottom: paddingBottom,
                };
            }
            var expand = Scrollable_GetValue(config, 'expand.header', true);
            this.add(header, 0, align, padding, expand);
        }

        if (scrollableSizer) {
            var padding;
            if (scrollMode === 0) {
                padding = {
                    left: paddingLeft,
                    right: paddingRight,
                    top: (header) ? 0 : paddingTop,
                    bottom: (footer) ? 0 : paddingBottom,
                };
            } else {
                padding = {
                    left: (header) ? 0 : paddingLeft,
                    right: (footer) ? 0 : paddingRight,
                    top: paddingTop,
                    bottom: paddingBottom,
                };
            }
            this.add(scrollableSizer, 1, 'center', padding, true);
        }

        if (footer) {
            var align = Scrollable_GetValue(config, 'align.footer', 'center');
            var footerSpace = Scrollable_GetValue(config, 'space.footer', 0);
            var padding;
            if (scrollMode === 0) {
                padding = {
                    left: paddingLeft,
                    right: paddingRight,
                    top: footerSpace,
                    bottom: paddingBottom,
                };
            } else {
                padding = {
                    left: footerSpace,
                    right: paddingRight,
                    top: paddingTop,
                    bottom: paddingBottom,
                };
            }
            var expand = Scrollable_GetValue(config, 'expand.footer', true);
            this.add(footer, 0, align, padding, expand);
        }

        this.addChildrenMap('background', background);
        this.addChildrenMap('header', header);
        this.addChildrenMap('footer', footer);

        // Necessary properties of child object
        // child.t (RW), child.childOY (RW), child.topChildOY (R), child.bottomChildOY (R)
    }

    layout(parent, newWidth, newHeight) {
        super.layout(parent, newWidth, newHeight);
        this.resizeController();
        return this;
    }

    set t(t) {
        // Get inner childT
        var childPadding = this.childPadding;
        if ((childPadding.top !== 0) || (childPadding.bottom !== 0)) {
            var child = this.childrenMap.child
            var innerHeight = (child.topChildOY - child.bottomChildOY);
            var outterHeight = innerHeight + childPadding.top + childPadding.bottom;
            var innerChildOY = (outterHeight * t) - childPadding.top;
            t = innerChildOY / innerHeight;
        }

        this.childrenMap.child.t = t;
        this.updateController();
    }

    get t() {
        var t = this.childrenMap.child.t;

        // Get outter childT
        var childPadding = this.childPadding;
        if ((childPadding.top !== 0) || (childPadding.bottom !== 0)) {
            var child = this.childrenMap.child
            var innerHeight = (child.topChildOY - child.bottomChildOY);
            var outterHeight = innerHeight + childPadding.top + childPadding.bottom;
            var outterChildOY = (innerHeight * t) + childPadding.top;
            t = outterChildOY / outterHeight;
        }
        return t;
    }

    set childOY(value) {
        this.childrenMap.child.childOY = value;
        this.updateController();
    }

    get childOY() {
        return this.childrenMap.child.childOY;
    }

    get topChildOY() {
        return this.childrenMap.child.topChildOY + this.childPadding.top;
    }

    get bottomChildOY() {
        return this.childrenMap.child.bottomChildOY - this.childPadding.bottom;
    }

    setChildOY(value) {
        this.childOY = value;
        return this;
    }

    setT(value) {
        this.t = value;
        return this;
    }

    scrollToTop() {
        this.t = 0;
        return this;
    }

    scrollToBottom() {
        this.t = 1;
        return this;
    }

    get sliderEnable() {
        var slider = this.childrenMap.slider;
        if (!slider) {
            return undefined;
        }

        return slider.enable;
    }

    set sliderEnable(value) {
        var slider = this.childrenMap.slider;
        if (!slider) {
            return;
        }
        slider.setEnable(value);
    }

    setSliderEnable(enabled) {
        if (enabled === undefined) {
            enabled = true;
        }
        this.sliderEnable = enabled;
        return this;
    }

    get scrollerEnable() {
        var scroller = this.childrenMap.scroller;
        if (!scroller) {
            return undefined;
        }

        return scroller.enable;
    }

    set scrollerEnable(value) {
        var scroller = this.childrenMap.scroller;
        if (!scroller) {
            return;
        }
        scroller.setEnable(value);
    }

    setScrollerEnable(enabled) {
        if (enabled === undefined) {
            enabled = true;
        }
        this.scrollerEnable = enabled;
        return this;
    }
}

var Methods = {
    resizeController: scrollable_ResizeController,
    updateController: scrollable_UpdateController
}

// mixin
Object.assign(
    Scrollable_Scrollable.prototype,
    Methods
);

/* harmony default export */ var scrollable_Scrollable = __webpack_exports__["a"] = (Scrollable_Scrollable);

/***/ }),
/* 321 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/gestures/twopointerstracer/TwoPointersTracer.js
var TwoPointersTracer = __webpack_require__(354);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/fsm.js + 1 modules
var fsm = __webpack_require__(137);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/actions/RotateObjectAround.js
const RotateAround = Phaser.Math.RotateAround;

var RotateObjectAround = function (gameObject, x, y, angle) {
    RotateAround(gameObject, x, y, angle);
    gameObject.rotation += angle;
    return gameObject;
}

/* harmony default export */ var actions_RotateObjectAround = (RotateObjectAround);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/gestures/rotate/SpinObject.js


var SpinObject = function (gameObject, camera) {
    if (!this.isRotation) {
        return this;
    }

    if (camera === undefined) {
        camera = this.pointers[0].camera;
    }

    var movementX = this.movementCenterX,
        movementY = this.movementCenterY;

    camera.getWorldPoint(this.centerX, this.centerY, tmpPos);
    var centerWorldX = tmpPos.x;
    var centerWorldY = tmpPos.y;

    var angle = this.rotation;
    if (Array.isArray(gameObject)) {
        var gameObjects = gameObject;
        for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
            gameObject = gameObjects[i];
            gameObject.x += movementX;
            gameObject.y += movementY;
            actions_RotateObjectAround(gameObject, centerWorldX, centerWorldY, angle);
        }
    } else {
        gameObject.x += movementX;
        gameObject.y += movementY;
        actions_RotateObjectAround(gameObject, x, y, angle);
    }
    return this;
}

var tmpPos = {};

/* harmony default export */ var rotate_SpinObject = (SpinObject);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/gestures/rotate/Rotate.js




const GetValue = Phaser.Utils.Objects.GetValue;
const WrapDegrees = Phaser.Math.Angle.WrapDegrees; // Wrap degrees: -180 to 180 
const ShortestBetween = Phaser.Math.Angle.ShortestBetween;
const RadToDeg = Phaser.Math.RadToDeg;
const DegToRad = Phaser.Math.DegToRad;

class Rotate_Rotate extends TwoPointersTracer["a" /* default */] {
    constructor(scene, config) {
        super(scene, config);

        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function () {
                        self.prevAngle = undefined;
                        self.angle = 0;
                    },
                },
                BEGIN: {
                },
                RECOGNIZED: {
                    enter: function () {
                        self.emit('rotatestart', self);
                    },
                    exit: function () {
                        self.emit('rotateend', self);
                    }
                }
            },
            init: function () {
                this.state = IDLE;
            },
            eventEmitter: false,
        }
        this.setRecongizedStateObject(new fsm["a" /* default */](stateConfig));
    }

    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(GetValue(o, 'threshold', 0));
        return this;
    }

    onDrag2Start() {
        this.prevAngle = WrapDegrees(RadToDeg(this.angleBetween)); // Degrees
        this.state = (this.rotationThreshold === 0) ? RECOGNIZED : BEGIN;
    }

    onDrag2End() {
        this.state = IDLE;
    }

    onDrag2() {
        switch (this.state) {
            case BEGIN:
                if ((this.pointers[0].getDistance() >= this.dragThreshold) &&
                    (this.pointers[1].getDistance() >= this.dragThreshold)) {
                    var curAngle = WrapDegrees(RadToDeg(this.angleBetween));
                    this.angle = ShortestBetween(this.prevAngle, curAngle);
                    this.prevAngle = curAngle;
                    this.state = RECOGNIZED;
                }
                break;
            case RECOGNIZED:
                var curAngle = WrapDegrees(RadToDeg(this.angleBetween));
                this.angle = ShortestBetween(this.prevAngle, curAngle);
                this.prevAngle = curAngle;
                this.emit('rotate', this);
                break;
        }
    }

    get isRotation() {
        return (this.state === RECOGNIZED);
    }

    get rotation() {
        return DegToRad(this.angle);
    }

    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }

}

var methods = {
    spinObject: rotate_SpinObject,
};
Object.assign(
    Rotate_Rotate.prototype,
    methods
);


const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';

/* harmony default export */ var rotate_Rotate = (Rotate_Rotate);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/rotate/Rotate.js

/* harmony default export */ var ui_rotate_Rotate = __webpack_exports__["a"] = (rotate_Rotate);

/***/ }),
/* 322 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/tween/TweenBase.js
var TweenBase = __webpack_require__(215);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/behaviors/flip/GetFaceUpdatingCallback.js
const IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
const GetValue = Phaser.Utils.Objects.GetValue;

var GetFaceUpdatingCallback = function (key, frame, gameObject) {
    var callback;
    if (key === undefined) {
        key = gameObject.texture.key;
        frame = gameObject.frame.name;
    } else if (IsPlainObject(key)) {
        var config = key;
        key = GetValue(config, 'key', gameObject.texture.key);
        frame = GetValue(config, 'frame', gameObject.frame.name);
    } else if (typeof (key) === 'string') {
    } else {
        callback = key;
    }

    if (callback === undefined) {
        callback = function (gameObject) {
            gameObject.setTexture(key, frame);
        }
    }
    return callback;
}

/* harmony default export */ var flip_GetFaceUpdatingCallback = (GetFaceUpdatingCallback);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/behaviors/flip/Flip.js



const Flip_GetValue = Phaser.Utils.Objects.GetValue;
const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;

class Flip_Flip extends TweenBase["a" /* default */] {
    constructor(gameObject, config) {
        super(gameObject, { eventEmitter: true });
        this.gameObject = gameObject;

        this.resetFromJSON(config);
    }

    resetFromJSON(o) {
        this.setOrientation(Flip_GetValue(o, 'orientation', 0));
        this.setDelay(GetAdvancedValue(o, 'delay', 0));
        this.setDuration(GetAdvancedValue(o, 'duration', 500));
        this.setEase(Flip_GetValue(o, 'ease', 'Sine'));

        this.setFrontFace(Flip_GetValue(o, 'front', undefined));
        this.setBackFace(Flip_GetValue(o, 'back', undefined));
        this.setFace(Flip_GetValue(o, 'face', 0));
        return this;
    }

    shutdown() {
        super.shutdown();
        this.gameObject = undefined;
        return this;
    }

    setOrientation(orientation) {
        if (typeof (orientation) === 'string') {
            orientation = ORIENTATIONMODE[orientation];
        }
        this.orientation = orientation;
        return this;
    }

    setDelay(time) {
        this.delay = time;
        return this;
    }

    setDuration(time) {
        this.duration = time;
        return this;
    }

    setEase(ease) {
        if (ease === undefined) {
            ease = 'Linear';
        }
        this.ease = ease;
        return this;
    }

    get face() {
        return this._face;
    }

    set face(face) {
        if (typeof (face) === 'string') {
            face = FACEMODE[face];
        }
        this._face = face;
        if ((face === 0) && this.frontFaceCallback) {
            this.frontFaceCallback(this.gameObject);
        } else if ((face === 1) && this.backFaceCallback) {
            this.backFaceCallback(this.gameObject);
        }
    }

    setFace(face) {
        this.face = face;
        return this;
    }

    toggleFace() {
        var newFace = (this.face === 0) ? 1 : 0;
        this.setFace(newFace);
        return this;
    }

    setFrontFace(key, frame) {
        this.frontFaceCallback = flip_GetFaceUpdatingCallback(key, frame, this.gameObject);
        return this;
    }

    setBackFace(key, frame) {
        this.backFaceCallback = flip_GetFaceUpdatingCallback(key, frame, this.gameObject);
        return this;
    }

    start() {
        if (this.isRunning) {
            return this;
        }

        var config = {
            targets: this.gameObject,
            delay: this.delay,
            duration: this.duration / 2,
            ease: this.ease,
            yoyo: true,
            repeat: 0,

            onYoyo: this.toggleFace,
            onYoyoScope: this
        }

        var propKey = (this.orientation === 0) ? 'scaleX' : 'scaleY';
        config[propKey] = { from: 1, to: 0 };

        super.start(config);
        return this;
    }

    flip(duration) {
        if (this.isRunning) {
            return this;
        }
        if (duration !== undefined) {
            this.setDuration(duration);
        }
        this.start();
        return this;
    }
}

const ORIENTATIONMODE = {
    x: 0,
    horizontal: 0,
    y: 1,
    vertical: 1,
}

const FACEMODE = {
    front: 0,
    back: 1,
}

/* harmony default export */ var flip_Flip = (Flip_Flip);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/flip.js

/* harmony default export */ var flip = (flip_Flip);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/flip/Flip.js

/* harmony default export */ var ui_flip_Flip = __webpack_exports__["a"] = (flip);

/***/ }),
/* 323 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "InteractionBubble", function() { return /* binding */ interactionbubble_InteractionBubble; });

// CONCATENATED MODULE: ./src/rooms/Animation/ianimationbase.ts
var AnimationUrlData = /** @class */ (function () {
    function AnimationUrlData() {
    }
    AnimationUrlData.prototype.setData = function (resName, resUrl, isbone, extension) {
        if (isbone === void 0) { isbone = false; }
        if (extension === void 0) { extension = ".json"; }
        this.resName = resName;
        this.resUrl = resUrl;
        this.pngUrl = resUrl + "/" + resName + (!isbone ? ".png" : "_tex.png");
        this.jsonUrl = resUrl + "/" + resName + (!isbone ? ".json" : "_tex.json");
        if (isbone)
            this.boneUrl = resUrl + "/" + resName + "_ske" + extension;
        this.responseType = extension === ".dbbin" ? "arraybuffer" : null;
        this.boneXhrSettings = this.responseType ? { responseType: "arraybuffer" } : null;
    };
    AnimationUrlData.prototype.setDisplayData = function (pngUrl, jsonUrl, extension) {
        if (extension === void 0) { extension = ".json"; }
        this.pngUrl = pngUrl;
        this.jsonUrl = jsonUrl;
        this.responseType = extension === ".dbbin" ? "arraybuffer" : null;
        this.boneXhrSettings = this.responseType ? { responseType: "arraybuffer" } : null;
    };
    AnimationUrlData.prototype.dispose = function () {
        this.textureXhrSettings = null;
        this.atlasXhrSettings = null;
        this.boneXhrSettings = null;
    };
    return AnimationUrlData;
}());


// CONCATENATED MODULE: ./src/rooms/Animation/bubble.animation.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var bubble_animation_BubbleAnimation = /** @class */ (function (_super) {
    __extends(BubbleAnimation, _super);
    function BubbleAnimation(scene) {
        var _this = _super.call(this, scene) || this;
        _this.loaded = false;
        _this.isPlaying = false;
        _this.loop = false;
        return _this;
    }
    BubbleAnimation.prototype.load = function (resName, resUrl, data) {
        this.resName = resName ? resName : resUrl;
        this.resUrl = resUrl;
        this.animUrlData = new AnimationUrlData();
        if (resName)
            this.animUrlData.setData(this.resName, this.resUrl);
        else
            this.animUrlData.setDisplayData(resUrl, data);
        this.scene.load.image(this.resName, this.animUrlData.pngUrl);
        this.scene.load.image(this.animUrlData.jsonUrl, this.animUrlData.jsonUrl);
        this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadComplete, this);
        this.scene.load.start();
    };
    BubbleAnimation.prototype.play = function (aniName) {
        this.isPlaying = true;
        if (!this.frameAnim)
            return;
        this.setScale(0.2, 0.2);
        this.y = 50;
        this.scene.tweens.add({
            targets: this,
            y: { value: -100, duration: 300, ease: "Bounce.easeOut" },
            scaleX: { value: 1, duration: 300, ease: "Bounce.easeOut" },
            scaleY: { value: 1, duration: 300, ease: "Bounce.easeOut" },
        });
    };
    BubbleAnimation.prototype.destroy = function () {
        if (this.frameAnim)
            this.frameAnim.destroy();
        if (this.bubblebg)
            this.bubblebg.destroy();
        if (this.animUrlData)
            this.animUrlData.dispose();
        this.frameAnim = null;
        this.animUrlData = null;
        this.bubblebg = null;
    };
    BubbleAnimation.prototype.onLoadComplete = function (loader, totalComplete, totalFailed) {
        this.loaded = true;
        this.bubblebg = this.scene.add.image(0, 0, this.resName);
        this.frameAnim = this.scene.add.image(0, 0, this.animUrlData.jsonUrl);
        this.add([this.bubblebg, this.frameAnim]);
        if (this.isPlaying)
            this.play();
    };
    return BubbleAnimation;
}(Phaser.GameObjects.Container));


// CONCATENATED MODULE: ./src/ui/Bubble/interactionbubble.ts
var interactionbubble_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var interactionbubble_InteractionBubble = /** @class */ (function (_super) {
    interactionbubble_extends(InteractionBubble, _super);
    function InteractionBubble(scene, dpr) {
        var _this = _super.call(this, scene) || this;
        _this.mWdith = 78;
        _this.mHeight = 78;
        _this.width = _this.mWdith * dpr;
        _this.height = _this.mHeight * dpr;
        return _this;
    }
    InteractionBubble.prototype.setContentData = function (content, handler) {
        this.content = content;
        if (this.handler)
            this.handler.clear();
        this.handler = handler;
    };
    InteractionBubble.prototype.load = function (resName, url, jsonUrl) {
        this.createAnimation();
        this.mBubbleAni.load(resName, url, jsonUrl);
        this.mBubbleAni.play();
    };
    InteractionBubble.prototype.show = function () {
        if (this.mBubbleAni) {
            this.add(this.mBubbleAni);
        }
        this.removeDelay();
    };
    InteractionBubble.prototype.hide = function () {
        if (this.mBubbleAni) {
            this.remove(this.mBubbleAni);
        }
        if (this.mRemoveDelay) {
            clearTimeout(this.mRemoveDelay);
            this.mRemoveDelay = null;
        }
    };
    InteractionBubble.prototype.destroy = function () {
        this.hide();
        if (this.mBubbleAni) {
            this.mBubbleAni.destroy();
        }
        if (this.handler)
            this.handler.clear();
        this.mBubbleAni = null;
        this.handler = null;
        _super.prototype.destroy.call(this);
    };
    InteractionBubble.prototype.createAnimation = function () {
        // this.mBubbleAni = new DragonbonesAnimation(this.scene);
        // this.mBubbleAni = new FrameAnimation(this.scene);
        this.mBubbleAni = new bubble_animation_BubbleAnimation(this.scene);
        this.mBubbleAni.width = this.width;
        this.mBubbleAni.height = this.height;
        var POINTER_DOWN = Phaser.Input.Events.POINTER_DOWN;
        this.mBubbleAni.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.mBubbleAni.width * 2, this.mBubbleAni.height * 2), Phaser.Geom.Rectangle.Contains);
        this.mBubbleAni.on(POINTER_DOWN, this.onBubbleClick, this);
    };
    InteractionBubble.prototype.onBubbleClick = function () {
        if (this.handler)
            this.handler.runWith(this.content);
    };
    InteractionBubble.prototype.removeDelay = function () {
        var _this = this;
        this.mRemoveDelay = setTimeout(function () {
            if (_this.handler)
                _this.handler.runWith(_this.content.id);
            _this.hide();
        }, this.content.duration);
    };
    return InteractionBubble;
}(Phaser.GameObjects.Container));



/***/ }),
/* 324 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/Text.js + 10 modules
var Text = __webpack_require__(386);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/textstyle/TextStyle.js + 1 modules
var TextStyle = __webpack_require__(332);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/tagtext/Parser.js


var GETPROP_RESULT = {
    plainText: null,
    prevProp: null
};

var STYLE_RESULT = new TextStyle["a" /* default */]();
var PROPLIST = [];

class Parser_parser {
    constructor(tags) {
        if (tags === undefined) {
            tags = {};
        }
        this.tags = tags;
    }

    addTag(name, prop) {
        this.tags[name] = prop;
    }

    splitText(text, mode) {
        var result = [];
        var arr, m, charIdx = 0,
            totalLen = text.length,
            matchStart = totalLen;
        var innerMatch;
        while (true) {
            arr = RE_SPLITTEXT.exec(text);
            if (!arr) {
                break;
            }

            m = arr[0];
            matchStart = RE_SPLITTEXT.lastIndex - m.length;

            if (charIdx < matchStart) {
                result.push(text.substring(charIdx, matchStart));
            }
            if (mode === undefined) {
                result.push(m);
            } else if (mode === 1) { // RAWTEXTONLY_MODE
                if (RE_CLASS_HEADER.test(m)) {
                    innerMatch = m.match(RE_CLASS);
                    result.push(innerMatch[2]);
                } else if (RE_STYLE_HEADER.test(m)) {
                    innerMatch = m.match(RE_STYLE);
                    result.push(innerMatch[2]);
                }
            }

            charIdx = RE_SPLITTEXT.lastIndex;
        }


        if (charIdx < totalLen) {
            result.push(text.substring(charIdx, totalLen));
        }
        return result; // [text,...]
    }

    tagTextToProp(text, prevProp) {
        var plainText, propOut;
        if (RE_CLASS_HEADER.test(text)) {
            var innerMatch = text.match(RE_CLASS);
            if (innerMatch != null) {
                var name = innerMatch[1];
                var tags = this.tags;
                if (tags.hasOwnProperty(name)) {
                    propOut = tags[name];
                } else {
                    propOut = {};
                }
                propOut._class = name;
                plainText = innerMatch[2];
            }
        } else if (RE_STYLE_HEADER.test(text)) {
            var innerMatch = text.match(RE_STYLE);
            if (innerMatch != null) {
                var style = innerMatch[1];
                propOut = styleToProp(style);
                propOut._style = style;
                plainText = innerMatch[2];
            }
        }

        if (plainText == null) {
            plainText = text;
        }

        if (propOut == null) {
            propOut = {};
        }

        var result = GETPROP_RESULT;
        result.plainText = plainText;
        result.prop = propOut;
        return result;
    }

    propToContextStyle(defaultStyle, prop) {
        var result = STYLE_RESULT;
        if (!prop.hasOwnProperty('img')) {
            result.image = null;

            if (prop.hasOwnProperty('family') || prop.hasOwnProperty('fontFamily') || prop.hasOwnProperty('font-family')) {
                var family = (prop.hasOwnProperty('family')) ? prop.family :
                    (prop.hasOwnProperty('fontFamily')) ? prop.fontFamily :
                    prop['font-family'];
                result.fontFamily = family;
            } else {
                result.fontFamily = defaultStyle.fontFamily;
            }

            if (prop.hasOwnProperty('size') || prop.hasOwnProperty('fontSize') || prop.hasOwnProperty('font-size')) {
                var size = (prop.hasOwnProperty('size')) ? prop.size :
                    (prop.hasOwnProperty('fontSize')) ? prop.fontSize :
                    prop['font-size'];
                if (typeof (size) === 'number') {
                    size = size.toString() + 'px';
                }
                result.fontSize = size;
            } else {
                result.fontSize = defaultStyle.fontSize;
            }

            if (prop.hasOwnProperty('style') || prop.hasOwnProperty('fontStyle') || prop.hasOwnProperty('font-style')) {
                var fontStyle = (prop.hasOwnProperty('style')) ? prop.style :
                    (prop.hasOwnProperty('fontStyle')) ? prop.fontStyle :
                    prop['font-style'];
                result.fontStyle = fontStyle;
            } else {
                result.fontStyle = defaultStyle.fontStyle;
            }

            if (prop.hasOwnProperty('color') || prop.hasOwnProperty('font-color')) {
                var color = (prop.hasOwnProperty('color')) ? prop.color : prop['font-color'];
                result.color = prop.color;
            } else {
                result.color = defaultStyle.color;
            }

            if (prop.hasOwnProperty('stroke')) {
                var stroke = prop.stroke; // {color, thinkness}
                result.stroke = (stroke.hasOwnProperty('color')) ? stroke.color : defaultStyle.stroke;
                result.strokeThickness = (stroke.hasOwnProperty('thinkness')) ? stroke.thinkness : defaultStyle.strokeThickness;
            } else {
                result.stroke = defaultStyle.stroke;
                result.strokeThickness = defaultStyle.strokeThickness;
            }
        } else {
            result.image = prop.img;
        }

        if (prop.hasOwnProperty('shadow')) {
            var shadow = prop.shadow; // {color, offsetX, offsetY, blur}
            result.shadowColor = (shadow.hasOwnProperty('color')) ? shadow.color : defaultStyle.shadowColor;
            result.shadowOffsetX = (shadow.hasOwnProperty('offsetX')) ? shadow.offsetX : defaultStyle.shadowOffsetX;
            result.shadowOffsetY = (shadow.hasOwnProperty('offsetY')) ? shadow.offsetY : defaultStyle.shadowOffsetY;
            result.shadowBlur = (shadow.hasOwnProperty('blur')) ? shadow.blur : defaultStyle.shadowBlur;
            result.shadowStroke = true;
            result.shadowFill = true;
        } else {
            result.shadowColor = defaultStyle.shadowColor;
            result.shadowOffsetX = defaultStyle.shadowOffsetX;
            result.shadowOffsetY = defaultStyle.shadowOffsetY;
            result.shadowBlur = defaultStyle.shadowBlur;
            result.shadowStroke = defaultStyle.shadowStroke;
            result.shadowFill = defaultStyle.shadowFill;
        }

        if (prop.hasOwnProperty('u') || prop.hasOwnProperty('underline')) {
            var u = (prop.hasOwnProperty('u')) ? prop.u : prop.underline; // {color, thinkness, offset}
            result.underlineColor = (u.hasOwnProperty('color')) ? u.color : defaultStyle.underlineColor;
            result.underlineThickness = (u.hasOwnProperty('thinkness')) ? u.thinkness : defaultStyle.underlineThickness;
            result.underlineOffset = (u.hasOwnProperty('offset')) ? u.offset : defaultStyle.underlineOffset;
        } else {
            result.underlineColor = defaultStyle.underlineColor;
            result.underlineThickness = defaultStyle.underlineThickness;
            result.underlineOffset = defaultStyle.underlineOffset;
        }

        return result;
    }

    propToTagText(text, prop, prevProp) {
        if (prop.hasOwnProperty('_class')) { // class mode
            if (text === '') {
                if (this.isTextTag(prop._class)) {
                    return '';
                }
            }
            return "<class='" + prop._class + "'>" + text + "</class>";
        } else if (prop.hasOwnProperty('_style')) { // class mode
            return "<style='" + prop._style + "'>" + text + "</style>";
        }
    }

    destroy() {
        this.tags = undefined;
    }

    isTextTag(tagName) {
        var tag = this.tags[tagName];
        if (tag) {
            return (tag.img == null);
        } else { // tag not found
            return false;
        }
    }
};

var styleToProp = function (s) {
    s = s.split(";");

    var result = {},
        prop, k, v;
    for (var i = 0, slen = s.length; i < slen; i++) {
        prop = s[i].split(":");
        k = prop[0], v = prop[1];
        if (isEmpty(k) || isEmpty(v)) {
            continue;
        }

        switch (k) {
            case 'stroke':
                var stroke = v.split(' '); // stroke:blue 1px
                var len = stroke.length;
                v = {};
                if (len >= 1) {
                    v.color = stroke[0];
                }
                if (len >= 2) {
                    v.thinkness = parseInt(stroke[1].replace('px', ''));
                }
                break;
            case 'shadow':
                var shadow = v.split(' '); // shadow:blue 2px 2px 2px
                var len = shadow.length;
                v = {};
                if (len >= 1) {
                    v.color = shadow[0];
                }
                if (len >= 2) {
                    v.offsetX = parseInt(shadow[1].replace('px', ''));
                }
                if (len >= 3) {
                    v.offsetY = parseInt(shadow[2].replace('px', ''));
                }
                if (len >= 4) {
                    v.blur = parseInt(shadow[3].replace('px', ''));
                }
                break;
            case 'u':
            case 'underline': // underline:blue 3px -1px
                var u = v.split(' ');
                var len = u.length;
                v = {};
                if (len >= 1) {
                    v.color = u[0];
                }
                if (len >= 2) {
                    v.thinkness = parseInt(u[1].replace('px', ''));
                }
                if (len >= 3) {
                    v.offset = parseInt(u[2].replace('px', ''));
                }
                break;
        }
        result[k] = v;
    }
    return result;
};

var isEmpty = function (s) {
    // Remove white spaces.
    s = s.replace(RE_SPACE, '');
    return (s.length === 0);
};

var RE_SPLITTEXT = /<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>|<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/g;
var RE_CLASS_HEADER = /<\s*class=/i;
var RE_CLASS = /<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>/;
var RE_STYLE_HEADER = /<\s*style=/i;
var RE_STYLE = /<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/;
var RE_SPACE = /^\s+|\s+$/;

/* harmony default export */ var Parser = (Parser_parser);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/tagtext/TagText.js



const GetValue = Phaser.Utils.Objects.GetValue;

class TagText_TagText extends Text["a" /* default */] {
    constructor(scene, x, y, text, style) {
        var tags = GetValue(style, 'tags', undefined);
        var parser = new Parser(tags);
        super(scene, x, y, text, style, 'rexTagText', parser);
        this.parser = parser;
    }

    addTag(name, prop) {
        this.parser.addTag(name, prop);
        return this.updateText(true);
    }

    addTags(tags) {
        for(var name in tags){
            this.parser.addTag(name, tags[name]);
        }
        return this.updateText(true);
    }

    preDestroy() {
        super.preDestroy();
        this.parser.destroy();
        this.parser = undefined;
    }
}

/* harmony default export */ var tagtext_TagText = (TagText_TagText);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/tagtext/TagText.js

/* harmony default export */ var ui_tagtext_TagText = __webpack_exports__["a"] = (tagtext_TagText);

/***/ }),
/* 325 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ layer_manager_LayerManager; });

// EXTERNAL MODULE: ./src/utils/pos.ts
var pos = __webpack_require__(111);

// CONCATENATED MODULE: ./src/rooms/layer/grid.layer.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var grid_layer_GridLayer = /** @class */ (function (_super) {
    __extends(GridLayer, _super);
    function GridLayer(scene) {
        return _super.call(this, scene) || this;
    }
    GridLayer.prototype.draw = function (room) {
        this.clear();
        if (!room || !room.roomSize)
            return;
        this.lineStyle(1, 0xFFFFFF);
        var rows = room.roomSize.rows;
        var cols = room.roomSize.cols;
        for (var i = 0; i <= rows; i++) {
            this.drawLine(room.transformTo90(new pos["a" /* Pos */](0, i)), room.transformTo90(new pos["a" /* Pos */](cols, i)));
        }
        for (var i = 0; i <= cols; i++) {
            this.drawLine(room.transformTo90(new pos["a" /* Pos */](i, 0)), room.transformTo90(new pos["a" /* Pos */](i, rows)));
        }
    };
    GridLayer.prototype.drawLine = function (startPos, endPos) {
        // this.moveTo(startPos.x, startPos.y);
        // this.lineTo(endPos.x, endPos.y);
        this.lineBetween(startPos.x, startPos.y, endPos.x, endPos.y);
    };
    return GridLayer;
}(Phaser.GameObjects.Graphics));


// CONCATENATED MODULE: ./src/rooms/layer/layer.manager.ts

var layer_manager_LayerManager = /** @class */ (function () {
    function LayerManager(room) {
        this.room = room;
        this.mSurfaceInteractived = true;
        this.mDelta = 0;
        var zoom = 1;
        if (!room) {
            return;
        }
        if (room.world) {
            zoom = room.world.scaleRatio;
        }
        this.mScene = room.scene;
        // ==========背景层
        this.mGroundClickLayer = this.mScene.add.container(0, 0);
        // this.totalLayerList.push(this.mGroundClickLayer);
        this.mUGroundLayer2 = this.mScene.add.container(0, 0);
        // ==========舞台层
        this.mGroundLayer = this.mScene.add.container(0, 0).setScale(zoom);
        this.mTileLayer = new grid_layer_GridLayer(this.mScene).setScale(zoom);
        this.mScene.sys.displayList.add(this.mTileLayer);
        this.mMiddleLayer = this.mScene.add.container(0, 0).setScale(zoom);
        this.mSurfaceLayer = this.mScene.add.container(0, 0).setScale(zoom);
        this.mAtmosphere = this.mScene.add.container(0, 0);
        // ==========UI层
        this.mSceneUILayer = this.mScene.add.container(0, 0);
        this.mUILayer = this.mScene.add.container(0, 0).setScrollFactor(0);
        // this.mUILayer.setInteractive(new Geom.Rectangle(0, 0, window.innerWidth, window.innerHeight), Phaser.Geom.Rectangle.Contains);
    }
    LayerManager.prototype.addToGround = function (ele, index) {
        if (index !== undefined) {
            this.mGroundLayer.addAt(ele, index);
        }
        else {
            if (Array.isArray(ele)) {
                this.mGroundLayer.add(ele);
            }
            else {
                this.mGroundLayer.add([ele]);
            }
        }
        // this.mGroundLayer.add(Array.from(tmp, (display: ElementDisplay) => display.GameObject));
        // Logger.log("terrain num: ", this.mGroundLayer.list.length);
    };
    LayerManager.prototype.addToSurface = function (ele) {
        if (Array.isArray(ele)) {
            this.mSurfaceLayer.add(ele);
        }
        else {
            this.mSurfaceLayer.add([ele]);
        }
        // Logger.log("surface num: ", this.mSurfaceLayer.list.length);
        // this.mSurfaceLayer.add(Array.from(tmp, (display: ElementDisplay) => display.GameObject));
    };
    LayerManager.prototype.addToSceneToUI = function (child) {
        this.mSceneUILayer.add(child);
    };
    LayerManager.prototype.addToUI = function (child) {
        this.mUILayer.add(child);
    };
    LayerManager.prototype.addToAtmosphere = function (child) {
        this.mAtmosphere.add(child);
    };
    LayerManager.prototype.addToMiddle = function (child) {
        this.mMiddleLayer.add(child);
    };
    LayerManager.prototype.resize = function (width, height) {
        // todo
    };
    LayerManager.prototype.addMouseListen = function () {
        // this.mGroundClickLayer.setInteractive(new Geom.Rectangle(0, 0, window.innerWidth, window.innerHeight), Phaser.Geom.Rectangle.Contains);
    };
    LayerManager.prototype.sortSurface = function () {
        this.mSurfaceLayer.sort("depth");
    };
    LayerManager.prototype.changeScene = function () {
        this._clearLayer();
    };
    LayerManager.prototype.drawGrid = function (room) {
        if (this.mTileLayer) {
            this.mTileLayer.draw(room);
        }
    };
    LayerManager.prototype.setGridVisible = function (visible) {
        if (this.mTileLayer) {
            this.mTileLayer.setVisible(visible);
        }
    };
    LayerManager.prototype.update = function (time, delta) {
        // if (time - this.mDelta < 3000) {
        //     return;
        // }
        this.mDelta = time;
        if (this.mDepthGround) {
            this.mGroundLayer.sort("depth");
            this.mDepthGround = false;
        }
        if (this.mDepthSurface) {
            this.mDepthSurface = false;
            // this.mSurfaceLayer.sort("depth");
            this.mSurfaceLayer.sort("depth", function (displayA, displayB) {
                // Logger.debug(displayA, displayB);
                // const sortA = displayA.sortRectangle;
                // const sortB = displayB.sortRectangle;
                // Logger.log("sort x: ", displayA, displayA.sortX, displayA.sortY);
                // Logger.log("sortB: ", displayB, displayB.sortX, displayB.sortY);
                var depthA = displayA.depth ? displayA.depth : 0;
                var depthB = displayB.depth ? displayB.depth : 0;
                if (depthA > depthB) {
                    return 1;
                }
                var angle = Math.atan2(displayA.sortY - displayB.sortY, displayA.sortX - displayB.sortX);
                if (angle * (180 * Math.PI) >= 70) {
                    return 1;
                }
                // if (displayA.sortY > displayB.sortY) {
                //     return 1;
                // }
                // if (displayB.y + sortB.top.y > displayA.y + sortA.left.y) {
                //     return 1;
                // }
                return -1;
            });
        }
    };
    LayerManager.prototype.setSurfaceInteractive = function (val) {
        if (this.mSurfaceInteractived === val) {
            return;
        }
        this.mSurfaceInteractived = val;
        var list = this.mSurfaceLayer.list;
        if (val) {
            // this.mSurfaceLayer.setInteractive();
            list.forEach(function (obj) {
                obj.setInteractive();
            });
        }
        else {
            list.forEach(function (obj) {
                obj.disableInteractive();
            });
            // this.mSurfaceLayer.disableInteractive();
        }
    };
    LayerManager.prototype.destroy = function () {
        this.mDelta = 0;
        this._clearLayer();
    };
    LayerManager.prototype._clearLayer = function () {
        this.clearLayer(this.mGroundClickLayer);
        this.clearLayer(this.mGroundLayer);
        this.clearLayer(this.mSurfaceLayer);
        this.clearLayer(this.mUGroundLayer2);
        this.clearLayer(this.mUILayer);
        this.clearLayer(this.mAtmosphere);
        this.mTileLayer.destroy(true);
    };
    LayerManager.prototype.clearLayer = function (container, destroy) {
        if (destroy === void 0) { destroy = false; }
        var list = container.list;
        if (list) {
            var len = list.length;
            var child = void 0;
            for (var i = 0; i < len; i++) {
                child = list[i];
                if (child) {
                    child.destroy(destroy);
                    child = null;
                }
            }
        }
        container.destroy(destroy);
    };
    Object.defineProperty(LayerManager.prototype, "depthSurfaceDirty", {
        set: function (val) {
            this.mDepthSurface = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LayerManager.prototype, "depthGroundDirty", {
        set: function (val) {
            this.mDepthGround = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LayerManager.prototype, "layer", {
        get: function () {
            return this.mGroundLayer;
        },
        enumerable: false,
        configurable: true
    });
    return LayerManager;
}());



/***/ }),
/* 326 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ cameras_manager_CamerasManager; });

// EXTERNAL MODULE: ./node_modules/net-socket-packet/dist/index.js
var dist = __webpack_require__(103);

// EXTERNAL MODULE: ./node_modules/pixelpai_proto/protocols.js
var protocols = __webpack_require__(2);

// EXTERNAL MODULE: ./src/utils/log.ts
var log = __webpack_require__(0);

// CONCATENATED MODULE: ./src/utils/rectangle45.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Rectangle = Phaser.Geom.Rectangle;
var Rectangle45 = /** @class */ (function (_super) {
    __extends(Rectangle45, _super);
    function Rectangle45(row, col, endRow, endCol) {
        var _this = _super.call(this, row, col, endRow, endCol) || this;
        _this.row = row;
        _this.col = col;
        _this.endRow = endRow;
        _this.endCol = endCol;
        return _this;
    }
    return Rectangle45;
}(Rectangle));


// EXTERNAL MODULE: ./src/utils/pos.ts
var utils_pos = __webpack_require__(111);

// CONCATENATED MODULE: ./src/rooms/cameras/cameras.manager.ts
var cameras_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var cameras_manager_CamerasManager = /** @class */ (function (_super) {
    cameras_manager_extends(CamerasManager, _super);
    function CamerasManager(mRoomService) {
        var _this = _super.call(this) || this;
        _this.mRoomService = mRoomService;
        _this.MINI_VIEW_SIZE = 30;
        _this.VIEW_PORT_SIZE = 30;
        _this.viewPort = new Phaser.Geom.Rectangle();
        _this.miniViewPort = new Phaser.Geom.Rectangle();
        _this.zoom = 1;
        if (_this.mRoomService && _this.mRoomService.world) {
            _this.zoom = _this.mRoomService.world.scaleRatio;
        }
        _this.mCameras = [];
        return _this;
        // this.zoom = this.mRoomService.world.scaleRatio;
    }
    CamerasManager.prototype.getViewPort = function () {
        if (!this.mMain)
            return;
        var worldView = this.mMain.worldView;
        // const out = new Phaser.Geom.Rectangle(worldView.x, worldView.y, worldView.width, worldView.height);
        // out.x -= out.width >> 1;
        // out.y -= out.height >> 1;
        // out.width *= 2;
        // out.height *= 2;
        // out.x -= 200;
        // out.y -= 200;
        // out.width += 400;
        // out.height += 400;
        // this.viewPort.setPosition(worldView.x - worldView.width / 2, worldView.y - worldView.height / 2);
        this.viewPort.x = worldView.x / this.zoom + (worldView.width / this.zoom - this.viewPort.width >> 1);
        this.viewPort.y = worldView.y / this.zoom + (worldView.height / this.zoom - this.viewPort.height >> 1);
        return this.viewPort;
    };
    CamerasManager.prototype.getMiniViewPort = function () {
        if (!this.mMain)
            return;
        var worldView = this.mMain.worldView;
        this.miniViewPort.x = worldView.x / this.zoom + (worldView.width / this.zoom - this.miniViewPort.width >> 1);
        this.miniViewPort.y = worldView.y / this.zoom + (worldView.height / this.zoom - this.miniViewPort.height >> 1);
        var pos = this.mRoomService.transformTo45(new utils_pos["a" /* Pos */](this.miniViewPort.x + (this.miniViewPort.width >> 1), this.miniViewPort.y));
        return new Rectangle45(pos.x, pos.y, this.MINI_VIEW_SIZE, this.MINI_VIEW_SIZE);
    };
    Object.defineProperty(CamerasManager.prototype, "camera", {
        get: function () {
            return this.mMain;
        },
        set: function (camera) {
            this.mMain = camera;
            this.addCamera(camera);
            this.setViewPortSize();
        },
        enumerable: false,
        configurable: true
    });
    CamerasManager.prototype.resize = function (width, height) {
        this.resetCameraSize(width, height);
    };
    CamerasManager.prototype.setScroll = function (x, y) {
        if (!this.mMain) {
            return;
        }
        for (var _i = 0, _a = this.mCameras; _i < _a.length; _i++) {
            var camera = _a[_i];
            camera.setScroll(x, y);
        }
        // this.mMain.setScroll(x, y);
    };
    CamerasManager.prototype.offsetScroll = function (x, y) {
        if (!this.mMain) {
            return;
        }
        for (var _i = 0, _a = this.mCameras; _i < _a.length; _i++) {
            var camera = _a[_i];
            camera.scrollX += x / this.camera.zoom;
            camera.scrollY += y / this.camera.zoom;
        }
        this.moving = true;
        // this.mCamera.setScroll(x, y);
    };
    CamerasManager.prototype.startFollow = function (target) {
        this.mTarget = target;
        if (this.mMain && target) {
            for (var _i = 0, _a = this.mCameras; _i < _a.length; _i++) {
                var camera = _a[_i];
                camera.startFollow(target);
            }
            // this.mMain.startFollow(target);
        }
    };
    CamerasManager.prototype.stopFollow = function () {
        this.mTarget = null;
        if (this.mMain) {
            for (var _i = 0, _a = this.mCameras; _i < _a.length; _i++) {
                var camera = _a[_i];
                camera.stopFollow();
            }
            // this.mMain.stopFollow();
        }
    };
    CamerasManager.prototype.addCamera = function (camera) {
        var index = this.mCameras.indexOf(camera);
        if (index === -1) {
            this.mCameras.push(camera);
        }
        if (this.mTarget) {
            camera.startFollow(this.mTarget);
        }
    };
    CamerasManager.prototype.removeCamera = function (camera) {
        var index = this.mCameras.indexOf(camera);
        if (index > -1) {
            this.mCameras.splice(index, 1);
        }
    };
    CamerasManager.prototype.setBounds = function (x, y, width, height, centerOn) {
        if (!this.mMain) {
            log["a" /* Logger */].getInstance().error("camera does not exist");
            return;
        }
        for (var _i = 0, _a = this.mCameras; _i < _a.length; _i++) {
            var camera = _a[_i];
            camera.setBounds(x, y, width, height, centerOn);
        }
        // this.mMain.setBounds(x, y, width, height, centerOn);
    };
    CamerasManager.prototype.setPosition = function (x, y) {
        if (!this.mMain) {
            return;
        }
        for (var _i = 0, _a = this.mCameras; _i < _a.length; _i++) {
            var camera = _a[_i];
            camera.setPosition(x, y);
        }
        // this.mMain.setPosition(x, y);
    };
    CamerasManager.prototype.syncToEditor = function () {
        if (!this.mMain) {
            return;
        }
        var cameraView = this.mMain.worldView;
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_RESET_CAMERA);
        var content = pkt.content;
        content.x = cameraView.x;
        content.y = cameraView.y;
        content.width = cameraView.width;
        content.height = cameraView.height;
        this.connection.send(pkt);
    };
    CamerasManager.prototype.centerCameas = function () {
    };
    CamerasManager.prototype.syncCamera = function () {
        if (!this.mMain) {
            return;
        }
        var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_RESET_CAMERA_SIZE);
        var size = packet.content;
        size.width = this.mMain.width / this.mMain.zoom;
        size.height = this.mMain.height / this.mMain.zoom;
        this.connection.send(packet);
    };
    CamerasManager.prototype.syncCameraScroll = function () {
        if (!this.mMain) {
            return;
        }
        var pkt = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_SET_CAMERA_POSITION);
        var content = pkt.content;
        var pos = protocols["op_def"].PBPoint3f.create();
        pos.x = this.mMain.scrollX / Math.ceil(window.devicePixelRatio);
        pos.y = this.mMain.scrollY / Math.ceil(window.devicePixelRatio);
        content.pos = pos;
        this.connection.send(pkt);
    };
    CamerasManager.prototype.scrollTargetPoint = function (x, y) {
        if (!this.mMain) {
            return;
        }
        this.setScroll(x * this.mRoomService.world.scaleRatio - this.mMain.width / 2, y * this.mRoomService.world.scaleRatio - this.mMain.height / 2);
    };
    CamerasManager.prototype.resetCameraSize = function (width, height) {
        if (!this.connection) {
            log["a" /* Logger */].getInstance().error("connection is undefined");
            return;
        }
        this.syncCamera();
    };
    CamerasManager.prototype.setViewPortSize = function () {
        if (!this.mMain) {
            log["a" /* Logger */].getInstance().error("camera does not exist");
            return;
        }
        var size = this.mRoomService.roomSize;
        if (!size) {
            log["a" /* Logger */].getInstance().error("room size does not exist");
            return;
        }
        var viewW = (this.VIEW_PORT_SIZE + this.VIEW_PORT_SIZE) * (size.tileWidth / 2);
        var viewH = (this.VIEW_PORT_SIZE + this.VIEW_PORT_SIZE) * (size.tileHeight / 2);
        this.viewPort.setSize(viewW, viewH);
        var miniViewW = (this.MINI_VIEW_SIZE + this.MINI_VIEW_SIZE) * (size.tileWidth / 2);
        var miniviewH = (this.MINI_VIEW_SIZE + this.MINI_VIEW_SIZE) * (size.tileHeight / 2);
        this.miniViewPort.setSize(miniViewW, miniviewH);
    };
    Object.defineProperty(CamerasManager.prototype, "connection", {
        get: function () {
            if (!this.mRoomService) {
                log["a" /* Logger */].getInstance().error("room service is undefined");
                return;
            }
            return this.mRoomService.connection;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CamerasManager.prototype, "moving", {
        get: function () {
            return this.mMoving;
        },
        set: function (val) {
            this.mMoving = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CamerasManager.prototype, "targetFollow", {
        get: function () {
            return this.mTarget;
        },
        enumerable: false,
        configurable: true
    });
    return CamerasManager;
}(dist["PacketHandler"]));



/***/ }),
/* 327 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./src/ui/components/BasePanel.ts + 2 modules
var BasePanel = __webpack_require__(105);

// EXTERNAL MODULE: ./src/utils/font.ts
var font = __webpack_require__(107);

// EXTERNAL MODULE: ./node_modules/pixelpai_proto/protocols.js
var protocols = __webpack_require__(2);

// EXTERNAL MODULE: ./src/ui/components/dynamic.image.ts
var dynamic_image = __webpack_require__(113);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/ui-components.ts + 2 modules
var ui_components = __webpack_require__(392);

// EXTERNAL MODULE: ./src/i18n.ts
var i18n = __webpack_require__(124);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/gridtable/GameGridTable.ts
var GameGridTable = __webpack_require__(134);

// EXTERNAL MODULE: ./src/ui/components/ninepatch.button.ts
var ninepatch_button = __webpack_require__(114);

// EXTERNAL MODULE: ./src/rooms/display/dragonbones.display.ts + 1 modules
var dragonbones_display = __webpack_require__(192);

// EXTERNAL MODULE: ./src/rooms/display/dragonbones.model.ts
var dragonbones_model = __webpack_require__(161);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/ninepatch/NineSlicePatch.ts + 1 modules
var NineSlicePatch = __webpack_require__(196);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/baseUI/BaseUI.ts
var BaseUI = __webpack_require__(125);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/progressbar/ProgressBar.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ProgressBarEvent;
(function (ProgressBarEvent) {
    ProgressBarEvent["tweenStart"] = "tweenStart";
    ProgressBarEvent["tweenComplete"] = "tweenComplete";
    ProgressBarEvent["tweenUpdate"] = "tweenUpdate";
})(ProgressBarEvent || (ProgressBarEvent = {}));
var GetValue = Phaser.Utils.Objects.GetValue;
var ProgressBar_ProgressBar = /** @class */ (function (_super) {
    __extends(ProgressBar, _super);
    function ProgressBar(scene, config) {
        var _this = _super.call(this, scene) || this;
        _this.mConfig = config;
        var posX = config.x;
        var posY = config.y;
        _this.width = config.width;
        _this.height = config.height;
        _this.setPosition(posX, posY);
        _this.setSize(_this.width, _this.height);
        _this.dpr = GetValue(config, "dpr", 1);
        _this.scale = GetValue(config, "scale", 1);
        var bgSkinData = config.background;
        var barSkinData = config.bar;
        _this.mBgSkin = new NineSlicePatch["a" /* NineSlicePatch */](scene, bgSkinData.x, bgSkinData.y, bgSkinData.width, bgSkinData.height, bgSkinData.key, bgSkinData.frame, bgSkinData.config, _this.dpr, _this.scale);
        _this.mBarSkin = new NineSlicePatch["a" /* NineSlicePatch */](scene, barSkinData.x, barSkinData.y, barSkinData.width, barSkinData.height, barSkinData.key, barSkinData.frame, barSkinData.config, _this.dpr, _this.scale);
        // 按钮文本
        var textconfig = {};
        _this.mText = scene.make.text({
            style: Object.assign(textconfig, config.textConfig)
        }, false);
        _this.barWid = barSkinData.width;
        var hei = _this.mBarSkin.height;
        _this.mBarMaskGraphics = _this.scene.make.graphics(undefined, false);
        _this.mBarMaskGraphics.fillStyle(0, 1);
        _this.mBarMaskGraphics.beginPath();
        _this.mBarMaskGraphics.fillRect(0, 0, 10, hei);
        _this.mBarMaskGraphics.setPosition(-_this.barWid / 2, -hei / 2);
        // this.mBarSkin.mask = this.mBarMaskGraphics.createGeometryMask();
        _this.add([_this.mBgSkin, _this.mBarSkin, _this.mText]);
        _this.disInteractive();
        return _this;
    }
    ProgressBar.prototype.setProgress = function (curVal, maxVal) {
        this.curWid = (curVal / maxVal) * this.barWid;
        var hei = this.mBarSkin.height;
        this.mBarSkin.resize(this.curWid, hei);
        this.mBarSkin.x = -this.barWid / 2 + this.curWid / 2;
        // this.mBarMaskGraphics.clear();
        // this.mBarMaskGraphics.fillRect(0, 0, this.curWid, hei);
        // this.mBarMaskGraphics.setPosition(-this.barWid / 2, -hei / 2);
        // if (this.mTween) {
        //     this.mTween.stop();
        //     this.mTween.remove();
        // }
        // this.mTween = this.scene.tweens.add({
        //     targets: this.mBarMaskGraphics,
        //     duration: 1000,
        //     ease: "Linear",
        //     scaleX: { value: curVal / maxVal },
        //     onStart: () => {
        //         this.onTweenStart();
        //     },
        //     onComplete: (tween, targets, element) => {
        //         this.onTweenComplete();
        //     },
        //     onUpdate: (tween, targets, element) => {
        //         this.onTweenUpdate();
        //     },
        //     onCompleteParams: [this]
        // });
    };
    ProgressBar.prototype.setText = function (val) {
        if (this.mText) {
            this.mText.text = val;
            if (!this.mText.parentContainer)
                this.add(this.mText);
        }
    };
    ProgressBar.prototype.destory = function () {
        // if (this.mTween) {
        //     this.mTween.stop();
        //     this.mTween.remove();
        //     this.mTween = null;
        // }
        _super.prototype.destroy.call(this);
    };
    return ProgressBar;
}(BaseUI["a" /* BaseUI */]));


// EXTERNAL MODULE: ./src/ui/CharacterInfo/CharacterEditorPanel.ts
var CharacterEditorPanel = __webpack_require__(262);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/scroller/GameScroller.ts
var GameScroller = __webpack_require__(272);

// EXTERNAL MODULE: ./src/utils/resUtil.ts + 1 modules
var resUtil = __webpack_require__(104);

// CONCATENATED MODULE: ./src/ui/CharacterInfo/CharacterInfoPanel.ts
var CharacterInfoPanel_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();












var Container = Phaser.GameObjects.Container;


var CharacterInfoPanel_CharacterInfoPanel = /** @class */ (function (_super) {
    CharacterInfoPanel_extends(CharacterInfoPanel, _super);
    function CharacterInfoPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "player_info";
        _this.commonkey = "common_key";
        _this.isOwner = true;
        _this.scale = 1;
        return _this;
    }
    CharacterInfoPanel.prototype.resize = function (width, height) {
        var w = this.scaleWidth;
        var h = this.scaleHeight;
        _super.prototype.resize.call(this, width, height);
        this.content.setPosition(w / 2, h / 2);
        this.setSize(w, h);
        this.mGrideTable.refreshPos(w / 2 + 6 * this.dpr * this.scale, h / 2 + 180 * this.dpr * this.scale);
        this.content.setInteractive();
    };
    CharacterInfoPanel.prototype.show = function (param) {
        this.mShowData = param;
        if (this.mPreLoad)
            return;
        if (!this.mInitialized) {
            this.preload();
            return;
        }
        if (this.mShow)
            return;
        if (this.soundGroup && this.soundGroup.open)
            this.playSound(this.soundGroup.open);
        if (!this.mTweening && this.mTweenBoo) {
            this.showTween(true);
        }
        else {
            this.mShow = true;
        }
        this.setInteractive();
        this.addListen();
    };
    CharacterInfoPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.closeBtn.on("Tap", this.OnClosePanel, this);
    };
    CharacterInfoPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.closeBtn.off("Tap", this.OnClosePanel, this);
    };
    CharacterInfoPanel.prototype.preload = function () {
        this.addAtlas(this.key, "player_info/player_info.png", "player_info/player_info.json");
        this.addAtlas(this.commonkey, "common/ui_base.png", "common/ui_base.json");
        _super.prototype.preload.call(this);
    };
    CharacterInfoPanel.prototype.init = function () {
        var _this = this;
        var zoom = this.scale;
        this.bg = this.scene.make.image({ x: 0, y: 0, key: this.key, frame: "bg" });
        this.content = this.scene.make.container(undefined, false);
        this.content.setSize(this.bg.width, this.bg.height);
        this.mainContent = this.scene.make.container(undefined, false);
        this.mainContent.setSize(this.bg.width, this.bg.height);
        var posY = -this.bg.height * 0.5 + 43 * this.dpr;
        var mfont = "bold " + 15 * this.dpr + "px Source Han Sans";
        this.labelText = this.scene.make.text({ x: 0, y: posY, text: i18n["a" /* i18n */].t("player_info.title"), style: { font: mfont, bold: true, color: "#ffffff", fontSize: 15 * this.dpr, fontFamily: font["a" /* Font */].DEFULT_FONT } }).setOrigin(0.5, 0);
        this.labelText.setStroke("#8F4300", 1);
        this.closeBtn = new ui_components["b" /* Button */](this.scene, this.commonkey, "close");
        this.closeBtn.setPosition(this.mainContent.width * 0.5 - this.dpr * 30, posY - this.dpr * 10);
        this.likeBtn = new ui_components["b" /* Button */](this.scene, this.key, "praise_bef", "praise_bef", "999");
        this.likeBtn.setTextStyle({ fontSize: 13 * this.dpr, fontFamily: font["a" /* Font */].DEFULT_FONT });
        this.likeBtn.text.setOrigin(0, 0.5).x += 10 * this.dpr;
        this.likeBtn.setPosition(this.bg.width * 0.5 - 50 * this.dpr, posY + 50 * this.dpr);
        this.likeBtn.visible = false;
        this.avatar = new dragonbones_display["a" /* DragonbonesDisplay */](this.scene, undefined);
        this.avatar.scale = this.dpr * 2;
        this.avatar.x = 0;
        this.avatar.y = -50 * this.dpr;
        this.avatar.once("initialized", function () {
            _this.avatar.play({ animationName: "idle", flip: false });
        });
        var nickPosX = Math.round(-this.bg.width * 0.5 + 25 * this.dpr);
        var nickPosY = Math.round(this.bg.height * 0.5 - 306 * this.dpr);
        var nickOffsetY = 30 * this.dpr;
        var fontSize = Math.round(13 * this.dpr);
        this.nickName = new ui_components["a" /* BBCodeText */](this.scene, nickPosX, nickPosY, {})
            .setOrigin(0, 0.5).setFontSize(fontSize).setFontFamily(font["a" /* Font */].DEFULT_FONT);
        this.nickEditor = new ui_components["b" /* Button */](this.scene, this.key, "edit", "edit");
        this.nickEditor.setPosition(this.bg.width * 0.5 - 30 * this.dpr, nickPosY).visible = false;
        var line1 = this.scene.make.image({ x: 0, y: nickPosY + 10 * this.dpr, key: this.key, frame: "splitters" });
        this.idText = new ui_components["a" /* BBCodeText */](this.scene, nickPosX, nickPosY + nickOffsetY)
            .setFontSize(fontSize).setOrigin(0, 0.5).setFontFamily(font["a" /* Font */].DEFULT_FONT);
        var line2 = this.scene.make.image({ x: 0, y: this.idText.y + 10 * this.dpr, key: this.key, frame: "splitters" });
        this.titleName = new ui_components["a" /* BBCodeText */](this.scene, nickPosX, nickPosY + nickOffsetY * 2)
            .setFontSize(fontSize).setOrigin(0, 0.5).setFontFamily(font["a" /* Font */].DEFULT_FONT);
        var line3 = this.scene.make.image({ x: 0, y: this.titleName.y + 10 * this.dpr, key: this.key, frame: "splitters" });
        var lvbg = this.scene.make.image({ x: 0, y: 0, key: this.key, frame: "level_bg" });
        this.lvText = this.scene.make.text({ x: 0, y: 0, text: "lv 98", style: { color: "#996600", fontSize: fontSize, fontFamily: font["a" /* Font */].DEFULT_FONT } }).setOrigin(0.5, 0.5);
        this.lvCon = this.scene.make.container(undefined, false);
        this.lvCon.setSize(lvbg.width, lvbg.height);
        this.lvCon.add([lvbg, this.lvText]);
        var bottomWidth = 234 * this.dpr;
        var bottomHeight = 195 * this.dpr;
        this.bottomCon = this.scene.make.container(undefined, false).setSize(bottomWidth, bottomHeight);
        this.bottomCon.setPosition(0, (this.mainContent.height - bottomHeight) * 0.5 - 30 * this.dpr);
        this.bottombg = this.scene.make.graphics(undefined, false);
        var bottomBtnPosx = -60 * this.dpr;
        var bottomBtnPosy = this.bottomCon.height * 0.5 - 20 * this.dpr;
        this.addFriendBtn = new ninepatch_button["NinePatchButton"](this.scene, bottomBtnPosx, bottomBtnPosy, 94 * this.dpr, 37 * this.dpr, this.key, "button_g", i18n["a" /* i18n */].t("player_info.add_friend"), {
            left: 12 * this.dpr,
            top: 12 * this.dpr,
            right: 12 * this.dpr,
            bottom: 12 * this.dpr
        });
        this.addFriendBtn.setFrameNormal("button_g");
        this.privaCharBtn = new ninepatch_button["NinePatchButton"](this.scene, bottomBtnPosx, bottomBtnPosy, 94 * this.dpr, 37 * this.dpr, this.commonkey, "yellow_btn", i18n["a" /* i18n */].t("player_info.private_chat"), {
            left: 12 * this.dpr,
            top: 12 * this.dpr,
            right: 12 * this.dpr,
            bottom: 12 * this.dpr
        });
        this.tradeBtn = new ninepatch_button["NinePatchButton"](this.scene, -bottomBtnPosx, bottomBtnPosy, 94 * this.dpr, 37 * this.dpr, this.commonkey, "red_btn", i18n["a" /* i18n */].t("player_info.tade_btn"), {
            left: 12 * this.dpr,
            top: 12 * this.dpr,
            right: 12 * this.dpr,
            bottom: 12 * this.dpr
        });
        this.addFriendBtn.setTextStyle({ fontSize: 16 * this.dpr, color: "#000000" });
        this.privaCharBtn.setTextStyle({ fontSize: 16 * this.dpr, color: "#996600" });
        this.tradeBtn.setTextStyle({ fontSize: 16 * this.dpr, color: "#ffffff" });
        this.bottomCon.add([this.bottombg, this.addFriendBtn, this.privaCharBtn, this.tradeBtn]);
        this.mainContent.add([this.closeBtn, this.likeBtn, this.labelText, line1, line2, line3, this.nickName, this.nickEditor, this.idText, this.titleName, this.lvCon, this.bottomCon]);
        this.mainContent.add(this.avatar);
        this.content.add(this.bg);
        this.content.add(this.mainContent);
        this.add(this.content);
        var w = this.scene.cameras.main.width;
        var h = this.scene.cameras.main.height;
        this.mCategoryScroll = new GameScroller["a" /* GameScroller */](this.scene, {
            x: this.scaleWidth * 0.5,
            y: this.scaleHeight * 0.5 + 62 * this.dpr * zoom,
            width: bottomWidth,
            height: 41 * this.dpr,
            zoom: this.scale,
            orientation: 1,
            cellupCallBack: function (gameobject) {
                _this.onSelectSubCategoryHandler(gameobject);
            }
        });
        this.add(this.mCategoryScroll);
        var propFrame = this.scene.textures.getFrame(this.key, "skill_bg");
        var capW = propFrame.width + 5 * this.dpr * zoom;
        var capH = propFrame.height + 2 * this.dpr * zoom;
        var tableConfig = {
            x: w / 2,
            y: h * 0.5 + 145 * this.dpr * zoom,
            table: {
                width: (this.bottomCon.width - 10 * this.dpr) * zoom,
                height: 200 * this.dpr * zoom,
                columns: 3,
                cellWidth: capW,
                cellHeight: capH,
                reuseCellContainer: true,
                cellPadX: 24 * this.dpr * zoom
                // cellOriginX:0.5,
                // cellOriginY:0.5,
            },
            scrollMode: 1,
            clamplChildOY: false,
            // background: (<any>this.scene).rexUI.add.roundRectangle(0, 0, 2, 2, 0, 0xFF9900, .2),
            createCellContainerCallback: function (cell, cellContainer) {
                var scene = cell.scene, item = cell.item;
                if (cellContainer === null) {
                    cellContainer = new CharacterInfoPanel_CharacterOwnerItem(scene, 0, 0, _this.key, _this.dpr, zoom);
                    _this.add(cellContainer);
                }
                // cellContainer.setSize(width, height);
                cellContainer.setData({ item: item });
                cellContainer.setItemData(item, _this.isOwner);
                return cellContainer;
            },
        };
        this.mGrideTable = new GameGridTable["a" /* GameGridTable */](this.scene, tableConfig);
        this.mGrideTable.layout();
        this.mGrideTable.on("cellTap", function (cell) {
            if (cell) {
                _this.onSelectItemHandler(cell);
            }
        });
        this.add(this.mGrideTable.table);
        this.nickEditor.on("Tap", this.onEditorHandler, this);
        this.privaCharBtn.on("Tap", this.onPrivateChatHandler, this);
        this.addFriendBtn.on("Tap", this.onAddFriendHandler, this);
        this.tradeBtn.on("Tap", this.onTradingHandler, this);
        this.resize(w, h);
        _super.prototype.init.call(this);
        this.reqPlayerInfo();
    };
    CharacterInfoPanel.prototype.reqPlayerInfo = function () {
        this.emit("queryOwnerInfo");
    };
    CharacterInfoPanel.prototype.setPlayerData = function (data) {
        var nickname = data.nickname;
        var current_title = data.currentTitle;
        var exp = data.level.currentLevelExp;
        var nexExp = data.level.nextLevelExp;
        var cid = data.id;
        var levle = data.level.level;
        var spaceOffset = this.getspaceStr(1 * this.dpr);
        if (this.avatar) {
            this.avatar.load(new dragonbones_model["a" /* DragonbonesModel */]({
                id: 0,
                avatar: data.currentAvatar.avatar
            }));
        }
        this.titleName.setText(this.getRichLabel(i18n["a" /* i18n */].t("player_info.player_title")) + spaceOffset + current_title);
        this.likeBtn.setText(data.like + "");
        var likeposx = this.bg.width * 0.5 - this.likeBtn.width * 0.5 - this.likeBtn.text.width;
        this.likeBtn.x = likeposx - 20 * this.dpr;
        this.lvText.text = "Lv" + levle + "";
        var subArr = [data.lifeSkills, data.badges];
        if (data instanceof protocols["op_client"].OP_VIRTUAL_WORLD_RES_CLIENT_PKT_SELF_PLAYER_INFO) {
            this.nickName.setText(this.getRichLabel(i18n["a" /* i18n */].t("player_info.nick_name")) + spaceOffset + nickname);
            this.idText.setText(this.getRichLabel(i18n["a" /* i18n */].t("player_info.player_lv")) + this.getspaceStr(20) + exp + "/" + nexExp);
            this.lvCon.setPosition(this.idText.x + 58 * this.dpr, this.idText.y);
            this.likeBtn.setFrame("praise_aft");
            subArr.push(data.titles);
            this.addFriendBtn.visible = false;
            this.privaCharBtn.visible = false;
            this.tradeBtn.visible = false;
            this.bottombg.clear();
            this.bottombg.fillStyle(0x6AE2FF, 1);
            this.bottombg.fillRect(-this.bottomCon.width * 0.5, -this.bottomCon.height * 0.5, this.bottomCon.width, this.bottomCon.height);
            this.mGrideTable.setColumnCount(3);
            this.isOwner = true;
        }
        else {
            var remark = (data.remark ? data.remark : "备注好友昵称");
            this.nickName.setText(this.getRichLabel(i18n["a" /* i18n */].t("player_info.nick_name")) + spaceOffset + nickname + (" (" + remark + ")"));
            this.idText.setText(this.getRichLabel("I   D") + spaceOffset + cid);
            this.lvCon.setPosition(this.idText.x + this.lvCon.width * 0.5, -this.mainContent.height * 0.5 + 100 * this.dpr);
            this.likeBtn.setFrame("praise_bef");
            subArr.push(data.avatar);
            this.addFriendBtn.visible = !data.friend;
            this.privaCharBtn.visible = data.friend;
            this.tradeBtn.visible = true;
            this.bottombg.clear();
            this.bottombg.fillStyle(0x6AE2FF, 1);
            this.bottombg.fillRect(-this.bottomCon.width * 0.5, -this.bottomCon.height * 0.5, this.bottomCon.width, this.bottomCon.height - 55 * this.dpr);
            this.mGrideTable.setColumnCount(2);
            this.isOwner = false;
        }
        this.setSubCategory(subArr);
    };
    CharacterInfoPanel.prototype.destroy = function () {
        this.mGrideTable.destroy();
        this.mCategoryScroll.destroy();
        _super.prototype.destroy.call(this);
    };
    CharacterInfoPanel.prototype.OnClosePanel = function () {
        this.emit("hide");
    };
    CharacterInfoPanel.prototype.setSubCategory = function (datas) {
        var subNames = [i18n["a" /* i18n */].t("player_info.option_live"), i18n["a" /* i18n */].t("player_info.option_badge"), i18n["a" /* i18n */].t("player_info.option_title"), i18n["a" /* i18n */].t("player_info.option_title"), i18n["a" /* i18n */].t("player_info.option_title")];
        var len = 1; // datas.length;
        var itemWidth = this.mScene.textures.getFrame(this.key, "title_select").width;
        var items = [];
        for (var i = 0; i < len; i++) {
            var item = new ui_components["b" /* Button */](this.scene, this.key, "title_normal", "title_select", subNames[i]);
            item.width = itemWidth;
            item.height = 41 * this.dpr;
            items.push(item);
            item.setTextStyle({ color: "#2B4BB5", bold: true, fontSize: 14 * this.dpr * this.scale, fontFamily: font["a" /* Font */].DEFULT_FONT });
            item.disInteractive();
            item.removeListen();
            item.setData("subData", datas[i]);
            this.mCategoryScroll.addItem(item);
        }
        if (items.length <= 3)
            this.mCategoryScroll.setAlign(1);
        else {
            this.mCategoryScroll.setAlign(0);
        }
        this.onSelectSubCategoryHandler(items[0]);
    };
    CharacterInfoPanel.prototype.onSelectSubCategoryHandler = function (obj) {
        // Logger.getInstance().log(obj);
        if (this.curSelectCategeory) {
            this.curSelectCategeory.changeNormal();
            this.curSelectCategeory.setTextColor("#2B4BB5");
        }
        obj.changeDown();
        obj.setTextColor("#996600");
        this.curSelectCategeory = obj;
        var datas = obj.getData("subData");
        if (datas)
            this.mGrideTable.setItems(datas);
        this.mGrideTable.refreshPos(this.scene.cameras.main.width / 2, this.scene.cameras.main.height / 2 + 185 * this.dpr * this.scale, 0, 0);
    };
    CharacterInfoPanel.prototype.onSelectItemHandler = function (item) {
    };
    CharacterInfoPanel.prototype.onEditorHandler = function () {
        var w = 247 * this.dpr;
        var h = this.content.height;
        if (!this.editorPanel)
            this.editorPanel = new CharacterEditorPanel["CharacterEditorPanel"](this.scene, 0, 0, w, h, this.key, this.dpr);
        this.content.add(this.editorPanel);
        this.editorPanel.visible = true;
        this.editorPanel.on("editorHide", this.onEditorPanelHideHandler, this);
        this.setMainUIVisible(false);
    };
    CharacterInfoPanel.prototype.onAddFriendHandler = function () {
    };
    CharacterInfoPanel.prototype.onTradingHandler = function () {
    };
    CharacterInfoPanel.prototype.onPrivateChatHandler = function () {
    };
    CharacterInfoPanel.prototype.onEditorPanelHideHandler = function () {
        this.mainContent.visible = true;
        this.remove(this.editorPanel);
        this.editorPanel.off("editorHide", this.onEditorPanelHideHandler, this);
        this.editorPanel.destroy();
        this.editorPanel = null;
        this.setMainUIVisible(true);
    };
    CharacterInfoPanel.prototype.setMainUIVisible = function (value) {
        this.avatar.visible = value;
        this.mCategoryScroll.visible = value;
        this.mGrideTable.table.visible = value;
        this.mainContent.visible = value;
    };
    CharacterInfoPanel.prototype.getRichLabel = function (text, color) {
        if (color === void 0) { color = "#2B4BB5"; }
        var label = "[stroke=" + color + "][color=" + color + "]" + text + ":[/color][/stroke]";
        return label;
    };
    CharacterInfoPanel.prototype.getspaceStr = function (num) {
        var str = "";
        for (var i = 0; i < num; i++) {
            str += " ";
        }
        return str;
    };
    return CharacterInfoPanel;
}(BasePanel["BasePanel"]));
/* harmony default export */ var CharacterInfo_CharacterInfoPanel = __webpack_exports__["default"] = (CharacterInfoPanel_CharacterInfoPanel);
var CharacterInfoPanel_CharacterOwnerItem = /** @class */ (function (_super) {
    CharacterInfoPanel_extends(CharacterOwnerItem, _super);
    function CharacterOwnerItem(scene, x, y, key, dpr, zoom) {
        if (zoom === void 0) { zoom = 1; }
        var _this = _super.call(this, scene, x, y) || this;
        _this.dpr = 0;
        _this.zoom = 0;
        var bg = _this.scene.make.image({ x: 0, y: 0, key: key, frame: "skill_bg" });
        _this.nameText = _this.scene.make.text({ x: -1 * dpr, y: 0, text: "lv 98", style: { color: "#996600", fontSize: 12 * dpr, fontFamily: font["a" /* Font */].DEFULT_FONT } }).setOrigin(0, 0.5);
        _this.lvText = _this.scene.make.text({ x: -1 * dpr, y: 0, text: "lv 98", style: { color: "#996600", fontSize: 12 * dpr, fontFamily: font["a" /* Font */].DEFULT_FONT } }).setOrigin(0, 0.5);
        _this.progressBar = new ProgressBar_ProgressBar(_this.scene, {
            x: 48 * dpr / 2,
            y: 15 * dpr,
            width: 41 * dpr,
            height: 4 * dpr,
            background: {
                x: 0,
                y: 0,
                width: 41 * dpr,
                height: 4 * dpr,
                config: {
                    top: 2 * dpr,
                    left: 4 * dpr,
                    right: 4 * dpr,
                    bottom: 2 * dpr,
                },
                key: key,
                frame: "slider_bg"
            },
            bar: {
                x: 0,
                y: 0,
                width: 41 * dpr,
                height: 4 * dpr,
                config: {
                    top: 2 * dpr,
                    left: 4 * dpr,
                    right: 4 * dpr,
                    bottom: 2 * dpr,
                },
                key: key,
                frame: "slider_rate"
            },
            dpr: dpr,
            textConfig: undefined
        });
        _this.icon = new dynamic_image["DynamicImage"](_this.scene, -bg.width * 0.5 + 22 * dpr, 0);
        _this.add([bg, _this.icon, _this.nameText, _this.lvText, _this.progressBar]);
        _this.setSize(bg.width, bg.height);
        _this.dpr = dpr;
        _this.zoom = zoom;
        _this.key = key;
        return _this;
        // this.progressBar.setProgress(40, 100);
    }
    CharacterOwnerItem.prototype.setItemData = function (data, isOwner) {
        var _this = this;
        if (isOwner === void 0) { isOwner = false; }
        this.itemData = data;
        this.nameText.text = data.name;
        var posY = (isOwner ? -16 * this.dpr * this.zoom : -11 * this.dpr * this.zoom);
        var offsetY = (isOwner ? 20 * this.dpr * this.zoom : 25 * this.dpr * this.zoom);
        var cheight = 10 * this.dpr * this.zoom;
        this.nameText.y = posY + cheight * 0.5;
        this.icon.setTexture(this.key, "test_skillicon");
        var width = this.icon.width;
        if (data.level) {
            this.lvText.text = data.level.level;
            this.lvText.y = posY + offsetY;
            this.progressBar.setProgress(data.level.currentLevelExp, data.level.nextLevelExp);
            this.progressBar.visible = isOwner;
        }
        else {
            this.progressBar.visible = false;
            this.lvText.visible = false;
        }
        var url = resUtil["h" /* Url */].getOsdRes(data.display.texturePath);
        this.icon.load(url, this, function () {
            _this.icon.scale = _this.dpr * _this.zoom;
            var x = -_this.width * 0.5 + width * 0.5 + 6 * _this.dpr * _this.zoom;
            _this.icon.setPosition(x, 0);
        });
    };
    return CharacterOwnerItem;
}(Container));


/***/ }),
/* 328 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/ui/sizer/Sizer.js + 11 modules
var Sizer = __webpack_require__(126);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/mask/DefaultMask.js
var DefaultMask = __webpack_require__(168);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/utils/AddChildMask.js


var AddChildMask = function (maskTarget, sizeTarget, shape, padding) {
    var maskGameObject = new DefaultMask["a" /* default */](sizeTarget, shape, padding); // A Graphics game object
    if (maskTarget && !maskTarget.isRexSizer) { // Sizer game object can't apply mask
        maskTarget.setMask(maskGameObject.createGeometryMask());
    }
    this.pin(maskGameObject);
    return maskGameObject;
}

/* harmony default export */ var utils_AddChildMask = (AddChildMask);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/label/Label.js



const GetValue = Phaser.Utils.Objects.GetValue;

class Label_Label extends Sizer["a" /* default */] {
    constructor(scene, config) {
        // Create sizer
        super(scene, config);
        this.type = 'rexLabel';

        // Add elements
        var background = GetValue(config, 'background', undefined);
        var icon = GetValue(config, 'icon', undefined);
        var iconMask = GetValue(config, 'iconMask', undefined);
        var text = GetValue(config, 'text', undefined);
        var action = GetValue(config, 'action', undefined);
        var actionMask = GetValue(config, 'actionMask', undefined);
        // Align
        var align = GetValue(config, 'align', undefined); // undefined/left/top: no space
        // Space
        var paddingLeft = GetValue(config, 'space.left', 0);
        var paddingRight = GetValue(config, 'space.right', 0);
        var paddingTop = GetValue(config, 'space.top', 0);
        var paddingBottom = GetValue(config, 'space.bottom', 0);
        var iconSpace = GetValue(config, 'space.icon', 0);
        var textSpace = GetValue(config, 'space.text', 0);

        if (background) {
            this.addBackground(background);
        }

        // Add space
        if (
            (align === 'right') ||
            (align === 'bottom') ||
            (align === 'center')
        ) {
            this.addSpace();
        }

        if (icon) {
            var padding;
            if (this.orientation === 0) {
                padding = {
                    left: paddingLeft,
                    right: (text || action) ? iconSpace : paddingRight,
                    top: paddingTop,
                    bottom: paddingBottom
                }
            } else {
                padding = {
                    left: paddingLeft,
                    right: paddingRight,
                    top: paddingTop,
                    bottom: (text || action) ? iconSpace : paddingBottom
                }
            }

            this.add(icon, 0, 'center', padding);

            if (iconMask) {
                iconMask = this.addChildMask(icon, icon, 1); // Circle mask
            }
        }

        if (text) {
            var expandTextWidth = GetValue(config, 'expandTextWidth', false);
            var expandTextHeight = GetValue(config, 'expandTextHeight', false);
            var proportion, padding, expand;
            if (this.orientation === 0) {
                proportion = (expandTextWidth) ? 1 : 0;
                padding = {
                    left: (icon) ? 0 : paddingLeft,
                    right: (action) ? textSpace : paddingRight,
                    top: paddingTop,
                    bottom: paddingBottom
                };
                expand = expandTextHeight;
            } else {
                proportion = (expandTextHeight) ? 1 : 0;
                padding = {
                    left: paddingLeft,
                    right: paddingRight,
                    top: (icon) ? 0 : paddingTop,
                    bottom: (action) ? textSpace : paddingBottom
                }
                expand = expandTextWidth;
            }
            this.add(text, proportion, 'center', padding, expand);
        }

        if (action) {
            var padding;
            if (this.orientation === 0) {
                padding = {
                    left: (icon || text) ? 0 : paddingLeft,
                    right: paddingRight,
                    top: paddingTop,
                    bottom: paddingBottom
                }
            } else {
                padding = {
                    left: paddingLeft,
                    right: paddingRight,
                    top: (icon || text) ? 0 : paddingTop,
                    bottom: paddingBottom
                }
            }
            this.add(action, 0, 'center', padding);

            if (actionMask) {
                actionMask = this.addChildMask(action, action, 1); // Circle mask
            }
        }

        // Add space
        if (align === 'center') {
            this.addSpace();
        }

        this.addChildrenMap('background', background);
        this.addChildrenMap('icon', icon);
        this.addChildrenMap('iconMask', iconMask);
        this.addChildrenMap('text', text);
        this.addChildrenMap('action', action);
        this.addChildrenMap('actionMask', actionMask);
    }

    get text() {
        var textObject = this.childrenMap.text;
        if (textObject === undefined) {
            return '';
        }
        var value;
        if (textObject.text) {
            value = textObject.text;
        } else {
            value = textObject.getData('text');
        }
        return value;
    }

    set text(value) {
        var textObject = this.childrenMap.text;
        if (textObject === undefined) {
            return;
        }
        if (textObject.setText) {
            textObject.setText(value);
        } else {
            textObject.setData('text', value);
        }
    }

    setText(value) {
        this.text = value;
        return this;
    }

    appendText(value) {
        this.text += value;
    }

    layout(parent, newWidth, newHeight) {
        super.layout(parent, newWidth, newHeight);
        // Pin icon-mask to icon game object
        var iconMask = this.childrenMap.iconMask;
        if (iconMask) {
            iconMask.setPosition();
            this.resetChildPositionState(iconMask);
        }
        // Pin action-mask to action game object
        var actionMask = this.childrenMap.actionMask;
        if (actionMask) {
            actionMask.setPosition();
            this.resetChildPositionState(actionMask);
        }
        return this;
    }

    resize(width, height) {
        super.resize(width, height);
        // Resize icon-mask to icon game object
        var iconMask = this.childrenMap.iconMask;
        if (iconMask) {
            iconMask.resize();
        }
        // Resize action-mask to icon game object
        var actionMask = this.childrenMap.actionMask;
        if (actionMask) {
            actionMask.resize();
        }
        return this;
    }
}

var methods = {
    addChildMask: utils_AddChildMask
}

Object.assign(
    Label_Label.prototype,
    methods
);

/* harmony default export */ var label_Label = __webpack_exports__["a"] = (Label_Label);

/***/ }),
/* 329 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "MarketPanel", function() { return /* binding */ MarketPanel_MarketPanel; });

// EXTERNAL MODULE: ./src/ui/components/BasePanel.ts + 2 modules
var BasePanel = __webpack_require__(105);

// EXTERNAL MODULE: ./src/ui/Market/ElementDetail.ts
var ElementDetail = __webpack_require__(294);

// EXTERNAL MODULE: ./src/i18n.ts
var i18n = __webpack_require__(124);

// EXTERNAL MODULE: ./src/ui/components/checkbox.group.ts
var checkbox_group = __webpack_require__(157);

// EXTERNAL MODULE: ./src/ui/Market/TextButton.ts
var TextButton = __webpack_require__(185);

// EXTERNAL MODULE: ./src/ui/Market/item.ts
var Market_item = __webpack_require__(298);

// EXTERNAL MODULE: ./src/utils/font.ts
var font = __webpack_require__(107);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/gridtable/GameGridTable.ts
var GameGridTable = __webpack_require__(134);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/ninepatch/NineSlicePatch.ts + 1 modules
var NineSlicePatch = __webpack_require__(196);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/tab/TabButton.ts
var TabButton = __webpack_require__(182);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/tab/NinePatchTabButton.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var NinePatchTabButton_NinePatchTabButton = /** @class */ (function (_super) {
    __extends(NinePatchTabButton, _super);
    function NinePatchTabButton(scene, width, height, key, normalFrame, downFrame, text, configlist, dpr, scale, data) {
        var _this = _super.call(this, scene, key, normalFrame, downFrame, text) || this;
        _this.wid = 0;
        _this.hei = 0;
        _this.configlist = configlist;
        _this.mBackground.setConfig(configlist[0]);
        _this.wid = width;
        _this.hei = height;
        _this.dpr = dpr || 1;
        _this.scale = scale || 1;
        _this.setSize(width, height);
        if (data) {
            _this.btnData = data;
        }
        _this.changeNormal();
        _this.enable = true;
        return _this;
    }
    NinePatchTabButton.prototype.changeNormal = function () {
        if (this.configlist && this.configlist.length > 0) {
            // resetPatchesConfig(this.mBackground.getConfig());
            this.mBackground.setConfig(this.configlist[0]);
            this.setSize(this.wid, this.hei);
        }
        this.setBgFrame(this.mFrame);
    };
    NinePatchTabButton.prototype.changeDown = function () {
        if (this.mDownFrame) {
            if (this.configlist && this.configlist.length > 1) {
                // resetPatchesConfig(this.mBackground.getConfig());
                this.mBackground.setConfig(this.configlist[1]);
                this.setSize(this.wid, this.hei);
            }
            this.setBgFrame(this.mDownFrame);
        }
    };
    NinePatchTabButton.prototype.setSize = function (width, height) {
        _super.prototype.setSize.call(this, width, height);
        this.mBackground.setSize(width, height);
        return this;
    };
    NinePatchTabButton.prototype.getBtnData = function () {
        return this.btnData;
    };
    Object.defineProperty(NinePatchTabButton.prototype, "enable", {
        set: function (value) {
            if (value) {
                this.mBackground.clearTint();
                this.setInteractive();
            }
            else {
                this.mBackground.setTintFill(0x666666);
                this.removeInteractive();
            }
        },
        enumerable: false,
        configurable: true
    });
    NinePatchTabButton.prototype.createBackground = function () {
        this.mBackground = new NineSlicePatch["a" /* NineSlicePatch */](this.scene, 0, 0, 10, 10, this.mKey, this.mFrame, { left: 2, top: 2, right: 2, bottom: 2 }, this.dpr, 1);
        this.add(this.mBackground);
    };
    return NinePatchTabButton;
}(TabButton["a" /* TabButton */]));


// EXTERNAL MODULE: ./src/utils/log.ts
var log = __webpack_require__(0);

// CONCATENATED MODULE: ./src/ui/Market/MarketPanel.ts
var MarketPanel_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();










var MarketPanel_MarketPanel = /** @class */ (function (_super) {
    MarketPanel_extends(MarketPanel, _super);
    function MarketPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "market";
        _this.mSubTabs = [];
        _this.mTabs = [];
        _this.scale = 1;
        return _this;
    }
    MarketPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.mSelectItem.on("buyItem", this.onBuyItemHandler, this);
        this.mSelectItem.on("popItemCard", this.onPopItemCardHandler, this);
        this.mCloseBtn.on("pointerup", this.onCloseHandler, this);
    };
    MarketPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mSelectItem.off("buyItem", this.onBuyItemHandler, this);
        this.mSelectItem.off("popItemCard", this.onPopItemCardHandler, this);
        this.mCloseBtn.off("pointerup", this.onCloseHandler, this);
    };
    MarketPanel.prototype.resize = function (w, h) {
        // super.resize(w, h);
        var scale = this.scale;
        var zoom = this.mWorld.uiScale;
        var width = this.scene.cameras.main.width / scale;
        var height = this.scene.cameras.main.height / scale;
        var centerX = this.scene.cameras.main.centerX / scale;
        this.setSize(width, height);
        this.mTIle.x = centerX;
        var shelfHeight = 290 * this.dpr * zoom;
        // if (shelfHeight > height / 2) {
        //   shelfHeight = height / 2;
        // }
        this.mBackgroundColor.setInteractive(new Phaser.Geom.Rectangle(0, 0, width * zoom, height * zoom), Phaser.Geom.Rectangle.Contains);
        this.mShelfContainer.setSize(width, shelfHeight);
        this.mShelfContainer.setPosition(0, height - this.mShelfContainer.height);
        this.mShelfBackground.clear();
        this.mShelfBackground.fillStyle(0x02ccff);
        this.mShelfBackground.fillRect(0, 0, this.mShelfContainer.width, this.mShelfContainer.height);
        this.mShelfBackground.y = this.mSubCategeoriesContainer.y + 43 * this.dpr * zoom;
        this.mSelectItem.setSize(width, height - this.mShelfContainer.height);
        // this.mSelectItem.y = 45 * this.dpr;
        this.mSelectItem.resize(w, h);
        this.mCategoriesBar.clear();
        this.mCategoriesBar.fillStyle(0x3ee1ff);
        this.mCategoriesBar.fillRect(0, 0, width, 40 * this.dpr * zoom);
        this.mCategoriesBar.fillStyle(0x04b3d3);
        this.mCategoriesBar.fillRect(0, 40 * this.dpr * zoom, width, 3 * this.dpr * zoom);
        this.mSubCategeoriesContainer.setSize(width, 43 * this.dpr * zoom);
        // this.setInteractive();
        // this.setInteractive(new Phaser.Geom.Rectangle(-(width >> 1), -(height >> 1), width, height), Phaser.Geom.Rectangle.Contains);
    };
    MarketPanel.prototype.setCategories = function (content) {
        if (!this.mCategoriesContainer) {
            return;
        }
        this.mCategoriesContainer.removeAll(true);
        var categorys = content.marketCategory;
        this.mTabs = [];
        var frame = this.scene.textures.getFrame(this.key, "categories_normal");
        var w = 60;
        var h = 65;
        if (frame) {
            w = frame.width;
            h = frame.height;
        }
        var config1 = {
            left: 10 * this.dpr,
            top: 13 * this.dpr,
            right: w - 2 - 10 * this.dpr,
            bottom: h - 2 - 13 * this.dpr
        };
        var config0 = {
            left: 0 * this.dpr,
            top: 0 * this.dpr,
            right: w - 2 - 20 * this.dpr,
            bottom: h - 2
        };
        var group = new checkbox_group["CheckboxGroup"]();
        var zoom = this.mWorld.uiScale;
        var capW = 77 * this.dpr * zoom;
        var capH = 38 * this.dpr * zoom;
        for (var i = 0; i < categorys.length; i++) {
            var btn = new NinePatchTabButton_NinePatchTabButton(this.scene, capW, capH, this.key, "categories_normal", "categories_down", categorys[i].category.value, [config0, config1], this.dpr, this.scale);
            // btn.removeAllListeners();
            btn.setTextStyle({
                fontSize: 18 * this.dpr * zoom,
                fontFamily: font["a" /* Font */].DEFULT_FONT,
            });
            this.mTabs[i] = btn;
            btn.setData("category", categorys[i]);
            btn.x = i * 80 * this.dpr * zoom + capW / 2;
            btn.y = capH / 2;
            // this.add(btn);
        }
        this.mCategoriesContainer.setSize(this.mTabs.length * capW, capH);
        this.mShelfContainer.add(this.mTabs);
        // this.mSubCategeoriesContainer.y = this.mCategoriesContainer.height;
        this.mCategoriesBar.y = this.mCategoriesContainer.height + this.mShelfContainer.y;
        this.mSubCategeoriesContainer.addAt(this.mCategoriesBar, 0);
        this.mPropContainer.y = this.mSubCategeoriesContainer.y + 43 * this.dpr * zoom + this.mSubCategeoriesContainer.height + 9 * this.dpr;
        this.mShelfBackground.y = this.mSubCategeoriesContainer.y + 43 * this.dpr * zoom;
        this.mSubCategorisScroll.y = this.mCategoriesBar.y + (33 * this.dpr);
        this.mPropGrid.y = this.mCategoriesBar.y + this.mSubCategeoriesContainer.height + 122 * this.dpr * zoom;
        this.mPropGrid.layout();
        this.mSubCategorisScroll.layout();
        group.on("selected", this.onSelectCategoryHandler, this);
        group.appendItemAll(this.mTabs);
        log["a" /* Logger */].getInstance().log(this.mTabs[0].getWorldTransformMatrix());
        group.selectIndex(0);
        // for (const category of categorys) {
        //   const btn = new NinePatchButton(this.scene, )
        // }
    };
    MarketPanel.prototype.setProp = function (content) {
        this.clearCategories(this.mItems);
        this.mItems = [];
        var commodities = content.commodities;
        // const zoom = this.mWorld.uiScale;
        // for (let i = 0; i < commodities.length; i++) {
        //   const item = new MarketItem(this.scene, Math.floor(i / 3) * (135 * this.dpr * zoom) + (72 * this.dpr * zoom), Math.floor(i % 3) * (68 * this.dpr * zoom) + 30 * this.dpr * zoom, this.dpr, zoom);
        //   item.setProp(commodities[i]);
        //   item.on("select", this.onSelectItemHandler, this);
        //   this.mItems[i] = item;
        // }
        // this.mPropContainer.add(this.mItems);
        this.mPropGrid.setItems(commodities);
        this.mPropGrid.layout();
        if (commodities.length > 0)
            this.onSelectItemHandler(commodities[0]);
    };
    MarketPanel.prototype.setCommodityResource = function (content) {
        if (this.mSelectItem) {
            this.mSelectItem.setResource(content);
        }
    };
    MarketPanel.prototype.destroy = function () {
        if (this.mSubCategorisScroll) {
            this.mSubCategorisScroll.destroy();
        }
        if (this.mPropGrid) {
            this.mPropGrid.destroy();
        }
        _super.prototype.destroy.call(this);
    };
    MarketPanel.prototype.preload = function () {
        // this.scene.load.atlas(this.key, Url.getUIRes(this.dpr, "market/market.png"), Url.getUIRes(this.dpr, "market/market.json"));
        this.addAtlas(this.key, "market/market.png", "market/market.json");
        _super.prototype.preload.call(this);
    };
    MarketPanel.prototype.init = function () {
        var _this = this;
        if (this.mInitialized)
            return;
        var w = this.scene.scale.width / this.scale;
        var h = this.scene.scale.height / this.scale;
        var zoom = this.mWorld.uiScale;
        this.mBackgroundColor = this.scene.make.graphics(undefined, false);
        this.mBackgroundColor.fillGradientStyle(0x6f75ff, 0x6f75ff, 0x04cbff, 0x04cbff);
        // this.mBackgroundColor.fillStyle(0x6f75ff);
        this.mBackgroundColor.fillRect(0, 0, w, h);
        this.add(this.mBackgroundColor);
        this.mShelfContainer = this.scene.make.container({
            x: (w / 2),
            y: h
        }, false).setSize(w, 290 * this.dpr * zoom);
        var frame = this.scene.textures.getFrame(this.key, "bg.png");
        var countW = Math.ceil(w / (frame.width * zoom));
        var countH = Math.ceil((h - this.mShelfContainer.height + frame.height * zoom) / (frame.height * zoom));
        for (var i = 0; i < countW; i++) {
            for (var j = 0; j < countH; j++) {
                var bg = this.scene.make.image({
                    x: i * frame.width * zoom,
                    y: j * frame.height * zoom,
                    key: this.key,
                    frame: "bg.png"
                }, false).setScale(zoom);
                this.add(bg);
            }
        }
        this.mShelfBackground = this.scene.make.graphics(undefined, false);
        this.mCloseBtn = this.scene.make.image({
            key: this.key,
            frame: "back_arrow.png",
            x: 21 * this.dpr,
            y: 30 * this.dpr
        }).setInteractive().setScale(zoom);
        this.mPropContainer = this.scene.make.container(undefined, false);
        this.mCategoriesContainer = this.scene.make.container(undefined, false);
        this.mSubCategeoriesContainer = this.scene.make.container(undefined, false);
        this.mShelfContainer.add([this.mShelfBackground, this.mCategoriesContainer, this.mPropContainer]);
        this.add([this.mShelfContainer, this.mSubCategeoriesContainer]);
        this.mSelectItem = new ElementDetail["ElementDetail"](this.scene, this.mWorld, this.key, this.dpr, this.mWorld.uiScale);
        this.mSelectItem.setSize(w, h - this.mShelfContainer.height);
        this.mTIle = this.scene.make.text({
            text: i18n["a" /* i18n */].t("market.title"),
            y: 30 * this.dpr * zoom,
            style: {
                fontSize: 36 * this.dpr * zoom,
                fontFamily: font["a" /* Font */].DEFULT_FONT
            }
        }).setOrigin(0.5);
        this.add([this.mTIle, this.mSelectItem, this.mCloseBtn]);
        _super.prototype.init.call(this);
        this.mCategoriesBar = this.scene.make.graphics(undefined, false);
        var capW = 56 * this.dpr;
        var capH = 41 * this.dpr;
        var config = {
            x: w / 2,
            // y: 0,
            // width: w,
            // height: capH,
            table: {
                width: w,
                height: capH,
                cellWidth: capW,
                cellHeight: capH,
                reuseCellContainer: true,
                cellOriginX: 0,
                cellOriginY: 0,
            },
            scrollMode: 1,
            createCellContainerCallback: function (cell, cellContainer) {
                var scene = cell.scene, item = cell.item;
                if (cellContainer === null) {
                    cellContainer = new TextButton["TextButton"](scene, _this.dpr, zoom);
                    // cellContainer.width = capW;
                    // cellContainer.height = capH;
                    _this.add(cellContainer);
                }
                cellContainer.setText(item.value);
                // cellContainer.setSize(width, height);
                cellContainer.setData({ item: item });
                if (!_this.mPreSubCategoris) {
                    _this.onSelectSubCategoryHandler(cellContainer);
                }
                return cellContainer;
            },
        };
        this.mSubCategorisScroll = new GameGridTable["a" /* GameGridTable */](this.scene, config);
        this.mSubCategorisScroll.on("cellTap", function (cell, index) {
            _this.onSelectSubCategoryHandler(cell);
        });
        this.add(this.mSubCategorisScroll.table);
        var propFrame = this.scene.textures.getFrame(this.key, "border.png");
        var cellWidth = propFrame.width * zoom + 10 * this.dpr;
        var cellHeight = propFrame.height * zoom + 10 * this.dpr;
        var propGridConfig = {
            x: w / 2,
            y: 1050 + (41 * this.dpr * zoom) / 2,
            // y: 0,
            table: {
                width: w - 20 * this.dpr * zoom,
                height: 224 * this.dpr * zoom,
                columns: 3,
                cellWidth: cellWidth,
                cellHeight: cellHeight,
                reuseCellContainer: true,
                // mask: false,
                cellOriginX: 0,
                cellOriginY: 0
            },
            scrollMode: 1,
            clamplChildOY: false,
            createCellContainerCallback: function (cell, cellContainer) {
                var scene = cell.scene, item = cell.item;
                if (cellContainer === null) {
                    cellContainer = new Market_item["MarketItem"](scene, 0, 0, _this.dpr, zoom);
                    // cellContainer.width = capW;
                    // cellContainer.height = capH;
                    _this.add(cellContainer);
                }
                // cellContainer.setSize(width, height);
                cellContainer.setData({ item: item });
                cellContainer.setProp(item);
                return cellContainer;
            },
        };
        this.mPropGrid = new GameGridTable["a" /* GameGridTable */](this.scene, propGridConfig);
        this.mPropGrid.layout();
        this.mPropGrid.on("cellTap", function (cell) {
            var data = cell.getData("item");
            if (data) {
                _this.onSelectItemHandler(data);
            }
        });
        this.add(this.mPropGrid.table);
        this.resize(0, 0);
        this.emit("getCategories");
    };
    MarketPanel.prototype.setSelect = function () {
        // this.mSelectItem.setProp();
    };
    MarketPanel.prototype.clearCategories = function (tabs) {
        if (!tabs) {
            return;
        }
        tabs.map(function (tab) { return tab.destroy(); });
        tabs = undefined;
    };
    MarketPanel.prototype.onSelectCategoryHandler = function (gameobject) {
        if (!this.mSubCategeoriesContainer) {
            return;
        }
        this.mPreSubCategoris = null;
        this.clearCategories(this.mSubTabs);
        var subcategory = gameobject.getData("category");
        this.mSelectedCategories = gameobject;
        if (subcategory) {
            var subcategorys = subcategory.subcategory;
            if (this.mSubCategorisScroll) {
                this.mSubCategorisScroll.setItems(subcategorys);
                this.mSubCategorisScroll.layout();
            }
        }
    };
    MarketPanel.prototype.onSelectSubCategoryHandler = function (gameobject) {
        if (!this.mSelectedCategories) {
            return;
        }
        if (!(gameobject instanceof TextButton["TextButton"])) {
            return;
        }
        var categories = this.mSelectedCategories.getData("category");
        if (!categories) {
            return;
        }
        var subCategories = gameobject.getData("item");
        if (!subCategories) {
            return;
        }
        if (this.mPreSubCategoris) {
            this.mPreSubCategoris.changeNormal();
        }
        this.queryProp(categories.category.key, subCategories.key);
        gameobject.changeDown();
        this.mPreSubCategoris = gameobject;
    };
    MarketPanel.prototype.queryProp = function (category, subCategory) {
        this.emit("queryProp", 1, category, subCategory);
    };
    MarketPanel.prototype.onSelectItemHandler = function (prop) {
        this.mSelectItem.setProp(prop);
        this.emit("queryPropResource", prop);
    };
    MarketPanel.prototype.onBuyItemHandler = function (prop) {
        this.emit("buyItem", prop);
    };
    MarketPanel.prototype.onCloseHandler = function () {
        this.emit("close");
    };
    MarketPanel.prototype.onPopItemCardHandler = function (prop, display) {
        if (prop) {
            this.emit("popItemCard", prop, display);
        }
    };
    return MarketPanel;
}(BasePanel["BasePanel"]));



/***/ }),
/* 330 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "PicaRoomListPanel", function() { return /* binding */ PicaRoomListPanel_PicaRoomListPanel; });
__webpack_require__.d(__webpack_exports__, "RoomDelegate", function() { return /* binding */ PicaRoomListPanel_RoomDelegate; });
__webpack_require__.d(__webpack_exports__, "RoomZoon", function() { return /* binding */ PicaRoomListPanel_RoomZoon; });

// EXTERNAL MODULE: ./src/ui/components/BasePanel.ts + 2 modules
var BasePanel = __webpack_require__(105);

// EXTERNAL MODULE: ./src/utils/font.ts
var font = __webpack_require__(107);

// EXTERNAL MODULE: ./src/ui/components/checkbox.group.ts
var checkbox_group = __webpack_require__(157);

// EXTERNAL MODULE: ./src/i18n.ts
var i18n = __webpack_require__(124);

// EXTERNAL MODULE: ./node_modules/pixelpai_proto/protocols.js
var protocols = __webpack_require__(2);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/scroller/Scroller.js + 5 modules
var Scroller = __webpack_require__(319);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/baseUI/BaseUI.ts
var BaseUI = __webpack_require__(125);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/size/ResizeGameObject.js
var ResizeGameObject = __webpack_require__(130);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/scroller/Scroller.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var ScrollerEvent;
(function (ScrollerEvent) {
    ScrollerEvent["downinBound"] = "downinBound";
    ScrollerEvent["downoutBound"] = "downoutBound";
    ScrollerEvent["upinBound"] = "upinBound";
    ScrollerEvent["upoutBound"] = "upoutBound";
})(ScrollerEvent || (ScrollerEvent = {}));
var GetValue = Phaser.Utils.Objects.GetValue;
var Scroller_BaseScroller = /** @class */ (function (_super) {
    __extends(BaseScroller, _super);
    function BaseScroller(scene, gameObject, config) {
        var _this = _super.call(this, scene) || this;
        /**
         * 界面内滚动子对象偏移,根据横向和竖向来决定是x向还是y向
         */
        _this.mChildPad = 0;
        /**
         * 是否在移动中
         */
        _this.mMoveing = false;
        _this.soundMap = new Map();
        _this.mConfig = config;
        _this.soundGroup = config.music;
        var bg = scene.make.graphics(undefined, false);
        bg.fillStyle(0);
        bg.fillRect(0, 0, config.width, config.height);
        bg.setPosition(config.x, config.y);
        _this.width = _this.mConfig.width;
        _this.height = _this.mConfig.height;
        gameObject.setMask(bg.createGeometryMask());
        _this.mGameObject = gameObject;
        _this.basePoint = (config.basePoint ? config.basePoint : new Phaser.Geom.Point(_this.mGameObject.parentContainer.x, _this.mGameObject.parentContainer.y));
        var container = scene.make.container(undefined, false);
        container.setSize(config.width, config.height);
        // const bg1 = scene.make.graphics(undefined, false);
        // bg1.fillStyle(0, .2);
        // bg1.fillRect(0, 0, config.width, config.height);
        // bg1.setPosition(-config.width / 2, -config.height / 2);
        // container.add(bg1);
        if (_this.mGameObject.parentContainer) {
            container.x = config.clickX;
            container.y = config.clickY;
            _this.mGameObject.parentContainer.add(container);
        }
        _this.mScroller = new Scroller["a" /* default */](container, config);
        _this.clickContainer = container;
        _this.mDisDelection = GetValue(config, "interactivedisDetection", 10);
        _this.mCellDownHandler = GetValue(config, "celldownCallBack", undefined);
        _this.mCellUpHandler = GetValue(config, "cellupCallBack", undefined);
        _this.setInteractive();
        _this.addListen();
        return _this;
    }
    BaseScroller.prototype.setEnable = function (enable) {
        if (this.mScroller)
            this.mScroller.setEnable(enable);
    };
    BaseScroller.prototype.setValue = function (value) {
        if (this.mScroller)
            this.mScroller.setValue(value);
    };
    BaseScroller.prototype.adjustBackDeceleration = function (deceler) {
        if (this.mScroller)
            this.mScroller.setBackDeceleration(deceler);
    };
    BaseScroller.prototype.adjustSlidingDeceleration = function (deceler) {
        if (this.mScroller)
            this.mScroller.setSlidingDeceleration(deceler);
    };
    BaseScroller.prototype.adjustScrollMode = function (mode) {
        if (!this.mConfig.orientation || this.mConfig.orientation !== mode) {
            if (this.mScroller)
                this.mScroller.setOrientationMode(mode);
        }
        this.mConfig.orientation = mode;
    };
    BaseScroller.prototype.adjustDragThreshol = function (hold) {
        if (this.mScroller)
            this.mScroller.setDragThreshold(hold);
    };
    /***
    *  调整scroller遮照范围
    * @param width
    * @param height
    * @param x
    * @param y
    */
    BaseScroller.prototype.adjustMask = function (width, height, x, y) {
        if (x === void 0) { x = this.mConfig.x; }
        if (y === void 0) { y = this.mConfig.y; }
        var mask = this.mGameObject.mask;
        if (!mask) {
            var config = this.mConfig;
            mask = this.scene.make.graphics(undefined, false);
            mask.fillStyle(0);
            mask.fillRect(0, 0, width, height);
            mask.setPosition(config.x, config.y);
            this.width = width;
            this.height = height;
            this.mGameObject.setMask(mask.createGeometryMask());
        }
        mask.x = x;
        mask.y = y;
        Object(ResizeGameObject["a" /* default */])(mask, width, height);
    };
    BaseScroller.prototype.setBounds = function (value0, value1) {
        this.mScroller.setBounds(value0, value1);
    };
    Object.defineProperty(BaseScroller.prototype, "bounds", {
        get: function () {
            return this.mConfig.bounds;
        },
        enumerable: false,
        configurable: true
    });
    BaseScroller.prototype.resize = function (width, height, value0, value1) {
        this.width = width;
        this.height = height;
        if (this.mGameObject.parentContainer) {
            this.clickContainer.x = this.mConfig.clickX;
            this.clickContainer.y = this.mConfig.clickY;
            this.mGameObject.parentContainer.add(this.clickContainer);
        }
        if (value0 !== undefined && value1 !== undefined)
            this.mScroller.setBounds(value0, value1);
    };
    // resize(width, height) {
    //     if ((this.width === width) && (this.height === height)) {
    //         return this;
    //     }
    //     super.resize(width, height);
    //     if (this.cellsMask) {
    //         ResizeGameObject(MaskToGameObject(this.cellsMask), width, height);
    //     }
    //     if (this.expandCellSize) {
    //         this.table.setDefaultCellWidth(this.instWidth / this.table.colCount);
    //     }
    //     this.updateTable(true);
    //     return this;
    // }
    BaseScroller.prototype.clearInteractiveObject = function () {
        if (!this.mInteractiveList)
            return;
        this.mInteractiveList.length = 0;
        this.mInteractiveList = [];
        this.mScroller.setBounds(0, 0);
    };
    BaseScroller.prototype.setInteractiveObject = function (obj) {
        if (!this.mInteractiveList)
            this.mInteractiveList = [];
        this.mInteractiveList.push(obj);
    };
    BaseScroller.prototype.removeInteractiveObject = function (obj) {
        var index = this.mInteractiveList.indexOf(obj);
        if (index > -1) {
            this.mInteractiveList.splice(index, 1);
        }
    };
    BaseScroller.prototype.addListen = function () {
        if (!this.scene)
            return;
        this.removeListen();
        this.scene.input.on("pointermove", this.pointerMoveHandler, this);
        this.scene.input.on("pointerdown", this.pointerDownHandler, this);
        this.scene.input.on("pointerup", this.pointerUpHandler, this);
    };
    BaseScroller.prototype.removeListen = function () {
        this.mMoveing = false;
        if (!this.scene)
            return;
        this.scene.input.off("pointerdown", this.pointerDownHandler, this);
        this.scene.input.off("pointerup", this.pointerUpHandler, this);
        this.scene.input.off("pointermove", this.pointerMoveHandler, this);
    };
    Object.defineProperty(BaseScroller.prototype, "left", {
        get: function () {
            return -this.mGameObject.width / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScroller.prototype, "right", {
        get: function () {
            return this.mGameObject.width / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScroller.prototype, "top", {
        get: function () {
            return -this.mGameObject.height / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScroller.prototype, "bottom", {
        get: function () {
            return this.mGameObject.height / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScroller.prototype, "boundPad0", {
        get: function () {
            return this.mScroller.boundPad0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseScroller.prototype, "boundPad1", {
        get: function () {
            return this.mScroller.boundPad1;
        },
        enumerable: false,
        configurable: true
    });
    BaseScroller.prototype.destroy = function () {
        this.mMoveing = false;
        if (this.mGameObject)
            this.mGameObject.clearMask(true);
        if (this.mScroller)
            this.mScroller.destroy();
        if (this.clickContainer)
            this.clickContainer.destroy();
        _super.prototype.destroy.call(this);
    };
    /**
     * 手动刷新滚动范围
     * @param refreshSize刷新滚动范围数值，由于在某些场景下ui的宽高尺寸比较难用单一公式计算，所以可以直接外部传入刷新的数值
     */
    BaseScroller.prototype.refreshBound = function (refreshSize) {
        var _this = this;
        if (!this.mInteractiveList)
            return;
        // 滚动容器尺寸
        var totalSize = 0;
        if (refreshSize !== undefined) {
            totalSize = refreshSize;
        }
        else {
            this.mInteractiveList.forEach(function (cell) {
                if (cell) {
                    totalSize += _this.mConfig.orientation ? cell.width : cell.height;
                }
            });
        }
        // // 滚动容器尺寸
        // const tmpSize: number = this.mConfig.orientation ? this.mGameObject.width : this.mGameObject.height;
        // 父容器初始位置
        var baseSize = this.mConfig.orientation ? this.basePoint.x : this.basePoint.y;
        // 视口范围尺寸（滚动不能小于改尺寸）
        var baseShowSize = this.mConfig.orientation ? this.mConfig.width : this.mConfig.height;
        if (totalSize < baseShowSize)
            totalSize = baseShowSize;
        this.setBounds(baseSize, baseSize - totalSize + baseShowSize);
    };
    BaseScroller.prototype.pointerMoveHandler = function (pointer) {
        if (this.soundGroup && this.soundGroup.move)
            this.playSound(this.soundGroup.move);
        this.mMoveing = true;
    };
    BaseScroller.prototype.pointerDownHandler = function (pointer) {
        // this.scene.input.off("pointermove", this.pointerMoveHandler, this);
        if (this.soundGroup && this.soundGroup.down)
            this.playSound(this.soundGroup.down);
        var inBound = this.checkPointerInBounds(this.clickContainer, pointer);
        if (inBound && this.checkPointerDelection(pointer)) {
            if (this.mCellDownHandler && !this.mMoveing) {
                if (!this.mInteractiveList)
                    return;
                for (var i = 0, len = this.mInteractiveList.length; i < len; i++) {
                    var interactiveObj = this.mInteractiveList[i];
                    if (this.checkPointerInBounds(interactiveObj, pointer, true)) {
                        this.mCellDownHandler(interactiveObj);
                        break;
                    }
                }
            }
            var eventName = inBound ? ScrollerEvent.downinBound : ScrollerEvent.downoutBound;
            this.emit(eventName, this.clickContainer);
        }
    };
    BaseScroller.prototype.pointerUpHandler = function (pointer, gameObject) {
        // this.scene.input.on("pointermove", this.pointerMoveHandler, this);
        if (this.soundGroup && this.soundGroup.up)
            this.playSound(this.soundGroup.up);
        var inBound = this.checkPointerInBounds(this.clickContainer, pointer);
        if (inBound && this.checkPointerDelection(pointer)) {
            if (this.mCellUpHandler && !this.mMoveing) {
                if (!this.mInteractiveList)
                    return;
                for (var i = 0, len = this.mInteractiveList.length; i < len; i++) {
                    var interactiveObj = this.mInteractiveList[i];
                    if (this.checkPointerInBounds(interactiveObj, pointer, true)) {
                        this.mCellUpHandler(interactiveObj);
                        break;
                    }
                }
            }
            var eventName = inBound ? ScrollerEvent.upinBound : ScrollerEvent.upoutBound;
            this.emit(eventName, this.clickContainer);
        }
        this.mMoveing = false;
    };
    BaseScroller.prototype.checkPointerInBounds = function (gameObject, pointer, isCell) {
        if (isCell === void 0) { isCell = false; }
        if (!this.mRectangle) {
            this.mRectangle = new Phaser.Geom.Rectangle(0, 0, 0, 0);
        }
        this.mRectangle.left = -gameObject.width / 2;
        this.mRectangle.right = gameObject.width / 2;
        this.mRectangle.top = -gameObject.height / 2;
        this.mRectangle.bottom = gameObject.height / 2;
        if (pointer) {
            var worldMatrix = gameObject.getWorldTransformMatrix();
            var x = pointer.x - worldMatrix.tx;
            var y = pointer.y - worldMatrix.ty;
            if (this.mRectangle.left <= x && this.mRectangle.right >= x && this.mRectangle.top <= y && this.mRectangle.bottom >= y) {
                return true;
            }
            return false;
        }
        return false;
    };
    return BaseScroller;
}(BaseUI["a" /* BaseUI */]));


// EXTERNAL MODULE: ./src/utils/log.ts
var log = __webpack_require__(0);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/button/Button.ts
var Button = __webpack_require__(120);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/tab/TabButton.ts
var TabButton = __webpack_require__(182);

// CONCATENATED MODULE: ./src/ui/PicaRoomList/PicaRoomListPanel.ts
var PicaRoomListPanel_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









var PicaRoomListPanel_PicaRoomListPanel = /** @class */ (function (_super) {
    PicaRoomListPanel_extends(PicaRoomListPanel, _super);
    function PicaRoomListPanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "pica_roomlist";
        _this.scale = 1;
        return _this;
    }
    PicaRoomListPanel.prototype.resize = function (w, h) {
        var scale = this.scale;
        var width = this.scene.cameras.main.width / scale;
        var height = this.scene.cameras.main.height / scale;
        var centerX = this.scene.cameras.main.centerX / scale;
        this.x = width / 2;
        this.y = height / 2;
        _super.prototype.resize.call(this, w, h);
    };
    PicaRoomListPanel.prototype.updateRoomList = function (content) {
        if (!content) {
            return;
        }
        this.mRoomDele.updateList(content);
    };
    PicaRoomListPanel.prototype.updateMyRoomList = function (content) {
        if (!content) {
            return;
        }
        this.mMyRoomDele.updateList(content);
    };
    PicaRoomListPanel.prototype.addListen = function () {
        if (!this.mInitialized)
            return;
        this.mCloseBtn.on("pointerup", this.onCloseHandler, this);
        this.mSeachBtn.on("pointerup", this.onSeachHandler, this);
    };
    PicaRoomListPanel.prototype.removeListen = function () {
        if (!this.mInitialized)
            return;
        this.mCloseBtn.off("pointerup", this.onCloseHandler, this);
        this.mSeachBtn.off("pointerup", this.onSeachHandler, this);
    };
    PicaRoomListPanel.prototype.destroy = function () {
        if (this.mScroller)
            this.mScroller.destroy();
        _super.prototype.destroy.call(this);
    };
    PicaRoomListPanel.prototype.preload = function () {
        this.addAtlas(this.key, "pica_roomlist/pica_roomlist.png", "pica_roomlist/pica_roomlist.json");
        _super.prototype.preload.call(this);
    };
    PicaRoomListPanel.prototype.init = function () {
        var _this = this;
        var zoom = this.mWorld.uiScale;
        var background = this.scene.make.image({
            key: this.key,
            frame: "bg.png"
        }, false).setInteractive();
        this.setSize(background.width, background.height);
        this.mCloseBtn = this.scene.make.image({
            key: this.key,
            frame: "close_btn.png"
        }, false).setInteractive();
        this.mCloseBtn.x = this.width / 2 - this.mCloseBtn.width / 2 - 2 * this.dpr;
        this.mCloseBtn.y = -this.height / 2 + this.mCloseBtn.height / 2;
        this.mRoomDeleBtn = new TabButton["a" /* TabButton */](this.scene, this.key, "checkbox_normal", "checkbox_down", i18n["a" /* i18n */].t("room_list.visit"));
        this.mRoomDeleBtn.x = -54 * this.dpr;
        this.mRoomDeleBtn.y = -this.height / 2 + this.mRoomDeleBtn.displayHeight / 2 - 4 * this.dpr;
        this.mRoomDeleBtn.setTextStyle({
            color: "#3333cc",
            fontFamily: font["a" /* Font */].DEFULT_FONT,
            fontSize: 14 * this.dpr
        });
        this.mRoomDeleBtn.setFontStyle("bold");
        this.mMyRoomDeleBtn = new TabButton["a" /* TabButton */](this.scene, this.key, "checkbox_normal", "checkbox_down", i18n["a" /* i18n */].t("room_list.my"));
        this.mMyRoomDeleBtn.x = 54 * this.dpr;
        this.mMyRoomDeleBtn.y = this.mRoomDeleBtn.y;
        this.mMyRoomDeleBtn.setTextStyle({
            color: "#3333cc",
            fontFamily: font["a" /* Font */].DEFULT_FONT,
            fontSize: 16 * this.dpr
        });
        this.mMyRoomDeleBtn.setFontStyle("bold");
        var checkbox = new checkbox_group["CheckboxGroup"]();
        checkbox.appendItemAll([this.mRoomDeleBtn, this.mMyRoomDeleBtn]);
        checkbox.on("selected", this.onSelectedHandler, this);
        this.mRoomContainer = this.scene.make.container(undefined, false);
        this.mRoomContainer.setSize(272 * this.dpr, 362 * this.dpr);
        this.mRoomContainer.y = -this.height / 2 + 11 * this.dpr * zoom;
        this.mSeachBtn = this.scene.make.image({
            key: this.key,
            frame: "seach_btn.png"
        }, false).setInteractive();
        this.mSeachBtn.y = this.height / 2 - this.mSeachBtn.height / 2 + 12 * this.dpr;
        var seachText = this.scene.make.text({
            x: -35 * this.dpr,
            y: this.mSeachBtn.y,
            text: i18n["a" /* i18n */].t("room_list.seach"),
            style: {
                color: "#996600",
                fontFamily: font["a" /* Font */].DEFULT_FONT,
                fontSize: 14 * this.dpr
            }
        }, false).setOrigin(0.5);
        var roomText = this.scene.make.text({
            x: 35 * this.dpr,
            y: this.mSeachBtn.y,
            text: i18n["a" /* i18n */].t("room_list.room"),
            style: {
                color: "#996600",
                fontFamily: font["a" /* Font */].DEFULT_FONT,
                fontSize: 14 * this.dpr
            }
        }, false).setOrigin(0.5);
        this.add([background, this.mRoomContainer, this.mCloseBtn, this.mSeachBtn, seachText, roomText]);
        _super.prototype.init.call(this);
        this.resize(0, 0);
        var w = this.mRoomContainer.width * this.scale;
        var h = this.mRoomContainer.height * this.scale;
        var config = {
            x: this.x - w / 2,
            y: this.y - h / 2 - 20 * this.dpr * this.scale,
            clickX: 0,
            clickY: 0,
            width: w,
            height: h,
            boundPad0: -25 * this.dpr * zoom,
            // bounds: [
            //   this.y,
            //   this.y - h - 100 * this.dpr + (350 * this.dpr / 2)
            // ],
            value: this.y,
            valuechangeCallback: function (newValue) {
                _this.mRoomContainer.y = newValue - _this.y - h / 2;
                log["a" /* Logger */].getInstance().log(_this.mRoomContainer.y + "," + _this.y);
            },
            cellupCallBack: function (gameobject) {
                gameobject.onEnterRoomHandler();
                log["a" /* Logger */].getInstance().log(gameobject.roomData().name);
            }
        };
        this.mScroller = new Scroller_BaseScroller(this.scene, this.mRoomContainer, config);
        this.add([this.mRoomDeleBtn, this.mMyRoomDeleBtn, this.mCloseBtn]);
        checkbox.selectIndex(0);
    };
    PicaRoomListPanel.prototype.showRoomList = function () {
        if (this.mMyRoomDele) {
            this.mMyRoomDele.removeFromContainer();
            this.mMyRoomDele.off("enterRoom", this.onEnterRoomHandler, this);
        }
        if (!this.mRoomDele)
            this.mRoomDele = new PicaRoomListPanel_RoomDelegate(this.mRoomContainer, this.mScroller, this.scene, this.mWorld, this.key, this.dpr);
        this.mRoomDele.on("enterRoom", this.onEnterRoomHandler, this);
        this.mRoomDele.addToContainer();
        this.emit("getRoomList");
    };
    PicaRoomListPanel.prototype.showMyRoomList = function () {
        if (this.mRoomDele) {
            this.mRoomDele.removeFromContainer();
            this.mRoomDele.off("enterRoom", this.onEnterRoomHandler, this);
        }
        if (!this.mMyRoomDele)
            this.mMyRoomDele = new PicaRoomListPanel_MyRoomDelegate(this.mRoomContainer, this.mScroller, this.mWorld, this.scene, this.key, this.dpr);
        this.mMyRoomDele.on("enterRoom", this.onEnterRoomHandler, this);
        this.mMyRoomDele.addToContainer();
        this.emit("getMyRoomList");
    };
    PicaRoomListPanel.prototype.onEnterRoomHandler = function (room) {
        this.emit("enterRoom", room);
    };
    PicaRoomListPanel.prototype.onSelectedHandler = function (gameobject, prevButton) {
        if (!(gameobject instanceof Button["a" /* Button */])) {
            return;
        }
        this.mRoomContainer.removeAll(false);
        switch (gameobject) {
            case this.mRoomDeleBtn:
                this.showRoomList();
                break;
            case this.mMyRoomDeleBtn:
                this.showMyRoomList();
                break;
        }
        (gameobject).setTextColor("#996600");
        if (prevButton) {
            if (prevButton instanceof Button["a" /* Button */]) {
                prevButton.setTextColor("#3333cc");
            }
        }
    };
    PicaRoomListPanel.prototype.onSeachHandler = function () {
        // TODO seach
    };
    PicaRoomListPanel.prototype.onCloseHandler = function () {
        this.emit("close");
    };
    return PicaRoomListPanel;
}(BasePanel["BasePanel"]));

var PicaRoomListPanel_RoomDelegate = /** @class */ (function (_super) {
    PicaRoomListPanel_extends(RoomDelegate, _super);
    function RoomDelegate(container, scroller, scene, world, key, dpr) {
        if (dpr === void 0) { dpr = 1; }
        var _this = _super.call(this) || this;
        _this.mChildPad = 0;
        _this.mDpr = 1;
        _this.mHeight = 0;
        _this.mDpr = dpr;
        _this.mWorld = world;
        _this.mChildPad = 0;
        _this.mScene = scene;
        _this.mContainer = container;
        _this.mScroller = scroller;
        _this.mKey = key;
        _this.init();
        return _this;
    }
    RoomDelegate.prototype.addListen = function () {
        this.mPopularityRoom.on("enterRoom", this.onEnterRoomHandler, this);
        this.mPlayerRoom.on("enterRoom", this.onEnterRoomHandler, this);
    };
    RoomDelegate.prototype.removeListen = function () {
        this.mPopularityRoom.off("enterRoom", this.onEnterRoomHandler, this);
        this.mPlayerRoom.off("enterRoom", this.onEnterRoomHandler, this);
    };
    RoomDelegate.prototype.updateList = function (content) {
        this.mContent = content;
        this.mScroller.clearInteractiveObject();
        this.mHeight = this.activity.height;
        this.mChildPad = this.activity.height + 14 * this.mDpr * this.mWorld.uiScale;
        if (!this.mContent) {
            return;
        }
        this.mPopularityRoom.addItem(content.popularRooms, this.mChildPad);
    };
    RoomDelegate.prototype.addToContainer = function () {
        this.addListen();
        this.refreshPos();
    };
    RoomDelegate.prototype.removeFromContainer = function () {
        this.removeListen();
        if (this.mPopularityRoom)
            this.mPopularityRoom.clear();
        if (this.mPlayerRoom)
            this.mPlayerRoom.clear();
    };
    RoomDelegate.prototype.destroy = function () {
        this.removeListen();
        if (this.mPlayerRoom)
            this.mPopularityRoom.destroy();
        if (this.mPopularityRoom)
            this.mPopularityRoom.destroy();
        if (this.mScroller)
            this.mScroller.destroy();
        if (this.activity)
            this.activity.destroy();
        _super.prototype.destroy.call(this);
    };
    RoomDelegate.prototype.init = function () {
        var _this = this;
        this.activity = this.mScene.make.image({
            key: this.mKey,
            frame: "activity_title.png"
        }, false);
        this.activity.y = this.activity.height / 2 + 2 * this.mDpr;
        this.mChildPad += this.activity.height / 2 + 18 * this.mDpr;
        this.mPopularityRoom = new PicaRoomListPanel_PopularRoomZoon(this.mScene, this.mKey, "popularity_icon.png", i18n["a" /* i18n */].t("room_list.popularity_room"), this.mDpr, this.mWorld.uiScale, 0, this.mChildPad, function (hei) {
            if (_this.mPopularityRoom.roomList)
                _this.setScrollInteractive(_this.mPopularityRoom.roomList);
            _this.mHeight += hei;
            _this.refreshPos();
            _this.mChildPad += _this.mPopularityRoom.height;
            _this.mPlayerRoom.addItem(_this.mContent.playerRooms, _this.mChildPad);
        });
        this.mPlayerRoom = new PicaRoomListPanel_RoomZoon(this.mScene, this.mKey, "player_icon.png", i18n["a" /* i18n */].t("room_list.player_room"), this.mDpr, this.mWorld.uiScale, 0, this.mChildPad, function (hei) {
            if (_this.mPlayerRoom.roomList)
                _this.setScrollInteractive(_this.mPlayerRoom.roomList);
            _this.mHeight += hei;
            _this.refreshPos();
            _this.mScroller.refreshBound(_this.mHeight);
            _this.mScroller.setValue(_this.mContainer.parentContainer.y);
        });
    };
    RoomDelegate.prototype.refreshPos = function () {
        if (this.activity) {
            this.activity.setTexture(this.mKey, "activity_title.png");
            this.mContainer.add(this.activity);
        }
        if (this.mPopularityRoom) {
            if (this.mPopularityRoom.showList) {
                this.mContainer.add(this.mPopularityRoom.showList);
                if (this.mPopularityRoom.roomList) {
                    this.mContainer.add(this.mPopularityRoom.roomList);
                }
            }
        }
        if (this.mPlayerRoom) {
            if (this.mPlayerRoom.showList) {
                this.mContainer.add(this.mPlayerRoom.showList);
                if (this.mPlayerRoom.roomList) {
                    this.mContainer.add(this.mPlayerRoom.roomList);
                }
            }
        }
        // const zoom: number = this.mWorld.uiScale;
        // const baseHei: number = 362 * this.mDpr;
        // let topY: number = this.mContainer.parentContainer.y;
        // Logger.getInstance().log(this.mContainer.height);
        // let bottomY: number = 0;
        // if (this.mHeight > baseHei) {
        //   topY = topY;
        //   bottomY = topY - this.mHeight + baseHei - 25 * this.mDpr * zoom;
        // } else {
        //   topY = topY;
        //   bottomY = topY;
        // }
        // this.mScroller.resize(this.mScroller.width, this.mHeight, topY, bottomY);
    };
    RoomDelegate.prototype.onEnterRoomHandler = function (room) {
        this.emit("enterRoom", room);
    };
    RoomDelegate.prototype.setScrollInteractive = function (roomList) {
        for (var i = 0, len = roomList.length; i < len; i++) {
            var roomItem = roomList[i];
            this.mScroller.setInteractiveObject(roomItem);
        }
    };
    return RoomDelegate;
}(Phaser.Events.EventEmitter));

var PicaRoomListPanel_MyRoomDelegate = /** @class */ (function (_super) {
    PicaRoomListPanel_extends(MyRoomDelegate, _super);
    function MyRoomDelegate(container, scroller, world, scene, key, dpr) {
        if (dpr === void 0) { dpr = 1; }
        return _super.call(this, container, scroller, scene, world, key, dpr) || this;
    }
    MyRoomDelegate.prototype.addListen = function () {
        this.mMyRoom.on("enterRoom", this.onEnterRoomHandler, this);
        this.mMyHistory.on("enterRoom", this.onEnterRoomHandler, this);
    };
    MyRoomDelegate.prototype.removeListen = function () {
        this.mMyRoom.off("enterRoom", this.onEnterRoomHandler, this);
        this.mMyHistory.off("enterRoom", this.onEnterRoomHandler, this);
    };
    MyRoomDelegate.prototype.addToContainer = function () {
        this.addListen();
        this.refreshPos();
    };
    MyRoomDelegate.prototype.removeFromContainer = function () {
        this.removeListen();
        if (this.mMyRoom)
            this.mMyRoom.clear();
        if (this.mMyHistory)
            this.mMyHistory.clear();
    };
    MyRoomDelegate.prototype.updateList = function (content) {
        if (!this.mMyRoom) {
            return;
        }
        this.mContent = content;
        this.mScroller.clearInteractiveObject();
        this.mHeight = this.activity.height;
        this.mChildPad = this.activity.height + 14 * this.mDpr * this.mWorld.uiScale;
        this.mMyRoom.addItem(content.selfRooms, this.mChildPad);
    };
    MyRoomDelegate.prototype.destroy = function () {
        if (this.mMyRoom)
            this.mMyRoom.destroy();
        if (this.mMyHistory)
            this.mMyHistory.destroy();
        _super.prototype.destroy.call(this);
    };
    MyRoomDelegate.prototype.refreshPos = function () {
        if (this.activity) {
            this.activity.setTexture(this.mKey, "activity_title.png");
            this.mContainer.add(this.activity);
        }
        if (this.mMyRoom) {
            if (this.mMyRoom.showList) {
                this.mContainer.add(this.mMyRoom.showList);
                if (this.mMyRoom.roomList)
                    this.mContainer.add(this.mMyRoom.roomList);
            }
        }
        if (this.mMyHistory) {
            if (this.mMyHistory.showList) {
                this.mContainer.add(this.mMyHistory.showList);
                if (this.mMyHistory.roomList)
                    this.mContainer.add(this.mMyHistory.roomList);
            }
        }
        // const zoom: number = this.mWorld.uiScale;
        // const baseHei: number = 362 * this.mDpr;
        // let topY: number = this.mContainer.parentContainer.y;
        // let bottomY: number = 0;
        // if (this.mHeight > baseHei) {
        //   topY = topY;
        //   bottomY = topY - this.mHeight + baseHei - 25 * this.mDpr * zoom;
        // } else {
        //   topY = topY;
        //   bottomY = topY;
        // }
        // this.mScroller.resize(this.mScroller.width, this.mHeight, topY, bottomY);
    };
    MyRoomDelegate.prototype.init = function () {
        var _this = this;
        this.activity = this.mScene.make.image({
            key: this.mKey,
            frame: "activity_title.png"
        }, false);
        this.activity.y = this.activity.height / 2 + 2 * this.mDpr;
        this.mChildPad = this.activity.height + 14 * this.mDpr * this.mWorld.uiScale;
        this.mMyRoom = new PicaRoomListPanel_MyRoomZoon(this.mScene, this.mKey, "my_room_icon.png", i18n["a" /* i18n */].t("room_list.my_room"), this.mDpr, this.mWorld.uiScale, 0, this.mChildPad, function (hei) {
            if (_this.mMyRoom.roomList)
                _this.setScrollInteractive(_this.mMyRoom.roomList);
            _this.mHeight += hei;
            _this.refreshPos();
            _this.mChildPad += _this.mMyRoom.height;
            _this.mMyHistory.addItem(_this.mContent.historyRooms, _this.mChildPad);
        });
        this.mMyHistory = new PicaRoomListPanel_RoomZoon(this.mScene, this.mKey, "history_icon.png", i18n["a" /* i18n */].t("room_list.my_history"), this.mDpr, this.mWorld.uiScale, 0, this.mChildPad, function (hei) {
            if (_this.mMyHistory.roomList)
                _this.setScrollInteractive(_this.mMyHistory.roomList);
            _this.mHeight += hei;
            _this.refreshPos();
            _this.mScroller.refreshBound(_this.mHeight);
            _this.mScroller.setValue(_this.mContainer.parentContainer.y);
        });
    };
    MyRoomDelegate.prototype.onEnterRoomHandler = function (room) {
        this.emit("enterRoom", room);
    };
    return MyRoomDelegate;
}(PicaRoomListPanel_RoomDelegate));
var PicaRoomListPanel_RoomZoon = /** @class */ (function (_super) {
    PicaRoomListPanel_extends(RoomZoon, _super);
    /**
     *
     * @param scene
     * @param key
     * @param iconFrame
     * @param label
     * @param dpr
     * @param scrollMode 0 竖直  1 水平
     * @param pad
     * @param addCallBack
     */
    function RoomZoon(scene, key, iconFrame, label, dpr, uiscale, scrollMode, pad, addCallBack) {
        if (scrollMode === void 0) { scrollMode = 0; }
        if (pad === void 0) { pad = 0; }
        var _this = _super.call(this) || this;
        _this.mWidth = 0;
        _this.mHeight = 0;
        _this.mShowList = [];
        _this.mScene = scene;
        _this.mKey = key;
        _this.mDpr = dpr;
        _this.uiScale = uiscale;
        _this.mPad = pad;
        _this.mOrientaction = scrollMode;
        _this.mIconFrame = iconFrame;
        _this.mLabel = label;
        _this.icon = scene.make.image({
            key: key,
            frame: iconFrame
        }, false);
        _this.icon.x = scrollMode ? -254 * dpr / 2 + pad : -254 * dpr / 2;
        _this.icon.y = scrollMode ? 0 : pad;
        _this.text = scene.make.text({
            text: label,
            style: {
                color: "#ffcc33",
                fontSize: 16 * dpr,
                fontFamily: font["a" /* Font */].DEFULT_FONT
            }
        }, false).setOrigin(0, 0.5);
        _this.text.setStroke("#663300", 2 * dpr);
        _this.text.x = scrollMode ? _this.icon.x + _this.icon.width / 2 + 4 * dpr + pad : _this.icon.x + _this.icon.width / 2 + 4 * dpr;
        _this.text.y = scrollMode ? 0 : pad;
        _this.mWidth = _this.icon.width;
        _this.mHeight = _this.icon.height;
        _this.mAddCallBack = addCallBack;
        _this.mRooms = [];
        return _this;
    }
    Object.defineProperty(RoomZoon.prototype, "showList", {
        get: function () {
            return this.mShowList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RoomZoon.prototype, "roomList", {
        get: function () {
            return this.mRooms;
        },
        enumerable: false,
        configurable: true
    });
    RoomZoon.prototype.addItem = function (rooms, pad) {
        if (pad === void 0) { pad = 0; }
        this.icon = this.mScene.make.image({
            key: this.mKey,
            frame: this.mIconFrame
        }, false);
        this.text = this.mScene.make.text({
            text: this.mLabel,
            style: {
                color: "#ffcc33",
                fontSize: 16 * this.mDpr,
                fontFamily: font["a" /* Font */].DEFULT_FONT
            }
        }, false).setOrigin(0, 0.5);
        this.text.setStroke("#663300", 2 * this.mDpr);
        this.icon.x = this.mOrientaction ? -254 * this.mDpr / 2 + pad : -254 * this.mDpr / 2;
        this.icon.y = this.mOrientaction ? 0 : pad;
        this.text.x = this.mOrientaction ? this.icon.x + this.icon.width / 2 + 4 * this.mDpr + pad : this.icon.x + this.icon.width / 2 + 4 * this.mDpr;
        this.text.y = this.mOrientaction ? 0 : pad;
        this.mShowList.push(this.icon);
        this.mShowList.push(this.text);
        this.mHeight = this.icon.height;
        this.mPad = pad ? pad : this.mPad;
        var len = rooms.length;
        var zoom = this.uiScale;
        var tmpWid = this.mOrientaction ? this.mPad + pad : 0;
        var tmpHei = 6 * this.mDpr * zoom;
        if (len > 0) {
            this.mPad += this.icon.height + 12 * this.mDpr * zoom;
            for (var i = 0; i < len; i++) {
                var room = new PicaRoomListPanel_RoomItem(this.mScene, this.mKey, this.mDpr);
                room.setInfo(rooms[i]);
                room.on("enterRoom", this.onEnterRoomHandler, this);
                room.x = tmpWid;
                var roomY = i * (room.height + tmpHei) + this.mPad;
                room.y = roomY;
                this.mHeight += room.height + tmpHei;
                this.mRooms[i] = room;
            }
        }
        this.mHeight += tmpHei;
        if (this.mAddCallBack) {
            this.mAddCallBack(this.mHeight);
        }
    };
    Object.defineProperty(RoomZoon.prototype, "width", {
        get: function () {
            return this.mWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RoomZoon.prototype, "height", {
        get: function () {
            return this.mHeight;
        },
        enumerable: false,
        configurable: true
    });
    RoomZoon.prototype.destroy = function () {
        this.clear();
        _super.prototype.destroy.call(this);
    };
    RoomZoon.prototype.clear = function () {
        for (var _i = 0, _a = this.mRooms; _i < _a.length; _i++) {
            var room = _a[_i];
            room.destroy();
        }
        for (var _b = 0, _c = this.mShowList; _b < _c.length; _b++) {
            var show = _c[_b];
            show.destroy();
        }
        this.icon.destroy();
        this.text.destroy();
        this.mShowList.length = 0;
        this.mRooms.length = 0;
    };
    RoomZoon.prototype.onEnterRoomHandler = function (room) {
        this.emit("enterRoom", room);
    };
    return RoomZoon;
}(Phaser.Events.EventEmitter));

var PicaRoomListPanel_MyRoomZoon = /** @class */ (function (_super) {
    PicaRoomListPanel_extends(MyRoomZoon, _super);
    function MyRoomZoon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MyRoomZoon.prototype.addItem = function (rooms, pad) {
        if (pad === void 0) { pad = 0; }
        // this.clear();
        this.icon = this.mScene.make.image({
            key: this.mKey,
            frame: this.mIconFrame
        }, false);
        this.text = this.mScene.make.text({
            text: this.mLabel,
            style: {
                color: "#ffcc33",
                fontSize: 16 * this.mDpr,
                fontFamily: font["a" /* Font */].DEFULT_FONT
            }
        }, false).setOrigin(0, 0.5);
        this.text.setStroke("#663300", 2 * this.mDpr);
        this.icon.x = this.mOrientaction ? -254 * this.mDpr / 2 + pad : -254 * this.mDpr / 2;
        this.icon.y = this.mOrientaction ? 0 : pad;
        this.text.x = this.mOrientaction ? this.icon.x + this.icon.width / 2 + 4 * this.mDpr + pad : this.icon.x + this.icon.width / 2 + 4 * this.mDpr;
        this.text.y = this.mOrientaction ? 0 : pad;
        this.mShowList.push(this.icon);
        this.mShowList.push(this.text);
        this.mHeight = this.icon.height;
        this.mPad = pad ? pad : this.mPad;
        var zoom = this.uiScale;
        var tmpWid = this.mOrientaction ? this.mPad + pad : 0;
        var tmpHei = 6 * this.mDpr * zoom;
        if (rooms.length > 0) {
            this.mPad += this.icon.height + 14 * this.mDpr * zoom;
            // TODO 通过反射创建
            for (var i = 0; i < rooms.length; i++) {
                var room = new MyRoomItem(this.mScene, this.mKey, this.mDpr);
                room.setInfo(rooms[i]);
                room.on("enterRoom", this.onEnterRoomHandler, this);
                room.x = tmpWid;
                var roomY = i * (room.height + tmpHei) + this.mPad;
                room.y = roomY;
                this.mHeight += room.height + tmpHei;
                this.mRooms[i] = room;
            }
        }
        this.mHeight += tmpHei;
        if (this.mAddCallBack) {
            log["a" /* Logger */].getInstance().log("myroomheight:" + this.mHeight);
            this.mAddCallBack(this.mHeight);
        }
    };
    return MyRoomZoon;
}(PicaRoomListPanel_RoomZoon));
var PicaRoomListPanel_PopularRoomZoon = /** @class */ (function (_super) {
    PicaRoomListPanel_extends(PopularRoomZoon, _super);
    function PopularRoomZoon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PopularRoomZoon.prototype.addItem = function (rooms, pad) {
        if (pad === void 0) { pad = 0; }
        // this.clear();
        this.icon = this.mScene.make.image({
            key: this.mKey,
            frame: this.mIconFrame
        }, false);
        this.text = this.mScene.make.text({
            text: this.mLabel,
            style: {
                color: "#ffcc33",
                fontSize: 16 * this.mDpr,
                fontFamily: font["a" /* Font */].DEFULT_FONT
            }
        }, false).setOrigin(0, 0.5);
        this.text.setStroke("#663300", 2 * this.mDpr);
        this.icon.x = this.mOrientaction ? -254 * this.mDpr / 2 + pad : -254 * this.mDpr / 2;
        this.icon.y = this.mOrientaction ? 0 : pad;
        this.text.x = this.mOrientaction ? this.icon.x + this.icon.width / 2 + 4 * this.mDpr + pad : this.icon.x + this.icon.width / 2 + 4 * this.mDpr;
        this.text.y = this.mOrientaction ? 0 : pad;
        this.mShowList.push(this.icon);
        this.mShowList.push(this.text);
        this.mHeight = this.icon.height;
        this.mPad = pad ? pad : this.mPad;
        var zoom = this.uiScale;
        var tmpWid = this.mOrientaction ? this.mPad : 0;
        var tmpHei = 6 * this.mDpr * zoom;
        if (rooms.length > 0) {
            this.mPad += this.icon.height + 12 * this.mDpr * zoom;
            for (var i = 0; i < rooms.length; i++) {
                var room = new PopularRoomItem(this.mScene, this.mKey, this.mDpr);
                room.setInfo(rooms[i]);
                room.setRank(i + 1);
                room.on("enterRoom", this.onEnterRoomHandler, this);
                room.x = tmpWid;
                var roomY = i * (room.height + tmpHei) + this.mPad;
                room.y = roomY;
                this.mHeight += room.height + tmpHei;
                this.mRooms[i] = room;
            }
        }
        this.mHeight += tmpHei;
        if (this.mAddCallBack) {
            log["a" /* Logger */].getInstance().log("popheight:" + this.mHeight);
            this.mAddCallBack(this.mHeight);
        }
        return this.mHeight;
    };
    return PopularRoomZoon;
}(PicaRoomListPanel_RoomZoon));
var PicaRoomListPanel_RoomItem = /** @class */ (function (_super) {
    PicaRoomListPanel_extends(RoomItem, _super);
    function RoomItem(scene, key, dpr) {
        if (dpr === void 0) { dpr = 1; }
        var _this = _super.call(this, scene) || this;
        _this.mKey = key;
        _this.mDpr = dpr;
        _this.init(key, dpr);
        return _this;
    }
    RoomItem.prototype.setInfo = function (room) {
        if (room) {
            if (room.name)
                this.mNickName.setText(room.name);
            if (room.playerCount)
                this.mCounter.setText(room.playerCount.toString());
        }
        this.mCounterIcon.x = this.mCounter.x - this.mCounter.width / 2 - this.mCounterIcon.width / 2 - 4 * this.mDpr;
        this.crateLabel(protocols["op_def"].EditModeRoomPrivacy.EDIT_MODE_ROOM_LOCKED);
        this.mRoom = room;
    };
    RoomItem.prototype.roomData = function () {
        return this.mRoom;
    };
    RoomItem.prototype.onEnterRoomHandler = function (pointer) {
        if (this.mRoom) {
            this.emit("enterRoom", this.mRoom.roomId);
        }
    };
    RoomItem.prototype.init = function (key, dpr) {
        this.mBackground = this.scene.make.image({
            key: key,
            frame: "room_gray.png"
        }, false).setInteractive();
        this.setSize(this.mBackground.width, this.mBackground.height);
        this.mNickName = this.scene.make.text({
            style: {
                color: "#000000",
                fontFamily: font["a" /* Font */].DEFULT_FONT,
                fontSize: 14 * dpr
            }
        }, false);
        this.mNickName.x = -this.width / 2 + 12 * dpr;
        this.mNickName.y = -(this.mNickName.height) / 2;
        this.mCounterIcon = this.scene.make.image({
            key: key,
            frame: "counter_icon.png"
        }, false);
        this.mCounter = this.scene.make.text({
            style: {
                color: "#000000",
                fontFamily: font["a" /* Font */].DEFULT_FONT,
                fontSize: 14 * dpr
            }
        }, false).setOrigin(0.5);
        this.mCounter.x = this.width / 2 - 23 * dpr;
        this.add([this.mBackground, this.mNickName, this.mCounterIcon, this.mCounter]);
    };
    RoomItem.prototype.crateLabel = function (state) {
        // TODO 封装成一个类
        var frame = "";
        var text = "";
        if (state === protocols["op_def"].EditModeRoomPrivacy.EDIT_MODE_ROOM_LOCKED) {
            frame = "passworld_label.png";
            text = i18n["a" /* i18n */].t("room_list.password");
        }
        else if (state === protocols["op_def"].EditModeRoomPrivacy.EDIT_MODE_ROOM_PRIVATE) {
            frame = "close_label.png";
            text = i18n["a" /* i18n */].t("room_list.close");
        }
        if (frame === "" || text === "") {
            return;
        }
        this.mLabelImg = this.scene.make.image({
            key: this.mKey,
            frame: frame
        }, false);
        this.mLabelText = this.scene.make.text({
            text: text,
            style: {
                color: "#666666",
                fontFamily: font["a" /* Font */].DEFULT_FONT,
                fontSize: 12 * this.mDpr
            }
        }, false).setOrigin(0, 0.5);
        this.add([this.mLabelImg, this.mLabelText]);
        this.mLabelImg.x = this.width / 2 - 85 * this.mDpr;
        this.mLabelText.x = this.mLabelImg.x - 7 * this.mDpr;
    };
    return RoomItem;
}(Phaser.GameObjects.Container));
var MyRoomItem = /** @class */ (function (_super) {
    PicaRoomListPanel_extends(MyRoomItem, _super);
    function MyRoomItem(scene, key, dpr) {
        if (dpr === void 0) { dpr = 1; }
        return _super.call(this, scene, key, dpr) || this;
    }
    MyRoomItem.prototype.init = function (key, dpr) {
        _super.prototype.init.call(this, key, dpr);
        if (this.mBackground) {
            this.mBackground.setFrame("room_yellow.png");
        }
        if (this.mNickName) {
            this.mNickName.setColor("#663300");
            this.mCounter.setColor("#663300");
        }
    };
    return MyRoomItem;
}(PicaRoomListPanel_RoomItem));
var PopularRoomItem = /** @class */ (function (_super) {
    PicaRoomListPanel_extends(PopularRoomItem, _super);
    function PopularRoomItem(scene, key, dpr) {
        if (dpr === void 0) { dpr = 1; }
        return _super.call(this, scene, key, dpr) || this;
    }
    PopularRoomItem.prototype.setRank = function (num) {
        if (this.mRankImage) {
            this.mRankImage.setTexture(this.mKey, "rank_" + num + ".png");
            this.mRankImage.x = -this.width / 2 + this.mRankImage.width / 2 - 2 * this.mDpr;
            this.add(this.mRankImage);
        }
    };
    PopularRoomItem.prototype.init = function (key, dpr) {
        _super.prototype.init.call(this, key, dpr);
        this.mRankImage = this.scene.make.image(undefined, false);
        this.mNickName.x = -this.width / 2 + 37 * dpr;
    };
    return PopularRoomItem;
}(MyRoomItem));


/***/ }),
/* 331 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "ShopItemSlot", function() { return /* binding */ shop_itemSlot_ShopItemSlot; });

// EXTERNAL MODULE: ./src/ui/bag/item.slot.ts
var item_slot = __webpack_require__(132);

// EXTERNAL MODULE: ./src/ui/bag/dragDropIcon.ts
var dragDropIcon = __webpack_require__(154);

// EXTERNAL MODULE: ./node_modules/pixelpai_proto/protocols.js
var protocols = __webpack_require__(2);

// EXTERNAL MODULE: ./src/utils/resUtil.ts + 1 modules
var resUtil = __webpack_require__(104);

// CONCATENATED MODULE: ./src/const/res.const.ts

var res_const_UI;
(function (UI) {
    var TuDing18 = /** @class */ (function () {
        function TuDing18() {
        }
        TuDing18.getName = function () {
            return "ui_moneyIcon_tuding_18_png";
        };
        TuDing18.getPNG = function () {
            return resUtil["h" /* Url */].getRes("ui/moneyIcon/tuding_18.png");
        };
        return TuDing18;
    }());
    UI.TuDing18 = TuDing18;
})(res_const_UI || (res_const_UI = {}));

// EXTERNAL MODULE: ./src/ui/components/dynamic.image.ts
var dynamic_image = __webpack_require__(113);

// EXTERNAL MODULE: ./src/ui/tips/toolTip.ts
var toolTip = __webpack_require__(171);

// EXTERNAL MODULE: ./node_modules/net-socket-packet/dist/index.js
var dist = __webpack_require__(103);

// CONCATENATED MODULE: ./src/ui/Shop/shop.itemSlot.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








var shop_itemSlot_ShopItemSlot = /** @class */ (function (_super) {
    __extends(ShopItemSlot, _super);
    function ShopItemSlot(scene, world, parentCon, x, y, resStr, respng, resjson, resSlot, selectRes, subscriptRes) {
        return _super.call(this, scene, world, parentCon, x, y, resStr, respng, resjson, resSlot, selectRes) || this;
    }
    ShopItemSlot.prototype.shopDataChange = function (val, packID) {
        if (!val)
            return;
        this.mPackageID = packID;
        _super.prototype.dataChange.call(this, val);
        var prices = val.price;
        var priceLen = prices.length;
        for (var i = 0; i < priceLen; i++) {
            var png = void 0;
            var key = void 0;
            if (prices[i].coinType === protocols["op_def"].CoinType.TU_DING_COIN) {
                key = res_const_UI.TuDing18.getName();
                png = res_const_UI.TuDing18.getPNG();
            }
            this.makeCoin(prices[i], i * 20 + 30);
        }
    };
    ShopItemSlot.prototype.destroy = function () {
        if (this.moneyIcon) {
            this.moneyIcon.destroy(true);
            this.moneyIcon = null;
        }
        _super.prototype.destroy.call(this);
    };
    ShopItemSlot.prototype.makeCoin = function (price, y) {
        var png;
        var key;
        if (price.coinType === protocols["op_def"].CoinType.TU_DING_COIN) {
            key = res_const_UI.TuDing18.getName();
            png = res_const_UI.TuDing18.getPNG();
        }
        // const moneyIcon = this.mScene.make.image(undefined, false);
        this.moneyIcon = new dynamic_image["DynamicImage"](this.mScene, 0, 0);
        this.moneyIcon.x = (-this.mWid >> 1) + 15;
        this.moneyIcon.y = y;
        this.toolTipCon.add(this.moneyIcon);
        this.moneyIcon.load(png);
        var priceText = this.mScene.make.text(undefined, false);
        priceText.setFontFamily("Tahoma");
        // priceText.setFontStyle("bold");
        priceText.setFontSize(15);
        priceText.x = -this.mWid / 2 + this.moneyIcon.width + 20;
        priceText.y = y - 9;
        this.toolTipCon.add(priceText);
        priceText.setText(price.price.toString());
    };
    ShopItemSlot.prototype.onLoadCompleteHandler = function () {
        this.mWid = 80;
        this.mHei = 88;
        this.itemBG = this.mScene.make.sprite(undefined, false);
        this.itemBG.setTexture(this.mResStr, this.mResSlot);
        this.itemBG.y = -10;
        this.toolTipCon.setSize(this.mWid, this.mHei);
        this.toolTipCon.addAt(this.itemBG, 0);
        this.mIcon = new dragDropIcon["DragDropIcon"](this.mScene, 0, -10);
        this.toolTipCon.addAt(this.mIcon, 1);
        if (this.mSubScriptRes) {
            this.mSubScriptSprite = this.mScene.make.sprite(undefined, false);
            this.mSubScriptSprite.setTexture(this.mResStr, this.mSubScriptRes);
            this.mSubScriptSprite.x = this.mSubScriptSprite.width - this.itemBG.width >> 1;
            this.mSubScriptSprite.y = this.mSubScriptSprite.height - this.itemBG.height >> 1;
            // this.con.addAt(this.mSubScriptSprite, 2);
        }
        if (this.isTipBoo) {
            this.toolTip = new toolTip["ToolTip"](this.mScene, "itemSlotTip", resUtil["h" /* Url */].getRes("ui/toolTip/toolTip.json"), resUtil["h" /* Url */].getRes("ui/toolTip/toolTip.png"), this.mWorld.uiScale);
        }
        this.toolTipCon.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.itemBG.width, 56), Phaser.Geom.Rectangle.Contains);
        this.toolTipCon.on("pointerover", this.overHandler, this);
        this.toolTipCon.on("pointerout", this.outHandler, this);
        this.toolTipCon.on("pointerdown", this.downHandler, this);
        this.toolTipCon.on("pointerup", this.outHandler, this);
        this.minitialize = true;
        if (this.mData) {
            this.dataChange(this.mData);
        }
        this.mSelectSprite = this.mScene.make.sprite(undefined, false);
        this.createTexture(this.mWid, this.mHei);
    };
    ShopItemSlot.prototype.overHandler = function (pointer) {
        _super.prototype.overHandler.call(this, pointer);
        this.mSelectSprite.y -= 10;
    };
    ShopItemSlot.prototype.downHandler = function (pointer) {
        if (!this.mData)
            return;
        var pkt = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_TARGET_UI);
        var content = pkt.content;
        content.uiId = this.mPackageID;
        content.componentId = this.mData.id;
        this.mWorld.connection.send(pkt);
    };
    ShopItemSlot.prototype.outHandler = function (pointer) {
        _super.prototype.outHandler.call(this, pointer);
    };
    ShopItemSlot.prototype.createTexture = function (wid, hei) {
        var COLOR_BG = 0xAAA9A9;
        var COLOR_LINE = 0xAAA9A9;
        var bgGraphics = this.mScene.add.graphics();
        bgGraphics.fillStyle(COLOR_BG, .3);
        bgGraphics.fillRoundedRect(0, 0, wid, hei, 5);
        bgGraphics.generateTexture("selectBg", wid, hei);
        bgGraphics.clear();
    };
    return ShopItemSlot;
}(item_slot["ItemSlot"]));



/***/ }),
/* 332 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/textstyle/MeasureText.js
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

const CanvasPool = Phaser.Display.Canvas.CanvasPool;

/**
 * Calculates the ascent, descent and fontSize of a given font style.
 *
 * @function Phaser.GameObjects.Text.MeasureText
 * @since 3.0.0
 *
 * @param {Phaser.GameObjects.Text.TextStyle} textStyle - The TextStyle object to measure.
 *
 * @return {object} An object containing the ascent, descent and fontSize of the TextStyle.
 */
var MeasureText = function (textStyle) {
    // @property {HTMLCanvasElement} canvas - The canvas element that the text is rendered.
    var canvas = CanvasPool.create(this);

    // @property {HTMLCanvasElement} context - The context of the canvas element that the text is rendered to.
    var context = canvas.getContext('2d');

    textStyle.syncFont(canvas, context);

    var width = Math.ceil(context.measureText(textStyle.testString).width * textStyle.baselineX);
    var baseline = width;
    var height = 2 * baseline;

    baseline = baseline * textStyle.baselineY | 0;

    canvas.width = width;
    canvas.height = height;

    context.fillStyle = '#f00';
    context.fillRect(0, 0, width, height);

    context.font = textStyle._font;

    context.textBaseline = 'alphabetic';
    context.fillStyle = '#000';
    context.fillText(textStyle.testString, 0, baseline);

    var output = {
        ascent: 0,
        descent: 0,
        fontSize: 0
    };

    if (!context.getImageData(0, 0, width, height)) {
        output.ascent = baseline;
        output.descent = baseline + 6;
        output.fontSize = output.ascent + output.descent;

        CanvasPool.remove(canvas);

        return output;
    }

    var imagedata = context.getImageData(0, 0, width, height).data;
    var pixels = imagedata.length;
    var line = width * 4;
    var i;
    var j;
    var idx = 0;
    var stop = false;

    // ascent. scan from top to bottom until we find a non red pixel
    for (i = 0; i < baseline; i++) {
        for (j = 0; j < line; j += 4) {
            if (imagedata[idx + j] !== 255) {
                stop = true;
                break;
            }
        }

        if (!stop) {
            idx += line;
        } else {
            break;
        }
    }

    output.ascent = baseline - i;

    idx = pixels - line;
    stop = false;

    // descent. scan from bottom to top until we find a non red pixel
    for (i = height; i > baseline; i--) {
        for (j = 0; j < line; j += 4) {
            if (imagedata[idx + j] !== 255) {
                stop = true;
                break;
            }
        }

        if (!stop) {
            idx -= line;
        } else {
            break;
        }
    }

    output.descent = (i - baseline);
    output.fontSize = output.ascent + output.descent;

    CanvasPool.remove(canvas);

    return output;
};

/* harmony default export */ var textstyle_MeasureText = (MeasureText);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/const.js
var textbase_const = __webpack_require__(143);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/textstyle/TextStyle.js
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */




const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const GetValue = Phaser.Utils.Objects.GetValue;

//  Key: [ Object Key, Default Value ]

/**
 * A custom function that will be responsible for wrapping the text.
 * @callback TextStyleWordWrapCallback
 *
 * @param {string} text - The string to wrap.
 * @param {Phaser.GameObjects.Text} textObject - The Text instance.
 *
 * @return {(string|string[])} Should return the wrapped lines either as an array of lines or as a string with
 * newline characters in place to indicate where breaks should happen.
 */

var propertyMap = {
    // background
    backgroundColor: ['backgroundColor', null],

    // font
    fontFamily: ['fontFamily', 'Courier'],
    fontSize: ['fontSize', '16px'],
    fontStyle: ['fontStyle', ''],
    color: ['color', '#fff'],
    stroke: ['stroke', '#fff'],
    strokeThickness: ['strokeThickness', 0],
    shadowOffsetX: ['shadow.offsetX', 0],
    shadowOffsetY: ['shadow.offsetY', 0],
    shadowColor: ['shadow.color', '#000'],
    shadowBlur: ['shadow.blur', 0],
    shadowStroke: ['shadow.stroke', false],
    shadowFill: ['shadow.fill', false],

    // underline
    underlineColor: ['underline.color', '#000'],
    underlineThickness: ['underline.thickness', 0],
    underlineOffset: ['underline.offset', 0],

    // align
    halign: ['halign', 'left'],
    valign: ['valign', 'top'],

    // size
    maxLines: ['maxLines', 0],
    fixedWidth: ['fixedWidth', 0],
    fixedHeight: ['fixedHeight', 0],
    resolution: ['resolution', 0],
    lineSpacing: ['lineSpacing', 0],

    rtl: ['rtl', false],
    testString: ['testString', '|MÃ‰qgy'],
    baselineX: ['baselineX', 1.2],
    baselineY: ['baselineY', 1.4],

    // wrap
    wrapMode: ['wrap.mode', 1],
    wrapWidth: ['wrap.width', 0]
    //wrapCallback: ['wrap.callback', null],
    //wrapCallbackScope: ['wrap.callbackScope', null]
};

class TextStyle_TextStyle {
    constructor(text, style) {
        this.parent = text;

        this.backgroundColor;

        this.fontFamily;
        this.fontSize;
        this.fontStyle;
        this.color;
        this.stroke;
        this.strokeThickness;
        this.shadowOffsetX;
        this.shadowOffsetY;
        this.shadowColor;
        this.shadowBlur;
        this.shadowStroke;
        this.shadowFill;

        this.underlineColor;
        this.underlineThickness;
        this.underlineOffset;

        this.halign;
        this.valign;

        this.maxLines;
        this.fixedWidth;
        this.fixedHeight;
        this.resolution;
        this.lineSpacing;

        this.rtl;
        this.testString;


        this.baselineX;
        this.baselineY;

        this._font;

        //  Set to defaults + user style
        this.setStyle(style, false);

        var metrics = GetValue(style, 'metrics', false);

        //  Provide optional TextMetrics in the style object to avoid the canvas look-up / scanning
        //  Doing this is reset if you then change the font of this TextStyle after creation
        if (metrics) {
            this.metrics = {
                ascent: GetValue(metrics, 'ascent', 0),
                descent: GetValue(metrics, 'descent', 0),
                fontSize: GetValue(metrics, 'fontSize', 0)
            };
        } else {
            this.metrics = textstyle_MeasureText(this);
        }
    }

    setStyle(style, updateText) {
        if (updateText === undefined) {
            updateText = true;
        }

        if (style && style.hasOwnProperty('wrap')) {
            var wrap = style.wrap;
            if (wrap.hasOwnProperty('mode')) {
                var mode = wrap.mode;
                if (typeof mode === 'string') {
                    wrap.mode = WRAPMODE[mode];
                }
            } else {
                if (wrap.hasOwnProperty('width')) {
                    wrap.mode = 1;
                }
            }
        }

        //  Avoid type mutation
        if (style && style.hasOwnProperty('fontSize') && typeof style.fontSize === 'number') {
            style.fontSize = style.fontSize.toString() + 'px';
        }

        for (var key in propertyMap) {
            if (key === 'wrapCallback' || key === 'wrapCallbackScope') {
                // Callback & scope should be set without processing the values
                this[key] = GetValue(style, propertyMap[key][0], propertyMap[key][1]);
            } else {
                this[key] = GetAdvancedValue(style, propertyMap[key][0], propertyMap[key][1]);
            }
        }

        //  Allow for 'font' override
        var font = GetValue(style, 'font', null);

        if (font === null) {
            this._font = this.fontStyle + ' ' + this.fontSize + ' ' + this.fontFamily;
        } else {
            this._font = font;
        }

        //  Allow for 'fill' to be used in place of 'color'
        var fill = GetValue(style, 'fill', null);

        if (fill !== null) {
            this.color = fill;
        }

        if (updateText) {
            return this.update(true);
        } else {
            return this.parent;
        }
    }

    syncFont(canvas, context) {
        context.font = this._font;
    }

    syncStyle(canvas, context) {
        context.textBaseline = 'alphabetic';

        context.fillStyle = this.color;
        context.strokeStyle = this.stroke;

        context.lineWidth = this.strokeThickness;
        context.lineCap = 'round';
        context.lineJoin = 'round';
    }

    syncShadow(context, enabled) {
        if (enabled) {
            context.shadowOffsetX = this.shadowOffsetX;
            context.shadowOffsetY = this.shadowOffsetY;
            context.shadowColor = this.shadowColor;
            context.shadowBlur = this.shadowBlur;
        } else {
            context.shadowOffsetX = 0;
            context.shadowOffsetY = 0;
            context.shadowColor = 0;
            context.shadowBlur = 0;
        }
    }

    update(recalculateMetrics) {
        if (recalculateMetrics) {
            this._font = this.fontStyle + ' ' + this.fontSize + ' ' + this.fontFamily;

            this.metrics = textstyle_MeasureText(this);
        }

        return this.parent.updateText(recalculateMetrics);
    }

    buildFont() {
        var newFont = this.fontStyle + ' ' + this.fontSize + ' ' + this.fontFamily;
        if (newFont !== this._font) {
            this._font = newFont;
            //this.metrics = MeasureText(this);
        }
        return this;
    }

    setFont(font) {
        if (typeof font === 'string') {
            this.fontFamily = font;
            this.fontSize = '';
            this.fontStyle = '';
        } else {
            this.fontFamily = GetValue(font, 'fontFamily', 'Courier');
            this.fontSize = GetValue(font, 'fontSize', '16px');
            this.fontStyle = GetValue(font, 'fontStyle', '');
        }

        return this.update(true);
    }

    setFontFamily(family) {
        this.fontFamily = family;

        return this.update(true);
    }

    setFontStyle(style) {
        this.fontStyle = style;

        return this.update(true);
    }

    setFontSize(size) {
        if (typeof size === 'number') {
            size = size.toString() + 'px';
        }

        this.fontSize = size;

        return this.update(true);
    }

    setTestString(string) {
        this.testString = string;

        return this.update(true);
    }

    setFixedSize(width, height) {
        this.fixedWidth = width;
        this.fixedHeight = height;

        if (width) {
            this.parent.width = width;
        }

        if (height) {
            this.parent.height = height;
        }

        return this.update(false);
    }

    setResolution(value) {
        this.resolution = value;

        return this.update(false);
    }

    setLineSpacing(value) {
        this.lineSpacing = value;

        return this.update(false);
    }

    setBackgroundColor(color) {
        this.backgroundColor = color;

        return this.update(false);
    }

    setFill(color) {
        this.color = color;

        return this.update(false);
    }

    setColor(color) {
        this.color = color;

        return this.update(false);
    }

    setStroke(color, thickness) {
        if (color === undefined) {
            //  Reset the stroke to zero (disabling it)
            this.strokeThickness = 0;
        } else {
            if (thickness === undefined) {
                thickness = this.strokeThickness;
            }

            this.stroke = color;
            this.strokeThickness = thickness;
        }

        return this.update(true);
    }

    setShadow(x, y, color, blur, shadowStroke, shadowFill) {
        if (x === undefined) {
            x = 0;
        }
        if (y === undefined) {
            y = 0;
        }
        if (color === undefined) {
            color = '#000';
        }
        if (blur === undefined) {
            blur = 0;
        }
        if (shadowStroke === undefined) {
            shadowStroke = false;
        }
        if (shadowFill === undefined) {
            shadowFill = true;
        }

        this.shadowOffsetX = x;
        this.shadowOffsetY = y;
        this.shadowColor = color;
        this.shadowBlur = blur;
        this.shadowStroke = shadowStroke;
        this.shadowFill = shadowFill;

        return this.update(false);
    }

    setShadowOffset(x, y) {
        if (x === undefined) {
            x = 0;
        }
        if (y === undefined) {
            y = x;
        }

        this.shadowOffsetX = x;
        this.shadowOffsetY = y;

        return this.update(false);
    }

    setShadowColor(color) {
        if (color === undefined) {
            color = '#000';
        }

        this.shadowColor = color;

        return this.update(false);
    }

    setShadowBlur(blur) {
        if (blur === undefined) {
            blur = 0;
        }

        this.shadowBlur = blur;

        return this.update(false);
    }

    setShadowStroke(enabled) {
        this.shadowStroke = enabled;

        return this.update(false);
    }

    setShadowFill(enabled) {
        this.shadowFill = enabled;

        return this.update(false);
    }

    setUnderline(color, thickness, offset) {
        if (color === undefined) {
            color = '#000';
        }
        if (thickness === undefined) {
            thickness = 0;
        }
        if (offset === undefined) {
            offset = 0;
        }

        this.underlineColor = color;
        this.underlineThickness = thickness;
        this.underlineOffset = offset;

        return this.update(false);
    }

    setUnderlineColor(color) {
        if (color === undefined) {
            color = '#000';
        }

        this.underlineColor = color;
        return this.update(false);
    }

    setUnderlineThickness(thickness) {
        if (thickness === undefined) {
            thickness = 0;
        }

        this.underlineThickness = thickness;
        return this.update(false);
    }

    setUnderlineOffset(offset) {
        if (offset === undefined) {
            offset = 0;
        }

        this.underlineOffset = offset;
        return this.update(false);
    }

    setWrapMode(mode) {
        if (typeof mode === 'string') {
            mode = WRAPMODE[mode.toLowerCase()] || 0;
        }
        this.wrapMode = mode;
        return this.update(true);
    }

    setWrapWidth(width) {
        this.wrapWidth = width;
        return this.update(false);
    }

    setAlign(halign, valign) {
        if (halign === undefined) {
            halign = 'left';
        }
        if (valign === undefined) {
            valign = 'top';
        }
        this.halign = halign;
        this.valign = valign;

        return this.update(false);
    }

    setHAlign(halign) {
        if (halign === undefined) {
            halign = 'left';
        }
        this.halign = halign;

        return this.update(false);
    }

    setVAlign(valign) {
        if (valign === undefined) {
            valign = 'top';
        }
        this.valign = valign;

        return this.update(false);
    }

    setMaxLines(max) {
        if (max === undefined) {
            max = 0;
        }

        this.maxLines = max;

        return this.update(false);
    }

    getTextMetrics() {
        var metrics = this.metrics;

        return {
            ascent: metrics.ascent,
            descent: metrics.descent,
            fontSize: metrics.fontSize
        };
    }

    get lineHeight() {
        return this.metrics.fontSize + this.strokeThickness + this.lineSpacing;
    }

    toJSON() {
        var output = {};

        for (var key in propertyMap) {
            output[key] = this[key];
        }

        output.metrics = this.getTextMetrics();

        return output;
    }

    destroy() {
        this.parent = undefined;
    }

}

const HALIGNMODE = {
    left: textbase_const["a" /* default */].hleft,
    center: textbase_const["a" /* default */].hcenter,
    right: textbase_const["a" /* default */].hright,
};
const VALIGNMODE = {
    top: textbase_const["a" /* default */].vtop,
    center: textbase_const["a" /* default */].vcenter,
    bottom: textbase_const["a" /* default */].vbottom,
};
const WRAPMODE = {
    none: textbase_const["a" /* default */].NO_WRAP,
    word: textbase_const["a" /* default */].WORD_WRAP,
    char: textbase_const["a" /* default */].CHAR_WRAP,
    character: textbase_const["a" /* default */].CHAR_WRAP
};

/* harmony default export */ var textstyle_TextStyle = __webpack_exports__["a"] = (TextStyle_TextStyle);

/***/ }),
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReferenceArea; });
/* harmony import */ var _utils_pos__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(111);
/* harmony import */ var _utils_position45__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(139);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ReferenceArea = /** @class */ (function (_super) {
    __extends(ReferenceArea, _super);
    function ReferenceArea(scene, mRoomService) {
        var _this = _super.call(this, scene) || this;
        _this.mRoomService = mRoomService;
        return _this;
    }
    ReferenceArea.prototype.draw = function (area, origin) {
        this.clear();
        if (area.length === 0 || area[0].length === 0) {
            return;
        }
        var p1;
        var p2;
        var p3;
        var p4;
        var rows = area.length;
        var cols = area[0].length;
        var roomSize = this.mRoomService.roomSize;
        var tileWidth = roomSize.tileWidth / 2;
        var tileHeight = roomSize.tileHeight / 2;
        this.mOrigin = origin;
        this.mSize = {
            rows: rows,
            cols: cols,
            tileWidth: tileWidth,
            tileHeight: tileHeight,
            sceneWidth: (rows + cols) * (tileWidth / 2),
            sceneHeight: (rows + cols) * (tileHeight / 2)
        };
        this.beginPath();
        for (var y = 0; y < rows; y++) {
            for (var x = 0; x < cols; x++) {
                this.lineStyle(2, 0);
                p1 = _utils_position45__WEBPACK_IMPORTED_MODULE_1__[/* Position45 */ "a"].transformTo90(new _utils_pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"](x, y), this.mSize);
                p2 = _utils_position45__WEBPACK_IMPORTED_MODULE_1__[/* Position45 */ "a"].transformTo90(new _utils_pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"](x + 1, y), this.mSize);
                p3 = _utils_position45__WEBPACK_IMPORTED_MODULE_1__[/* Position45 */ "a"].transformTo90(new _utils_pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"](x + 1, y + 1), this.mSize);
                p4 = _utils_position45__WEBPACK_IMPORTED_MODULE_1__[/* Position45 */ "a"].transformTo90(new _utils_pos__WEBPACK_IMPORTED_MODULE_0__[/* Pos */ "a"](x, y + 1), this.mSize);
                this.beginPath();
                this.fillStyle(area[y][x] === 1 ? 0x00FF00 : 0xFF0000);
                this.strokePoints([p1.toPoint(), p2.toPoint(), p3.toPoint(), p4.toPoint()], true, true);
                this.fillPath();
            }
        }
        this.setPosition(0, 0);
    };
    ReferenceArea.prototype.setPosition = function (x, y, z, w) {
        if (!this.mSize)
            return;
        var _x = x - this.mSize.rows * (this.mSize.tileWidth >> 1) - (this.mOrigin.x - this.mOrigin.y) * (this.mSize.tileWidth >> 1);
        var _y = y - (this.mOrigin.x + this.mOrigin.y) * (this.mSize.tileHeight >> 1);
        return _super.prototype.setPosition.call(this, _x, _y, z, w);
    };
    Object.defineProperty(ReferenceArea.prototype, "size", {
        get: function () {
            return this.mSize;
        },
        enumerable: false,
        configurable: true
    });
    return ReferenceArea;
}(Phaser.GameObjects.Graphics));



/***/ }),
/* 339 */,
/* 340 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Terrain; });
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _display_terrain_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(208);
/* harmony import */ var _cameras_block_object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(200);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var Terrain = /** @class */ (function (_super) {
    __extends(Terrain, _super);
    function Terrain(sprite, mElementManager) {
        var _this = _super.call(this, mElementManager.roomService) || this;
        _this.mElementManager = mElementManager;
        _this.mId = sprite.id;
        _this.model = sprite;
        return _this;
    }
    Terrain.prototype.setModel = function (val) {
        this.mModel = val;
        if (!val) {
            return;
        }
        this.load(this.mModel.displayInfo);
        // this.mDisplayInfo = <IFramesModel> this.mModel.displayInfo;
        // this.createDisplay();
        if (!this.mDisplay) {
            return;
        }
        this.setPosition45(this.mModel.pos);
        // this.addDisplay();
    };
    Terrain.prototype.updateModel = function (val) {
    };
    Terrain.prototype.load = function (displayInfo) {
        this.mDisplayInfo = displayInfo;
        if (!this.mDisplayInfo) {
            return;
        }
        if (!this.mDisplay) {
            this.createDisplay();
        }
        this.mDisplayInfo = displayInfo;
        this.mDisplay.once("initialized", this.onInitializedHandler, this);
        this.mDisplay.load(this.mDisplayInfo);
    };
    Terrain.prototype.play = function (animationName) {
        if (!this.mModel) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().error(Terrain.name + ": sprite is empty");
            return;
        }
        if (this.mModel.currentAnimationName !== animationName) {
            // this.mAnimationName = animationName;
            this.mModel.currentAnimationName = animationName;
            if (this.mDisplay) {
                this.mDisplay.play(this.model.currentAnimation);
            }
        }
    };
    Terrain.prototype.setDirection = function (val) {
        if (this.mDisplayInfo && this.mDisplayInfo.avatarDir)
            this.mDisplayInfo.avatarDir = val;
    };
    Terrain.prototype.getDirection = function () {
        return this.mDisplayInfo && this.mDisplayInfo.avatarDir ? this.mDisplayInfo.avatarDir : 3;
    };
    Terrain.prototype.setPosition = function (p) {
        if (this.mDisplay) {
            this.mDisplay.setPosition(p.x, p.y, p.z);
        }
        this.setDepth();
    };
    Terrain.prototype.getDisplay = function () {
        return this.mDisplay;
    };
    Terrain.prototype.showNickname = function () { };
    Terrain.prototype.showEffected = function () { };
    Terrain.prototype.toSprite = function () {
        var sprite = pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_client"].Sprite.create();
        sprite.id = this.id;
        if (this.mDisplay) {
            var pos45 = this.getPosition45();
            this.mDisplay.x = pos45.x;
            this.mDisplay.y = pos45.y;
        }
        return sprite;
    };
    Terrain.prototype.turn = function () { };
    Terrain.prototype.setAlpha = function (val) { };
    Terrain.prototype.scaleTween = function () { };
    Terrain.prototype.setQueue = function () { };
    Terrain.prototype.destroy = function () {
        if (this.mBlockable && this.mDisplay) {
            this.roomService.removeBlockObject(this);
        }
        _super.prototype.destroy.call(this);
    };
    Terrain.prototype.createDisplay = function () {
        if (!this.mDisplayInfo) {
            // Logger.getInstance().error("displayinfo does not exist, Create display failed");
            return;
        }
        if (this.mDisplay) {
            return this.mDisplay;
        }
        var scene = this.mElementManager.scene;
        if (scene) {
            this.mDisplay = new _display_terrain_display__WEBPACK_IMPORTED_MODULE_1__[/* TerrainDisplay */ "a"](scene, this.mElementManager.roomService, this);
            this.setPosition45(this.model.pos);
            this.addToBlock();
            // this.mDisplay.load(this.mDisplayInfo);
        }
        return this.mDisplay;
    };
    Terrain.prototype.addDisplay = function () {
        this.createDisplay();
        if (!this.mDisplay) {
            // Logger.getInstance().error("display does not exist");
            return;
        }
        if (!this.mElementManager) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().error("element manager does not exist");
            return;
        }
        var room = this.mElementManager.roomService;
        if (!room) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().error("roomService does not exist");
            return;
        }
        room.addToGround(this.mDisplay);
        this.setDepth();
    };
    Terrain.prototype.setDepth = function () {
        if (this.mDisplay) {
            this.mDisplay.setDepth(this.mDisplay.y);
            if (!this.roomService) {
                throw new Error("roomService is undefined");
            }
            var layerManager = this.roomService.layerManager;
            if (!layerManager) {
                throw new Error("layerManager is undefined");
            }
            layerManager.depthGroundDirty = true;
        }
    };
    Terrain.prototype.onInitializedHandler = function () {
        if (this.mDisplay) {
            // this.mDisplay.setInteractive();
        }
    };
    Terrain.prototype.setPosition45 = function (pos) {
        if (!this.roomService) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().error("roomService does not exist");
            return;
        }
        var point = this.roomService.transformTo90(pos);
        this.setPosition(point);
    };
    Object.defineProperty(Terrain.prototype, "id", {
        get: function () {
            return this.mId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Terrain.prototype, "dir", {
        get: function () {
            return this.mDisplayInfo.avatarDir !== undefined ? this.mDisplayInfo.avatarDir : 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Terrain.prototype, "roomService", {
        get: function () {
            if (!this.mElementManager) {
                _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().error("element manager is undefined");
                return;
            }
            return this.mElementManager.roomService;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Terrain.prototype, "model", {
        get: function () {
            return this.mModel;
        },
        set: function (val) {
            this.setModel(val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Terrain.prototype, "currentAnimationName", {
        get: function () {
            if (this.mModel) {
                return this.mModel.currentAnimationName;
            }
            return "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Terrain.prototype, "scene", {
        get: function () {
            if (this.mElementManager) {
                return this.mElementManager.scene;
            }
        },
        enumerable: false,
        configurable: true
    });
    return Terrain;
}(_cameras_block_object__WEBPACK_IMPORTED_MODULE_2__[/* BlockObject */ "a"]));



/***/ }),
/* 341 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MainUIScene; });
/* harmony import */ var _utils_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(107);
/* harmony import */ var _basic_scene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(128);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var MainUIScene = /** @class */ (function (_super) {
    __extends(MainUIScene, _super);
    function MainUIScene() {
        var _this = _super.call(this, { key: MainUIScene.name }) || this;
        _this.timeOutID = 0;
        _this.timeOutCancelMap = {};
        _this.timeOutCallerList = [];
        _this.timeOutTimeMap = {};
        return _this;
    }
    MainUIScene.prototype.preload = function () {
    };
    MainUIScene.prototype.init = function (data) {
        this.mRoom = data.room;
    };
    MainUIScene.prototype.create = function () {
        this.fps = this.add.text(10, 10, "", { style: { color: "#64DD17", } });
        this.fps.setStroke("0x0", 1);
        this.fps.setFontFamily(_utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT);
        this.fps.setFontSize(20 * window.devicePixelRatio);
        this.sizeTF = this.add.text(10, 50, "", { style: { color: "#64DD17" }, wordWrap: { width: 800, useAdvancedWrap: true } });
        this.sizeTF.setFontSize(20 * window.devicePixelRatio);
        this.sizeTF.setFontFamily(_utils_font__WEBPACK_IMPORTED_MODULE_0__[/* Font */ "a"].DEFULT_FONT);
        this.sizeTF.setStroke("#0", 3);
        var world = this.mRoom.world;
        if (world.game.device.os.desktop) {
        }
        else {
            if (world.inputManager) {
                world.inputManager.setScene(this);
            }
        }
        world.uiManager.setScene(this);
        // this.checkSize(this.mRoom.world.getSize());
        // this.mRoom.world.game.scale.on("orientationchange", this.checkOriention, this);
        // this.scale.on("resize", this.checkSize, this);
    };
    MainUIScene.prototype.setTimeout = function (caller, time) {
        var begin = Date.now();
        this.timeOutCallerList[++this.timeOutID] = caller;
        this.timeOutTimeMap[this.timeOutID] = { now: begin, delay: time };
        return this.timeOutID;
    };
    MainUIScene.prototype.clearTimeout = function (id) {
        this.timeOutCancelMap[id] = true;
    };
    MainUIScene.prototype.update = function (time, delta) {
        this.fps.setText(this.game.loop.actualFps.toFixed());
        // const orientation: string = this.mRoom.world.getSize().width > this.mRoom.world.getSize().height ? "LANDSCAPE" : "PORTRAIT";
        // this.sizeTF.text = "width:" + this.mRoom.world.getSize().width +
        //   "\n" + "height:" + this.mRoom.world.getSize().height + `\npixelRatio: ${window.devicePixelRatio} \nscene Scale: ${this.mRoom.world.scaleRatio} \nuiscale：${Math.round(this.mRoom.world.scaleRatio)}`;
    };
    MainUIScene.prototype.getKey = function () {
        return this.sys.config.key;
    };
    // private checkOriention(orientation) {
    //   this.sizeTF.text = "width:" + this.mRoom.world.getSize().width + "\n" + "height:" + this.mRoom.world.getSize().height + "\n" + "orientation:" + orientation + "\n" + "orientationChange:" + orientation;
    // }
    MainUIScene.prototype.checkSize = function (size) {
        var width = size.width;
        var height = size.height;
        var world = this.mRoom.world;
        var gameSize = world.getSize();
        this.sizeTF.text = "CSS size: " + world.getConfig().width + " " + world.getConfig().height + "\n    Game size: " + gameSize.width.toFixed(2) + " " + gameSize.height.toFixed(2) + "\n    deviceRatio: " + window.devicePixelRatio + "\n    scene ratio: " + world.scaleRatio + "\n    ui ratio: " + world.uiRatio + "\n    ui scale: " + world.uiScale.toFixed(5) + "\n    ";
        //  this.sizeTF.text = "width:" + size.width + ";height:" + size.height;
    };
    return MainUIScene;
}(_basic_scene__WEBPACK_IMPORTED_MODULE_1__[/* BasicScene */ "a"]));



/***/ }),
/* 342 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PlayCamera; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var PlayCamera = /** @class */ (function (_super) {
    __extends(PlayCamera, _super);
    function PlayCamera(x, y, width, height, pixelRatio, moveRatio) {
        var _this = _super.call(this, x, y, width, height) || this;
        _this.pixelRatio = pixelRatio;
        _this.moveRatio = moveRatio || 1;
        return _this;
    }
    PlayCamera.prototype.startFollow = function (target, roundPixels, lerpX, lerpY, offsetX, offsetY) {
        if (roundPixels === undefined) {
            roundPixels = false;
        }
        if (lerpX === undefined) {
            lerpX = 1;
        }
        if (lerpY === undefined) {
            lerpY = lerpX;
        }
        if (offsetX === undefined) {
            offsetX = 0;
        }
        if (offsetY === undefined) {
            offsetY = offsetX;
        }
        this._follow = target;
        this.roundPixels = roundPixels;
        // lerpX = Clamp(lerpX, 0, 1);
        // lerpY = Clamp(lerpY, 0, 1);
        this.lerp.set(lerpX, lerpY);
        this.followOffset.set(offsetX, offsetY);
        var originX = this.width / 2;
        var originY = this.height / 2;
        var fx = target.x * this.pixelRatio * this.moveRatio - offsetX;
        var fy = target.y * this.pixelRatio * this.moveRatio - offsetY;
        this.midPoint.set(fx, fy);
        this.scrollX = fx - originX;
        this.scrollY = fy - originY;
        if (this.useBounds) {
            this.scrollX = this.clampX(this.scrollX);
            this.scrollY = this.clampY(this.scrollY);
        }
        return this;
    };
    PlayCamera.prototype.preRender = function (resolution) {
        var width = this.width;
        var height = this.height;
        var halfWidth = width * 0.5;
        var halfHeight = height * 0.5;
        var zoom = this.zoom * resolution;
        var matrix = this.matrix;
        var originX = width * this.originX;
        var originY = height * this.originY;
        var follow = this._follow;
        var deadzone = this.deadzone;
        var sx = this.scrollX;
        var sy = this.scrollY;
        if (deadzone) {
            // CenterOn(deadzone, this.midPoint.x, this.midPoint.y);
        }
        if (follow && !this.panEffect.isRunning) {
            var fx = (follow.x * this.pixelRatio * this.moveRatio - this.followOffset.x);
            var fy = (follow.y * this.pixelRatio * this.moveRatio - this.followOffset.y);
            if (deadzone) {
                if (fx < deadzone.x) {
                    sx = this.linear(sx, sx - (deadzone.x - fx), this.lerp.x);
                }
                else if (fx > deadzone.right) {
                    sx = this.linear(sx, sx + (fx - deadzone.right), this.lerp.x);
                }
                if (fy < deadzone.y) {
                    sy = this.linear(sy, sy - (deadzone.y - fy), this.lerp.y);
                }
                else if (fy > deadzone.bottom) {
                    sy = this.linear(sy, sy + (fy - deadzone.bottom), this.lerp.y);
                }
            }
            else {
                sx = this.linear(sx, fx - originX, this.lerp.x);
                sy = this.linear(sy, fy - originY, this.lerp.y);
            }
        }
        if (this.useBounds) {
            sx = this.clampX(sx);
            sy = this.clampY(sy);
        }
        if (this.roundPixels) {
            originX = Math.round(originX);
            originY = Math.round(originY);
        }
        //  Values are in pixels and not impacted by zooming the Camera
        this.scrollX = sx;
        this.scrollY = sy;
        var midX = sx + halfWidth;
        var midY = sy + halfHeight;
        //  The center of the camera, in world space, so taking zoom into account
        //  Basically the pixel value of what it's looking at in the middle of the cam
        this.midPoint.set(midX, midY);
        var displayWidth = width / zoom;
        var displayHeight = height / zoom;
        this.worldView.setTo(midX - (displayWidth / 2), midY - (displayHeight / 2), displayWidth, displayHeight);
        matrix.applyITRS(this.x + originX, this.y + originY, this.rotation, zoom, zoom);
        matrix.translate(-originX, -originY);
        this.shakeEffect.preRender();
    };
    PlayCamera.prototype.linear = function (p0, p1, t) {
        return (p1 - p0) * t + p0;
    };
    return PlayCamera;
}(Phaser.Cameras.Scene2D.Camera));



/***/ }),
/* 343 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EditScene; });
/* harmony import */ var _play__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(163);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

// 编辑器用 Phaser.Scene
var EditScene = /** @class */ (function (_super) {
    __extends(EditScene, _super);
    function EditScene() {
        return _super.call(this, { key: EditScene.name }) || this;
    }
    EditScene.prototype.create = function () {
        this.mRoom.startPlay();
        this.scene.sendToBack();
    };
    return EditScene;
}(_play__WEBPACK_IMPORTED_MODULE_0__[/* PlayScene */ "a"]));



/***/ }),
/* 344 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CoreUI; });
var CoreUI;
(function (CoreUI) {
    var MouseEvent;
    (function (MouseEvent) {
        MouseEvent["Click"] = "click";
        MouseEvent["Up"] = "Up";
        MouseEvent["Down"] = "Down";
        MouseEvent["Hold"] = "Hold";
        MouseEvent["Tap"] = "Tap";
        MouseEvent["Move"] = "Move";
        MouseEvent["Over"] = "Over";
        MouseEvent["Out"] = "Out";
        MouseEvent["DragStart"] = "DragStart";
        MouseEvent["DragStop"] = "DragStop";
    })(MouseEvent = CoreUI.MouseEvent || (CoreUI.MouseEvent = {}));
})(CoreUI || (CoreUI = {}));


/***/ }),
/* 345 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var GetDefaultBounds = function (scene, out) {
    if (out === undefined) {
        if (GlobRectangle === undefined) {
            GlobRectangle = new Phaser.Geom.Rectangle();
        }
        out = GlobRectangle;
    }
    var gameConfig = scene.game.config;
    out.setTo(0, 0, gameConfig.width, gameConfig.height);
    return out;
}

var GlobRectangle;

/* harmony default export */ __webpack_exports__["a"] = (GetDefaultBounds);

/***/ }),
/* 346 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const SceneClass = Phaser.Scene;
var IsSceneObject = function (object) {
    return (object instanceof SceneClass);
}
/* harmony default export */ __webpack_exports__["a"] = (IsSceneObject);

/***/ }),
/* 347 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
    v: 0,
    vertical: 0,
    h: 1,
    horizontal: 1
});

/***/ }),
/* 348 */
/***/ (function(module, exports) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

//  Source object
//  The key as a string, or an array of keys, i.e. 'banner', or 'banner.hideBanner'
//  The default value to use if the key doesn't exist

/**
 * Retrieves a value from an object.
 *
 * @function Phaser.Utils.Objects.GetValue
 * @since 3.0.0
 *
 * @param {object} source - The object to retrieve the value from.
 * @param {string} key - The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`) - `banner.hideBanner` would return the value of the `hideBanner` property from the object stored in the `banner` property of the `source` object.
 * @param {*} defaultValue - The value to return if the `key` isn't found in the `source` object.
 *
 * @return {*} The value of the requested key.
 */
var GetValue = function (source, key, defaultValue)
{
    if (!source || typeof source === 'number')
    {
        return defaultValue;
    }
    else if (source.hasOwnProperty(key))
    {
        return source[key];
    }
    else if (key.indexOf('.') !== -1)
    {
        var keys = key.split('.');
        var parent = source;
        var value = defaultValue;

        //  Use for loop here so we can break early
        for (var i = 0; i < keys.length; i++)
        {
            if (parent.hasOwnProperty(keys[i]))
            {
                //  Yes it has a key property, let's carry on down
                value = parent[keys[i]];

                parent = parent[keys[i]];
            }
            else
            {
                //  Can't go any further, so reset to default
                value = defaultValue;
                break;
            }
        }

        return value;
    }
    else
    {
        return defaultValue;
    }
};

module.exports = GetValue;


/***/ }),
/* 349 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_mask_MaskToGameObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(254);


const Intersects = Phaser.Geom.Intersects.RectangleToRectangle;
const Overlaps = Phaser.Geom.Rectangle.Overlaps;

var MaskChildren = function (parent, mask, children) {
    if (!mask) {
        return;
    }

    if (children === undefined) {
        children = parent.getAllChildren();
    }

    var parentBounds = parent.getBounds();
    var maskGameObject = Object(_utils_mask_MaskToGameObject_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(mask);

    var child, childBounds, visiblePointsNumber;
    for (var i = 0, cnt = children.length; i < cnt; i++) {
        child = children[i];
        if (child.hasOwnProperty('isRexContainerLite')) {
            continue;
        }
        if (child === maskGameObject) {
            continue;
        }

        if (child.getBounds) {
            childBounds = child.getBounds(childBounds);
            visiblePointsNumber = containsPoints(parentBounds, childBounds);
            switch (visiblePointsNumber) {
                case 4: // 4 points are all inside visible window, set visible
                    showAll(child, mask);
                    break;
                case 0: // No point is inside visible window
                    // Parent intersects with child, or parent is inside child, set visible, and apply mask
                    if (Intersects(parentBounds, childBounds) || Overlaps(parentBounds, childBounds)) {
                        showSome(child, mask);
                    } else { // Set invisible
                        showNone(child, mask);
                    }
                    break;
                default: // Part of points are inside visible window, set visible, and apply mask
                    showSome(child, mask);
                    break;
            }
        } else {
            showSome(child, mask);
        }

        parent
            .resetChildVisibleState(child) // Reset local visible via child's visible
            .updateChildVisible(child);  // Set child's visible via parent and local visible
    }
}

var containsPoints = function (rectA, rectB) {
    var result = 0;
    var top = rectB.top,
        bottom = rectB.bottom,
        left = rectB.left,
        right = rectB.right;
    result += rectA.contains(left, top) ? 1 : 0;
    result += rectA.contains(left, bottom) ? 1 : 0;
    result += rectA.contains(right, top) ? 1 : 0;
    result += rectA.contains(right, bottom) ? 1 : 0;
    return result;
};

var showAll = function (child, mask) {
    child.setVisible(true);
    if (child.clearMask) {
        child.clearMask();
    }
}

var showSome = function (child, mask) {
    child.setVisible(true);
    if (child.setMask) {
        child.setMask(mask);
    }
}

var showNone = function (child, mask) {
    child.setVisible(false);
    if (child.clearMask) {
        child.clearMask();
    }
}

/* harmony default export */ __webpack_exports__["a"] = (MaskChildren);

/***/ }),
/* 350 */,
/* 351 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharacterInfoMediator", function() { return CharacterInfoMediator; });
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _CharacterInfoPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(327);
/* harmony import */ var _CharacterInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(266);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var CharacterInfoMediator = /** @class */ (function (_super) {
    __extends(CharacterInfoMediator, _super);
    function CharacterInfoMediator(layerMgr, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.scene = scene;
        _this.layerMgr = layerMgr;
        _this.world = worldService;
        return _this;
    }
    CharacterInfoMediator.prototype.show = function () {
        if (this.mView) {
            return;
        }
        if (!this.mView) {
            this.mView = new _CharacterInfoPanel__WEBPACK_IMPORTED_MODULE_2__["default"](this.scene, this.world);
            this.mView.on("hide", this.onHidePanel, this);
            this.mView.on("queryOwnerInfo", this.onQueryOwnerInfo, this);
        }
        if (!this.characterInfo) {
            this.characterInfo = new _CharacterInfo__WEBPACK_IMPORTED_MODULE_3__["CharacterInfo"](this.world);
            this.characterInfo.on("ownerInfo", this.onOwnerCharacterInfo, this);
            this.characterInfo.on("otherInfo", this.onOtherCharacterInfo, this);
            this.characterInfo.register();
        }
        this.layerMgr.addToUILayer(this.mView);
        this.mView.show();
    };
    CharacterInfoMediator.prototype.isSceneUI = function () {
        return true;
    };
    CharacterInfoMediator.prototype.destroy = function () {
        if (this.characterInfo) {
            this.characterInfo.destroy();
            this.characterInfo = undefined;
        }
        if (this.mView) {
            this.mView.hide();
            this.mView = undefined;
        }
    };
    CharacterInfoMediator.prototype.onHidePanel = function () {
        this.destroy();
    };
    CharacterInfoMediator.prototype.onOwnerCharacterInfo = function (content) {
        this.mView.setPlayerData(content);
    };
    CharacterInfoMediator.prototype.onOtherCharacterInfo = function (content) {
        this.mView.setPlayerData(content);
    };
    CharacterInfoMediator.prototype.onQueryOwnerInfo = function () {
        this.characterInfo.queryPlayerInfo();
    };
    CharacterInfoMediator.prototype.testOwnerData = function () {
        var player = this.world.roomManager.currentRoom.playerManager.actor;
        var owner = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__["op_client"].OP_VIRTUAL_WORLD_RES_CLIENT_PKT_SELF_PLAYER_INFO();
        owner.id = player.id;
        owner.cid = "5524121555";
        owner.like = 652;
        owner.currentAvatar = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__["op_pkt_def"].PKT_Avatar();
        owner.currentAvatar.avatar = player.model.avatar;
        owner.nickname = player.model.nickname;
        owner.level = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__["op_pkt_def"].PKT_Level();
        owner.level.level = 32;
        owner.level.currentLevelExp = 100;
        owner.level.nextLevelExp = 400;
        owner.lifeSkills = [];
        owner.currentTitle = "这是一个称号";
        for (var i = 0; i < 20; i++) {
            var item = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__["op_pkt_def"].PKT_Skill();
            item.id = i + 10 + "";
            item.name = "技能" + i;
            item.level = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_0__["op_pkt_def"].PKT_Level();
            item.level.level = 20 + i;
            item.level.currentLevelExp = 200 + i * 10;
            item.level.nextLevelExp = 400 + i * 10;
            owner.lifeSkills.push(item);
        }
        return owner;
    };
    return CharacterInfoMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 352 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _BBCodeText_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(116);


/* harmony default export */ __webpack_exports__["a"] = (function (x, y, text, style) {
    var gameObject = new _BBCodeText_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](this.scene, x, y, text, style);
    this.scene.add.existing(gameObject);
    return gameObject;
});;

/***/ }),
/* 353 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _BBCodeText_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(116);


const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const BuildGameObject = Phaser.GameObjects.BuildGameObject;

/* harmony default export */ __webpack_exports__["a"] = (function (config, addToScene) {
    // style Object = {
    //     font: [ 'font', '16px Courier' ],
    //     backgroundColor: [ 'backgroundColor', null ],
    //     fill: [ 'fill', '#fff' ],
    //     stroke: [ 'stroke', '#fff' ],
    //     strokeThickness: [ 'strokeThickness', 0 ],
    //     shadowOffsetX: [ 'shadow.offsetX', 0 ],
    //     shadowOffsetY: [ 'shadow.offsetY', 0 ],
    //     shadowColor: [ 'shadow.color', '#000' ],
    //     shadowBlur: [ 'shadow.blur', 0 ],
    //     shadowStroke: [ 'shadow.stroke', false ],
    //     shadowFill: [ 'shadow.fill', false ],
    //     align: [ 'align', 'left' ],
    //     maxLines: [ 'maxLines', 0 ],
    //     fixedWidth: [ 'fixedWidth', false ],
    //     fixedHeight: [ 'fixedHeight', false ]
    // }

    var content = GetAdvancedValue(config, 'text', '');
    var style = GetAdvancedValue(config, 'style', null);

    //  Padding
    //      { padding: 2 }
    //      { padding: { x: , y: }}
    //      { padding: { left: , top: }}
    //      { padding: { left: , right: , top: , bottom: }}  

    var padding = GetAdvancedValue(config, 'padding', null);

    if (padding !== null) {
        style.padding = padding;
    }

    if (addToScene !== undefined) {
        config.add = addToScene;
    }

    var gameObject = new _BBCodeText_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](this.scene, 0, 0, content, style);
    BuildGameObject(this.scene, gameObject, config);

    //  Text specific config options:

    gameObject.autoRound = GetAdvancedValue(config, 'autoRound', true);
    gameObject.resolution = GetAdvancedValue(config, 'resolution', 1);

    return gameObject;
});;

/***/ }),
/* 354 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_eventemitter_EventEmitterMethods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(129);
/* harmony import */ var _utils_object_Clear_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(219);



const GetValue = Phaser.Utils.Objects.GetValue;
const SpliceOne = Phaser.Utils.Array.SpliceOne;
const DistanceBetween = Phaser.Math.Distance.Between;
const AngleBetween = Phaser.Math.Angle.Between;

class TwoPointersTracer {
    constructor(scene, config) {
        var amount = scene.input.manager.pointersTotal - 1;
        if (amount < 2) {
            scene.input.addPointer(2 - amount);
        }

        this.scene = scene;
        // Event emitter
        this.setEventEmitter(GetValue(config, 'eventEmitter', undefined));
        this.pointers = [];
        this.movedState = {};
        this.resetFromJSON(config);
        this.boot();
    }

    resetFromJSON(o) {
        this.setEnable(GetValue(o, "enable", true));
        this.bounds = GetValue(o, 'bounds', undefined);

        this.tracerState = TOUCH0;
        this.pointers.length = 0;
        Object(_utils_object_Clear_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(this.movedState);
        return this;
    }

    boot() {
        this.scene.input.on('pointerdown', this.onPointerDown, this);
        this.scene.input.on('pointerup', this.onPointerUp, this);
        this.scene.input.on('pointermove', this.onPointerMove, this);
        this.scene.events.once('shutdown', this.destroy, this);
    }

    shutdown() {
        this.destroyEventEmitter();
        this.pointers.length = 0;
        Object(_utils_object_Clear_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(this.movedState);
        if (this.scene) {
            this.scene.input.off('pointerdown', this.onPointerDown, this);
            this.scene.input.off('pointerup', this.onPointerUp, this);
            this.scene.input.off('pointermove', this.onPointerMove, this);
            this.scene.events.off('destroy', this.destroy, this);
            this.scene = undefined;
        }
        this.scene = undefined;
    }

    destroy() {
        this.shutdown();
    }

    setEnable(e) {
        if (e === undefined) {
            e = true;
        }

        if (this.enable === e) {
            return this;
        }

        if (!e) {
            this.dragCancel();
        }
        this.enable = e;
        return this;
    }

    onPointerDown(pointer) {
        if (!this.enable) {
            return;
        }

        if (this.pointers.length === 2) {
            return;
        }

        var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;
        if (!isInsideBounds) {
            return;
        }

        var index = this.pointers.indexOf(pointer);
        if (index !== -1) { // Already in catched pointers
            return;
        }

        this.movedState[pointer.id] = false;
        this.pointers.push(pointer);

        switch (this.tracerState) {
            case TOUCH0:
                this.tracerState = TOUCH1;
                this.onDrag1Start();
                break;
            case TOUCH1:
                this.tracerState = TOUCH2;
                this.onDrag2Start();
                break;
        }
    }

    onPointerUp(pointer) {
        if (!this.enable) {
            return;
        }

        var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;
        if (!isInsideBounds) {
            return;
        }

        var index = this.pointers.indexOf(pointer);
        if (index === -1) { // Not in catched pointers
            return;
        } else {
            delete this.movedState[pointer.id];
            SpliceOne(this.pointers, index);
        }

        switch (this.tracerState) {
            case TOUCH1:
                this.tracerState = TOUCH0;
                this.onDrag1End();
                break;
            case TOUCH2:
                this.tracerState = TOUCH1;
                this.onDrag2End();
                this.onDrag1Start();
                break;
        }
    }

    onPointerMove(pointer) {
        if (!this.enable) {
            return;
        }

        if (pointer.isDown) {
            var isInsideBounds = (this.bounds) ? this.bounds.contains(pointer.x, pointer.y) : true;
            var isCatchedPointer = (this.pointers.indexOf(pointer) !== -1);
            if (!isCatchedPointer && isInsideBounds) { // Pointer moves into bounds
                // this.onPointerDown(pointer);
            } else if (isCatchedPointer && !isInsideBounds) { // Pointer moves out of bounds, lose pointer
                this.onPointerUp(pointer);
            } else {  // Pointer drags in bounds
                if (!this.movedState[pointer.id]) {
                    this.movedState[pointer.id] = (pointer.x !== pointer.downX) || (pointer.y !== pointer.downY);
                }
                if (this.movedState[pointer.id]) {
                    switch (this.tracerState) {
                        case TOUCH1:
                            this.onDrag1();
                            break;
                        case TOUCH2:
                            this.onDrag2();
                            break;
                    }
                }
            }
        }
    }

    dragCancel() {
        if (this.tracerState === TOUCH2) {
            this.onDrag2End();
        }
        this.pointers.length = 0;
        Object(_utils_object_Clear_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(this.movedState);
        this.tracerState = TOUCH0;
        return this;
    }

    onDrag1Start() {
        this.emit('drag1start', this);
    }

    onDrag1End() {
        this.emit('drag1end', this);
    }

    onDrag1() {
        this.emit('drag1', this);
    }

    onDrag2Start() {
        this.emit('drag2start', this);
    }

    onDrag2End() {
        this.emit('drag2end', this);
    }

    onDrag2() {
        this.emit('drag2', this);
    }

    get distanceBetween() {
        if (this.tracerState !== TOUCH2) {
            return 0;
        }
        var p0 = this.pointers[0],
            p1 = this.pointers[1];
        return DistanceBetween(p0.x, p0.y, p1.x, p1.y);
    }

    get angleBetween() {
        if (this.tracerState !== TOUCH2) {
            return 0;
        }
        var p0 = this.pointers[0],
            p1 = this.pointers[1];
        return AngleBetween(p0.x, p0.y, p1.x, p1.y);
    }

    get drag1Vector() {
        var pointer = this.pointers[0];
        if (pointer && this.movedState[pointer.id]) {
            var p1 = pointer.position;
            var p0 = pointer.prevPosition;
            tmpDragVector.x = p1.x - p0.x;
            tmpDragVector.y = p1.y - p0.y;
        } else {
            tmpDragVector.x = 0;
            tmpDragVector.y = 0;
        }
        return tmpDragVector;
    }

    get centerX() {
        if (this.tracerState !== TOUCH2) {
            return 0;
        }
        var p0 = this.pointers[0].position;
        var p1 = this.pointers[1].position;
        return (p0.x + p1.x) / 2;
    }

    get centerY() {
        if (this.tracerState !== TOUCH2) {
            return 0;
        }
        var p0 = this.pointers[0].position;
        var p1 = this.pointers[1].position;
        return (p0.y + p1.y) / 2;
    }

    get prevCenterX() {
        if (this.tracerState !== TOUCH2) {
            return 0;
        }
        var preP0 = (this.movedState[this.pointers[0].id]) ? this.pointers[0].prevPosition : this.pointers[0].position;
        var preP1 = (this.movedState[this.pointers[1].id]) ? this.pointers[1].prevPosition : this.pointers[1].position;
        return (preP0.x + preP1.x) / 2;
    }

    get prevCenterY() {
        if (this.tracerState !== TOUCH2) {
            return 0;
        }
        var preP0 = (this.movedState[this.pointers[0].id]) ? this.pointers[0].prevPosition : this.pointers[0].position;
        var preP1 = (this.movedState[this.pointers[1].id]) ? this.pointers[1].prevPosition : this.pointers[1].position;
        return (preP0.y + preP1.y) / 2;
    }

    get movementCenterX() {
        return this.centerX - this.prevCenterX;
    }

    get movementCenterY() {
        return this.centerY - this.prevCenterY;
    }

    setRecongizedStateObject(stateObject) {
        this.recongizedState = stateObject;
        return this;
    }

    get state() {
        return this.recongizedState.state;
    }

    set state(newState) {
        this.recongizedState.state = newState;
    }

    cancel() {
        this.state = IDLE;
        return this;
    }
}

Object.assign(
    TwoPointersTracer.prototype,
    _utils_eventemitter_EventEmitterMethods_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]
);

var tmpDragVector = {};

const TOUCH0 = 0;
const TOUCH1 = 1;
const TOUCH2 = 2;

const IDLE = 'IDLE';

/* harmony default export */ __webpack_exports__["a"] = (TwoPointersTracer);

/***/ }),
/* 355 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GraphicsProgressBar", function() { return GraphicsProgressBar; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GraphicsProgressBar = /** @class */ (function (_super) {
    __extends(GraphicsProgressBar, _super);
    function GraphicsProgressBar(scene, x, y, width, height, isHorizontal) {
        if (isHorizontal === void 0) { isHorizontal = true; }
        var _this = _super.call(this, scene, x, y) || this;
        _this.value = 0.5;
        _this.bgGraphics = _this.scene.make.graphics(undefined, false);
        _this.barGraphics = _this.scene.make.graphics(undefined, false);
        _this.add([_this.bgGraphics, _this.barGraphics]);
        _this.setSize(width, height);
        _this.bgColor = 0x000000;
        _this.barColor = 0xff00000;
        _this.bgGraphics.clear();
        _this.bgGraphics.fillStyle(_this.bgColor, 1);
        _this.bgGraphics.fillRect(0, 0, _this.width, _this.height);
        _this.setValue(_this.value);
        return _this;
    }
    GraphicsProgressBar.prototype.setColor = function (barColor, bgColor) {
        this.barColor = barColor;
        if (bgColor)
            this.bgColor = bgColor;
        this.bgGraphics.clear();
        this.bgGraphics.fillStyle(this.bgColor, 1);
        this.bgGraphics.fillRect(0, 0, this.width, this.height);
        this.setValue(this.value);
    };
    GraphicsProgressBar.prototype.setValue = function (value) {
        this.value = value;
        var width = this.width * (this.isHorizontal ? value : 1);
        var height = this.height * (!this.isHorizontal ? value : 1);
        this.barGraphics.clear();
        this.barGraphics.fillStyle(this.barColor, 1);
        this.barGraphics.fillRect(0, 0, width, height);
    };
    GraphicsProgressBar.prototype.setRoundedRectValue = function (value, radius) {
        this.value = value;
        var width = this.width * (this.isHorizontal ? value : 1);
        var height = this.height * (!this.isHorizontal ? value : 1);
        this.barGraphics.clear();
        this.barGraphics.fillStyle(this.barColor, 1);
        this.barGraphics.fillRoundedRect(0, 0, width, height, radius);
    };
    return GraphicsProgressBar;
}(Phaser.GameObjects.Container));



/***/ }),
/* 356 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollRect", function() { return ScrollRect; });
/* harmony import */ var _GridLayoutGroup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(273);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ScrollRect = /** @class */ (function (_super) {
    __extends(ScrollRect, _super);
    function ScrollRect(scene, x, y) {
        var _this = _super.call(this, scene, x, y) || this;
        _this.content = new _GridLayoutGroup__WEBPACK_IMPORTED_MODULE_0__["GridLayoutGroup"](scene, x, y);
        return _this;
    }
    ScrollRect.prototype.setParent = function (parent) {
        parent.add(this);
        parent.add(this.content);
    };
    ScrollRect.prototype.setPosition = function (x, y) {
        _super.prototype.setPosition.call(this, x, y);
        return this;
    };
    ScrollRect.prototype.addItem = function (item) {
        this.content.add(item);
    };
    ScrollRect.prototype.sort = function () {
        this.content.Layout();
        if (this.content.startAxis === _GridLayoutGroup__WEBPACK_IMPORTED_MODULE_0__["AxisType"].Horizontal) {
        }
        else {
        }
    };
    ScrollRect.prototype.onMove = function (pointer) {
    };
    return ScrollRect;
}(Phaser.GameObjects.Zone));



/***/ }),
/* 357 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComposeMediator", function() { return ComposeMediator; });
/* harmony import */ var _ComposePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(277);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Compose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(276);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var ComposeMediator = /** @class */ (function (_super) {
    __extends(ComposeMediator, _super);
    function ComposeMediator(layerMgr, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.tsetskills = [];
        _this.testDateils = [];
        _this.scene = scene;
        _this.layerMgr = layerMgr;
        _this.world = worldService;
        return _this;
    }
    ComposeMediator.prototype.show = function () {
        if (this.mView) {
            return;
        }
        if (!this.mView) {
            this.mView = new _ComposePanel__WEBPACK_IMPORTED_MODULE_0__["ComposePanel"](this.scene, this.world);
            this.mView.on("hide", this.onHideView, this);
            this.mView.on("reqformula", this.onReqFormulaDetial, this);
            this.mView.on("reqUseFormula", this.onReqUseFormula, this);
        }
        if (!this.compose) {
            this.compose = new _Compose__WEBPACK_IMPORTED_MODULE_2__["Compose"](this.world);
            this.compose.on("formulaDetial", this.onRetFormulaDetial, this);
            this.compose.register();
        }
        this.layerMgr.addToUILayer(this.mView);
        if (this.mParam && this.mParam.length > 0)
            this.onComposePacket(this.mParam[0]);
        this.getTestDeitals();
        var content = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OP_VIRTUAL_WORLD_RES_CLIENT_PKT_CRAFT_SKILLS();
        content.skills = this.tsetskills;
        this.mView.show(content);
    };
    ComposeMediator.prototype.isSceneUI = function () {
        return true;
    };
    ComposeMediator.prototype.destroy = function () {
        if (this.compose) {
            this.compose.destroy();
            this.compose = undefined;
        }
        if (this.mView) {
            this.mView.hide();
            this.mView = undefined;
        }
    };
    ComposeMediator.prototype.onComposePacket = function (content) {
        var panel = this.mView;
        if (!panel)
            return;
        panel.setData("composeData", content);
        panel.setComposeData(content.skills);
    };
    ComposeMediator.prototype.onReqFormulaDetial = function (id) {
        var _this = this;
        //  this.compose.onReqFormulaDetail(id);
        this.testDateils.forEach(function (value) {
            if (value.id === id) {
                _this.onRetFormulaDetial(value);
            }
        });
    };
    ComposeMediator.prototype.onReqUseFormula = function (id) {
        this.compose.onReqUseFormula(id);
    };
    ComposeMediator.prototype.onRetFormulaDetial = function (content) {
        var panel = this.mView;
        panel.setComposeDetialData(content);
    };
    ComposeMediator.prototype.onHideView = function () {
        this.destroy();
    };
    ComposeMediator.prototype.getTestData = function () {
        var items = [];
        for (var i = 0; i < 20; i++) {
            var skill = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_pkt_def"].PKT_Skill();
            skill.id = "1" + i;
            skill.name = "蓝图" + i;
            skill.quality = (i % 3 === 0 ? "A" : (i % 2 === 0 ? "B" : "C"));
            skill.active = (i % 6 === 0 ? false : true);
            skill.qualified = (i % 8 === 0 ? false : true);
            items.push(skill);
        }
        return items;
    };
    ComposeMediator.prototype.getTestDeitals = function () {
        var items = this.getTestData();
        this.tsetskills = items;
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var skill = items_1[_i];
            var ditem = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].OP_VIRTUAL_WORLD_RES_CLIENT_PKT_CRAFT_QUERY_FORMULA();
            ditem.id = skill.id;
            ditem.productName = "蓝图" + skill.id;
            ditem.productDes = "这是一段道具的有关描述巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉巴拉";
            ditem.materials = [];
            var mcount = 8 + Math.floor(Math.random() * 8);
            for (var i = 0; i < mcount; i++) {
                var mitem = new pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_client"].CountablePackageItem();
                mitem.count = mcount;
                mitem.neededCount = (skill.qualified ? mitem.count - 2 : mitem.count + 2);
                ditem.materials.push(mitem);
            }
            this.testDateils.push(ditem);
        }
    };
    return ComposeMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__[/* BaseMediator */ "a"]));



/***/ }),
/* 358 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CutInMediator", function() { return CutInMediator; });
/* harmony import */ var _CutInPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(279);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var CutInMediator = /** @class */ (function (_super) {
    __extends(CutInMediator, _super);
    function CutInMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.scene = scene;
        _this.world = world;
        return _this;
    }
    CutInMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        this.mView = new _CutInPanel__WEBPACK_IMPORTED_MODULE_0__["CutInPanel"](this.scene, this.world);
        this.mView.once("close", this.onCloseHandler, this);
        this.mView.show(param);
        // this.layerManager.addToToolTipsLayer(this.mView.view);
    };
    CutInMediator.prototype.onCloseHandler = function () {
        if (this.mView) {
            this.mView.destroy();
            this.mView = undefined;
        }
    };
    return CutInMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 359 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CutInMenuMediator", function() { return CutInMenuMediator; });
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(106);
/* harmony import */ var _CutInMenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(280);
/* harmony import */ var _CutInMenuPanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(281);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var CutInMenuMediator = /** @class */ (function (_super) {
    __extends(CutInMenuMediator, _super);
    function CutInMenuMediator(layerMgr, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.scene = scene;
        _this.layerMgr = layerMgr;
        _this.world = worldService;
        return _this;
    }
    CutInMenuMediator.prototype.show = function (mParam) {
        if (this.mView) {
            return;
        }
        if (!this.mView) {
            this.mView = new _CutInMenuPanel__WEBPACK_IMPORTED_MODULE_2__["CutInMenuPanel"](this.scene, this.world);
            this.mView.on("hide", this.onHideView, this);
            this.mView.on("rightButton", this.onRightButtonHandler, this);
        }
        if (!this.cutInMenu) {
            this.cutInMenu = new _CutInMenu__WEBPACK_IMPORTED_MODULE_1__["CutInMenu"](this.world);
            this.cutInMenu.register();
        }
        this.layerMgr.addToUILayer(this.mView);
        this.mView.show(mParam);
    };
    CutInMenuMediator.prototype.isSceneUI = function () {
        return true;
    };
    CutInMenuMediator.prototype.destroy = function () {
        if (this.cutInMenu) {
            this.cutInMenu.destroy();
            this.cutInMenu = undefined;
        }
        if (this.mView) {
            this.mView.hide();
            this.mView = undefined;
        }
    };
    CutInMenuMediator.prototype.onRightButtonHandler = function (uiid, btnid) {
        this.cutInMenu.reqRightButton(uiid, btnid);
    };
    CutInMenuMediator.prototype.onHideView = function () {
        this.destroy();
    };
    return CutInMenuMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__[/* BaseMediator */ "a"]));



/***/ }),
/* 360 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DragManager", function() { return DragManager; });
var DragManager = /** @class */ (function () {
    function DragManager(scene) {
        // this.mImage = scene.make.image()
    }
    DragManager.prototype.setDragProp = function (prop) {
    };
    return DragManager;
}());



/***/ }),
/* 361 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquipUpgradeMediator", function() { return EquipUpgradeMediator; });
/* harmony import */ var _EquipUpgradePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(285);
/* harmony import */ var _EquipUpgrade__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(283);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var EquipUpgradeMediator = /** @class */ (function (_super) {
    __extends(EquipUpgradeMediator, _super);
    function EquipUpgradeMediator(layerMgr, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.scene = scene;
        _this.layerMgr = layerMgr;
        _this.world = worldService;
        return _this;
    }
    EquipUpgradeMediator.prototype.show = function () {
        if ((this.mView && this.mView.isShow()) || this.mShow) {
            return;
        }
        if (!this.mView) {
            this.mView = new _EquipUpgradePanel__WEBPACK_IMPORTED_MODULE_0__["default"](this.scene, this.world);
            this.mView.on("hide", this.onHidePanel, this);
            this.mView.on("reqActive", this.onReqActiveEquipment, this);
            this.mView.on("reqEquiped", this.onReqEquipedEquipment, this);
        }
        if (!this.equipUpgrade) {
            this.equipUpgrade = new _EquipUpgrade__WEBPACK_IMPORTED_MODULE_1__["EquipUpgrade"](this.world);
            this.equipUpgrade.on("activeEquip", this.onActiveEquipment, this);
            this.equipUpgrade.register();
        }
        this.layerMgr.addToUILayer(this.mView);
        if (this.mParam && this.mParam.length > 0)
            this.onEquipUpgradePacket(this.mParam[0]);
        this.mView.show();
    };
    EquipUpgradeMediator.prototype.isSceneUI = function () {
        return true;
    };
    EquipUpgradeMediator.prototype.destroy = function () {
        if (this.equipUpgrade) {
            this.equipUpgrade.destroy();
            this.equipUpgrade = undefined;
        }
        if (this.mView) {
            this.mView.hide();
            this.mView = undefined;
        }
    };
    EquipUpgradeMediator.prototype.onHidePanel = function () {
        this.destroy();
    };
    EquipUpgradeMediator.prototype.onEquipUpgradePacket = function (content) {
        var panel = this.mView;
        if (!panel)
            return;
        panel.setData("upgradeData", content);
        panel.setEquipDatas(content);
    };
    EquipUpgradeMediator.prototype.onActiveEquipment = function (data) {
        if (this.mView) {
            var panel = this.mView;
            panel.setActiveEquipment(data);
        }
    };
    EquipUpgradeMediator.prototype.onReqEquipedEquipment = function (id) {
        if (this.equipUpgrade)
            this.equipUpgrade.reqEquipedEquipment(id);
    };
    EquipUpgradeMediator.prototype.onReqActiveEquipment = function (id) {
        if (this.equipUpgrade)
            this.equipUpgrade.reqActiveEquipment(id);
    };
    return EquipUpgradeMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__[/* BaseMediator */ "a"]));



/***/ }),
/* 362 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FurniBagMediator", function() { return FurniBagMediator; });
/* harmony import */ var _FurniBagPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(287);
/* harmony import */ var _FurniBag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(286);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var FurniBagMediator = /** @class */ (function (_super) {
    __extends(FurniBagMediator, _super);
    function FurniBagMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.world = worldService;
        _this.scene = _this.layerManager.scene;
        if (_this.world && _this.world.roomManager && _this.world.roomManager.currentRoom) {
            _this.mScneType = _this.world.roomManager.currentRoom.sceneType;
        }
        else {
            _this.mScneType = pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].SceneTypeEnum.NORMAL_SCENE_TYPE;
        }
        return _this;
    }
    FurniBagMediator.prototype.show = function () {
        if ((this.mView && this.mView.isShow()) || this.mShow) {
            this.layerManager.addToUILayer(this.mView);
            return;
        }
        if (!this.mFurniBag) {
            this.mFurniBag = new _FurniBag__WEBPACK_IMPORTED_MODULE_1__["FurniBag"](this.world, this.mScneType);
            this.mFurniBag.register();
            this.mFurniBag.on("packageCategory", this.onPackageCategoryHandler, this);
            this.mFurniBag.on("queryPackage", this.onQueryPackageHandler, this);
            this.mFurniBag.on("queryCommodityResource", this.onQueryCommodityResourceHandler, this);
            this.mFurniBag.on("queryResetAvatar", this.onResetAvatar, this);
        }
        if (!this.mView) {
            this.mView = new _FurniBagPanel__WEBPACK_IMPORTED_MODULE_0__["FurniBagPanel"](this.scene, this.world, this.mScneType);
            this.mView.on("getCategories", this.onGetCategoriesHandler, this);
            this.mView.on("queryPackage", this.onQueryPackage, this);
            this.mView.on("close", this.onCloseHandler, this);
            this.mView.on("queryPropResource", this.onQueryPropResourceHandler, this);
            this.mView.on("seachPackage", this.onSeachPackageHandler, this);
            this.mView.on("addFurniToScene", this.onAddFurniHandler, this);
            this.mView.on("sellProps", this.onSellPropsHandler, this);
            this.mView.on("querySaveAvatar", this.onQuerySaveAvatar, this);
            this.mView.on("queryResetAvatar", this.onQueryResetAvatar, this);
        }
        this.mView.show();
        this.layerManager.addToUILayer(this.mView);
    };
    FurniBagMediator.prototype.destroy = function () {
        if (this.mFurniBag) {
            this.mFurniBag.destroy();
            this.mFurniBag = undefined;
        }
        if (this.mView) {
            this.mView.destroy();
            this.mView = undefined;
        }
        _super.prototype.destroy.call(this);
    };
    FurniBagMediator.prototype.onCloseHandler = function () {
        // if (this.mView) {
        //     this.layerManager.removeToUILayer(this.mView);
        // }
        this.destroy();
    };
    FurniBagMediator.prototype.onPackageCategoryHandler = function (subcategory) {
        if (!this.mView) {
            return;
        }
        this.mView.setCategories(subcategory);
    };
    FurniBagMediator.prototype.onQueryCommodityResourceHandler = function (content) {
        this.mView.setSelectedResource(content);
    };
    FurniBagMediator.prototype.onGetCategoriesHandler = function (categoryType) {
        if (this.mFurniBag) {
            this.mFurniBag.getCategories(categoryType);
        }
    };
    FurniBagMediator.prototype.onQueryPackageHandler = function (content) {
        this.mView.setProp(content.items);
    };
    FurniBagMediator.prototype.onQueryPackage = function (key) {
        this.mFurniBag.queryPackage(key);
    };
    FurniBagMediator.prototype.onQueryPropResourceHandler = function (prop) {
        this.mFurniBag.queryCommodityResource(prop.id);
    };
    FurniBagMediator.prototype.onQuerySaveAvatar = function (avatar) {
        this.mFurniBag.querySaveAvatar(avatar);
    };
    FurniBagMediator.prototype.onQueryResetAvatar = function (avatar) {
        this.mFurniBag.queryResetAvatar(avatar);
    };
    FurniBagMediator.prototype.onSeachPackageHandler = function (query, categories) {
        this.mFurniBag.seachPackage(query, categories);
    };
    FurniBagMediator.prototype.onAddFurniHandler = function (id) {
        if (this.mView.enableEdit) {
            this.mFurniBag.enterEditAndSelectedSprite(id);
        }
        else {
            this.mFurniBag.addFurniToScene(id);
        }
        this.destroy();
    };
    FurniBagMediator.prototype.onSellPropsHandler = function (prop, count, category) {
        this.mFurniBag.sellProps(prop, count, category);
    };
    FurniBagMediator.prototype.onResetAvatar = function (content) {
        this.mView.resetAvatar(content);
    };
    return FurniBagMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__[/* BaseMediator */ "a"]));



/***/ }),
/* 363 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemDetailMediator", function() { return ItemDetailMediator; });
/* harmony import */ var _ItemDetail__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(292);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(114);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var ItemDetailMediator = /** @class */ (function (_super) {
    __extends(ItemDetailMediator, _super);
    function ItemDetailMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mScene = scene;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__[/* UIType */ "a"].Tips;
        _this.mLayerManager = layerManager;
        return _this;
    }
    ItemDetailMediator.prototype.isSceneUI = function () {
        return false;
    };
    ItemDetailMediator.prototype.isShow = function () {
        return this.mView ? this.mView.isShow() : false;
    };
    ItemDetailMediator.prototype.show = function (param) {
        if (this.mView && this.isShow()) {
            return;
        }
        this.mView = new _ItemDetail__WEBPACK_IMPORTED_MODULE_0__["ItemDetail"](this.mScene, this.world);
        this.mView.show(param);
        this.mLayerManager.addToToolTipsLayer(this.mView);
        this.mScene.input.on("gameobjectdown", this.onBtnHandler, this);
        this.mShow = true;
    };
    ItemDetailMediator.prototype.update = function (param) {
        _super.prototype.update.call(this, param);
    };
    ItemDetailMediator.prototype.hide = function () {
        if (!this.mView)
            return;
        this.mScene.input.off("gameobjectdown", this.onBtnHandler, this);
        this.mView.hide();
        this.mView = null;
        _super.prototype.hide.call(this);
    };
    ItemDetailMediator.prototype.destroy = function () {
        this.mScene.input.off("gameobjectdown", this.onBtnHandler, this);
        _super.prototype.destroy.call(this);
    };
    ItemDetailMediator.prototype.onBtnHandler = function (pointer, gameobject) {
        if (!gameobject)
            return;
        if (gameobject instanceof _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_3__["NinePatchButton"]) {
            var param = this.mParam[0];
            var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_TARGET_UI);
            var content = pkt.content;
            content.uiId = param.id;
            content.componentId = gameobject.getBtnData().node.id;
            this.world.connection.send(pkt);
        }
    };
    return ItemDetailMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__[/* BaseMediator */ "a"]));



/***/ }),
/* 364 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemPopCardMediator", function() { return ItemPopCardMediator; });
/* harmony import */ var _ItemPopCardPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(293);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ItemPopCardMediator = /** @class */ (function (_super) {
    __extends(ItemPopCardMediator, _super);
    function ItemPopCardMediator($layerManager, $scene, worldService) {
        var _this = _super.call(this) || this;
        _this.scene = $scene;
        _this.world = worldService;
        _this.layerManager = $layerManager;
        return _this;
    }
    ItemPopCardMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow() || this.mShow) {
            return;
        }
        this.mView = new _ItemPopCardPanel__WEBPACK_IMPORTED_MODULE_0__["ItemPopCardPanel"](this.scene, this.world);
        this.mView.show(param);
        this.mView.on("close", this.onCloseHandler, this);
        this.layerManager.addToDialogLayer(this.mView);
    };
    ItemPopCardMediator.prototype.onCloseHandler = function () {
        if (!this.mView)
            return;
        this.mView.hide();
        this.mView = undefined;
    };
    return ItemPopCardMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_1__[/* BaseMediator */ "a"]));



/***/ }),
/* 365 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MarketMediator", function() { return MarketMediator; });
/* harmony import */ var _MarketPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(329);
/* harmony import */ var _Market__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(297);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(109);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var MarketMediator = /** @class */ (function (_super) {
    __extends(MarketMediator, _super);
    function MarketMediator($layerManager, $scene, world) {
        var _this = _super.call(this) || this;
        _this.scene = $scene;
        _this.world = world;
        _this.layerManager = $layerManager;
        return _this;
    }
    MarketMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow() || this.mShow) {
            return;
        }
        this.mMarket = new _Market__WEBPACK_IMPORTED_MODULE_1__["Market"](this.world);
        this.mMarket.register();
        this.mMarket.on("getMarketCategories", this.onCategoriesHandler, this);
        this.mMarket.on("queryMarket", this.onQueryResuleHandler, this);
        this.mMarket.on("queryCommodityResource", this.onQueryCommodityResourceHandler, this);
        this.mView = new _MarketPanel__WEBPACK_IMPORTED_MODULE_0__["MarketPanel"](this.scene, this.world);
        this.mView.on("getCategories", this.onGetCategoriesHandler, this);
        this.mView.on("queryProp", this.onQueryPropHandler, this);
        this.mView.on("buyItem", this.onBuyItemHandler, this);
        this.mView.on("close", this.onCloseHandler, this);
        this.mView.on("popItemCard", this.onPopItemCardHandler, this);
        this.mView.on("queryPropResource", this.onQueryPropresouceHandler, this);
        this.mView.show();
        this.layerManager.addToUILayer(this.mView);
    };
    MarketMediator.prototype.onCategoriesHandler = function (content) {
        this.mView.setCategories(content);
    };
    MarketMediator.prototype.onQueryResuleHandler = function (content) {
        this.mView.setProp(content);
    };
    MarketMediator.prototype.onGetCategoriesHandler = function () {
        this.mMarket.getMarkCategories();
    };
    MarketMediator.prototype.onQueryPropHandler = function (page, category, subCategory) {
        this.mMarket.queryMarket(page, category, subCategory);
    };
    MarketMediator.prototype.onBuyItemHandler = function (prop) {
        this.mMarket.buyMarketCommodities([prop]);
    };
    MarketMediator.prototype.onQueryPropresouceHandler = function (prop) {
        this.mMarket.queryCommodityResource(prop.id, prop.category);
    };
    MarketMediator.prototype.onPopItemCardHandler = function (prop, display) {
        // const packet: PBpacket = new PBpacket(op_client.OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_SHOW_UI);
        // const content: op_client.OP_VIRTUAL_WORLD_RES_CLIENT_SHOW_UI = packet.content;
        // content.name = "ItemPopCard";
        var packet = {
            content: {
                name: "ItemPopCard",
                prop: prop,
                display: display
            }
        };
        this.world.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].SHOW_UI, packet);
    };
    MarketMediator.prototype.onQueryCommodityResourceHandler = function (content) {
        if (!this.mView) {
            return;
        }
        this.mView.setCommodityResource(content);
    };
    MarketMediator.prototype.onCloseHandler = function () {
        if (!this.mMarket) {
            return;
        }
        this.mMarket.destroy();
        this.mMarket = undefined;
        this.mView.hide();
        this.mView = undefined;
    };
    return MarketMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__[/* BaseMediator */ "a"]));



/***/ }),
/* 366 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageBoxMediator", function() { return MessageBoxMediator; });
/* harmony import */ var _MessageBoxView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(299);
/* harmony import */ var _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(114);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var MessageBoxMediator = /** @class */ (function (_super) {
    __extends(MessageBoxMediator, _super);
    function MessageBoxMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.world = world;
        _this.mScene = scene;
        _this.mLayerManager = layerManager;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__[/* UIType */ "a"].Tips;
        return _this;
    }
    MessageBoxMediator.prototype.isSceneUI = function () {
        return false;
    };
    MessageBoxMediator.prototype.isShow = function () {
        return this.mView ? this.mView.isShow() : false;
    };
    MessageBoxMediator.prototype.show = function (param) {
        if (this.mView && this.isShow()) {
            return;
        }
        this.mView = new _MessageBoxView__WEBPACK_IMPORTED_MODULE_0__["MessageBoxView"](this.mScene, this.world);
        this.mView.show(param);
        this.mLayerManager.addToToolTipsLayer(this.mView);
        this.mScene.input.on("gameobjectdown", this.onBtnHandler, this);
        _super.prototype.show.call(this, param);
    };
    MessageBoxMediator.prototype.update = function (param) {
        _super.prototype.update.call(this, param);
    };
    MessageBoxMediator.prototype.hide = function () {
        this.mShow = false;
        this.mScene.input.off("gameobjectdown", this.onBtnHandler, this);
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
        }
    };
    MessageBoxMediator.prototype.destroy = function () {
        this.mScene.input.off("gameobjectdown", this.onBtnHandler, this);
        _super.prototype.destroy.call(this);
    };
    MessageBoxMediator.prototype.onBtnHandler = function (pointer, gameobject) {
        if (!gameobject)
            return;
        if (gameobject instanceof _components_ninepatch_button__WEBPACK_IMPORTED_MODULE_1__["NinePatchButton"]) {
            var btn = gameobject.getBtnData();
            if (!btn) {
                return;
            }
            var param = this.mParam[0];
            var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_3__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_TARGET_UI);
            var content = pkt.content;
            content.uiId = param.id;
            content.componentId = btn.node.id;
            this.world.connection.send(pkt);
        }
    };
    return MessageBoxMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__[/* BaseMediator */ "a"]));



/***/ }),
/* 367 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MineSettleMediator", function() { return MineSettleMediator; });
/* harmony import */ var _MineSettlePanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(301);
/* harmony import */ var _MineSettle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(300);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var MineSettleMediator = /** @class */ (function (_super) {
    __extends(MineSettleMediator, _super);
    function MineSettleMediator(layerMgr, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.scene = scene;
        _this.layerMgr = layerMgr;
        _this.world = worldService;
        return _this;
    }
    MineSettleMediator.prototype.show = function () {
        if ((this.mView && this.mView.isShow()) || this.mShow) {
            return;
        }
        if (!this.mView) {
            this.mView = new _MineSettlePanel__WEBPACK_IMPORTED_MODULE_0__["MineSettlePanel"](this.scene, this.world);
            this.mView.on("hide", this.onHideMineSettle, this);
        }
        if (!this.mineSettle) {
            this.mineSettle = new _MineSettle__WEBPACK_IMPORTED_MODULE_1__["MineSettle"](this.world);
            this.mineSettle.on("minesettlepacket", this.onMineSettlePacket, this);
            this.mineSettle.register();
        }
        this.layerMgr.addToUILayer(this.mView);
        if (this.mParam && this.mParam.length > 0)
            this.onMineSettlePacket(this.mParam[0]);
        this.mView.show();
    };
    MineSettleMediator.prototype.isSceneUI = function () {
        return true;
    };
    MineSettleMediator.prototype.destroy = function () {
        if (this.mineSettle) {
            this.mineSettle.destroy();
            this.mineSettle = undefined;
        }
        if (this.mView) {
            this.mView.hide();
            this.mView = undefined;
        }
    };
    MineSettleMediator.prototype.onHideMineSettle = function () {
        this.mineSettle.reqMineSettlePacket();
        this.destroy();
    };
    MineSettleMediator.prototype.onMineSettlePacket = function (content) {
        var panel = this.mView;
        panel.setData("settleData", content);
        panel.setMineSettlePacket(content);
    };
    return MineSettleMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_2__[/* BaseMediator */ "a"]));



/***/ }),
/* 368 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NpcDialogueMediator", function() { return NpcDialogueMediator; });
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(106);
/* harmony import */ var _NpcDialogue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(302);
/* harmony import */ var _NpcDialoguePanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(303);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var NpcDialogueMediator = /** @class */ (function (_super) {
    __extends(NpcDialogueMediator, _super);
    function NpcDialogueMediator(layerMgr, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.scene = scene;
        _this.layerMgr = layerMgr;
        _this.world = worldService;
        return _this;
    }
    NpcDialogueMediator.prototype.show = function () {
        if ((this.mView && this.mView.isShow()) || this.mShow) {
            return;
        }
        if (!this.mView) {
            this.mView = new _NpcDialoguePanel__WEBPACK_IMPORTED_MODULE_2__["NpcDialoguePanel"](this.scene, this.world);
        }
        if (!this.npcDialogue) {
            this.npcDialogue = new _NpcDialogue__WEBPACK_IMPORTED_MODULE_1__["NpcDialogue"](this.world);
            this.npcDialogue.register();
        }
        this.layerMgr.addToUILayer(this.mView);
        this.mView.show();
    };
    NpcDialogueMediator.prototype.isSceneUI = function () {
        return true;
    };
    NpcDialogueMediator.prototype.destroy = function () {
        if (this.npcDialogue) {
            this.npcDialogue.destroy();
            this.npcDialogue = undefined;
        }
        if (this.mView) {
            this.mView.hide();
            this.mView = undefined;
        }
    };
    return NpcDialogueMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__[/* BaseMediator */ "a"]));



/***/ }),
/* 369 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaMessageBoxMediator", function() { return PicaMessageBoxMediator; });
/* harmony import */ var _PicaMessageBoxPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(304);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var PicaMessageBoxMediator = /** @class */ (function (_super) {
    __extends(PicaMessageBoxMediator, _super);
    function PicaMessageBoxMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.world = worldService;
        _this.scene = _this.layerManager.scene;
        return _this;
    }
    PicaMessageBoxMediator.prototype.show = function (params) {
        this.mParam = params;
        if ((this.mView && this.mView.isShow()) || this.mShow) {
            return;
        }
        if (!this.mView) {
            this.mView = new _PicaMessageBoxPanel__WEBPACK_IMPORTED_MODULE_0__["PicaMessageBoxPanel"](this.scene, this.world);
            this.mView.on("click", this.onClickHandler, this);
        }
        this.mView.show(params);
        this.layerManager.addToDialogLayer(this.mView);
    };
    PicaMessageBoxMediator.prototype.hide = function () {
        _super.prototype.hide.call(this);
        if (this.mView) {
            this.mView.destroy();
            this.mView = undefined;
        }
    };
    PicaMessageBoxMediator.prototype.onClickHandler = function (data) {
        var param = this.mParam[0];
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_TARGET_UI);
        var content = pkt.content;
        content.uiId = param.id;
        content.componentId = data.node.id;
        this.world.connection.send(pkt);
    };
    return PicaMessageBoxMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__[/* BaseMediator */ "a"]));



/***/ }),
/* 370 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaNoticeMediator", function() { return PicaNoticeMediator; });
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(106);
/* harmony import */ var _PicaNoticePanel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(305);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var PicaNoticeMediator = /** @class */ (function (_super) {
    __extends(PicaNoticeMediator, _super);
    function PicaNoticeMediator(layerManager, scene, world) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.scene = scene;
        _this.world = world;
        return _this;
    }
    PicaNoticeMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        this.mView = new _PicaNoticePanel__WEBPACK_IMPORTED_MODULE_1__["PicaNoticePanel"](this.scene, this.world);
        this.mView.once("close", this.onCloseHandler, this);
        this.mView.show(param);
        // this.layerManager.addToToolTipsLayer(this.mView.view);
    };
    PicaNoticeMediator.prototype.onCloseHandler = function () {
        if (this.mView) {
            this.mView.destroy();
            this.mView = undefined;
        }
    };
    return PicaNoticeMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_0__[/* BaseMediator */ "a"]));



/***/ }),
/* 371 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PicaRoomListMediator", function() { return PicaRoomListMediator; });
/* harmony import */ var _PicaRoomListPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(330);
/* harmony import */ var _RoomList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(306);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(106);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var PicaRoomListMediator = /** @class */ (function (_super) {
    __extends(PicaRoomListMediator, _super);
    function PicaRoomListMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.layerManager = layerManager;
        _this.world = worldService;
        _this.scene = _this.layerManager.scene;
        return _this;
    }
    PicaRoomListMediator.prototype.show = function () {
        if ((this.mView && this.mView.isShow()) || this.mShow) {
            this.layerManager.addToUILayer(this.mView);
            return;
        }
        this.roomList = new _RoomList__WEBPACK_IMPORTED_MODULE_1__["RoomList"](this.world);
        this.roomList.register();
        this.roomList.on("myRoomList", this.updateMyRoomListHandler, this);
        this.roomList.on("roomList", this.updateRoomListHandler, this);
        this.roomList.on("enterRoomResult", this.onEnterRoomResuleHandler, this);
        if (!this.mView) {
            this.mView = new _PicaRoomListPanel__WEBPACK_IMPORTED_MODULE_0__["PicaRoomListPanel"](this.scene, this.world);
        }
        this.mView.on("close", this.onCloseHandler, this);
        this.mView.on("getRoomList", this.onGetRoomListHandler, this);
        this.mView.on("getMyRoomList", this.onGetMyRoomListHandler, this);
        this.mView.on("enterRoom", this.onEnterRoomHandler, this);
        this.mView.show();
        this.layerManager.addToUILayer(this.mView);
    };
    PicaRoomListMediator.prototype.getView = function () {
        return this.mView;
    };
    PicaRoomListMediator.prototype.destroy = function () {
        if (this.roomList) {
            this.roomList.destroy();
        }
        if (this.mView) {
            this.mView.destroy();
            this.mView = undefined;
        }
        _super.prototype.destroy.call(this);
    };
    PicaRoomListMediator.prototype.onCloseHandler = function () {
        this.destroy();
    };
    PicaRoomListMediator.prototype.updateRoomListHandler = function (content) {
        if (!this.mView) {
            return;
        }
        this.mView.updateRoomList(content);
    };
    PicaRoomListMediator.prototype.updateMyRoomListHandler = function (content) {
        if (!this.mView) {
            return;
        }
        this.mView.updateMyRoomList(content);
    };
    PicaRoomListMediator.prototype.onEnterRoomResuleHandler = function (content) {
        _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().log("enter room result:", content);
    };
    PicaRoomListMediator.prototype.onGetRoomListHandler = function () {
        if (!this.roomList) {
            return;
        }
        this.roomList.sendGetRoomList();
    };
    PicaRoomListMediator.prototype.onGetMyRoomListHandler = function () {
        if (!this.roomList) {
            return;
        }
        this.roomList.sendMyHistory();
    };
    PicaRoomListMediator.prototype.onEnterRoomHandler = function (roomID, passworld) {
        if (!this.roomList) {
            return;
        }
        this.roomList.sendEnterRoom(roomID, passworld);
        // this.onCloseHandler();
    };
    return PicaRoomListMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_3__[/* BaseMediator */ "a"]));



/***/ }),
/* 372 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserMenuMediator", function() { return UserMenuMediator; });
/* harmony import */ var _UserMenuPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(312);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(109);
/* harmony import */ var _lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(106);
/* harmony import */ var _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(115);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var UserMenuMediator = /** @class */ (function (_super) {
    __extends(UserMenuMediator, _super);
    function UserMenuMediator(layerManager, scene, worldService) {
        var _this = _super.call(this) || this;
        _this.world = worldService;
        _this.mLayerManager = layerManager;
        _this.mScene = scene;
        _this.mUIType = _lib_rexui_lib_ui_interface_baseUI_UIType__WEBPACK_IMPORTED_MODULE_5__[/* UIType */ "a"].Tips;
        return _this;
    }
    UserMenuMediator.prototype.getView = function () {
        return this.mView;
    };
    UserMenuMediator.prototype.hide = function () {
        this.mShow = false;
        this.world.emitter.off(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].SCENE_BACKGROUND_CLICK, this.onClosePanel, this);
        if (this.mView) {
            this.mView.off("menuClick", this.onClickMenuHandler, this);
            this.mView.hide();
            this.mView = null;
        }
    };
    UserMenuMediator.prototype.isSceneUI = function () {
        return false;
    };
    UserMenuMediator.prototype.isShow = function () {
        return false;
    };
    UserMenuMediator.prototype.resize = function () {
        if (this.mView)
            this.mView.resize();
    };
    UserMenuMediator.prototype.show = function (param) {
        if (this.mView && this.mView.isShow()) {
            return;
        }
        this.mView = new _UserMenuPanel__WEBPACK_IMPORTED_MODULE_0__["UserMenuPanel"](this.mScene, this.world);
        this.mView.show(param[0]);
        this.mLayerManager.addToUILayer(this.mView);
        this.world.emitter.on(_const_MessageType__WEBPACK_IMPORTED_MODULE_3__[/* MessageType */ "a"].SCENE_BACKGROUND_CLICK, this.onClosePanel, this);
        this.mView.on("menuClick", this.onClickMenuHandler, this);
        _super.prototype.show.call(this, param);
        // this.mScene.input.on("pointerdown", this.onClosePanel, this);
    };
    UserMenuMediator.prototype.update = function (param) {
        if (this.mView)
            this.mView.update(param[0]);
    };
    UserMenuMediator.prototype.destroy = function () {
        if (this.mView) {
            this.mView.destroy();
            this.mView = null;
        }
        this.mScene = null;
    };
    UserMenuMediator.prototype.onClickMenuHandler = function (targetNode) {
        if (!this.mView)
            return;
        var uiNode = this.mView.getData("data");
        if (!targetNode || !uiNode || !this.world || !this.world.connection)
            return;
        this.hide();
        if (targetNode.platformid) {
            if (targetNode.text === "关注") {
                this.world.httpService.follow(targetNode.platformid);
            }
            else if (targetNode.text === "取消关注") {
                this.world.httpService.unfollow(targetNode.platformid);
            }
            return;
        }
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_TARGET_UI);
        var content = pkt.content;
        content.uiId = uiNode.id;
        content.componentId = targetNode.id;
        this.world.connection.send(pkt);
    };
    UserMenuMediator.prototype.onClosePanel = function (pointer, gameObject) {
        this.hide();
    };
    return UserMenuMediator;
}(_lib_rexui_lib_ui_baseUI_BaseMediator__WEBPACK_IMPORTED_MODULE_4__[/* BaseMediator */ "a"]));



/***/ }),
/* 373 */
/***/ (function(module, exports) {



/***/ }),
/* 374 */
/***/ (function(module, exports) {



/***/ }),
/* 375 */
/***/ (function(module, exports) {



/***/ }),
/* 376 */
/***/ (function(module, exports) {



/***/ }),
/* 377 */
/***/ (function(module, exports) {



/***/ }),
/* 378 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopMediator", function() { return TopMediator; });
/* harmony import */ var _baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(133);
/* harmony import */ var _top_btn_group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(316);
/* harmony import */ var _Rank_RankMediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(156);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var TopMediator = /** @class */ (function (_super) {
    __extends(TopMediator, _super);
    function TopMediator(mWorld, scene) {
        return _super.call(this, mWorld, scene) || this;
    }
    TopMediator.prototype.preRefreshBtn = function (medName) {
        if (!this.refreshMedList)
            this.refreshMedList = [];
        this.refreshMedList.push(medName);
    };
    TopMediator.prototype.refreshBtn = function (medName, addBoo) {
        var _this = this;
        var topBtnGroup = this.mView;
        switch (medName) {
            case _Rank_RankMediator__WEBPACK_IMPORTED_MODULE_2__["RankMediator"].NAME:
                if (addBoo) {
                    topBtnGroup.addBtn({
                        key: medName, bgResKey: "baseView", bgTextures: ["btnGroup_red_normal.png", "btnGroup_red_light.png", "btnGroup_red_select.png"],
                        iconResKey: "baseView", iconTexture: "btnGroup_rank_icon.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json",
                        callBack: function () {
                            var med = _this.world.uiManager.getMediator(medName);
                            if (med) {
                                // 该判断条件用于某些常驻界面ui在移动端需要手动打开，客户端将此逻辑修改为通过后端发送的showui数据将入口按钮变成是否常驻
                                // 好处在于移动端客户端界面让玩家自行选择是否打开，减少ui布局混乱的情况
                                var param = med.getParam();
                                med.show(param);
                            }
                            else {
                                // todo 该判断条件用于热发布活动，后端需要在pi中加一条活动按钮数据，不包含med具体代码，只有name，btnres等数据即可，等需要打开界面时在请求具体数据
                                // 客户端只需要发送medname给后端，后端发送showui给客户端，好处在于每次打开都是请求后端打开界面，活动数据是实时的
                            }
                        }
                    });
                }
                else {
                    topBtnGroup.removeBtn(medName);
                }
                break;
            case "EnterDecorate":
                if (addBoo) {
                    topBtnGroup.addBtn({
                        key: medName, bgResKey: "baseView", bgTextures: ["btnGroup_red_normal.png", "btnGroup_red_light.png", "btnGroup_red_select.png"],
                        iconResKey: "baseView", iconTexture: "btnGroup_rank_icon.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json",
                        callBack: function () {
                            _this.onEnterDecorate();
                        }
                    });
                }
                else {
                    topBtnGroup.removeBtn(medName);
                }
                break;
            case "SaveDecorate":
                if (addBoo) {
                    topBtnGroup.addBtn({
                        key: medName, bgResKey: "baseView", bgTextures: ["btnGroup_red_normal.png", "btnGroup_red_light.png", "btnGroup_red_select.png"],
                        iconResKey: "baseView", iconTexture: "btnGroup_rank_icon.png", scale: 1, pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json",
                        callBack: function () {
                            _this.onEnterDecorate();
                        }
                    });
                }
                else {
                    topBtnGroup.removeBtn(medName);
                }
                break;
        }
    };
    TopMediator.prototype.tweenView = function (show) {
        if (this.mView)
            this.mView.tweenView(show);
    };
    TopMediator.prototype.show = function (param) {
        var _this = this;
        if (this.mView && this.isShow()) {
            return;
        }
        this.mView = new _top_btn_group__WEBPACK_IMPORTED_MODULE_1__["TopBtnGroup"](this.mScene, this.world);
        this.mView.show(param);
        _super.prototype.show.call(this, param);
        if (this.refreshMedList) {
            this.refreshMedList.forEach(function (medName) {
                _this.refreshBtn(medName, true);
            });
        }
    };
    TopMediator.prototype.hide = function () {
        var _this = this;
        this.mShow = false;
        if (this.refreshMedList) {
            this.refreshMedList.forEach(function (medName) {
                _this.refreshBtn(medName, false);
            });
        }
        if (this.mView) {
            this.mView.hide();
            this.mView = null;
        }
    };
    TopMediator.prototype.addBtn = function (data) {
        if (this.mView)
            this.mView.addBtn(data);
    };
    TopMediator.prototype.onEnterDecorate = function () {
        if (this.world && this.world.connection) {
            var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_3__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_ENTER);
            this.world.connection.send(packet);
        }
    };
    TopMediator.prototype.onSaveDecorate = function () {
        if (this.world && this.world.connection) {
            // Alert.
            var packet = new net_socket_packet__WEBPACK_IMPORTED_MODULE_3__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_4__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_SAVE);
            this.world.connection.send(packet);
        }
    };
    TopMediator.NAME = "TopMediator";
    return TopMediator;
}(_baseFace_mediator__WEBPACK_IMPORTED_MODULE_0__["BaseFaceMediator"]));



/***/ }),
/* 379 */
/***/ (function(module, exports) {



/***/ }),
/* 380 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputPanel", function() { return InputPanel; });
/* harmony import */ var _inputTextFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(178);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var InputPanel = /** @class */ (function (_super) {
    __extends(InputPanel, _super);
    function InputPanel(scene, world) {
        var _this = _super.call(this, scene) || this;
        var width = world.getSize().width;
        var height = world.getSize().height;
        _this.mBg.clear();
        _this.mBg.fillStyle(0x0000, .5);
        _this.mBg.fillRect(0, 0, width, height);
        _this.setInteractive(new Phaser.Geom.Rectangle(0, 0, width, height), Phaser.Geom.Rectangle.Contains);
        _this.mInputText = world.uiManager.getInputTextFactory().getInputText(scene);
        _this.mInputText.on(_inputTextFactory__WEBPACK_IMPORTED_MODULE_0__["InputTextFieldEvent"].textExit, _this.hide, _this);
        _this.add(_this.mBg);
        _this.add(_this.mInputText.getSkin());
        return _this;
    }
    Object.defineProperty(InputPanel.prototype, "text", {
        get: function () {
            return this.mInputText.getText();
        },
        enumerable: false,
        configurable: true
    });
    InputPanel.prototype.hide = function () {
        if (this.mInputText) {
            this.mInputText.onBlur();
            this.mInputText.off(_inputTextFactory__WEBPACK_IMPORTED_MODULE_0__["InputTextFieldEvent"].textExit, this.hide, this);
            this.mInputText.destroy();
            this.mInputText = null;
        }
        if (this.mBg) {
            this.mBg.destroy();
            this.mBg = null;
        }
        _super.prototype.destroy.call(this);
    };
    return InputPanel;
}(Phaser.GameObjects.Container));



/***/ }),
/* 381 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageBoxUI", function() { return MessageBoxUI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageBtn", function() { return MessageBtn; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MessageBoxUI = /** @class */ (function (_super) {
    __extends(MessageBoxUI, _super);
    function MessageBoxUI(scene, config) {
        var _this = _super.call(this, scene) || this;
        _this.mScene = scene;
        _this.mConfig = config;
        _this.init();
        return _this;
    }
    MessageBoxUI.prototype.selectCall = function (itemData) {
        this.mtxt.text = itemData.text;
        this.mtxt.x = this.mConfig.wid - this.mtxt.width >> 1;
        this.mtxt.y = this.mConfig.hei - this.mtxt.height >> 1;
        if (this.mConfig.clickCallBack) {
            this.mConfig.clickCallBack.call(this, itemData);
        }
    };
    MessageBoxUI.prototype.init = function () {
        var resKey = this.mConfig.resKey;
        var resPng = this.mConfig.resPng;
        var resJson = this.mConfig.resJson;
        if (!this.mScene.cache.obj.has(resKey)) {
            this.mScene.load.atlas(resKey, resPng, resJson);
            this.mScene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadCompleteHandler, this);
            this.mScene.load.start();
        }
        else {
            this.onLoadCompleteHandler();
        }
    };
    MessageBoxUI.prototype.onLoadCompleteHandler = function () {
        var resKey = this.mConfig.resKey;
        var resBtn = this.mConfig.resBtn;
        this.mBg = this.mScene.make.image(undefined, false);
        this.mBg.setTexture(resKey, this.mConfig.resBg);
        this.mBg.x = this.mConfig.wid / 2;
        this.mBg.y = this.mConfig.hei / 2;
        this.mBg.setSize(this.mConfig.wid, this.mConfig.hei);
        this.mBtnList = [];
        if (this.mConfig.btnData) {
            var len = this.mConfig.btnData.length;
            var btn = void 0;
            for (var i = 0; i < len; i++) {
                btn = new MessageBtn(this.mScene, this, resKey, resBtn, this.mConfig.btnWid, this.mConfig.btnHei);
                this.mBtnList.push(btn);
            }
        }
        this.mtxt = this.mScene.make.text({
            x: 0, y: 0,
            style: { fill: "#F7EDED", fontSize: 18 }
        }, false);
        this.add(this.mBg);
        this.add(this.mtxt);
    };
    return MessageBoxUI;
}(Phaser.GameObjects.Container));

var MessageBtn = /** @class */ (function (_super) {
    __extends(MessageBtn, _super);
    function MessageBtn(scene, messageBoxUI, resKey, resBtn, wid, hei) {
        var _this = _super.call(this, scene) || this;
        _this.messageBoxUI = messageBoxUI;
        _this.mBtn = scene.make.image(undefined, false);
        _this.mBtn.setTexture(resKey, resBtn);
        _this.mText = _this.scene.make.text({
            x: -wid >> 1, y: -hei >> 1,
            style: { fill: "#F7EDED", fontSize: 18 }
        }, false);
        _this.add(_this.mBtn);
        _this.add(_this.mText);
        _this.setSize(wid, hei);
        _this.setInteractive();
        _this.on("pointerdown", _this.selectHandler, _this);
        return _this;
    }
    Object.defineProperty(MessageBtn.prototype, "itemData", {
        get: function () {
            return this.mData;
        },
        set: function (val) {
            this.mData = val;
            this.mText.text = this.mData.text;
            this.mText.x = -this.width / 2 + (this.width - this.mText.width >> 1);
            this.mText.y = -this.height / 2 + (this.height - this.mText.height >> 1);
        },
        enumerable: false,
        configurable: true
    });
    MessageBtn.prototype.destroy = function () {
        this.mText.destroy(true);
        this.mBtn.destroy(true);
        this.mData = null;
        _super.prototype.destroy.call(this, true);
    };
    MessageBtn.prototype.selectHandler = function () {
        this.addTween(this.mBtn);
        this.messageBoxUI.selectCall(this.itemData);
    };
    MessageBtn.prototype.addTween = function (img) {
        this.scene.tweens.add({
            targets: img,
            duration: 50,
            ease: "Linear",
            props: {
                scaleX: { value: .5 },
                scaleY: { value: .5 },
            },
            yoyo: true,
            repeat: 0,
        });
        img.scaleX = img.scaleY = 1;
    };
    return MessageBtn;
}(Phaser.GameObjects.Container));



/***/ }),
/* 382 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabButton", function() { return TabButton; });
/* harmony import */ var _ninepatch_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(114);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var TabButton = /** @class */ (function (_super) {
    __extends(TabButton, _super);
    function TabButton(scene, x, y, width, height, key, frame, text, config, data) {
        var _this = _super.call(this, scene, x, y, width, height, key, frame, text, config, data) || this;
        _this.setInteractive(new Phaser.Geom.Rectangle(0, 0, width, height), Phaser.Geom.Rectangle.Contains);
        return _this;
    }
    TabButton.prototype.onPointerUp = function () { };
    return TabButton;
}(_ninepatch_button__WEBPACK_IMPORTED_MODULE_0__["NinePatchButton"]));



/***/ }),
/* 383 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingView", function() { return LoadingView; });
var LoadingView = /** @class */ (function () {
    function LoadingView(mScene) {
        this.mScene = mScene;
        this.mShowing = false;
        this.createPanel();
    }
    LoadingView.prototype.setFollow = function (gameObject, fromScene, callBack) {
    };
    LoadingView.prototype.isShow = function () {
        return this.mShowing;
    };
    LoadingView.prototype.show = function (param) {
        this.mTween = this.mScene.tweens.add({
            targets: this.mBg,
            duration: 2000000,
            ease: "Linear",
            props: {
                rotation: 360,
            }
        });
    };
    LoadingView.prototype.update = function (param) {
    };
    LoadingView.prototype.hide = function () {
        if (this.mTween) {
            this.mTween.stop();
            this.mTween.remove();
            // this.mTween = null;
        }
    };
    LoadingView.prototype.tweenExpand = function (show) {
    };
    LoadingView.prototype.resize = function () {
    };
    LoadingView.prototype.destroy = function () {
        if (this.mBg) {
            this.mBg.destroy();
        }
    };
    LoadingView.prototype.createPanel = function () {
        var size = this.mScene.game.scale.gameSize;
        this.mBg = this.mScene.add.sprite(size.width >> 1, size.height >> 1, "stars");
        this.mBg.scaleX = this.mBg.scaleY = 1.3;
    };
    return LoadingView;
}());



/***/ }),
/* 384 */
/***/ (function(module, exports) {



/***/ }),
/* 385 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/AddChild.js
/* harmony default export */ var AddChild = ({
    add(gameObject) {
        if (Array.isArray(gameObject)) {
            this.addMultiple(gameObject);
        } else {
            this._add(gameObject);
        }
        return this;
    },

    addMultiple(gameObjects) {
        gameObjects.forEach(this._add, this);
        return this;
    },

    _add(gameObject) {
        this.children.add(gameObject);

        this
            .resetChildState(gameObject)           // Reset local state of child
            .updateChildVisible(gameObject)        // Apply parent's visible to child
            .updateChildActive(gameObject)         // Apply parent's active to child
            .updateChildScrollFactor(gameObject)   // Apply parent's scroll factor to child
            .updateChildMask(gameObject);          // Apply parent's mask to child
        return this;
    },
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/RemoveChild.js
/* harmony default export */ var RemoveChild = ({
    remove(gameObject, destroyChild) {
        this.children.remove(gameObject, false, destroyChild);
        return this;
    },

    clear(destroyChild) {
        this.children.clear(false, destroyChild);
        return this;
    },
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/ChildState.js
/* harmony default export */ var ChildState = ({
    getLocalState(gameObject) {
        if (!gameObject.hasOwnProperty('rexContainer')) {
            gameObject.rexContainer = {};
        }
        return gameObject.rexContainer;
    },

    resetChildState(gameObject) {
        this
            .resetChildPositionState(gameObject)
            .resetChildVisibleState(gameObject)
            .resetChildAlphaState(gameObject)
            .resetChildActiveState(gameObject);
        return this;
    },

    resetChildrenState(gameObjects) {
        for (var i = 0, cnt = gameObjects.length; i < cnt; i++) {
            this.resetChildState(gameObjects[i]);
        }
        return this;
    },

    syncProperties() {
        this
            .syncPosition()
            .syncVisible()
            .syncAlpha()
            .syncActive()
            .syncScrollFactor()
            .syncMask();
        return this;
    }
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/Transform.js
const RotateAround = Phaser.Math.RotateAround;

/* harmony default export */ var Transform = ({
    worldToLocal(point) {
        // Transform
        point.x -= this.x;
        point.y -= this.y;
        // Rotate
        RotateAround(point, 0, 0, -this.rotation);
        // Scale
        point.x /= this.scaleX;
        point.y /= this.scaleY;
        // Flip
        point.x *= ((!this.flipX) ? 1 : -1);
        point.y *= ((!this.flipY) ? 1 : -1);
        return point;
    },

    localToWorld(point) {
        // Flip
        point.x *= ((!this.flipX) ? 1 : -1);
        point.y *= ((!this.flipY) ? 1 : -1);
        // Scale
        point.x *= this.scaleX;
        point.y *= this.scaleY;
        // Rotate
        RotateAround(point, 0, 0, this.rotation);
        // Transform
        point.x += this.x;
        point.y += this.y;
        return point;
    }
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/Scale.js
var Scale = function (a, b) {
    if (a === b) {
        return 1;
    } else {
        return a / b;
    }
}

/* harmony default export */ var containerlite_Scale = (Scale);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/Position.js


/* harmony default export */ var Position = ({
    updateChildPosition(child) {
        if (child.isRexContainerLite) {
            child.syncChildrenEnable = false;
        }
        var state = this.getLocalState(child);
        child.x = state.x;
        child.y = state.y;
        this.localToWorld(child);

        child.scaleX = state.scaleX * this.scaleX;
        child.scaleY = state.scaleY * this.scaleY;

        if (child.flipX !== undefined) {
            child.flipX = (!this.flipX) ? state.flipX : !state.flipX;
            child.flipY = (!this.flipY) ? state.flipY : !state.flipY;
        }

        child.rotation = state.rotation + this.rotation;

        if (child.isRexContainerLite) {
            child.syncChildrenEnable = true;
            child.syncPosition();
        }
        return this;
    },

    syncPosition() {
        if (this.children && this.syncChildrenEnable) {
            this.children.getChildren().forEach(this.updateChildPosition, this);
        }
        return this;
    },

    resetChildPositionState(gameObject) {
        var state = this.getLocalState(gameObject);
        state.x = gameObject.x;
        state.y = gameObject.y;
        this.worldToLocal(state);

        state.scaleX = containerlite_Scale(gameObject.scaleX, this.scaleX);
        state.scaleY = containerlite_Scale(gameObject.scaleY, this.scaleY);

        if (gameObject.flipX !== undefined) {
            state.flipX = gameObject.flipX;
            state.flipY = gameObject.flipY;
        }

        state.rotation = gameObject.rotation - this.rotation;
        return this;
    },
    
    setChildPosition(gameObject, x, y) {
        gameObject.x = x;
        gameObject.y = y;
        this.resetChildPositionState(gameObject);
        return this;
    },

    setChildLocalPosition(gameObject, x, y) {
        var state = this.getLocalState(gameObject);
        state.x = x;
        state.y = y;
        this.updateChildPosition(gameObject);
        return this;
    },
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/Visible.js
/* harmony default export */ var Visible = ({
    updateChildVisible(child) {
        child.visible = this.visible && this.getLocalState(child).visible;
        return this;
    },

    syncVisible() {
        if (this.children && this.syncChildrenEnable) {
            this.children.getChildren().forEach(this.updateChildVisible, this);
        }
        return this;
    },

    resetChildVisibleState(gameObject) {
        this.getLocalState(gameObject).visible = gameObject.visible;
        return this;
    },

    setChildVisible(gameObject, visible) {
        gameObject.visible = visible;
        this.resetChildVisibleState(gameObject);
        return this;
    },
    
    setChildLocalVisible(gameObject, visible) {
        if (visible === undefined) {
            visible = true;
        }
        this.getLocalState(gameObject).visible = visible;
        this.updateChildVisible(gameObject);
        return this;
    },
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/Alpha.js


/* harmony default export */ var Alpha = ({
    updateChildAlpha(child) {
        child.alpha = this.alpha * this.getLocalState(child).alpha;
        return this;
    },

    syncAlpha() {
        if (this.children && this.syncChildrenEnable) {
            this.children.getChildren().forEach(this.updateChildAlpha, this);
        }
        return this;
    },

    resetChildAlphaState(gameObject) {
        this.getLocalState(gameObject).alpha = containerlite_Scale(gameObject.alpha, this.alpha);
        return this;
    },
    
    setChildAlpha(gameObject, alpha) {
        gameObject.alpha = alpha;
        this.resetChildAlphaState(gameObject);
        return this._add;
    },
    
    setChildLocalAlpha(gameObject, alpha) {
        this.getLocalState(gameObject).alpha = alpha;
        this.updateChildAlpha(gameObject);
        return this;
    },
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/Active.js
/* harmony default export */ var Active = ({
    updateChildActive(child) {
        child.active = this.active && this.getLocalState(child).active;
        return this;
    },

    syncActive() {
        if (this.children && this.syncChildrenEnable) {
            this.children.getChildren().forEach(this.updateChildActive, this);
        }
        return this;
    },
    
    resetChildActiveState(gameObject) {
        this.getLocalState(gameObject).active = gameObject.active;
        return this;
    },

    setChildActive(gameObject, active) {
        gameObject.active = active;
        this.resetChildActiveState(gameObject);
        return this;
    },

    setChildLocalActive(gameObject, active) {
        if (active === undefined) {
            active = true;
        }
        this.getLocalState(gameObject).active = active;
        this.updateChildActive(gameObject);
        return this;
    },
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/ScrollFactor.js
/* harmony default export */ var ScrollFactor = ({
    updateChildScrollFactor(child) {
        child.setScrollFactor(this.scrollFactorX, this.scrollFactorY);
        return this;
    },

    syncScrollFactor() {
        if (this.children && this.syncChildrenEnable) {
            this.children.getChildren().forEach(this.updateChildScrollFactor, this);
        }
        return this;
    },

});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/Mask.js
/* harmony default export */ var Mask = ({
    updateChildMask(child) {
        // Don't propagate null mask to clear children's mask
        if (this.mask == null) {
            return this;
        }

        var maskGameObject = (this.mask.hasOwnProperty('geometryMask')) ? this.mask.geometryMask : this.mask.bitmapMask;
        if (maskGameObject !== child) {
            child.mask = this.mask;
        }
        return this;
    },

    syncMask() {
        if (this.children && this.syncChildrenEnable) {
            this.children.getChildren().forEach(this.updateChildMask, this);
        }
        return this;
    },

    setMask(mask) {
        this.mask = mask;
        return this;
    },

    clearMask(destroyMask) {
        if (destroyMask === undefined) {
            destroyMask = false;
        }

        if (destroyMask && this.mask) {
            this.mask.destroy();
        }
        this.mask = null;
        return this;
    },
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/Depth.js
/* harmony default export */ var Depth = ({
    setDepth(value) {
        this.depth = value;
        if (this.children) {
            var children = this.getAllChildren();
            for (var i = 0, cnt = children.length; i < cnt; i++) {
                children[i].depth = value;
            }
        }
        return this;
    },

    swapDepth(containerB) {
        var depthA = this.depth;
        var depthB = containerB.depth;
        this.setDepth(depthB);
        containerB.setDepth(depthA);
        return this;
    },

    incDepth(inc) {
        this.depth += inc;
        if (this.children) {
            var children = this.getAllChildren();
            for (var i = 0, cnt = children.length; i < cnt; i++) {
                children[i].depth += inc;
            }
        }
        return this;
    },
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/Children.js
const ArrayUtils = Phaser.Utils.Array;

/* harmony default export */ var Children = ({
    getChildren() {
        return this.children.getChildren();
    },

    getAllChildren(out) {
        if (out === undefined) {
            out = [];
        }
        var myCildren = this.children.getChildren(),
            myChild;
        for (var i = 0, cnt = myCildren.length; i < cnt; i++) {
            myChild = myCildren[i];
            out.push(myChild);

            if (myChild.hasOwnProperty('isRexContainerLite')) {
                out.push(...myChild.getAllChildren());
            }
        }

        return out;
    },

    contains(gameObject) {
        if (this.children.contains(gameObject)) {
            return true;
        }

        var myCildren = this.children.getChildren(),
            myChild;
        for (var i = 0, cnt = myCildren.length; i < cnt; i++) {
            myChild = myCildren[i];

            if (myChild.isRexContainerLite) {
                if (myChild.contains(gameObject)) {
                    return true;
                }
            }
        }

        return false;
    },

    getByName(name) {
        return ArrayUtils.GetFirst(this.list, 'name', name);
    },

    getRandom(startIndex, length) {
        return ArrayUtils.GetRandom(this.list, startIndex, length);
    },

    getFirst(property, value, startIndex, endIndex) {
        return ArrayUtils.GetFirstElement(this.list, property, value, startIndex, endIndex);
    },

    getAll(property, value, startIndex, endIndex) {
        return ArrayUtils.GetAll(this.list, property, value, startIndex, endIndex);
    },

    count(property, value, startIndex, endIndex) {
        return ArrayUtils.CountAllMatching(this.list, property, value, startIndex, endIndex);
    },

    swap(child1, child2) {
        ArrayUtils.Swap(this.list, child1, child2);
        return this;
    },

    moveTo(child, index) {
        ArrayUtils.MoveTo(this.list, child, index);
        return this;
    },

    setAll(property, value, startIndex, endIndex) {
        ArrayUtils.SetAll(this.list, property, value, startIndex, endIndex);
        return this;
    },
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/containerlite/ContainerLite.js













const Zone = Phaser.GameObjects.Zone;
const Components = Phaser.GameObjects.Components;

class ContainerLite extends Zone {
    constructor(scene, x, y, width, height, children) {
        if (Array.isArray(width)) {
            children = width;
            width = undefined;
        }
        if (width === undefined) {
            width = 1;
        }
        if (height === undefined) {
            height = 1;
        }
        super(scene, x, y, width, height);
        this.children = scene.add.group();
        this.type = 'rexContainerLite';
        this.isRexContainerLite = true;
        this.syncChildrenEnable = true;

        this._flipX = false;
        this._flipY = false;
        this._alpha = 1;
        this._active = true;
        this._mask = null;
        this._scrollFactorX = 1;
        this._scrollFactorY = 1;

        if (children) {
            this.add(children);
        }
    }

    destroy(fromScene) {
        //  This Game Object has already been destroyed
        if (!this.scene) {
            return;
        }

        this.children.destroy(!fromScene);
        this.children = undefined;
        super.destroy(fromScene);
    }

    resize(width, height) {
        this.setSize(width, height);
        return this;
    }

    get x() {
        return this._x;
    }

    set x(value) {
        if (this._x === value) {
            return;
        }
        this._x = value;

        this.syncPosition();
    }

    get y() {
        return this._y;
    }

    set y(value) {
        if (this._y === value) {
            return;
        }
        this._y = value;

        this.syncPosition();
    }

    // Override
    get rotation() {
        return super.rotation;
    }

    set rotation(value) {
        if (this.rotation === value) {
            return;
        }
        super.rotation = value;

        this.syncPosition();
    }

    // Override
    get scaleX() {
        return super.scaleX;
    }

    set scaleX(value) {
        if (this.scaleX === value) {
            return;
        }
        super.scaleX = value;

        this.syncPosition();
    }

    // Override
    get scaleY() {
        return super.scaleY;
    }

    set scaleY(value) {
        if (this.scaleY === value) {
            return;
        }
        super.scaleY = value;

        this.syncPosition();
    }

    // Override
    get flipX() {
        return this._flipX;
    }

    set flipX(value) {
        if (this._flipX === value) {
            return;
        }
        this._flipX = value;

        this.syncPosition();
    }

    // Override
    get flipY() {
        return this._flipY;
    }

    set flipY(value) {
        if (this._flipY === value) {
            return;
        }
        this._flipY = value;

        this.syncPosition();
    }

    // Override
    get visible() {
        return super.visible;
    }

    set visible(value) {
        if (this.visible === value) {
            return;
        }
        super.visible = value;

        this.syncVisible();
    }

    // Override
    get alpha() {
        return this._alpha;
    }

    set alpha(value) {
        if (this._alpha === value) {
            return;
        }
        this._alpha = value;

        this.syncAlpha();
    }

    // Override
    get active() {
        return this._active;
    }

    set active(value) {
        if (this._active === value) {
            return;
        }
        this._active = value;

        this.syncActive();
    }

    // Override
    get mask() {
        return this._mask;
    }
    set mask(mask) {
        if (this._mask === mask) {
            return;
        }
        this._mask = mask;

        this.syncMask();
    }

    // Override
    get scrollFactorX() {
        return this._scrollFactorX;
    }

    set scrollFactorX(value) {
        if (this._scrollFactorX === value) {
            return;
        }

        this._scrollFactorX = value;
        this.syncScrollFactor();
    }
    get scrollFactorY() {
        return this._scrollFactorY;
    }

    set scrollFactorY(value) {
        if (this._scrollFactorY === value) {
            return;
        }

        this._scrollFactorY = value;
        this.syncScrollFactor();
    }

    // Compatiable with container plugin
    get list() {
        return this.children.getChildren();
    }
}

Object.assign(
    ContainerLite.prototype,
    AddChild,
    RemoveChild,
    ChildState,
    Transform,
    Position,
    Visible,
    Alpha,
    ScrollFactor,
    Active,
    Mask,
    Depth,
    Children,

    Components.Alpha,
    Components.Flip
);

/* harmony default export */ var containerlite_ContainerLite = __webpack_exports__["a"] = (ContainerLite);

/***/ }),
/* 386 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/render/WebGLRenderer.js
var WebGLRenderer = __webpack_require__(422);
var WebGLRenderer_default = /*#__PURE__*/__webpack_require__.n(WebGLRenderer);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/render/CanvasRenderer.js
var CanvasRenderer = __webpack_require__(423);
var CanvasRenderer_default = /*#__PURE__*/__webpack_require__.n(CanvasRenderer);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/NOOP.js
var NOOP = __webpack_require__(141);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/render/Render.js




var renderWebGL = NOOP["a" /* default */];
var renderCanvas = NOOP["a" /* default */];

if (true) {
    renderWebGL = WebGLRenderer_default.a;
}

if (true) {
    renderCanvas = CanvasRenderer_default.a;
}

/* harmony default export */ var Render = ({
    renderWebGL: renderWebGL,
    renderCanvas: renderCanvas

});
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/textstyle/TextStyle.js + 1 modules
var TextStyle = __webpack_require__(332);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/canvastext/DrawMethods.js
/* harmony default export */ var DrawMethods = ({
    draw(startX, startY, boxWidth, boxHeight) {
        var penManager = this.penManager;
        this.hitAreaManager.clear();

        var context = this.context;
        context.save();

        // this.clear();
        this.drawBackground(this.defatultStyle.backgroundColor);

        // draw lines
        var defatultStyle = this.defatultStyle;
        startX += this.startXOffset;
        startY += this.startYOffset;
        var halign = defatultStyle.halign,
            valign = defatultStyle.valign;

        var lineWidth, lineHeight = defatultStyle.lineHeight;
        var lines = penManager.lines;
        var totalLinesNum = lines.length,
            maxLines = defatultStyle.maxLines;
        var drawLinesNum, drawLineStartIdx, drawLineEndIdx;
        if ((maxLines > 0) && (totalLinesNum > maxLines)) {
            drawLinesNum = maxLines;
            if (valign === 'center') { // center
                drawLineStartIdx = Math.floor((totalLinesNum - drawLinesNum) / 2);
            } else if (valign === 'bottom') { // bottom
                drawLineStartIdx = totalLinesNum - drawLinesNum;
            } else {
                drawLineStartIdx = 0;
            }
        } else {
            drawLinesNum = totalLinesNum;
            drawLineStartIdx = 0;
        }
        drawLineEndIdx = drawLineStartIdx + drawLinesNum;

        var offsetX, offsetY;
        if (valign === 'center') { // center
            offsetY = Math.max((boxHeight - (drawLinesNum * lineHeight)) / 2, 0);
        } else if (valign === 'bottom') { // bottom
            offsetY = Math.max(boxHeight - (drawLinesNum * lineHeight) - 2, 0);
        } else {
            offsetY = 0;
        }
        offsetY += startY;
        for (var lineIdx = drawLineStartIdx; lineIdx < drawLineEndIdx; lineIdx++) {
            lineWidth = penManager.getLineWidth(lineIdx);
            if (lineWidth === 0) {
                continue;
            }

            if (halign === 'center') { // center
                offsetX = (boxWidth - lineWidth) / 2;
            } else if (halign === 'right') { // right
                offsetX = boxWidth - lineWidth;
            } else {
                offsetX = 0;
            }
            offsetX += startX;

            var pens = lines[lineIdx];
            for (var penIdx = 0, pensLen = pens.length; penIdx < pensLen; penIdx++) {
                this.drawPen(pens[penIdx], offsetX, offsetY);
            }
        }

        context.restore();
    },

    drawPen(pen, offsetX, offsetY) {
        offsetX += pen.x;
        offsetY += pen.y;

        var canvas = this.canvas;
        var context = this.context;
        context.save();

        var curStyle = this.parser.propToContextStyle(
            this.defatultStyle,
            pen.prop
        );
        curStyle.buildFont();
        curStyle.syncFont(canvas, context);
        curStyle.syncStyle(canvas, context);

        // Underline
        if ((curStyle.underlineThickness > 0) && (pen.width > 0)) {
            this.drawUnderline(offsetX, offsetY, pen.width, curStyle);
        }

        // Text
        if (pen.isTextPen) {
            this.drawText(offsetX, offsetY, pen.text, curStyle);
        }

        // Image
        if (pen.isImagePen) {
            this.drawImage(offsetX, offsetY, pen.prop.img, curStyle);
        }

        context.restore();

        if (pen.hasAreaMarker && (pen.width > 0)) {
            this.hitAreaManager.add(
                pen.prop.area,
                offsetX, (offsetY - this.startYOffset),
                pen.width, this.defatultStyle.lineHeight);
        }
    },

    clear() {
        var canvas = this.canvas;
        this.context.clearRect(0, 0, canvas.width, canvas.height);
    },

    drawBackground(color) {
        if (color === null) {
            return;
        }
        this.context.fillStyle = color;
        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
    },

    drawUnderline(x, y, width, style) {
        y += style.underlineOffset - (style.underlineThickness / 2);
        if (this.autoRound) {
            x = Math.round(x);
            y = Math.round(y);
        }

        var context = this.context;
        var savedLineCap = context.lineCap;
        context.lineCap = 'butt';
        context.beginPath();
        context.strokeStyle = style.underlineColor;
        context.lineWidth = style.underlineThickness;
        context.moveTo(x, y);
        context.lineTo((x + width), y);
        context.stroke();
        context.lineCap = savedLineCap;
    },

    drawText(x, y, text, style) {
        if (this.autoRound) {
            x = Math.round(x);
            y = Math.round(y);
        }

        var context = this.context;
        if (style.strokeThickness) {
            style.syncShadow(context, style.shadowStroke);
            context.strokeText(text, x, y);
        }

        if (style.color && (style.color !== 'none')) {
            style.syncShadow(context, style.shadowFill);
            context.fillText(text, x, y);
        }
    },

    drawImage(x, y, imgKey, style) {
        var imageManager = this.parent.imageManager;
        var imgData = imageManager.get(imgKey);
        var frame = imageManager.getFrame(imgKey);

        x += imgData.left;
        y += - this.startYOffset + imgData.y;
        if (this.autoRound) {
            x = Math.round(x);
            y = Math.round(y);
        }

        var context = this.context;
        context.drawImage(
            frame.source.image,
            frame.cutX, frame.cutY, frame.cutWidth, frame.cutHeight,
            x, y, imgData.width, imgData.height
        );
    }

});
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/pool.js + 1 modules
var pool = __webpack_require__(158);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/const.js
var textbase_const = __webpack_require__(143);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/penmanger/Pen.js


const GetValue = Phaser.Utils.Objects.GetValue;
const NO_NEWLINE = textbase_const["a" /* default */].NO_NEWLINE;
const RAW_NEWLINE = textbase_const["a" /* default */].RAW_NEWLINE;

class Pen {
    constructor(config) {
        this.prop = {};
        this.resetFromJSON(config);
    }

    resetFromJSON(o) { // (txt, x, y, width, prop, newLineMode, startIndex)
        this.text = GetValue(o, 'text', '');
        this.x = GetValue(o, 'x', 0);
        this.y = GetValue(o, 'y', 0);
        this.width = GetValue(o, 'width', 0);

        var prop = GetValue(o, 'prop', null);
        if (prop === null) {
            prop = {};
        }
        this.prop = prop;
        this.newLineMode = GetValue(o, 'newLineMode', 0);
        this.startIndex = GetValue(o, 'startIndex', 0);
    }

    get plainText() {
        var txt = this.text
        if (this.newLineMode === RAW_NEWLINE) {
            txt += "\n";
        }

        return txt;
    }

    get wrapText() {
        var txt = this.text;
        if (this.newLineMode !== NO_NEWLINE) {
            txt += "\n";
        }

        return txt;
    }

    get rawTextLength() {
        var len = this.text.length;
        if (this.newLineMode === RAW_NEWLINE) {
            len += 1;
        }
        return len;
    }

    get endIndex() {
        return this.startIndex + this.rawTextLength;
    }

    get lastX() {
        return this.x + this.width;
    }

    get isTextPen() {
        return (this.text !== '');
    }

    get isImagePen() {
        return !!this.prop.img;
    }

    get hasAreaMarker() {
        return !!this.prop.area;
    }
};

/* harmony default export */ var penmanger_Pen = (Pen);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/Clone.js
var Clone = __webpack_require__(218);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/penmanger/PenManager.js






const GetFastValue = Phaser.Utils.Objects.GetFastValue;
const PenManager_NO_NEWLINE = textbase_const["a" /* default */].NO_NEWLINE;
const WRAPPED_NEWLINE = textbase_const["a" /* default */].WRAPPED_NEWLINE;

var PensPool = new pool["a" /* default */](); // default pens pool
var LinesPool = new pool["a" /* default */](); // default lines pool
class PenManager_PenManager {
    constructor(config) {
        this.pens = []; // all pens
        this.lines = []; // pens in lines [ [],[],[],.. ]
        this.maxLinesWidth = undefined;

        this.PensPool = GetFastValue(config, 'pensPool', PensPool);
        this.LinesPool = GetFastValue(config, 'linesPool', LinesPool);
        this.tagToText = GetFastValue(config, 'tagToText', NOOP["a" /* default */]);
        this.tagToTextScope = GetFastValue(config, 'tagToTextScope', undefined);
    }

    destroy() {
        this.freePens();
        this.tagToText = undefined;
        this.tagToTextScope = undefined;
    }

    freePens() {
        for (var i = 0, len = this.lines.length; i < len; i++)
            this.lines[i].length = 0;

        this.PensPool.pushMultiple(this.pens);
        this.LinesPool.pushMultiple(this.lines);
        this.maxLinesWidth = undefined;
    }

    addTextPen(text, x, y, width, prop, newLineMode) {
        var pen = this.PensPool.pop();
        if (pen == null) {
            pen = new penmanger_Pen();
        }
        PEN_CONFIG.text = text;
        PEN_CONFIG.x = x;
        PEN_CONFIG.y = y;
        PEN_CONFIG.width = width;
        PEN_CONFIG.prop = prop;
        PEN_CONFIG.newLineMode = newLineMode;
        pen.resetFromJSON(PEN_CONFIG);
        this.addPen(pen);
        return this;
    }

    addImagePen(x, y, width, prop) {
        this.addTextPen('', x, y, width, prop, PenManager_NO_NEWLINE);
        return this;
    }

    addNewLinePen() {
        var previousPen = this.lastPen;
        var x = (previousPen) ? previousPen.lastX : 0;
        var y = (previousPen) ? previousPen.y : 0;
        var prop = (previousPen) ? Object(Clone["a" /* default */])(previousPen.prop) : null;
        this.addTextPen('', x, y, 0, prop, WRAPPED_NEWLINE);
        return this;
    }

    addPen(pen) {
        var previousPen = this.lastPen;
        if (previousPen == null) {
            pen.startIndex = 0;
        } else {
            pen.startIndex = previousPen.endIndex;
        }
        this.pens.push(pen);

        // maintan lines
        var line = this.lastLine;
        if (line == null) {
            line = this.LinesPool.pop() || [];
            this.lines.push(line);
        }
        line.push(pen);

        // new line, add an empty line
        if (pen.newLineMode !== PenManager_NO_NEWLINE) {
            line = this.LinesPool.pop() || [];
            this.lines.push(line);
        }
        this.maxLinesWidth = undefined;
    }

    clone(targetPenManager) {
        if (targetPenManager == null)
            targetPenManager = new PenManager_PenManager();

        targetPenManager.freePens();

        for (var li = 0, llen = this.lines.length; li < llen; li++) {
            var pens = this.lines[li];
            for (var pi = 0, plen = pens.length; pi < plen; pi++) {
                var pen = pens[pi];
                targetPenManager.addPen(
                    pen.text,
                    pen.x,
                    pen.y,
                    pen.width,
                    Object(Clone["a" /* default */])(pen.prop),
                    pen.newLineMode
                );
            }
        }

        return targetPenManager;
    }

    get lastPen() {
        return this.pens[this.pens.length - 1];
    }

    get lastLine() {
        return this.lines[this.lines.length - 1];
    }

    getLineStartIndex(i) {
        if (i >= this.lines.length) {
            return this.getLineEndIndex(i);
        } else {
            var line = this.lines[i];
            return (line && line[0]) ? line[0].startIndex : 0;
        }
    }

    getLineEndIndex(i) {
        if (i >= this.lines.length) {
            i = this.lines.length - 1;
        }
        var li, hasLastPen = false,
            line;
        for (li = i; li >= 0; li--) {
            line = this.lines[li];
            hasLastPen = (line != null) && (line.length > 0);
            if (hasLastPen) {
                break;
            }
        }
        if (!hasLastPen) {
            return 0;
        }

        var lastPen = line[line.length - 1];
        return lastPen.endIndex;
    }

    getLineWidth(i) {
        var line = this.lines[i];
        if (!line) {
            return 0;
        }

        var lastPen = line[line.length - 1];
        if (lastPen == null) {
            return 0;
        }

        var lineWidth = lastPen.lastX; // start from 0
        return lineWidth;
    }

    getMaxLineWidth() {
        if (this.maxLinesWidth !== undefined) {
            return this.maxLinesWidth;
        }
        var w, maxW = 0;
        for (var i = 0, len = this.lines.length; i < len; i++) {
            w = this.getLineWidth(i);
            if (w > maxW) {
                maxW = w;
            }
        }
        this.maxLinesWidth = maxW;
        return maxW;
    }

    getLineWidths() {
        var result = [];
        for (var i = 0, len = this.lines.length; i < len; i++) {
            result.push(this.getLineWidth(i));
        }
        return result;
    }

    get linesCount() {
        return this.lines.length;
    }

    get plainText() {
        var txt = "",
            pens = this.pens;
        for (var i = 0, len = pens.length; i < len; i++) {
            txt += pens[i].plainText;
        }

        return txt;
    }

    get rawTextLength() {
        var l = 0,
            pens = this.pens;
        for (var i = 0, len = this.pens.length; i < len; i++) {
            l += pens[i].rawTextLength;
        }

        return l;
    }

    getSliceTagText(start, end, wrap) {
        if (start === undefined) {
            start = 0;
        }
        if (end === undefined) {
            var lastPen = this.lastPen;
            if (lastPen == null) {
                return "";
            }

            end = lastPen.endIndex;
        }
        if (wrap === undefined) {
            wrap = false;
        }

        var txt = "",
            formatTxt,
            pen, penTxt, penStartIdx, penEndIdx, isInRange;
        var currentProp, previousProp;
        for (var i = 0, len = this.pens.length; i < len; i++) {
            pen = this.pens[i];
            penEndIdx = pen.endIndex;
            if (penEndIdx <= start) {
                continue;
            }
            pen = this.pens[i];
            penTxt = (!wrap) ? pen.plainText : pen.wrapText;
            currentProp = pen.prop;
            penStartIdx = pen.startIndex;

            isInRange = (penStartIdx >= start) && (penEndIdx <= end);
            if (!isInRange) {
                penTxt = penTxt.substring(start - penStartIdx, end - penStartIdx);
            }

            if (this.tagToTextScope) {
                txt += this.tagToText.call(this.tagToTextScope, penTxt, currentProp, previousProp);
            } else {
                txt += this.tagToText(penTxt, currentProp, previousProp);
            }

            previousProp = currentProp;
            if (penEndIdx >= end) {
                break;
            }
        }

        return txt;
    }
};

var PEN_CONFIG = {};

/* harmony default export */ var penmanger_PenManager = (PenManager_PenManager);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/hitareamanager/HitAreaManager.js


const Rectangle = Phaser.Geom.Rectangle;

var RectanglePool = new pool["a" /* default */]();
class HitAreaManager {
    constructor() {
        this.hitAreas = [];
    }

    destroy() {
        this.clear();
    }

    clear() {
        RectanglePool.pushMultiple(this.hitAreas);
        return this;
    }

    add(key, x, y, width, height) {
        var rectangle = RectanglePool.pop();
        if (rectangle === null) {
            rectangle = new Rectangle(x, y, width, height);
        } else {
            rectangle.setTo(x, y, width, height);
        }
        rectangle.key = key;
        this.hitAreas.push(rectangle);
        return this;
    }

    contains(x, y) {
        var hitAreas = this.hitAreas, hitArea;
        for (var i = 0, cnt = hitAreas.length; i < cnt; i++) {
            hitArea = hitAreas[i];
            if (hitArea.contains(x, y)) {
                return hitArea.key;
            }
        }
        return false;
    }

    drawBounds(graphics, color, parent) {
        if (color === undefined) {
            color = 0xffffff;
        }

        if (parent) {
            graphics
                .save()
                .scaleCanvas(parent.scaleX, parent.scaleY)
                .rotateCanvas(parent.rotation)
                .translateCanvas(parent.x, parent.y)
        }

        var hitAreas = this.hitAreas, hitArea;
        for (var i = 0, cnt = hitAreas.length; i < cnt; i++) {
            hitArea = hitAreas[i];
            graphics.lineStyle(1, color).strokeRect(hitArea.x, hitArea.y, hitArea.width, hitArea.height);
        }

        if (parent) {
            graphics
                .restore()
        }
        return this;
    }
}
/* harmony default export */ var hitareamanager_HitAreaManager = (HitAreaManager);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/canvastext/SetInteractive.js
var SetInteractive = function () {
    this.parent
        .on('pointerdown', function (pointer, localX, localY, event) {
            FireEvent.call(this, 'areadown', pointer, localX, localY);
        }, this)
        .on('pointerup', function (pointer, localX, localY, event) {
            FireEvent.call(this, 'areaup', pointer, localX, localY);
        }, this)
}

var FireEvent = function (eventName, pointer, localX, localY) {
    var key = this.hitAreaManager.contains(localX, localY);
    if (key === false) {
        return;
    }
    this.parent.emit(`${eventName}-${key}`, pointer, localX, localY)
    this.parent.emit(eventName, key, pointer, localX, localY)
}
/* harmony default export */ var canvastext_SetInteractive = (SetInteractive);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/canvastext/WrapText.js



const WrapText_NO_NEWLINE = textbase_const["a" /* default */].NO_NEWLINE;
const WrapText_RAW_NEWLINE = textbase_const["a" /* default */].RAW_NEWLINE;
const WrapText_WRAPPED_NEWLINE = textbase_const["a" /* default */].WRAPPED_NEWLINE;
const NO_WRAP = textbase_const["a" /* default */].NO_WRAP;
const WORD_WRAP = textbase_const["a" /* default */].WORD_WRAP;
const CHAR_WRAP = textbase_const["a" /* default */].CHAR_WRAP;
const splitRegExp = textbase_const["a" /* default */].SPLITREGEXP;

var WRAP_RESULT = [];
var WrapText = function (text, getTextWidth, wrapMode, wrapWidth, offset) {
    if (wrapWidth <= 0) {
        wrapMode = NO_WRAP;
    }

    var retLines = WRAP_RESULT;
    WrapText_LinesPool.pushMultiple(retLines);

    if (!text || !text.length) {
        return retLines;
    }

    var lines = text.split(splitRegExp),
        line, remainWidth, isLaseLine, newLineMode;
    for (var i = 0, linesLen = lines.length; i < linesLen; i++) {
        line = lines[i];
        newLineMode = (i === (linesLen - 1)) ? WrapText_NO_NEWLINE : WrapText_RAW_NEWLINE;

        if (wrapMode === NO_WRAP) {
            var textWidth = getTextWidth(line);
            retLines.push(WrapText_LinesPool.newline(line, textWidth, newLineMode));
            continue;
        } else {
            if (i === 0) {
                remainWidth = wrapWidth - offset;
            } else {
                remainWidth = wrapWidth;
            }
        }

        // short string testing
        if (line.length <= 100) {
            var textWidth = getTextWidth(line);
            if (textWidth <= remainWidth) {
                retLines.push(WrapText_LinesPool.newline(line, textWidth, newLineMode));
                continue;
            }
        }

        // character mode
        var tokenArray;
        if (wrapMode === WORD_WRAP) {
            // word mode
            tokenArray = line.split(' ');
        } else {
            tokenArray = line;
        }
        var token;
        var curLineText = '',
            lineText = '',
            currLineWidth, lineWidth = 0;
        for (var j = 0, tokenLen = tokenArray.length; j < tokenLen; j++) {
            token = tokenArray[j];

            if (wrapMode === WORD_WRAP) {
                curLineText += token;

                if (j < (tokenLen - 1)) {
                    curLineText += ' ';
                }
            } else {
                curLineText += token;
            }

            currLineWidth = getTextWidth(curLineText);
            if (currLineWidth > remainWidth) {
                // new line
                if (j === 0) {
                    retLines.push(WrapText_LinesPool.newline('', 0, WrapText_WRAPPED_NEWLINE));
                } else {
                    retLines.push(WrapText_LinesPool.newline(lineText, lineWidth, WrapText_WRAPPED_NEWLINE));
                    curLineText = token;
                    if (wrapMode === WORD_WRAP) {
                        if (j < (tokenLen - 1)) {
                            curLineText += ' ';
                        }
                    }
                    currLineWidth = getTextWidth(curLineText);
                }

                remainWidth = wrapWidth;
            }

            lineText = curLineText;
            lineWidth = currLineWidth;
        } // for token in tokenArray

        // flush remain text
        retLines.push(WrapText_LinesPool.newline(lineText, lineWidth, newLineMode));

    } // for each line in lines

    return retLines;
};

var WrapText_LinesPool = new pool["a" /* default */]();
WrapText_LinesPool.newline = function (text, width, newLineMode) {
    var l = this.pop();
    if (l === null) {
        l = {};
    }
    l.text = text;
    l.width = width;
    l.newLineMode = newLineMode;
    return l;
};

/* harmony default export */ var canvastext_WrapText = (WrapText);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/canvastext/CanvasText.js








const CanvasText_GetValue = Phaser.Utils.Objects.GetValue;
const CanvasText_NO_WRAP = textbase_const["a" /* default */].NO_WRAP;
const CanvasText_NO_NEWLINE = textbase_const["a" /* default */].NO_NEWLINE;

class CanvasText_CanvasText {
    constructor(config) {
        this.parent = config.parent;
        this.context = CanvasText_GetValue(config, 'context', null);
        this.canvas = this.context.canvas;
        this.parser = CanvasText_GetValue(config, 'parser', null);
        this.defatultStyle = CanvasText_GetValue(config, 'style', null);
        this.autoRound = true;

        this.pensPool = CanvasText_GetValue(config, 'pensPool', null);
        this.penManager = this.newPenManager();
        this._tmpPenManager = null;

        this.hitAreaManager = new hitareamanager_HitAreaManager();

        var context = this.context;
        this.getTextWidth = function (text) {
            return context.measureText(text).width;
        }
    }

    destroy() {
        this.context = undefined;
        this.canvas = undefined;
        this.parser = undefined;
        this.defatultStyle = undefined;

        if (this.penManager) {
            this.penManager.destroy();
            this.penManager = undefined;
        }
        if (this._tmpPenManager) {
            this._tmpPenManager.destroy();
            this._tmpPenManager = undefined;
        }
        if (this.hitAreaManager) {
            this.hitAreaManager.destroy();
            this.hitAreaManager = undefined;
        }
    }

    updatePenManager(text, wrapMode, wrapWidth, lineHeight, penManager) {
        if (penManager === undefined) {
            penManager = this.penManager;
        }
        penManager.freePens();
        if (text === "") {
            return penManager;
        }

        var canvas = this.canvas;
        var context = this.context;

        var cursorX = 0,
            cursorY = 0;

        var plainText, curProp, curStyle;
        var match = this.parser.splitText(text),
            result, wrapLines;
        for (var i = 0, len = match.length; i < len; i++) {
            result = this.parser.tagTextToProp(match[i], curProp);
            plainText = result.plainText;
            curProp = result.prop;

            if (curProp.img) { // Image tag                
                var imgWidth = this.imageManager.getOuterWidth(curProp.img);
                if ((wrapWidth > 0) && (wrapMode !== CanvasText_NO_WRAP)) {  // Wrap mode
                    if (wrapWidth < (cursorX + imgWidth)) {
                        penManager.addNewLinePen();
                        cursorY += lineHeight;
                        cursorX = 0;
                    }
                }
                penManager.addImagePen(cursorX, cursorY, imgWidth, Object(Clone["a" /* default */])(curProp));
                cursorX += imgWidth;

            } else if (plainText !== '') {
                // wrap text to lines
                // Save the current context.
                this.context.save();
                curStyle = this.parser.propToContextStyle(
                    this.defatultStyle,
                    curProp
                );
                curStyle.buildFont();
                curStyle.syncFont(canvas, context);
                curStyle.syncStyle(canvas, context);
                wrapLines = canvastext_WrapText(plainText, this.getTextWidth, wrapMode, wrapWidth, cursorX);

                // add pens
                var n;
                for (var j = 0, jLen = wrapLines.length; j < jLen; j++) {
                    n = wrapLines[j];
                    penManager.addTextPen(n.text, cursorX, cursorY, n.width, Object(Clone["a" /* default */])(curProp), n.newLineMode);

                    if (n.newLineMode !== CanvasText_NO_NEWLINE) {
                        cursorX = 0;
                        cursorY += lineHeight;
                    } else {
                        cursorX += n.width;
                    }

                }
                this.context.restore();

            }

        }

        return penManager;
    }

    get startXOffset() {
        var defatultStyle = this.defatultStyle;
        return (defatultStyle.strokeThickness / 2);
    }

    get startYOffset() {
        var defatultStyle = this.defatultStyle;
        return (defatultStyle.strokeThickness / 2) + defatultStyle.metrics.ascent;
    }

    get lines() {
        return this.penManager.lines;
    }

    get desplayLinesCount() {
        var linesCount = this.penManager.linesCount,
            maxLines = this.defatultStyle.maxLines;
        if ((maxLines > 0) && (linesCount > maxLines)) {
            linesCount = maxLines;
        }
        return linesCount;
    }

    get linesWidth() {
        return this.penManager.getMaxLineWidth();
    }

    get linesHeight() {
        var linesCount = this.desplayLinesCount;
        var linesHeight = (this.defatultStyle.lineHeight * linesCount);
        if (linesCount > 0) {
            linesHeight -= this.defatultStyle.lineSpacing;
        }
        return linesHeight;
    }

    get imageManager() {
        return this.parent.imageManager;
    }

    newPenManager() {
        return new penmanger_PenManager({
            pensPool: this.pensPool,
            tagToText: this.parser.propToTagText,
            tagToTextScope: this.parser
        });
    }

    get tmpPenManager() {
        if (this._tmpPenManager === null) {
            this._tmpPenManager = this.newPenManager();
        }
        return this._tmpPenManager;
    }

    getPlainText(text, start, end) {
        var plainText;
        if (text == null) {
            plainText = this.penManager.plainText;
        } else {
            var m, match = this.parser.splitText(text, 1); // PLAINTEXTONLY_MODE
            plainText = "";
            for (var i = 0, len = match.length; i < len; i++) {
                plainText += match[i];
            }
        }

        if ((start != null) || (end != null)) {
            if (start == null) {
                start = 0;
            }
            if (end == null) {
                end = plainText.length;
            }
            plainText = plainText.substring(start, end);
        }

        return plainText;
    }

    getPenManager(text, retPenManager) {
        if (text === undefined) {
            return this.copyPenManager(retPenManager, this.penManager);
        }

        if (retPenManager === undefined) {
            retPenManager = this.newPenManager();
        }

        var defatultStyle = this.defatultStyle;
        this.updatePenManager(
            text,
            defatultStyle.wrapMode,
            defatultStyle.wrapWidth,
            defatultStyle.lineHeight,
            retPenManager
        );
        return retPenManager;
    }

    getText(text, start, end, wrap) {
        if (text == null) {
            return this.penManager.getSliceTagText(start, end, wrap);
        }

        var penManager = this.tmpPenManager;
        var defatultStyle = this.defatultStyle;
        this.updatePenManager(
            text,
            defatultStyle.wrapMode,
            defatultStyle.wrapWidth,
            defatultStyle.lineHeight,
            penManager
        );

        return penManager.getSliceTagText(start, end, wrap);
    }

    copyPenManager(ret, src) {
        if (src === undefined) {
            src = this.penManager;
        }
        return src.copy(ret);
    }

    getTextWidth(penManager) {
        if (penManager === undefined) {
            penManager = this.penManager;
        }

        return penManager.getMaxLineWidth();
    }

    getLastPen(penManager) {
        if (penManager === undefined) {
            penManager = this.penManager;
        }

        return penManager.lastPen;
    }
};

var methods = {
    setInteractive: canvastext_SetInteractive,
}

Object.assign(
    CanvasText_CanvasText.prototype,
    DrawMethods,
    methods
);

/* harmony default export */ var canvastext_CanvasText = (CanvasText_CanvasText);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/imagemanager/ImageManager.js
const ImageManager_GetValue = Phaser.Utils.Objects.GetValue;

class ImageManager {
    constructor(textureManager) {
        this.textureManager = textureManager;
        this.images = {};
    }

    add(key, config) {
        if (typeof (key) === 'string') {
            this._add(key, config);
        } else if (Array.isArray(key)) {
            var data = key;
            for (var i = 0, cnt = data.length; i < cnt; i++) {
                this._add(data[i]);
            }
        } else {
            var data = key;
            for (var key in data) {
                this._add(key, data[key]);
            }
        }
        return this;
    }

    _add(key, config) {
        if (config === undefined) {
            config = {
                key: key
            }
        }

        var textureKey = config.key, frameKey = config.frame;
        var width = config.width, height = config.height;

        if ((width === undefined) || (height === undefined)) {
            var frame = this.textureManager.getFrame(textureKey, frameKey);
            var frameWidth = (frame) ? frame.cutWidth : 0;
            var frameHeight = (frame) ? frame.cutHeight : 0;
            if ((width === undefined) && (height === undefined)) {
                width = frameWidth;
                height = frameHeight;
            } else if (width === undefined) {
                width = frameWidth * (height / frameHeight);
            } else if (height === undefined) {
                height = frameHeight * (width / frameWidth);
            }
        }

        this.images[key] = {
            key: textureKey,
            frame: frameKey,
            width: width,
            height: height,
            y: ImageManager_GetValue(config, 'y', 0),
            left: ImageManager_GetValue(config, 'left', 0),
            right: ImageManager_GetValue(config, 'right', 0)
        }
    }

    remove(key) {
        if (this.images.hasOwnProperty(key)) {
            delete this.images[key];
        }
        return this;
    }

    get(key) {
        if (!this.images.hasOwnProperty(key)) {
            if (this.textureManager.exists(key)) {
                this.add(key);
            }
        }
        return this.images[key];
    }

    getOuterWidth(key) {
        var data = this.get(key);
        return (data) ? (data.width + data.left + data.right) : 0;
    }

    getFrame(key) {
        var data = this.get(key);
        return (data) ? this.textureManager.getFrame(data.key, data.frame) : undefined;
    }

    hasTexture(key) {
        return !!this.getFrame(key);
    }
}
/* harmony default export */ var imagemanager_ImageManager = (ImageManager);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/imagemanager/GetGlobImageManager.js


var globImageManager;

/* harmony default export */ var GetGlobImageManager = (function(textureManager) {
    if (globImageManager === undefined) {
        globImageManager = new imagemanager_ImageManager(textureManager);
    }
    return globImageManager;
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/text/textbase/Text.js

 // extended





const AddToDOM = Phaser.DOM.AddToDOM;
const CanvasPool = Phaser.Display.Canvas.CanvasPool;
const GameObject = Phaser.GameObjects.GameObject;
const Text_GetValue = Phaser.Utils.Objects.GetValue;
const RemoveFromDOM = Phaser.DOM.RemoveFromDOM;
const SPLITREGEXP = textbase_const["a" /* default */].SPLITREGEXP;

var PensPools = {};

class Text_Text extends GameObject {
    constructor(scene, x, y, text, style, type, parser) {
        if (x === undefined) {
            x = 0;
        }
        if (y === undefined) {
            y = 0;
        }

        super(scene, type);

        this.renderer = scene.sys.game.renderer;

        this.setPosition(x, y);
        this.setOrigin(0, 0);
        this.initPipeline();

        this.canvas = CanvasPool.create(this);

        this.context = this.canvas.getContext('2d');

        if (style) {
            // Override align
            if (style.hasOwnProperty('align')) {
                var halign = style.align;
                delete style.align;
                style.halign = halign;
            }
        }
        this.style = new TextStyle["a" /* default */](this, style);

        this.autoRound = true;

        this._text = undefined;

        this.padding = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        };

        this.width = 1;

        this.height = 1;

        this.dirty = false;

        //  If resolution wasn't set, then we get it from the game config
        if (this.style.resolution === 0) {
            this.style.resolution = scene.sys.game.config.resolution;
        }

        this._crop = this.resetCropObject();

        //  Create a Texture for this Text object
        this.texture = scene.sys.textures.addCanvas(null, this.canvas, true);

        //  Get the frame
        this.frame = this.texture.get();

        //  Set the resolution
        this.frame.source.resolution = this.style.resolution;

        if (this.renderer && this.renderer.gl) {
            //  Clear the default 1x1 glTexture, as we override it later

            this.renderer.deleteTexture(this.frame.source.glTexture);

            this.frame.source.glTexture = null;
        }

        if (!PensPools.hasOwnProperty(type)) {
            PensPools[type] = new pool["a" /* default */]();
        }
        this.canvasText = new canvastext_CanvasText({
            parent: this,
            context: this.context,
            parser: parser,
            style: this.style,
            pensPool: PensPools[type]
        });

        //this.initRTL();

        if (style && style.padding) {
            this.setPadding(style.padding);
        }

        this.setText(text);

        scene.sys.game.events.on('contextrestored', function () {
            this.dirty = true;
        }, this);
    }

    set text(value) {
        this.setText(value);
    }
    get text() {
        return this._text;
    }

    initRTL() {
        if (!this.style.rtl) {
            return;
        }

        //  Here is where the crazy starts.
        //
        //  Due to browser implementation issues, you cannot fillText BiDi text to a canvas
        //  that is not part of the DOM. It just completely ignores the direction property.

        this.canvas.dir = 'rtl';

        //  Experimental atm, but one day ...
        this.context.direction = 'rtl';

        //  Add it to the DOM, but hidden within the parent canvas.
        this.canvas.style.display = 'none';

        AddToDOM(this.canvas, this.scene.sys.canvas);

        //  And finally we set the x origin
        this.originX = 1;
    }

    setText(value) {
        if (!value && value !== 0) {
            value = '';
        }

        if (Array.isArray(value)) {
            value = value.join('\n');
        }

        if (value !== this._text) {
            this._text = value.toString();

            this.updateText();
        }

        return this;
    }

    setStyle(style) {
        return this.style.setStyle(style);
    }

    setFont(font) {
        return this.style.setFont(font);
    }

    setFontFamily(family) {
        return this.style.setFontFamily(family);
    }

    setFontSize(size) {
        return this.style.setFontSize(size);
    }

    setFontStyle(style) {
        return this.style.setFontStyle(style);
    }

    setFixedSize(width, height) {
        return this.style.setFixedSize(width, height);
    }

    setBackgroundColor(color) {
        return this.style.setBackgroundColor(color);
    }

    setFill(color) {
        return this.style.setFill(color);
    }

    setColor(color) {
        return this.style.setColor(color);
    }

    setStroke(color, thickness) {
        return this.style.setStroke(color, thickness);
    }

    setShadow(x, y, color, blur, shadowStroke, shadowFill) {
        return this.style.setShadow(x, y, color, blur, shadowStroke, shadowFill);
    }

    setShadowOffset(x, y) {
        return this.style.setShadowOffset(x, y);
    }

    setShadowColor(color) {
        return this.style.setShadowColor(color);
    }

    setShadowBlur(blur) {
        return this.style.setShadowBlur(blur);
    }

    setShadowStroke(enabled) {
        return this.style.setShadowStroke(enabled);
    }

    setShadowFill(enabled) {
        return this.style.setShadowFill(enabled);
    }

    setWrapMode(mode) {
        return this.style.setWrapMode(mode);
    }

    setWrapWidth(width) {
        return this.style.setWrapWidth(width);
    }

    setAlign(align) {
        return this.style.setHAlign(align);
    }

    setLineSpacing(value) {
        return this.style.setLineSpacing(value);
    }

    setPadding(left, top, right, bottom) {
        if (typeof left === 'object') {
            var config = left;

            //  If they specify x and/or y this applies to all
            var x = Text_GetValue(config, 'x', null);

            if (x !== null) {
                left = x;
                right = x;
            } else {
                left = Text_GetValue(config, 'left', 0);
                right = Text_GetValue(config, 'right', left);
            }

            var y = Text_GetValue(config, 'y', null);

            if (y !== null) {
                top = y;
                bottom = y;
            } else {
                top = Text_GetValue(config, 'top', 0);
                bottom = Text_GetValue(config, 'bottom', top);
            }
        } else {
            if (left === undefined) {
                left = 0;
            }
            if (top === undefined) {
                top = left;
            }
            if (right === undefined) {
                right = left;
            }
            if (bottom === undefined) {
                bottom = top;
            }
        }

        this.padding.left = left;
        this.padding.top = top;
        this.padding.right = right;
        this.padding.bottom = bottom;

        return this.updateText(false);
    }

    setResolution(value) {
        return this.style.setResolution(value);
    }

    setMaxLines(max) {
        return this.style.setMaxLines(max);
    }

    updateText(runWrap) {
        if (runWrap === undefined) {
            runWrap = true;
        }
        var canvasText = this.canvasText;

        // wrap text to pens
        var style = this.style;
        if (runWrap) {
            canvasText.updatePenManager(
                this._text,
                style.wrapMode,
                style.wrapWidth,
                style.lineHeight
            );
        }

        // resize
        var padding = this.padding;
        var textWidth, textHeight;
        if (style.fixedWidth === 0) {
            this.width = canvasText.linesWidth + padding.left + padding.right;
            textWidth = canvasText.linesWidth;
        }
        else {
            this.width = style.fixedWidth;
            textWidth = this.width - padding.left - padding.right;
            if (textWidth < canvasText.linesWidth) {
                textWidth = canvasText.linesWidth;
            }
        }
        if (style.fixedHeight === 0) {
            this.height = canvasText.linesHeight + padding.top + padding.bottom;
            textHeight = canvasText.linesHeight;
        }
        else {
            this.height = style.fixedHeight;
            textHeight = this.height - padding.top - padding.bottom;
            if (textHeight < canvasText.linesHeight) {
                textHeight = canvasText.linesHeight;
            }
        }

        var w = this.width;
        var h = this.height;

        this.updateDisplayOrigin();

        var resolution = style.resolution;
        w *= resolution;
        h *= resolution;

        w = Math.max(Math.ceil(w), 1);
        h = Math.max(Math.ceil(h), 1);

        var canvas = this.canvas;
        var context = this.context;
        if (canvas.width !== w || canvas.height !== h) {
            canvas.width = w;
            canvas.height = h;
            this.frame.setSize(w, h);
        } else {
            context.clearRect(0, 0, w, h);
        }

        context.save();
        context.scale(resolution, resolution);

        // draw
        canvasText.draw(
            padding.left,
            padding.top,
            textWidth,
            textHeight
        );

        context.restore();

        if (this.renderer.gl) {
            this.frame.source.glTexture = this.renderer.canvasToTexture(canvas, this.frame.source.glTexture, true);
            this.frame.glTexture = this.frame.source.glTexture;
        }

        this.dirty = true;

        var input = this.input;

        if (input && !input.customHitArea) {
            input.hitArea.width = this.width;
            input.hitArea.height = this.height;
        }

        return this;
    }

    getTextMetrics() {
        return this.style.getTextMetrics();
    }

    toJSON() {
        var out = Components.ToJSON(this);

        //  Extra Text data is added here

        var data = {
            autoRound: this.autoRound,
            text: this._text,
            style: this.style.toJSON(),
            resolution: this.resolution,
            padding: {
                left: this.padding.left,
                right: this.padding.right,
                top: this.padding.top,
                bottom: this.padding.bottom
            }
        };

        out.data = data;

        return out;
    }

    preDestroy() {
        if (this.style.rtl) {
            RemoveFromDOM(this.canvas);
        }

        CanvasPool.remove(this.canvas);
        this.canvasText.destroy();
    }

    setInteractive(shape, callback, dropZone) {
        GameObject.prototype.setInteractive.call(this, shape, callback, dropZone);
        this.canvasText.setInteractive();
        return this;
    }

    getWrappedText(text, start, end) {
        text = this.canvasText.getText(text, start, end, true);
        return text.split(SPLITREGEXP);
    }

    getPlainText(text, start, end) {
        return this.canvasText.getPlainText(text, start, end);
    }

    getText(text, start, end) {
        return this.canvasText.getText(text, start, end, false);
    }

    getSubString(text, start, end) {
        return this.getText(text, start, end);
    }

    copyPenManager(penManager) {
        return this.canvasText.copyPenManager(penManager);
    }

    getPenManager(text, penManager) {
        return this.canvasText.getPenManager(text, penManager);
    }

    setSize(width, height) {
        return this.setFixedSize(width, height);
    }

    resize(width, height) {
        return this.setFixedSize(width, height);
    }

    set lineSpacing(value) {
        this.setLineSpacing(value);
    }
    get lineSpacing() {
        return this.style.lineSpacing;
    }

    get imageManager() {
        return GetGlobImageManager(this.scene.textures);
    }

    addImage(key, config) {
        this.imageManager.add(key, config);
        return this;
    }

    drawAreaBounds(graphics, color) {
        this.canvasText.hitAreaManager.drawBounds(graphics, color, this);
        return this;
    }
}

const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(Text_Text,
    [
        Components.Alpha,
        Components.BlendMode,
        Components.ComputedSize,
        Components.Crop,
        Components.Depth,
        Components.Flip,
        Components.GetBounds,
        Components.Mask,
        Components.Origin,
        Components.Pipeline,
        Components.ScrollFactor,
        Components.Tint,
        Components.Transform,
        Components.Visible,
        Render
    ]
);

/* harmony default export */ var textbase_Text = __webpack_exports__["a"] = (Text_Text);

/***/ }),
/* 387 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/canvas/render/WebGLRenderer.js
// copy from Phaser.GameObjects.Text

const Utils = Phaser.Renderer.WebGL.Utils;

var WebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {
    if (src.dirty) {
        src.updateTexture();
        src.dirty = false;
    }

    if ((src.width === 0) || (src.height === 0)) {
        return;
    }

    var frame = src.frame;
    var width = frame.width;
    var height = frame.height;
    var getTint = Utils.getTintAppendFloatAlpha;

    this.pipeline.batchTexture(
        src,
        frame.glTexture,
        width, height,
        src.x, src.y,
        width / src.resolution, height / src.resolution,
        src.scaleX, src.scaleY,
        src.rotation,
        src.flipX, src.flipY,
        src.scrollFactorX, src.scrollFactorY,
        src.displayOriginX, src.displayOriginY,
        0, 0, width, height,
        getTint(src._tintTL, camera.alpha * src._alphaTL),
        getTint(src._tintTR, camera.alpha * src._alphaTR),
        getTint(src._tintBL, camera.alpha * src._alphaBL),
        getTint(src._tintBR, camera.alpha * src._alphaBR),
        (src._isTinted && src.tintFill),
        0, 0,
        camera,
        parentMatrix
    );
};

/* harmony default export */ var render_WebGLRenderer = (WebGLRenderer);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/canvas/render/CanvasRenderer.js
// copy from Phaser.GameObjects.Text

var CanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {
    if ((src.width === 0) || (src.height === 0)) {
        return;
    }
    renderer.batchSprite(src, src.frame, camera, parentMatrix);
};

/* harmony default export */ var render_CanvasRenderer = (CanvasRenderer);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/NOOP.js
var NOOP = __webpack_require__(141);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/canvas/render/Render.js




var renderWebGL = NOOP["a" /* default */];
var renderCanvas = NOOP["a" /* default */];

if (true) {
    renderWebGL = render_WebGLRenderer;
}

if (true) {
    renderCanvas = render_CanvasRenderer;
}

/* harmony default export */ var Render = ({
    renderWebGL: renderWebGL,
    renderCanvas: renderCanvas

});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/canvas/CanvasMethods.js
const Color = Phaser.Display.Color;

/* harmony default export */ var CanvasMethods = ({
    clear() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.dirty = true;
        return this;
    },

    fill(color) {
        this.context.fillStyle = color;
        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
        this.dirty = true;
        return this;
    },

    getPixel(x, y, out) {
        if (out === undefined) {
            out = new Color();
        }
        var rgb = this.context.getImageData(x, y, 1, 1);
        out.setTo(rgb.data[0], rgb.data[1], rgb.data[2], rgb.data[3])
        return out;
    },

    setPixel(x, y, r, g, b, a) {
        if (typeof (r) !== 'number') {
            var color = r;
            r = color.red;
            g = color.green;
            b = color.blue;
            a = color.alpha;
        }

        if (a === undefined) {
            a = ((r !== 0) || (g !== 0) || (b !== 0)) ? 255 : 0;
        }

        var imgData = this.context.createImageData(1, 1);
        imgData.data[0] = r;
        imgData.data[1] = g;
        imgData.data[2] = b;
        imgData.data[3] = a;
        this.context.putImageData(imgData, x, y);
        this.dirty = true;
        return this;
    }
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/canvas/TextureMethods.js
/* harmony default export */ var TextureMethods = ({
    updateTexture(callback, scope) {
        if (callback) {
            if (scope) {
                callback.call(scope, this.canvas, this.context);
            } else {
                callback(this.canvas, this.context);
            }
        }

        if ((this.canvas.width !== this.frame.width) || (this.canvas.height !== this.frame.height)) {
            this.frame.setSize(this.canvas.width, this.canvas.height);
        }
        if (this.renderer.gl) {
            this.frame.source.glTexture = this.renderer.canvasToTexture(this.canvas, this.frame.source.glTexture, true);
            this.frame.glTexture = this.frame.source.glTexture;
        }
        this.dirty = false;

        var input = this.input;
        if (input && !input.customHitArea) {
            input.hitArea.width = this.width;
            input.hitArea.height = this.height;
        }
        return this;
    },

    generateTexture(key, x, y, width, height) {
        var srcCanvas = this.canvas;
        var sys = this.scene.sys;
        var renderer = sys.game.renderer;
        var texture;

        if (x === undefined) {
            x = 0;
        }

        if (y === undefined) {
            y = 0;
        }

        if (width === undefined) {
            width = srcCanvas.width;
        } else {
            width *= this.resolution;
        }

        if (height === undefined) {
            height = srcCanvas.height;
        } else {
            height *= this.resolution;
        }


        if (sys.textures.exists(key)) {
            texture = sys.textures.get(key);
        } else {
            texture = sys.textures.createCanvas(key, width, height);
        }

        var destCanvas = texture.getSourceImage();
        if (destCanvas.width !== width) {
            destCanvas.width = width;
        }
        if (destCanvas.height !== height) {
            destCanvas.height = height;
        }

        var destCtx = destCanvas.getContext('2d');
        destCtx.clearRect(0, 0, width, height);
        destCtx.drawImage(srcCanvas, x, y, width, height);
        if (renderer.gl && texture) {
            renderer.canvasToTexture(destCanvas, texture.source[0].glTexture, true, 0);
        }

        return this;
    },

    loadTexture(key, frame) {
        var textureFrame = this.scene.textures.getFrame(key, frame);
        if (!textureFrame) {
            return this;
        }

        if ((this.width !== textureFrame.cutWidth) || (this.height !== textureFrame.cutHeight)) {
            this.resize(textureFrame.cutWidth, textureFrame.cutHeight);
        } else {
            this.context.clearRect(0, 0, textureFrame.cutWidth, textureFrame.cutHeight);
        }
        this.context.drawImage(textureFrame.source.image,
            textureFrame.cutX, textureFrame.cutY, textureFrame.cutWidth, textureFrame.cutHeight,
            0, 0, this.canvas.width, this.canvas.height);
        this.dirty = true;
        return this;
    },

});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/canvas/Canvas.js




const CanvasPool = Phaser.Display.Canvas.CanvasPool;
const GameObject = Phaser.GameObjects.GameObject;

class Canvas extends GameObject {
    constructor(scene, x, y, width, height) {
        if (x === undefined) {
            x = 0;
        }
        if (y === undefined) {
            y = 0;
        }
        if (width === undefined) {
            width = 1;
        }
        if (height === undefined) {
            height = 1;
        }

        super(scene, 'rexCanvas');

        this.renderer = scene.sys.game.renderer;

        this.resolution = scene.sys.game.config.resolution;
        this.canvas = CanvasPool.create(this, this.resolution * width, this.resolution * height);
        this.context = this.canvas.getContext('2d');
        this.dirty = false;

        this.setPosition(x, y);
        this.setSize(width, height);
        this.setOrigin(0.5, 0.5);
        this.initPipeline();

        this._crop = this.resetCropObject();

        //  Create a Texture for this Text object
        this.texture = scene.sys.textures.addCanvas(null, this.canvas, true);

        //  Get the frame
        this.frame = this.texture.get();

        //  Set the resolution
        this.frame.source.resolution = this.resolution;

        if (this.renderer && this.renderer.gl) {
            //  Clear the default 1x1 glTexture, as we override it later
            this.renderer.deleteTexture(this.frame.source.glTexture);
            this.frame.source.glTexture = null;
        }

        this.dirty = true;

        scene.sys.game.events.on('contextrestored', function () {
            this.dirty = true;
        }, this);
    }

    getCanvas(readOnly) {
        if (!readOnly) {
            this.dirty = true;
        }
        return this.canvas;
    }

    needRedraw() {
        this.dirty = true;
        return this;
    }

    preDestroy() {
        CanvasPool.remove(this.canvas);
    }

    resize(width, height) {
        if ((this.width === width) && (this.height === height)) {
            return this;
        }

        this
            .setSize(width, height)
            .updateDisplayOrigin();

        width *= this.resolution;
        height *= this.resolution;
        width = Math.max(Math.ceil(width), 1);
        height = Math.max(Math.ceil(height), 1);
        this.canvas.width = width;
        this.canvas.height = height;

        this.dirty = true;
        return this;
    }
}

const Components = Phaser.GameObjects.Components;
Phaser.Class.mixin(Canvas,
    [
        Components.Alpha,
        Components.BlendMode,
        Components.ComputedSize,
        Components.Crop,
        Components.Depth,
        Components.Flip,
        Components.GetBounds,
        Components.Mask,
        Components.Origin,
        Components.Pipeline,
        Components.ScrollFactor,
        Components.Tint,
        Components.Transform,
        Components.Visible,
        Render,
        CanvasMethods,
        TextureMethods,
    ]
);

/* harmony default export */ var canvas_Canvas = __webpack_exports__["a"] = (Canvas);

/***/ }),
/* 388 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ decorate_room_DecorateRoom; });

// EXTERNAL MODULE: ./src/rooms/cameras/viewblock.manager.ts + 1 modules
var viewblock_manager = __webpack_require__(393);

// EXTERNAL MODULE: ./src/rooms/cameras/cameras.manager.ts + 1 modules
var cameras_manager = __webpack_require__(326);

// EXTERNAL MODULE: ./src/rooms/layer/layer.manager.ts + 1 modules
var layer_manager = __webpack_require__(325);

// EXTERNAL MODULE: ./src/utils/position45.ts
var position45 = __webpack_require__(139);

// EXTERNAL MODULE: ./node_modules/pixelpai_proto/protocols.js
var protocols = __webpack_require__(2);

// EXTERNAL MODULE: ./src/utils/pos.ts
var utils_pos = __webpack_require__(111);

// EXTERNAL MODULE: ./node_modules/net-socket-packet/dist/index.js
var dist = __webpack_require__(103);

// EXTERNAL MODULE: ./src/scenes/loading.ts
var loading = __webpack_require__(147);

// EXTERNAL MODULE: ./src/scenes/play.ts
var play = __webpack_require__(163);

// EXTERNAL MODULE: ./src/utils/log.ts
var log = __webpack_require__(0);

// EXTERNAL MODULE: ./src/rooms/display/display.object.ts
var display_object = __webpack_require__(148);

// EXTERNAL MODULE: ./src/rooms/display/terrain.display.ts
var terrain_display = __webpack_require__(208);

// EXTERNAL MODULE: ./src/rooms/element/element.manager.ts
var element_manager = __webpack_require__(159);

// EXTERNAL MODULE: ./src/rooms/element/sprite.ts
var element_sprite = __webpack_require__(123);

// EXTERNAL MODULE: ./src/rooms/element/element.ts + 7 modules
var element_element = __webpack_require__(117);

// CONCATENATED MODULE: ./src/rooms/element/decorate.element.manager.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var NodeType = protocols["op_def"].NodeType;
var decorate_element_manager_DecorateElementManager = /** @class */ (function (_super) {
    __extends(DecorateElementManager, _super);
    function DecorateElementManager(room) {
        return _super.call(this, room) || this;
    }
    DecorateElementManager.prototype.addMap = function (sprite) {
        var displayInfo = sprite.displayInfo;
        if (!displayInfo) {
            return;
        }
        if (this.mRoom.selectedSprite && this.mRoom.selectedSprite.id === sprite.id) {
            return;
        }
        var curAni = sprite.currentAnimation;
        var aniName = curAni.animationName;
        var flip = curAni.flip;
        var collisionArea = displayInfo.getCollisionArea(aniName, flip);
        var walkArea = displayInfo.getWalkableArea(aniName, flip);
        var origin = displayInfo.getOriginPoint(aniName, flip);
        var rows = collisionArea.length;
        var cols = collisionArea[0].length;
        var pos = this.mRoom.transformToMini45(sprite.pos);
        if (!walkArea) {
            walkArea = new Array(rows);
            for (var i = 0; i < rows; i++) {
                walkArea[i] = new Array(cols).fill(0);
            }
        }
        var row = 0;
        var col = 0;
        for (var i = 0; i < rows; i++) {
            row = pos.y + i - origin.x;
            for (var j = 0; j < cols; j++) {
                if (collisionArea[i][j] === 1 && (i >= walkArea.length || j >= walkArea[i].length || walkArea[i][j] === 0)) {
                    col = pos.x + j - origin.y;
                    if (row >= 0 && row < this.mMap.length && col >= 0 && col < this.mMap[row].length) {
                        this.mMap[row][col] = 0;
                    }
                }
            }
        }
    };
    DecorateElementManager.prototype.removeMap = function (sprite) {
        var displayInfo = sprite.displayInfo;
        if (!displayInfo) {
            return;
        }
        var curAni = sprite.currentAnimation;
        var aniName = curAni.animationName;
        var flip = curAni.flip;
        var collisionArea = displayInfo.getCollisionArea(aniName, flip);
        var origin = displayInfo.getOriginPoint(aniName, flip);
        var rows = collisionArea.length;
        var cols = collisionArea[0].length;
        var pos = this.mRoom.transformToMini45(sprite.pos);
        var row = 0;
        var col = 0;
        for (var i = 0; i < rows; i++) {
            row = pos.y + i - origin.x;
            for (var j = 0; j < cols; j++) {
                col = pos.x + j - origin.y;
                if (collisionArea[i][j] === 1) {
                    if (row >= 0 && row < this.mMap.length && col >= 0 && col < this.mMap[row].length) {
                        this.mMap[pos.y + i - origin.x][pos.x + j - origin.y] = -1;
                    }
                }
            }
        }
    };
    DecorateElementManager.prototype._add = function (sprite, addMap) {
        if (addMap === undefined)
            addMap = true;
        var ele = this.mElements.get(sprite.id);
        if (ele) {
            ele.model = sprite;
        }
        else {
            ele = new element_element["b" /* Element */](sprite, this);
            ele.setInputEnable(element_element["c" /* InputEnable */].Enable);
        }
        // if (!ele) ele = new Element(sprite, this);
        if (addMap)
            this.addMap(sprite);
        this.mElements.set(ele.id || 0, ele);
        return ele;
    };
    DecorateElementManager.prototype.onSync = function (packet) {
        var content = packet.content;
        if (content.nodeType !== NodeType.ElementNodeType) {
            return;
        }
        var element = null;
        var sprites = content.sprites;
        for (var _i = 0, sprites_1 = sprites; _i < sprites_1.length; _i++) {
            var sprite = sprites_1[_i];
            element = this.get(sprite.id);
            if (element) {
                var sp = new element_sprite["a" /* Sprite */](sprite, content.nodeType);
                element.model = sp;
                this.addMap(sp);
            }
        }
    };
    Object.defineProperty(DecorateElementManager.prototype, "map", {
        get: function () {
            return this.mMap;
        },
        enumerable: false,
        configurable: true
    });
    return DecorateElementManager;
}(element_manager["a" /* ElementManager */]));


// EXTERNAL MODULE: ./src/const/MessageType.ts
var MessageType = __webpack_require__(109);

// EXTERNAL MODULE: ./src/rooms/terrain/terrain.manager.ts
var terrain_manager = __webpack_require__(207);

// CONCATENATED MODULE: ./src/rooms/terrain/decorate.terrain.manager.ts
var decorate_terrain_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var decorate_terrain_manager_DecorateTerrainManager = /** @class */ (function (_super) {
    decorate_terrain_manager_extends(DecorateTerrainManager, _super);
    function DecorateTerrainManager(roomService) {
        var _this = _super.call(this, roomService) || this;
        var miniSize = roomService.miniSize;
        _this.mMap = new Array(miniSize.cols);
        for (var i = 0; i < miniSize.rows; i++) {
            _this.mMap[i] = new Array(miniSize.rows).fill(0);
        }
        return _this;
    }
    DecorateTerrainManager.prototype.remove = function (id) {
        var terrain = _super.prototype.remove.call(this, id);
        if (terrain) {
            this.removeMap(terrain.model);
        }
        return terrain;
    };
    DecorateTerrainManager.prototype._add = function (sprite) {
        var terrain = _super.prototype._add.call(this, sprite);
        var displayInfo = sprite.displayInfo;
        if (displayInfo) {
            this.addMap(sprite);
        }
        return terrain;
    };
    DecorateTerrainManager.prototype.onSyncSprite = function (packet) {
        var content = packet.content;
        if (content.nodeType !== protocols["op_def"].NodeType.TerrainNodeType) {
            return;
        }
        var terrain = null;
        var sprites = content.sprites;
        for (var _i = 0, sprites_1 = sprites; _i < sprites_1.length; _i++) {
            var sprite = sprites_1[_i];
            terrain = this.get(sprite.id);
            if (terrain) {
                var sp = new element_sprite["a" /* Sprite */](sprite, content.nodeType);
                terrain.model = sp;
                if (sp.displayInfo) {
                    this.addMap(sp);
                }
                // terrain.setRenderable(true);
            }
        }
    };
    DecorateTerrainManager.prototype.addMap = function (sprite) {
        this.setMap(sprite, 1);
    };
    DecorateTerrainManager.prototype.removeMap = function (sprite) {
        this.setMap(sprite, 0);
    };
    DecorateTerrainManager.prototype.setMap = function (sprite, type) {
        var displayInfo = sprite.displayInfo;
        if (!displayInfo) {
            return;
        }
        var curAni = sprite.currentAnimation;
        var aniName = curAni.animationName;
        var flip = curAni.flip;
        var collisionArea = displayInfo.getCollisionArea(aniName, flip);
        var walkArea = displayInfo.getWalkableArea(aniName, flip);
        var origin = displayInfo.getOriginPoint(aniName, flip);
        var rows = collisionArea.length;
        var cols = collisionArea[0].length;
        var hasCollisionArea = true;
        if (rows === 1 && cols === 1) {
            rows = 2;
            cols = 2;
            hasCollisionArea = false;
        }
        var pos = sprite.pos;
        var _x = 0;
        var _y = 0;
        for (var i = 0; i < rows; i++) {
            _x = pos.x + i - origin.x;
            for (var j = 0; j < cols; j++) {
                if ((!hasCollisionArea) || collisionArea[i][j] === 1 && walkArea[i][j] === 1) {
                    _y = pos.y + j - origin.y;
                    if (_x >= this.mMap.length || _y >= this.mMap[_x].length) {
                        continue;
                    }
                    this.mMap[pos.x + i - origin.x][pos.y + j - origin.y] = type;
                }
            }
        }
    };
    return DecorateTerrainManager;
}(terrain_manager["a" /* TerrainManager */]));


// EXTERNAL MODULE: ./src/rooms/display/frames.model.ts
var frames_model = __webpack_require__(162);

// EXTERNAL MODULE: ./src/rooms/display/animation.ts
var display_animation = __webpack_require__(204);

// CONCATENATED MODULE: ./src/rooms/decorate/spawn.point.ts




var spawn_point_SpawnPoint = /** @class */ (function () {
    function SpawnPoint() {
        this.id = 100;
        this.nodeType = protocols["op_def"].NodeType.SpawnPointType;
        this.pos = new utils_pos["a" /* Pos */]();
        this.displayInfo = new frames_model["a" /* FramesModel */]({
            id: 0,
            animations: {
                defaultAnimationName: "idle",
                display: this.display,
                animationData: [new display_animation["a" /* Animation */](this.animation)]
            }
        });
        this.currentAnimation = {
            animationName: "idle",
            flip: false
        };
        this.direction = 3;
        this.nickname = "出生点";
        this.alpha = 1;
    }
    SpawnPoint.prototype.newID = function () {
        throw new Error("Method not implemented.");
    };
    SpawnPoint.prototype.setPosition = function (x, y) {
        this.pos.x = x;
        this.pos.y = y;
    };
    SpawnPoint.prototype.turn = function () {
        throw new Error("Method not implemented.");
    };
    SpawnPoint.prototype.toSprite = function () {
        throw new Error("Method not implemented.");
    };
    SpawnPoint.prototype.updateAvatar = function (avatar) {
        throw new Error("Method not implemented.");
    };
    SpawnPoint.prototype.updateDisplay = function (display, animations, defAnimation) {
        throw new Error("Method not implemented.");
    };
    SpawnPoint.prototype.setAnimationName = function () {
        throw new Error("Method not implemented.");
    };
    SpawnPoint.prototype.setAnimationQueue = function () {
        throw new Error("Method not implemented.");
    };
    Object.defineProperty(SpawnPoint.prototype, "display", {
        get: function () {
            var display = protocols["op_gameconfig"].Display.create();
            display.texturePath =
                "pixelpai/SpawnPointNode/5cc42f6417553727db1d2bba/1/5cc42f6417553727db1d2bba.png";
            display.dataPath =
                "pixelpai/SpawnPointNode/5cc42f6417553727db1d2bba/1/5cc42f6417553727db1d2bba.json";
            return display;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpawnPoint.prototype, "animation", {
        get: function () {
            var animation = protocols["op_gameconfig"].Animation.create();
            animation.id = 10000;
            animation.name = "idle";
            animation.frameRate = 5;
            animation.collisionArea = "1,1&1,1";
            animation.loop = true;
            animation.baseLoc = "-30,-30";
            animation.originPoint = [0, 0];
            animation.frameName = ["switch_0027_3_01.png"];
            return animation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpawnPoint.prototype, "currentCollisionArea", {
        get: function () {
            return [[1, 1], [1, 1]];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpawnPoint.prototype, "currentWalkableArea", {
        get: function () {
            return [[0]];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpawnPoint.prototype, "currentCollisionPoint", {
        get: function () {
            return new Phaser.Geom.Point(0, 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpawnPoint.prototype, "hasInteractive", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    return SpawnPoint;
}());


// EXTERNAL MODULE: ./src/ui/decorate/decorate.manager.ts
var decorate_manager = __webpack_require__(209);

// CONCATENATED MODULE: ./src/rooms/decorate/selector.element.ts



var selector_element_SelectorElement = /** @class */ (function () {
    function SelectorElement(mElement) {
        this.mElement = mElement;
        this.mScene = this.mElement.scene;
        this.mRoomService = this.mElement.roomService;
        this.mDecorateManager = new decorate_manager["DecorateManager"](this.mScene, this.mRoomService);
        this.mDecorateManager.setElement(mElement);
        var display = mElement.getDisplay();
        if (!display.collisionArea) {
            display.once("initialized", function () {
                display.showRefernceArea();
            });
        }
        else {
            display.showRefernceArea();
        }
        this.mSelecting = true;
        this.mDecorateManager.on("moveElement", this.onMoveElementHandler, this);
        this.mRoomService.world.emitter.emit(MessageType["a" /* MessageType */].EDIT_PACKAGE_COLLAPSE);
        this.mRoomService.world.emitter.emit(MessageType["a" /* MessageType */].SELECTED_DECORATE_ELEMENT);
    }
    SelectorElement.prototype.turnElement = function () {
        if (!this.mElement) {
            return;
        }
        this.mElement.turn();
        this.checkCanPut();
    };
    SelectorElement.prototype.setDisplayPos = function (pos) {
        if (!this.mElement) {
            return;
        }
        this.mElement.setPosition(pos);
        this.checkCanPut();
    };
    SelectorElement.prototype.update = function (time, delta) {
        if (this.mElement) {
            var pos = this.mElement.getPosition();
            this.mDecorateManager.updatePos(pos.x, pos.y);
            this.checkCanPut();
        }
    };
    SelectorElement.prototype.clone = function () {
        if (!this.mElement) {
            return;
        }
        var sprite = this.mElement.model;
        var pos = sprite.pos;
        this.mSourceData = {
            x: pos.x,
            y: pos.y,
            z: pos.z,
            direction: sprite.direction
        };
    };
    SelectorElement.prototype.recover = function () {
        if (!this.mElement) {
            return;
        }
        if (this.mSourceData) {
            this.mElement.setAlpha(1);
            this.mElement.setPosition(new utils_pos["a" /* Pos */](this.mSourceData.x, this.mSourceData.y));
            this.mElement.setDirection(this.mSourceData.direction);
        }
    };
    SelectorElement.prototype.destroy = function () {
        if (this.mDecorateManager) {
            this.mDecorateManager.destroy();
        }
        if (this.mElement) {
            var display = this.mElement.getDisplay();
            if (display) {
                display.hideRefernceArea();
            }
        }
        this.mSourceData = undefined;
        this.mRoomService.world.emitter.emit(MessageType["a" /* MessageType */].EDIT_PACKAGE_EXPANED);
        this.mRoomService.world.emitter.emit(MessageType["a" /* MessageType */].CANCEL_DECORATE_ELEMENT);
    };
    SelectorElement.prototype.checkCanPut = function () {
        if (!this.mRoomService || !this.mElement) {
            return;
        }
        var sprite = this.mElement.model;
        var canPut = this.mRoomService.canPut(this.mElement.getPosition(), sprite.currentCollisionArea, sprite.currentCollisionPoint);
        if (canPut) {
            this.element.setAlpha(1);
        }
        else {
            this.element.setAlpha(0.6);
        }
        if (this.mDecorateManager) {
            this.mDecorateManager.canPut(canPut);
        }
    };
    SelectorElement.prototype.onMoveElementHandler = function (pos) {
        if (!pos) {
            return;
        }
        this.setDisplayPos(pos);
    };
    Object.defineProperty(SelectorElement.prototype, "selecting", {
        get: function () {
            return this.mSelecting;
        },
        set: function (val) {
            this.mSelecting = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectorElement.prototype, "element", {
        get: function () {
            return this.mElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectorElement.prototype, "root", {
        get: function () {
            return this.mSourceData;
        },
        enumerable: false,
        configurable: true
    });
    return SelectorElement;
}());


// CONCATENATED MODULE: ./src/rooms/decorate.room.ts
var decorate_room_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


















var decorate_room_DecorateRoom = /** @class */ (function (_super) {
    decorate_room_extends(DecorateRoom, _super);
    function DecorateRoom(manager) {
        var _this = _super.call(this) || this;
        // TODO clock sync
        _this.clockSyncComplete = true;
        _this.world = manager.world;
        _this.mScaleRatio = _this.world.scaleRatio;
        if (_this.connection) {
            _this.connection.addPacketListener(_this);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_SELECTED_SPRITE, _this.onSelectSpriteHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_GET_SPAWN_POINT, _this.onShowSpawnPointHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_ADD_SPRITE_BY_TYPE, _this.onAddSpriteHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_ADD_SINGLE_SPRITE_BY_TYPE, _this.onAddSingleSpriteHandler);
        }
        return _this;
    }
    DecorateRoom.prototype.enter = function (room) {
        var _this = this;
        // this.mID = room.id;
        this.mID = room.id;
        var rows = room.rows, cols = room.cols, tileWidth = room.tileWidth, tileHeight = room.tileHeight;
        this.mSize = {
            cols: room.cols,
            rows: room.rows,
            tileHeight: room.tileHeight,
            tileWidth: room.tileWidth,
            sceneWidth: (room.rows + room.cols) * (room.tileWidth / 2),
            sceneHeight: (room.rows + room.cols) * (room.tileHeight / 2)
        };
        rows *= 2;
        cols *= 2;
        tileWidth /= 2;
        tileHeight /= 2;
        this.mMiniSize = {
            cols: cols,
            rows: rows,
            tileHeight: tileHeight,
            tileWidth: tileWidth,
            sceneWidth: (rows + cols) * (tileWidth / 2),
            sceneHeight: (rows + cols) * (tileHeight / 2),
        };
        this.mMap = new Array(rows);
        for (var i = 0; i < rows; i++) {
            this.mMap[i] = new Array(cols).fill(0);
        }
        this.mCameraService = new cameras_manager["a" /* CamerasManager */](this);
        // if (!this.world.game.scene.getScene(LoadingScene.name))
        //     this.world.game.scene.add(LoadingScene.name, LoadingScene, false);
        // this.world.game.scene.start(LoadingScene.name, {
        //     world: this.world,
        //     room: this
        // });
        this.world.showLoading().then(function () {
            _this.completeLoad();
        });
    };
    DecorateRoom.prototype.addBlockObject = function (object) {
        if (this.mBlocks) {
            this.mBlocks.add(object);
        }
    };
    DecorateRoom.prototype.addMouseListen = function () {
    };
    DecorateRoom.prototype.addToGround = function (element) {
        this.mLayerManager.addToGround(element);
    };
    DecorateRoom.prototype.addToSceneUI = function (element) {
        this.mLayerManager.addToSceneToUI(element);
    };
    DecorateRoom.prototype.addToSurface = function (element) {
        this.mLayerManager.addToSurface(element);
    };
    DecorateRoom.prototype.addToUI = function (element) {
    };
    DecorateRoom.prototype.completeLoad = function () {
        this.world.game.scene.add(play["a" /* PlayScene */].name, play["a" /* PlayScene */], true, {
            room: this
        });
    };
    DecorateRoom.prototype.destroy = function () {
        if (this.mTerrainManager)
            this.mTerrainManager.destroy();
        if (this.mElementManager)
            this.mElementManager.destroy();
        if (this.mLayerManager)
            this.mLayerManager.destroy();
        if (this.mBlocks)
            this.mBlocks.destroy();
        this.removePointerMoveHandler();
        this.world.game.scene.remove(play["a" /* PlayScene */].name);
        this.world.emitter.off(MessageType["a" /* MessageType */].TURN_ELEMENT, this.onTurnElementHandler, this);
        this.world.emitter.off(MessageType["a" /* MessageType */].RECYCLE_ELEMENT, this.onRecycleHandler, this);
        this.world.emitter.off(MessageType["a" /* MessageType */].PUT_ELEMENT, this.onPutElement, this);
        this.world.emitter.off(MessageType["a" /* MessageType */].CANCEL_PUT, this.onCancelPutHandler, this);
        if (!this.mScene)
            return;
        this.mScene.input.off("pointerup", this.onPointerUpHandler, this);
        this.mScene.input.off("pointerdown", this.onPointerDownHandler, this);
        this.mScene.input.off("gameobjectdown", this.onGameobjectUpHandler, this);
    };
    DecorateRoom.prototype.now = function () {
        return 0;
    };
    DecorateRoom.prototype.pause = function () {
        if (this.mScene) {
            this.mScene.scene.pause();
        }
    };
    DecorateRoom.prototype.removeBlockObject = function (object) {
        if (this.mBlocks) {
            this.mBlocks.remove(object);
        }
    };
    DecorateRoom.prototype.requestActorMove = function (d, key) {
    };
    DecorateRoom.prototype.resume = function (name) {
        if (this.mScene) {
            this.mScene.scene.resume(name);
        }
    };
    DecorateRoom.prototype.startLoad = function () {
    };
    DecorateRoom.prototype.startPlay = function () {
        if (this.mLayerManager) {
            this.mLayerManager.destroy();
        }
        this.mScene = this.world.game.scene.getScene(play["a" /* PlayScene */].name);
        this.mLayerManager = new layer_manager["a" /* LayerManager */](this);
        this.mLayerManager.drawGrid(this);
        this.mTerrainManager = new decorate_terrain_manager_DecorateTerrainManager(this);
        this.mElementManager = new decorate_element_manager_DecorateElementManager(this);
        this.mBlocks = new viewblock_manager["a" /* ViewblockManager */](this.mCameraService);
        this.mBlocks.int(this.mSize);
        this.mScene.input.on("pointerup", this.onPointerUpHandler, this);
        this.mScene.input.on("pointerdown", this.onPointerDownHandler, this);
        this.mScene.input.on("gameobjectdown", this.onGameobjectUpHandler, this);
        // const mainCameras = this.mScene.cameras.main;
        var camera = this.scene.cameras.main;
        this.mCameraService.camera = camera;
        var zoom = Math.ceil(window.devicePixelRatio);
        this.mCameraService.setBounds(-camera.width >> 1, -camera.height >> 1, this.mSize.sceneWidth * zoom + camera.width, this.mSize.sceneHeight * zoom + camera.height);
        if (this.cameraPos) {
            this.mCameraService.scrollTargetPoint(this.cameraPos.x, this.cameraPos.y);
            this.mCameraService.syncCameraScroll();
        }
        this.world.changeRoom(this);
        var loadingScene = this.world.game.scene.getScene(loading["a" /* LoadingScene */].name);
        if (loadingScene)
            loadingScene.sleep();
        this.connection.send(new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_SCENE_CREATED));
        // this.mCameraService.centerCameas();
        if (this.world.uiManager) {
            this.world.uiManager.showDecorateUI();
        }
        this.world.emitter.on(MessageType["a" /* MessageType */].TURN_ELEMENT, this.onTurnElementHandler, this);
        this.world.emitter.on(MessageType["a" /* MessageType */].RECYCLE_ELEMENT, this.onRecycleHandler, this);
        this.world.emitter.on(MessageType["a" /* MessageType */].PUT_ELEMENT, this.onPutElement, this);
        this.world.emitter.on(MessageType["a" /* MessageType */].CANCEL_PUT, this.onCancelPutHandler, this);
    };
    DecorateRoom.prototype.transformTo45 = function (p) {
        if (!this.mSize) {
            log["a" /* Logger */].getInstance().error("position object is undefined");
            return;
        }
        return position45["a" /* Position45 */].transformTo45(p, this.mSize);
    };
    DecorateRoom.prototype.transformTo90 = function (p) {
        if (!this.mSize) {
            log["a" /* Logger */].getInstance().error("position object is undefined");
            return;
        }
        return position45["a" /* Position45 */].transformTo90(p, this.mSize);
    };
    DecorateRoom.prototype.transformToMini90 = function (p) {
        if (!this.mMiniSize) {
            log["a" /* Logger */].getInstance().error("position object is undefined");
            return;
        }
        return position45["a" /* Position45 */].transformTo90(p, this.mMiniSize);
    };
    DecorateRoom.prototype.transformToMini45 = function (p) {
        if (!this.mMiniSize) {
            log["a" /* Logger */].getInstance().error("position object is undefined");
            return;
        }
        return position45["a" /* Position45 */].transformTo45(p, this.mMiniSize);
    };
    DecorateRoom.prototype.update = function (time, delta) {
        if (this.mLayerManager) {
            this.mLayerManager.update(time, delta);
        }
        if (this.mSelectorElement) {
            this.mSelectorElement.update(time, delta);
        }
        if (this.mBlocks) {
            this.mBlocks.update(time, delta);
        }
    };
    DecorateRoom.prototype.updateBlockObject = function () {
    };
    DecorateRoom.prototype.resize = function (width, height) {
        this.layerManager.resize(width, height);
        this.mCameraService.resize(width, height);
    };
    DecorateRoom.prototype.transitionGrid = function (x, y) {
        var source = new utils_pos["a" /* Pos */](x, y);
        var pos = this.transformToMini45(source);
        return this.checkBound(pos);
    };
    DecorateRoom.prototype.addElements = function (sprites, nodeType) {
        if (nodeType === protocols["op_def"].NodeType.ElementNodeType) {
            this.mElementManager.add(sprites);
        }
        else if (nodeType === protocols["op_def"].NodeType.TerrainNodeType) {
            this.mTerrainManager.add(sprites);
        }
    };
    DecorateRoom.prototype.setEnterPos = function (x, y) {
        this.cameraPos = new utils_pos["a" /* Pos */](x, y);
    };
    /**
     * 边界检查
     * @param pos 45度坐标，
     * @param source 没有超出边界并不贴边就返回原始坐标
     */
    DecorateRoom.prototype.checkBound = function (pos, source) {
        var bound = new utils_pos["a" /* Pos */](pos.x, pos.y);
        var size = this.mMiniSize;
        if (pos.x < 0) {
            bound.x = 0;
        }
        else if (pos.x > size.cols) {
            bound.x = size.cols;
        }
        if (pos.y < 0) {
            bound.y = 0;
        }
        else if (pos.y > size.rows) {
            bound.y = size.rows;
        }
        if (bound.equal(pos) && source) {
            return source;
        }
        return this.transformToMini90(bound);
    };
    DecorateRoom.prototype.canPut = function (pos, collisionArea, origin) {
        if (!collisionArea || !origin) {
            return;
        }
        var pos45 = this.transformToMini45(pos);
        if (pos45.x < 0 || pos45.y < 0 || pos45.x > this.miniSize.rows || pos45.y > this.miniSize.cols) {
            return false;
        }
        var row = 0;
        var col = 0;
        var map = this.mElementManager.map;
        for (var i = 0; i < collisionArea.length; i++) {
            row = i + pos45.y - origin.y;
            if (row >= map.length) {
                return false;
            }
            for (var j = 0; j < collisionArea[i].length; j++) {
                col = j + pos45.x - origin.x;
                if (col >= map[i].length || map[row][col] === 0) {
                    return false;
                }
            }
        }
        return true;
    };
    DecorateRoom.prototype.setMap = function (cols, rows, type) {
        if (rows < 0 || cols < 0 || this.mMap.length < rows || this.mMap[0].length < cols) {
            return;
        }
        this.mMap[cols][rows] = type;
    };
    DecorateRoom.prototype.addPointerMoveHandler = function () {
        if (!this.mScene)
            return;
        this.mScene.input.on("pointermove", this.onPointerMoveHandler, this);
        this.mScene.input.on("gameout", this.onGameOutHandler, this);
    };
    DecorateRoom.prototype.removePointerMoveHandler = function () {
        if (!this.mScene)
            return;
        this.mScene.input.off("pointermove", this.onPointerMoveHandler, this);
        this.mScene.input.off("gameout", this.onGameOutHandler, this);
    };
    DecorateRoom.prototype.onPointerUpHandler = function (pointer) {
        this.removePointerMoveHandler();
        if (this.mSelectorElement) {
            this.mSelectorElement.selecting = false;
        }
    };
    DecorateRoom.prototype.onPointerDownHandler = function () {
        this.addPointerMoveHandler();
    };
    DecorateRoom.prototype.onGameobjectUpHandler = function (pointer, gameobject) {
        // this.addPointerMoveHandler();
        var com = gameobject.parentContainer;
        if (!com) {
            return;
        }
        if (!(com instanceof display_object["a" /* DisplayObject */])) {
            return;
        }
        if (com instanceof terrain_display["a" /* TerrainDisplay */]) {
            return;
        }
        this.selectedElement(com.element);
    };
    DecorateRoom.prototype.onPointerMoveHandler = function (pointer) {
        if (!this.mSelectorElement || (this.mSelectorElement && this.mSelectorElement.selecting === false)) {
            this.moveCamera(pointer);
            return;
        }
        if (pointer.downX === pointer.x && pointer.downY === pointer.y) {
            return;
        }
        // if (pointer.downX !== pointer.upX && pointer.downY !== pointer.upY) {
        this.moveElement(pointer);
    };
    DecorateRoom.prototype.onGameOutHandler = function () {
        this.removePointerMoveHandler();
    };
    DecorateRoom.prototype.moveCamera = function (pointer) {
        this.cameraService.offsetScroll(pointer.prevPosition.x - pointer.position.x, pointer.prevPosition.y - pointer.position.y);
    };
    DecorateRoom.prototype.moveElement = function (pointer) {
        var pos = this.transitionGrid(pointer.worldX / this.mScaleRatio, pointer.worldY / this.mScaleRatio);
        if (this.mSelectorElement) {
            this.mSelectorElement.setDisplayPos(pos);
        }
        // this.mSelectedElement.setDisplayPos(pos.x, pos.y);
    };
    DecorateRoom.prototype.removeElement = function (id, nodeType) {
        if (nodeType === protocols["op_def"].NodeType.ElementNodeType || nodeType === protocols["op_def"].NodeType.SpawnPointType) {
            this.elementManager.remove(id);
        }
        else if (nodeType === protocols["op_def"].NodeType.TerrainNodeType) {
            this.elementManager.remove(id);
        }
    };
    DecorateRoom.prototype.addElement = function (sprite, addMap) {
        var nodeType = sprite.nodeType;
        if (nodeType === protocols["op_def"].NodeType.ElementNodeType || nodeType === protocols["op_def"].NodeType.SpawnPointType) {
            this.mElementManager.add([sprite], addMap);
        }
        else if (nodeType === protocols["op_def"].NodeType.TerrainNodeType) {
            this.mTerrainManager.add([sprite]);
        }
    };
    DecorateRoom.prototype.selectedElement = function (element, isClone) {
        if (isClone === void 0) { isClone = true; }
        if (!element) {
            return;
        }
        if (!this.mSelectorElement) {
            this.mSelectorElement = new selector_element_SelectorElement(element);
            if (isClone) {
                this.mSelectorElement.clone();
                this.elementManager.removeMap(element.model);
            }
            this.mSelectorElement.update();
        }
        else {
            if (this.mSelectorElement.element === element) {
                this.mSelectorElement.selecting = true;
            }
            else {
                this.onPutElement(null);
                // this.cancelSelector();
                this.selectedElement(element, isClone);
            }
        }
    };
    DecorateRoom.prototype.cancelSelector = function () {
        if (this.mSelectorElement) {
            var sprite = null;
            if (this.mSelectorElement.root) {
                sprite = this.mSelectorElement.element.model;
            }
            this.mSelectorElement.destroy();
            this.mSelectorElement = undefined;
            if (sprite) {
                this.mElementManager.addMap(sprite);
            }
        }
    };
    DecorateRoom.prototype.onTurnElementHandler = function (display) {
        if (!this.mSelectorElement) {
            return;
        }
        this.mSelectorElement.turnElement();
    };
    DecorateRoom.prototype.onRecycleHandler = function (display) {
        if (!this.mSelectorElement) {
            return;
        }
        var element = this.mSelectorElement.element;
        var sprite = element.model;
        if (!sprite) {
            return;
        }
        var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_RECYCLE_SPRITE);
        var content = packet.content;
        content.sprites = [sprite.toSprite()];
        content.nodeType = sprite.nodeType;
        this.world.connection.send(packet);
        this.mSelectorElement.destroy();
        this.mSelectorElement = undefined;
    };
    DecorateRoom.prototype.onPutElement = function (display) {
        this.removePointerMoveHandler();
        if (!this.mSelectorElement) {
            return;
        }
        var element = this.mSelectorElement.element;
        if (!element) {
            return;
        }
        var sprite = element.model;
        if (!sprite) {
            return;
        }
        if (this.canPut(sprite.pos, sprite.currentCollisionArea, sprite.currentCollisionPoint)) {
            if (this.mSelectorElement.root) {
                this.sendUpdateSprite(sprite);
            }
            else {
                if (sprite.nodeType === protocols["op_def"].NodeType.SpawnPointType) {
                    this.sendSpawnPoint(sprite.pos);
                    this.removeElement(sprite.id, sprite.nodeType);
                }
                else {
                    this.sendAddSprite(sprite);
                }
            }
            this.cancelSelector();
        }
        else {
            this.onCancelPutHandler(element);
        }
    };
    DecorateRoom.prototype.onCancelPutHandler = function (element) {
        this.removePointerMoveHandler();
        if (!this.mSelectorElement) {
            return;
        }
        if (!element) {
            element = this.mElementManager.get(this.mSelectorElement.element.id);
        }
        if (!element) {
            return;
        }
        var root = this.mSelectorElement.root;
        if (root) {
            this.mSelectorElement.recover();
        }
        else {
            this.removeElement(element.id, element.model.nodeType);
        }
        this.cancelSelector();
    };
    DecorateRoom.prototype.sendAddSprite = function (sprite) {
        var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_ADD_SPRITE);
        var content = packet.content;
        content.sprites = [sprite.toSprite()];
        content.nodeType = sprite.nodeType;
        this.connection.send(packet);
    };
    DecorateRoom.prototype.sendUpdateSprite = function (sprite) {
        var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_UPDATE_SPRITE);
        var content = packet.content;
        content.sprites = [sprite.toSprite()];
        content.nodeType = sprite.nodeType;
        this.connection.send(packet);
    };
    DecorateRoom.prototype.sendSpawnPoint = function (pos) {
        var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_SET_SPAWN_POINT);
        var content = packet.content;
        var pos3f = protocols["op_def"].PBPoint3f.create();
        pos3f.x = pos.x;
        pos3f.y = pos.y;
        content.spawnPoint = pos3f;
        this.connection.send(packet);
    };
    DecorateRoom.prototype.sendPosition = function (sprite) {
        var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_CHANGE_SPRITE_POSITION);
        var content = packet.content;
        content.sprites = [sprite.toSprite()];
        content.nodeType = sprite.nodeType;
        this.connection.send(packet);
    };
    DecorateRoom.prototype.onSelectSpriteHandler = function (packet) {
        var content = packet.content;
        var camera = this.cameraService.camera;
        var sprite = new element_sprite["a" /* Sprite */](content.sprite, content.nodeType);
        sprite.setPosition((camera.scrollX + camera.width / 2) / this.world.scaleRatio, (camera.scrollY + camera.height / 2) / this.world.scaleRatio);
        this.addElement(sprite, false);
        var element = this.mElementManager.get(content.sprite.id);
        if (element)
            this.selectedElement(element, false);
    };
    DecorateRoom.prototype.onShowSpawnPointHandler = function (packet) {
        var content = packet.content;
        var spawnPoint = new spawn_point_SpawnPoint();
        var pos = content.spawnPoint;
        spawnPoint.setPosition(pos.x, pos.y);
        this.addElement(spawnPoint, false);
        this.selectedElement(this.mElementManager.get(spawnPoint.id), false);
        // this.mSelectedElement.setSprite(spawnPoint);
        this.mCameraService.scrollTargetPoint(pos.x, pos.y);
    };
    DecorateRoom.prototype.onAddSpriteHandler = function (packet) {
        var content = packet.content;
        // if (this.mSelectedElement.root && content.id === this.mSelectedElement.root.id) {
        //     this.addElement(this.mSelectedElement.sprite);
        // }
        // this.mSelectedElement.remove();
        this.cancelSelector();
    };
    DecorateRoom.prototype.onAddSingleSpriteHandler = function (packet) {
        var content = packet.content;
        var addedSprites = content.addedSprites;
        if (addedSprites) {
            var sprites = [];
            for (var _i = 0, addedSprites_1 = addedSprites; _i < addedSprites_1.length; _i++) {
                var sprite = addedSprites_1[_i];
                sprites.push(new element_sprite["a" /* Sprite */](sprite, content.nodeType));
            }
            if (sprites.length > 0) {
                this.mElementManager.add(sprites);
                var ele = this.mElementManager.get(sprites[sprites.length - 1].id);
                if (ele) {
                    this.cancelSelector();
                    this.selectedElement(ele);
                    if (this.mSelectorElement)
                        this.mSelectorElement.selecting = false;
                }
            }
        }
    };
    Object.defineProperty(DecorateRoom.prototype, "id", {
        get: function () {
            return this.mID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "roomSize", {
        get: function () {
            return this.mSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "terrainManager", {
        get: function () {
            return this.mTerrainManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "elementManager", {
        get: function () {
            return this.mElementManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "layerManager", {
        get: function () {
            return this.mLayerManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "cameraService", {
        get: function () {
            return this.mCameraService;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "scene", {
        get: function () {
            return this.mScene;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "connection", {
        get: function () {
            return this.world.connection;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "miniSize", {
        get: function () {
            return this.mMiniSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "selectedSprite", {
        get: function () {
            if (!this.mSelectorElement) {
                return;
            }
            return this.mSelectorElement.element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "enableEdit", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DecorateRoom.prototype, "sceneType", {
        get: function () {
            return protocols["op_def"].SceneTypeEnum.EDIT_SCENE_TYPE;
        },
        enumerable: false,
        configurable: true
    });
    return DecorateRoom;
}(dist["PacketHandler"]));



/***/ }),
/* 389 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/gestures/onepointertracer/OnePointerTracer.js + 1 modules
var OnePointerTracer = __webpack_require__(195);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/fsm.js + 1 modules
var fsm = __webpack_require__(137);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/gestures/swipe/VelocityMethods.js
const DistanceBetween = Phaser.Math.Distance.Between;
const AngleBetween = Phaser.Math.Angle.Between;

/* harmony default export */ var VelocityMethods = ({
    getDt: function () {
        var game = this.scene.sys.game;
        var dt = game.loop.delta;
        return dt;
    },

    getVelocity: function () {
        var p1 = this.pointer.position;
        var p0 = this.pointer.prevPosition;
        var d = DistanceBetween(p0.x, p0.y, p1.x, p1.y);
        var velocity = d / (this.getDt() * 0.001);
        return velocity;
    },

    getVelocityX: function () {
        var p1 = this.pointer.position;
        var p0 = this.pointer.prevPosition;
        var d = Math.abs(p1.x - p0.x);
        var velocity = d / (this.getDt() * 0.001);
        return velocity;
    },

    getVelocityY: function () {
        var p1 = this.pointer.position;
        var p0 = this.pointer.prevPosition;
        var d = Math.abs(p1.y - p0.y);
        var velocity = d / (this.getDt() * 0.001);
        return velocity;
    },

    getVelocityAngle: function () {
        var p1 = this.pointer.position;
        var p0 = this.pointer.prevPosition;
        var angle = AngleBetween(p0.x, p0.y, p1.x, p1.y);
        return angle;
    }
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/math/angle/angletodirections/Const.js
/* harmony default export */ var Const = ({
    'up&down': 0,
    'left&right': 1,
    '4dir': 2,
    '8dir': 3
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/math/angle/angletodirections/AngleToDirections.js
var AngleToDirections = function (angle, dirMode, out) {
    if (out === undefined) {
        out = {}
    } else if (out === true) {
        out = tmpOut;
    }

    out.left = false;
    out.right = false;
    out.up = false;
    out.down = false;

    angle = (angle + 360) % 360;
    switch (dirMode) {
        case 0: // up & down
            if (angle < 180) {
                out.down = true;
            } else {
                out.up = true;
            }
            break;

        case 1: // left & right
            if ((angle > 90) && (angle <= 270)) {
                out.left = true;
            } else {
                out.right = true;
            }
            break;

        case 2: // 4 dir
            if ((angle > 45) && (angle <= 135)) {
                out.down = true;
            } else if ((angle > 135) && (angle <= 225)) {
                out.left = true;
            } else if ((angle > 225) && (angle <= 315)) {
                out.up = true;
            } else {
                out.right = true;
            }
            break;

        case 3: // 8 dir
            if ((angle > 22.5) && (angle <= 67.5)) {
                out.down = true;
                out.right = true;
            } else if ((angle > 67.5) && (angle <= 112.5)) {
                out.down = true;
            } else if ((angle > 112.5) && (angle <= 157.5)) {
                out.down = true;
                out.left = true;
            } else if ((angle > 157.5) && (angle <= 202.5)) {
                out.left = true;
            } else if ((angle > 202.5) && (angle <= 247.5)) {
                out.left = true;
                out.up = true;
            } else if ((angle > 247.5) && (angle <= 292.5)) {
                out.up = true;
            } else if ((angle > 292.5) && (angle <= 337.5)) {
                out.up = true;
                out.right = true;
            } else {
                out.right = true;
            }
            break;
    }

    return out;
};

var tmpOut = {};

/* harmony default export */ var angletodirections_AngleToDirections = (AngleToDirections);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/gestures/swipe/Swipe.js






const GetValue = Phaser.Utils.Objects.GetValue;
const RadToDeg = Phaser.Math.RadToDeg;

class Swipe_Swipe extends OnePointerTracer["a" /* default */] {
    constructor(gameObject, config) {
        super(gameObject, config);

        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function () {
                        self.x = 0;
                        self.y = 0;
                        self.worldX = 0;
                        self.worldY = 0;
                    },
                    exit: function () {
                        var pointer = self.lastPointer;
                        self.x = pointer.x;
                        self.y = pointer.y;
                        self.worldX = pointer.worldX;
                        self.worldY = pointer.worldY;
                    }
                },
                BEGIN: {
                    enter: function () {
                        self.validDrag = false;
                    }
                },
                RECOGNIZED: {
                    enter: function () {
                        self.start();
                        self.updateDirectionStates();
                        self.emit('swipe', self, self.gameObject, self.lastPointer);
                    },

                    exit: function () {
                        self.stop();
                        self.clearDirectionStates();
                    }
                }
            },
            init: function () {
                this.state = IDLE;
            },
            eventEmitter: false,
        }
        this.setRecongizedStateObject(new fsm["a" /* default */](stateConfig));
        this.clearDirectionStates();
    }

    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(GetValue(o, 'threshold', 10));
        this.setMinDragVelocity(GetValue(o, 'velocityThreshold', 1000));
        this.setDirectionMode(GetValue(o, 'dir', '8dir'));
        return this;
    }

    onDragStart() {
        this.state = BEGIN;
    }

    onDragEnd() {
        this.state = IDLE;
    }

    onDrag() {
        if (this.state === BEGIN) {
            if (!this.vaildDrag) {
                this.vaildDrag = (this.dragThreshold === 0) || (this.pointer.getDistance() >= this.dragThreshold);
            }
            if (this.vaildDrag && (this.dragVelocity > this.minDragVelocity)) {
                this.state = RECOGNIZED;
            }
        }
    }

    postUpdate(time, delta) {
        // Clear RECOGNIZED after update()
        if (this.state === RECOGNIZED) {
            this.state = IDLE;
        }
    }

    get isSwiped() {
        return (this.state === RECOGNIZED);
    }

    get dragVelocity() {
        var velocity;
        switch (this.dirMode) {
            case 0: velocity = this.getVelocityY(); break; // up & down
            case 1: velocity = this.getVelocityX(); break; // left & right
            default: velocity = this.getVelocity(); break; // 4 dir, 8 dir
        }
        return velocity;
    }

    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }

    setMinDragVelocity(velocity) {
        this.minDragVelocity = velocity;
        return this;
    }

    setDirectionMode(m) {
        if (typeof (m) === 'string') {
            m = Const[m];
        }
        this.dirMode = m;
        return this;
    }

    updateDirectionStates() {
        var angle = RadToDeg(this.getVelocityAngle());
        angletodirections_AngleToDirections(angle, this.dirMode, this);
        return this;
    }

    clearDirectionStates() {
        this.left = false;
        this.right = false;
        this.up = false;
        this.down = false;
        return this;
    }
}

Object.assign(
    Swipe_Swipe.prototype,
    VelocityMethods
);

const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';

/* harmony default export */ var swipe_Swipe = (Swipe_Swipe);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/swipe/Swipe.js

/* harmony default export */ var ui_swipe_Swipe = __webpack_exports__["a"] = (swipe_Swipe);

/***/ }),
/* 390 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/shape/roundrectangle/geom/RoundRectangle.js
const GetValue = Phaser.Utils.Objects.GetValue;

class RoundRectangle_RoundRectangle {
    constructor(x, y, width, height, radiusConfig) {
        this.cornerRadius = {};
        this._width = 0;
        this._height = 0;
        this.setTo(x, y, width, height, radiusConfig);
    }

    setTo(x, y, width, height, radiusConfig) {
        this.setPosition(x, y);
        this.setRadius(radiusConfig);
        this.setSize(width, height);
        return this;
    }

    setPosition(x, y) {
        if (x === undefined) {
            x = 0;
        }
        if (y === undefined) {
            y = x;
        }
        this.x = x;
        this.y = y;
        return this;
    }

    setRadius(config) {
        if (config === undefined) {
            config = 0;
        }
        var defaultRadiusX, defaultRadiusY;
        if (typeof (config) === 'number') {
            defaultRadiusX = config;
            defaultRadiusY = config;
        } else {
            defaultRadiusX = GetValue(config, 'x', 0);
            defaultRadiusY = GetValue(config, 'y', 0);
        }

        var radius = this.cornerRadius;
        radius.tl = GetRadius(GetValue(config, 'tl', undefined), defaultRadiusX, defaultRadiusY);
        radius.tr = GetRadius(GetValue(config, 'tr', undefined), defaultRadiusX, defaultRadiusY);
        radius.bl = GetRadius(GetValue(config, 'bl', undefined), defaultRadiusX, defaultRadiusY);
        radius.br = GetRadius(GetValue(config, 'br', undefined), defaultRadiusX, defaultRadiusY);
        return this;
    }

    setSize(width, height) {
        this.width = width;
        this.height = height;
        return this;
    }

    get minWidth() {
        var radius = this.cornerRadius;
        return Math.max(radius.tl.x + radius.tr.x, radius.bl.x + radius.br.x);
    }

    get minHeight() {
        var radius = this.cornerRadius;
        return Math.max(radius.tl.y + radius.bl.y, radius.tr.y + radius.br.y);
    }

    get width() {
        return this._width;
    }

    set width(value) {
        if (value == null) {
            value = 0;
        }
        this._width = Math.max(value, this.minWidth);
    }

    get height() {
        return this._height;
    }

    set height(value) {
        if (value == null) {
            value = 0;
        }
        this._height = Math.max(value, this.minHeight);
    }

    get radius() {
        var radius = this.cornerRadius;
        var max = Math.max(
            radius.tl.x,
            radius.tl.y,
            radius.tr.x,
            radius.tr.y,
            radius.bl.x,
            radius.bl.y,
            radius.br.x,
            radius.br.y
        );
        return max;
    }
}

var GetRadius = function (radius, defaultRadiusX, defaultRadiusY) {
    if (radius === undefined) {
        return {
            x: defaultRadiusX,
            y: defaultRadiusY
        };
    } else if (typeof (radius) === 'number') {
        return {
            x: radius,
            y: radius
        };
    } else {
        return radius;
    }
}
/* harmony default export */ var geom_RoundRectangle = (RoundRectangle_RoundRectangle);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/shape/utils/LineTo.js
var LineTo = function (x, y, out) {
    var cnt = out.length;
    if (cnt >= 2) {
        var lastX = out[cnt - 2];
        var lastY = out[cnt - 1];
        if ((x === lastX) && (y === lastY)) {
            return out;
        }
    }

    out.push(x, y);
    return out;
}

/* harmony default export */ var utils_LineTo = (LineTo);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/math/DegToRad.js
var DegToRad = __webpack_require__(414);
var DegToRad_default = /*#__PURE__*/__webpack_require__.n(DegToRad);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/shape/utils/ArcTo.js



var ArcTo = function (centerX, centerY, radiusX, radiusY, startAngle, endAngle, antiClockWise, iteration, out) {
    // startAngle, endAngle: 0 ~ 360
    if (antiClockWise) {
        endAngle += 360;
    }

    startAngle = DegToRad_default()(startAngle);
    endAngle = DegToRad_default()(endAngle);
    var x, y, angle;
    var step = (endAngle - startAngle) / iteration;
    for (var i = 0; i <= iteration; i++) {
        angle = startAngle + (step * i);
        x = centerX + (radiusX * Math.cos(angle));
        y = centerY + (radiusY * Math.sin(angle));
        utils_LineTo(x, y, out);
    }
    return out;
}
/* harmony default export */ var utils_ArcTo = (ArcTo);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/geom/polygon/Earcut.js
var Earcut = __webpack_require__(415);
var Earcut_default = /*#__PURE__*/__webpack_require__.n(Earcut);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/shape/roundrectangle/render/WebGLRenderer.js
var WebGLRenderer = __webpack_require__(416);
var WebGLRenderer_default = /*#__PURE__*/__webpack_require__.n(WebGLRenderer);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/shape/roundrectangle/render/CanvasRenderer.js
var CanvasRenderer = __webpack_require__(419);
var CanvasRenderer_default = /*#__PURE__*/__webpack_require__.n(CanvasRenderer);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/NOOP.js
var NOOP = __webpack_require__(141);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/shape/roundrectangle/render/Render.js




var renderWebGL = NOOP["a" /* default */];
var renderCanvas = NOOP["a" /* default */];

if (true) {
    renderWebGL = WebGLRenderer_default.a;
}

if (true) {
    renderCanvas = CanvasRenderer_default.a;
}

/* harmony default export */ var Render = ({
    renderWebGL: renderWebGL,
    renderCanvas: renderCanvas

});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/shape/roundrectangle/RoundRectangle.js






const RoundRectangle_GetValue = Phaser.Utils.Objects.GetValue;

class roundrectangle_RoundRectangle_RoundRectangle extends Phaser.GameObjects.Shape {
    constructor(scene, x, y, width, height, radiusConfig, fillColor, fillAlpha) {
        if (x === undefined) {
            x = 0;
        }
        if (y === undefined) {
            y = 0;
        }

        var iteration = RoundRectangle_GetValue(radiusConfig, 'iteration', undefined);
        radiusConfig = RoundRectangle_GetValue(radiusConfig, 'radius', radiusConfig);
        var geom = new geom_RoundRectangle(0, 0, width, height, radiusConfig);
        super(scene, 'RoundRectangle', geom);

        this.setIteration(iteration);
        this.setPosition(x, y);
        // this.setSize(this.geom.width, this.geom.height);

        if (fillColor !== undefined) {
            this.setFillStyle(fillColor, fillAlpha);
        }

        this.updateDisplayOrigin();
        this.updateData();
    }

    updateData() {
        var geom = this.geom;
        var pathData = this.pathData;

        pathData.length = 0;

        var cornerRadius = geom.cornerRadius,
            radius,
            iteration = this.iteration + 1;
        // bottom-right
        radius = cornerRadius.br;
        if (isArcCorner(radius)) {
            var centerX = geom.width - radius.x;
            var centerY = geom.height - radius.y;
            utils_ArcTo(centerX, centerY, radius.x, radius.y, 0, 90, false, iteration, pathData);
        } else {
            utils_LineTo(geom.width, geom.height, pathData);
        }

        // bottom-left
        radius = cornerRadius.bl;
        if (isArcCorner(radius)) {
            var centerX = radius.x;
            var centerY = geom.height - radius.y;
            utils_ArcTo(centerX, centerY, radius.x, radius.y, 90, 180, false, iteration, pathData);
        } else {
            utils_LineTo(0, geom.height, pathData);
        }

        // top-left
        radius = cornerRadius.tl;
        if (isArcCorner(radius)) {
            var centerX = radius.x;
            var centerY = radius.y;
            utils_ArcTo(centerX, centerY, radius.x, radius.y, 180, 270, false, iteration, pathData);
        } else {
            utils_LineTo(0, 0, pathData);
        }

        // top-right
        radius = cornerRadius.tr;
        if (isArcCorner(radius)) {
            var centerX = geom.width - radius.x;
            var centerY = radius.y;
            utils_ArcTo(centerX, centerY, radius.x, radius.y, 270, 360, false, iteration, pathData);
        } else {
            utils_LineTo(geom.width, 0, pathData);
        }

        pathData.push(pathData[0], pathData[1]); // Repeat first point to close curve
        this.pathIndexes = Earcut_default()(pathData);
        return this;
    }

    get width() {
        return this.geom.width;
    }
    set width(value) {
        this.resize(value, this.height);
    }

    get height() {
        return this.geom.height;
    }
    set height(value) {
        this.resize(this.width, value);
    }

    resize(width, height) {
        if (height === undefined) {
            height = width;
        }
        if ((this.geom.width === width) && (this.geom.height === height)) {
            return this;
        }
        this.geom.height = height;
        this.geom.width = width
        this.updateDisplayOrigin();
        this.updateData();

        var input = this.input;
        if (input && !input.customHitArea) {
            input.hitArea.width = width;
            input.hitArea.height = height;
        }
        return this;
    }

    get iteration() {
        return this._iteration;
    }

    set iteration(value) {
        // Set iteration first time
        if (this._iteration === undefined) {
            this._iteration = value;
            return;
        }

        // Change iteration value
        if (this._iteration === value) {
            return;
        }

        this._iteration = value;
        this.updateData();
    }

    setIteration(iteration) {
        if (iteration === undefined) {
            iteration = 6;
        }
        this.iteration = iteration;
        return this;
    }

    get radius() {
        return this.geom.radius;
    }

    set radius(value) {
        this.geom.setRadius(value);
        this.updateDisplayOrigin();
        this.updateData();
    }

    setRadius(value) {
        if (value === undefined) {
            value = 0;
        }
        this.radius = value;
        return this;
    }

    get cornerRadius() {
        return this.geom.cornerRadius;
    }

    set cornerRadius(value) {
        this.radius = value;
    }

    setCornerRadius(value) {
        return this.setRadius(value);
    }
}

var isArcCorner = function (radius) {
    return ((radius.x !== 0) && (radius.y !== 0));
}


Object.assign(
    roundrectangle_RoundRectangle_RoundRectangle.prototype,
    Render
);

/* harmony default export */ var roundrectangle_RoundRectangle = __webpack_exports__["a"] = (roundrectangle_RoundRectangle_RoundRectangle);

/***/ }),
/* 391 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/system/GetSceneObject.js
var GetSceneObject = __webpack_require__(142);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/inputtext/InputText.js + 1 modules
var InputText = __webpack_require__(118);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/behaviors/textedit/CreateInputText.js


const GetValue = Phaser.Utils.Objects.GetValue;

var CreateInputText = function (text, config) {
    if (config === undefined) {
        config = {};
    }

    var scene = text.scene;
    var style = text.style;
    var backgroundColor = GetValue(config, 'backgroundColor', style.backgroundColor);
    if (backgroundColor === null) {
        backgroundColor = 'transparent';
    }

    config.text = GetValue(config, 'text', text.text);
    config.fontFamily = GetValue(config, 'fontFamily', style.fontFamily);
    config.fontSize = GetValue(config, 'fontSize', style.fontSize);
    config.color = GetValue(config, 'color', style.color);
    config.backgroundColor = backgroundColor;
    config.align = GetValue(config, 'align', GetHAlign(style));

    // config.paddingLeft = 0;
    // config.paddingRight = 0;
    // config.paddingTop = 0;
    // config.paddingBottom = 0;
    // var valign = GetVAlign(style);
    // switch (valign) {
    //     case 'top':
    //         break;
    //     case 'bottom':
    //         break;
    // }

    var inputText = new InputText["a" /* default */](scene,
        text.x, text.y,
        GetValue(config, 'width', text.width),
        GetValue(config, 'height', text.height),
        config
    );
    inputText.setOrigin(text.originX, text.originY);
    scene.add.existing(inputText);
    return inputText;
}

var GetHAlign = function (style) {
    if (style.hasOwnProperty('align')) {
        return style.align;
    } else if (style.hasOwnProperty('halign')) {
        return style.halign;
    } else {
        return 'left';
    }
}

var GetVAlign = function (style) {
    if (style.hasOwnProperty('halign')) {
        return style.halign;
    } else {
        return 'top';
    }
}


/* harmony default export */ var textedit_CreateInputText = (CreateInputText);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/utils/object/IsFunction.js
var IsFunction = function (obj) {    
    return obj && (typeof(obj) === 'function');
};

/* harmony default export */ var object_IsFunction = (IsFunction);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/behaviors/textedit/TextEdit.js




const TextEdit_GetValue = Phaser.Utils.Objects.GetValue;

class TextEdit_TextEdit {
    constructor(gameObject) {
        this.gameObject = gameObject;
        this.scene = Object(GetSceneObject["a" /* default */])(gameObject);

        this.inputText = undefined;
        this.onClose = undefined;
        this.delayCall = undefined;
        this.boot();
    }

    boot() {
        this.gameObject.on('destroy', this.destroy, this);

        return this;
    }

    shutdown() {
        this.close();
        this.gameObject = undefined;
        this.scene = undefined;
        if (globLastOpenedEditor === this) {
            globLastOpenedEditor = undefined;
        }
        return this;
    }

    destroy() {
        this.shutdown();
        return this;
    }

    open(config, onCloseCallback) {
        if (globLastOpenedEditor !== undefined) {
            globLastOpenedEditor.close();
        }

        globLastOpenedEditor = this;
        if (object_IsFunction(config)) {
            onCloseCallback = config;
            config = undefined;
        }
        if (onCloseCallback === undefined) {
            onCloseCallback = TextEdit_GetValue(config, 'onClose', undefined);
        }

        var customOnTextChanged = TextEdit_GetValue(config, 'onTextChanged', undefined);

        this.inputText = textedit_CreateInputText(this.gameObject, config)
            .on('textchange', function (inputText) {
                var text = inputText.text;
                if (customOnTextChanged) { // Custom on-text-changed callback
                    customOnTextChanged(this.gameObject, text);
                } else { // Default on-text-changed callback
                    this.gameObject.text = text;
                }
            }, this)
            .setFocus();
        this.gameObject.setVisible(false); // Set parent text invisible

        // Attach close event
        this.onClose = onCloseCallback;
        this.scene.input.keyboard.once('keydown-ENTER', this.close, this);
        // Attach pointerdown (outside of input-text) event, at next tick
        this.delayCall = this.scene.time.delayedCall(0, function () {
            this.scene.input.once('pointerdown', this.close, this);
        }, [], this);
        return this;
    }

    close() {
        globLastOpenedEditor = undefined;
        if (!this.inputText) {
            return this;
        }

        this.gameObject.setVisible(true); // Set parent text visible

        this.inputText.destroy();
        this.inputText = undefined;
        if (this.delayCall) {
            this.delayCall.remove();
            this.delayCall = undefined;
        }

        // Remove close event
        this.scene.input.keyboard.off('keydown-ENTER', this.close, this);
        this.scene.input.off('pointerdown', this.close, this);

        if (this.onClose) {
            this.onClose(this.gameObject);
        }
        return this;
    }

    get isOpened() {
        return (this.inputText !== undefined);
    }

    get text() {
        return (this.isOpened) ? this.inputText.text : this.gameObject.text;
    }
}

var globLastOpenedEditor = undefined;

/* harmony default export */ var textedit_TextEdit = __webpack_exports__["a"] = (TextEdit_TextEdit);

/***/ }),
/* 392 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ BBCodeText["a" /* default */]; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* reexport */ Button["a" /* Button */]; });

// UNUSED EXPORTS: RoundRectangle, TagText, Container, Canvas, NineSlicePatch, Sizer, GridSizer, Label, Buttons, Slider, GridTable, Menu, TextBox, TextBlock, TextArea, ScrollableBlock, ScrollablePanel, Tap, Press, Rotate, Flip, GetParentSizer, GetTopmostSizer, IsPointerInBounds, Show, Hide, IsShown, Edit, WaitEvent, WaitComplete

// EXTERNAL MODULE: ./node_modules/phaser/dist/phaser.js-exposed
var phaser_js_exposed = __webpack_require__(23);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/roundrectangle/RoundRectangle.js
var RoundRectangle = __webpack_require__(267);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/bbcodetext/BBCodeText.js
var BBCodeText = __webpack_require__(268);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/tagtext/TagText.js + 2 modules
var TagText = __webpack_require__(324);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/container/Container.js
var Container = __webpack_require__(164);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/canvas/Canvas.js
var Canvas = __webpack_require__(269);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/ninepatch/NineSlicePatch.ts + 1 modules
var NineSlicePatch = __webpack_require__(196);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/sizer/Sizer.js + 11 modules
var Sizer = __webpack_require__(126);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/gridsizer/GridSizer.js + 8 modules
var GridSizer = __webpack_require__(317);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/label/Label.js + 1 modules
var Label = __webpack_require__(328);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/buttons/Buttons.js + 6 modules
var Buttons = __webpack_require__(190);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/button/Button.ts
var Button = __webpack_require__(120);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/slider/Slider.js + 9 modules
var Slider = __webpack_require__(189);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/gridtable/GridTable.js + 31 modules
var GridTable = __webpack_require__(186);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/menu/Menu.js + 8 modules
var Menu = __webpack_require__(318);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/bbcodetext/Factory.js
var Factory = __webpack_require__(352);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/bbcodetext/Creator.js
var Creator = __webpack_require__(353);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/text/bbcodetext/BBCodeText.js + 1 modules
var bbcodetext_BBCodeText = __webpack_require__(116);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/bbcodetext.js




Phaser.GameObjects.GameObjectFactory.register('rexBBCodeText', Factory["a" /* default */]);
Phaser.GameObjects.GameObjectCreator.register('rexBBCodeText', Creator["a" /* default */]);

/* harmony default export */ var bbcodetext = (bbcodetext_BBCodeText["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/behaviors/textedit/TextEdit.js + 2 modules
var TextEdit = __webpack_require__(391);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/textBox/TextBox.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var TextBox_TextBox = /** @class */ (function (_super) {
    __extends(TextBox, _super);
    function TextBox(scene, config) {
        var _this = _super.call(this) || this;
        var textConfig = config.textConfig;
        var posX = textConfig.x;
        var posY = textConfig.y;
        var editType = config.editType;
        var str = config.text || "";
        var textChangeHandler = config.onTextChanged || undefined;
        var closeHandler = config.onClose || undefined;
        var editConfig = { type: editType, text: str, onTextChanged: textChangeHandler };
        var styleConfig = {};
        Object.assign(styleConfig, textConfig);
        _this.mBBCodeText = new bbcodetext(scene, posX, posY, str, styleConfig);
        _this.mBBCodeText.setOrigin(0.5, 0.5);
        _this.mBBCodeText.setInteractive();
        _this.mBBCodeText.on("pointerdown", function () {
            if (!_this.mTextEdit) {
                _this.mTextEdit = new TextEdit["a" /* default */](_this.mBBCodeText);
                _this.mTextEdit.open(editConfig, closeHandler);
            }
            // (<any>scene).plugins.get("rextexteditplugin").edit(this.mBBCodeText, editConfig);
        }, _this);
        return _this;
    }
    Object.defineProperty(TextBox.prototype, "isOpened", {
        get: function () {
            return this.mTextEdit ? this.mTextEdit.isOpened : false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "text", {
        get: function () {
            return this.mTextEdit ? this.mTextEdit.text : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "view", {
        get: function () {
            return this.mBBCodeText;
        },
        enumerable: false,
        configurable: true
    });
    TextBox.prototype.close = function () {
        if (this.mTextEdit) {
            this.mTextEdit.close();
            this.mTextEdit.destroy();
        }
    };
    TextBox.prototype.destroy = function () {
        this.close();
        if (this.mBBCodeText)
            this.mBBCodeText.destroy();
        _super.prototype.destroy.call(this);
    };
    return TextBox;
}(Phaser.Events.EventEmitter));


// EXTERNAL MODULE: ./lib/rexui/lib/ui/textblock/TextBlock.js + 11 modules
var TextBlock = __webpack_require__(188);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/textarea/TextArea.js + 3 modules
var TextArea = __webpack_require__(127);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/scrollableblock/ScrollableBlock.js + 6 modules
var ScrollableBlock = __webpack_require__(191);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/scrollablepanel/ScrollablePanel.js
var ScrollablePanel = __webpack_require__(270);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/tap/Tap.js + 1 modules
var Tap = __webpack_require__(193);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/press/Press.js + 1 modules
var Press = __webpack_require__(194);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/rotate/Rotate.js + 3 modules
var Rotate = __webpack_require__(321);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/flip/Flip.js + 3 modules
var Flip = __webpack_require__(322);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetParentSizer.js
var GetParentSizer = __webpack_require__(153);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetTopmostSizer.js
var GetTopmostSizer = __webpack_require__(166);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/input/IsPointerInBounds.js
var IsPointerInBounds = __webpack_require__(165);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/Hide.js
var Hide = __webpack_require__(144);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/behaviors/textedit/Edit.js
var Edit = __webpack_require__(271);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/WaitEvent.js
var WaitEvent = __webpack_require__(183);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/ui-components.ts

































/***/ }),
/* 393 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ viewblock_manager_ViewblockManager; });

// CONCATENATED MODULE: ./src/rooms/cameras/viewblock.ts
/**
 * 显示区域
 */
var Viewblock = /** @class */ (function () {
    function Viewblock(mRect, index) {
        this.mRect = mRect;
        // private mElements: IElement[] = [];
        this.mElements = new Map();
        this.mIndex = index;
    }
    Viewblock.prototype.add = function (element, miniViewPort) {
        // this.mElements.push(element);
        this.mElements.set(element.id, element);
        if (!miniViewPort) {
            return;
        }
        var pos = element.getPosition45();
        element.setRenderable(miniViewPort.contains(pos.x, pos.y) && this.mInCamera);
    };
    Viewblock.prototype.remove = function (ele) {
        // const index = this.mElements.indexOf(ele);
        // if (index !== -1) {
        //     this.mElements.splice(index, 1);
        //     return true;
        // }
        return this.mElements.delete(ele.id);
    };
    // tick running... powered by manager.
    Viewblock.prototype.check = function (bound, miniViewPort) {
        if (!bound)
            return;
        var newStat = Phaser.Geom.Intersects.RectangleToRectangle(bound, this.rectangle);
        // if (this.mInCamera !== newStat) {
        //     for (const e of this.mElements) {
        //         根据情况看是否需要提前加载
        //         e.setRenderable(newStat);
        //     }
        // }
        if (!miniViewPort)
            return;
        if (this.mInCamera) {
            // for (const ele of this.mElements) {
            //     const pos = ele.getPosition45();
            //     ele.setRenderable(miniViewPort.contains(pos.x, pos.y), 1000);
            // }
            this.mElements.forEach(function (ele) {
                var pos = ele.getPosition45();
                ele.setRenderable(miniViewPort.contains(pos.x, pos.y), 0);
            });
        }
        this.mInCamera = newStat;
    };
    Viewblock.prototype.getElement = function (id) {
        return this.mElements.get(id);
    };
    Object.defineProperty(Viewblock.prototype, "rectangle", {
        get: function () {
            return this.mRect || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Viewblock.prototype, "inCamera", {
        get: function () {
            return this.mInCamera;
        },
        enumerable: false,
        configurable: true
    });
    return Viewblock;
}());


// CONCATENATED MODULE: ./src/rooms/cameras/viewblock.manager.ts

var viewblock_manager_ViewblockManager = /** @class */ (function () {
    function ViewblockManager(cameras) {
        this.mBlocks = [];
        this.mDelay = 0;
        this.mCameras = cameras;
    }
    ViewblockManager.prototype.add = function (e) {
        if (!this.mCameras)
            return false;
        var miniView = this.mCameras.getMiniViewPort();
        for (var _i = 0, _a = this.mBlocks; _i < _a.length; _i++) {
            var block = _a[_i];
            var rect = block.rectangle;
            var ePos = e.getPosition();
            if (!ePos)
                return;
            if (rect.contains(ePos.x, ePos.y)) {
                block.add(e, miniView);
                return;
            }
        }
    };
    ViewblockManager.prototype.remove = function (e) {
        if (!e)
            return;
        for (var _i = 0, _a = this.mBlocks; _i < _a.length; _i++) {
            var block = _a[_i];
            if (block.remove(e)) {
                return;
            }
        }
    };
    ViewblockManager.prototype.check = function (e) {
        if (!e)
            return;
        for (var _i = 0, _a = this.mBlocks; _i < _a.length; _i++) {
            var block = _a[_i];
            if (block.inCamera) {
                var rect = block.rectangle;
                var pos = e.getPosition();
                if (rect.contains(pos.x, pos.y)) {
                    if (!block.getElement(e.id)) {
                        this.remove(e);
                        block.add(e);
                    }
                    return;
                }
            }
        }
    };
    ViewblockManager.prototype.int = function (size) {
        if (!size) {
            return;
        }
        this.mBlocks = [];
        var colSize = 10;
        var viewW = (colSize + colSize) * (size.tileWidth / 2);
        var viewH = (colSize + colSize) * (size.tileHeight / 2);
        var blockW = size.sceneWidth / viewW;
        var blockH = size.sceneHeight / viewH;
        var index = 0;
        for (var i = 0; i < blockW; i++) {
            for (var j = 0; j < blockH; j++) {
                var block = new Viewblock(new Phaser.Geom.Rectangle(i * viewW, j * viewH, viewW, viewH), index++);
                this.mBlocks.push(block);
                // this.layerManager.addToAtmosphere(block.drawBoard(this.scene));
            }
        }
    };
    ViewblockManager.prototype.update = function (time, delta) {
        if (!this.mCameras)
            return;
        // if (time - this.mDelay < 3000) {
        //     return;
        // }
        this.mDelay = time;
        var bound = this.mCameras.getViewPort();
        var miniViewPort = this.mCameras.getMiniViewPort();
        for (var _i = 0, _a = this.mBlocks; _i < _a.length; _i++) {
            var block = _a[_i];
            block.check(bound, miniViewPort);
        }
    };
    ViewblockManager.prototype.destroy = function () {
        this.mDelay = 0;
    };
    return ViewblockManager;
}());



/***/ }),
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42);
/* harmony import */ var buffer___WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer___WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/* harmony import */ var worker_loader_name_js_hash_name_js_networker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(405);
/* harmony import */ var worker_loader_name_js_hash_name_js_networker__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(worker_loader_name_js_hash_name_js_networker__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var worker_loader_name_js_hash_name_js_heartbeatworker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(406);
/* harmony import */ var worker_loader_name_js_hash_name_js_heartbeatworker__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(worker_loader_name_js_hash_name_js_heartbeatworker__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__);



// import {op_client, op_gameconfig, op_gameconfig_01, op_gateway, op_virtual_world} from "pixelpai_proto";
// PBpacket.addProtocol(op_client);
// PBpacket.addProtocol(op_gateway);
// PBpacket.addProtocol(op_gameconfig);
// PBpacket.addProtocol(op_virtual_world);
// PBpacket.addProtocol(op_gameconfig_01);



for (var key in pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__) {
    net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"].addProtocol(pixelpai_proto__WEBPACK_IMPORTED_MODULE_5__[key]);
}
// 网络连接器
// 使用webworker启动socket，无webworker时直接启动socket
var Connection = /** @class */ (function () {
    function Connection(listener) {
        this.mPacketHandlers = [];
        this.mReConnectCount = 0;
        this.mListener = listener;
    }
    Connection.prototype.startConnect = function (addr, keepalive) {
        this.mCachedServerAddress = addr;
        try {
            this.mHeartBeatWorker = new worker_loader_name_js_hash_name_js_heartbeatworker__WEBPACK_IMPORTED_MODULE_4___default.a();
            this.mWorker = new worker_loader_name_js_hash_name_js_networker__WEBPACK_IMPORTED_MODULE_3___default.a();
            this._doConnect();
        }
        catch (e) {
            throw new Error("startConnect Error: " + e);
        }
    };
    Connection.prototype.closeConnect = function () {
        this.mWorker.terminate();
        this.mHeartBeatWorker.terminate();
        this.mCachedServerAddress = undefined;
        this.mReConnectCount = 0;
        this.mTimeout = null;
        this.clearPacketListeners();
    };
    Connection.prototype.clearHeartBeat = function () {
        if (this.mHeartBeatWorker) {
            this.mHeartBeatWorker.postMessage({ method: "clearBeat" });
        }
    };
    Connection.prototype.addPacketListener = function (listener) {
        this.mPacketHandlers.push(listener);
    };
    Connection.prototype.send = function (packet) {
        if (!this.mWorker) {
            throw new Error("NetWorker is undefined.");
        }
        this.mWorker.postMessage({
            "method": "send",
            "buffer": packet.Serialization(),
        });
    };
    Connection.prototype.clearReconnectCount = function () {
        this.mHeartBeatWorker.postMessage("clearBeat");
    };
    Connection.prototype.removePacketListener = function (listener) {
        var idx = this.mPacketHandlers.indexOf(listener);
        if (idx !== -1) {
            this.mPacketHandlers.splice(idx, 1);
        }
    };
    Connection.prototype.clearPacketListeners = function () {
        if (!this.mPacketHandlers || this.mPacketHandlers.length < 1) {
            return;
        }
        var len = this.mPacketHandlers.length;
        for (var i = 0; i < len; i++) {
            var listener = this.mPacketHandlers[i];
            if (!listener)
                continue;
            this.removePacketListener(listener);
            i--;
        }
    };
    Connection.prototype._doConnect = function () {
        // Logger.getInstance().info(`_doConnect `, this.mCachedServerAddress);
        var self = this;
        if (this.mWorker) {
            this.mWorker.onmessage = function (event) {
                self.onWorkerMessage(event.data);
            };
            if (this.mHeartBeatWorker) {
                this.mHeartBeatWorker.onmessage = function (event) {
                    self.onWorkerMessage(event.data);
                };
            }
            this.mWorker.postMessage({
                "method": "connect",
                "address": self.mCachedServerAddress,
            });
        }
    };
    Connection.prototype.onWorkerMessage = function (data) {
        var self = this;
        var method = data.method;
        switch (method) {
            case "onConnected":
                this.mReConnectCount = 0;
                this.mListener.onConnected();
                if (this.mHeartBeatWorker) {
                    this.mHeartBeatWorker.postMessage({ method: "startBeat" });
                }
                break;
            case "onDisConnected":
                if (!this.mTimeout) {
                    if (this.mReConnectCount < 10)
                        this.mReConnectCount++;
                    var delay = Math.pow(this.mReConnectCount, 2);
                    _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().info("ReConnect: delay = " + delay * 1000 + "[c/" + this.mReConnectCount + "]");
                    this.mTimeout = setTimeout(function () {
                        self.mTimeout = undefined;
                        self._doConnect();
                    }, delay * 1000);
                }
                break;
            case "onConnectError":
                _utils_log__WEBPACK_IMPORTED_MODULE_2__[/* Logger */ "a"].getInstance().error("error" + data.error);
                // TODO
                this.reConnect();
                break;
            case "heartBeat":
                this.worldStartHeartBeat();
                break;
            case "endBeat":
                this.endHeartBeat();
                break;
            case "reConnect":
                this.reConnect();
                break;
            case "onData":
                var buf = data.buffer;
                if (buf) {
                    this._onData(buf);
                }
                break;
            default:
                break;
        }
    };
    Connection.prototype._onData = function (data) {
        var protobufPacket = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"]();
        protobufPacket.Deserialization(new buffer___WEBPACK_IMPORTED_MODULE_1__["Buffer"](data));
        var handlers = this.mPacketHandlers;
        handlers.forEach(function (handler) {
            handler.onPacketArrived(protobufPacket);
        });
    };
    Connection.prototype.reConnect = function () {
        this.mHeartBeatWorker.postMessage({ method: "endHeartBeat" });
        var world = this.mPacketHandlers[0];
        world.reconnect();
    };
    Connection.prototype.worldStartHeartBeat = function () {
        var world = this.mPacketHandlers[0];
        world.startHeartBeat();
    };
    Connection.prototype.endHeartBeat = function () {
        if (this.mHeartBeatWorker) {
            this.mHeartBeatWorker.terminate();
        }
    };
    return Connection;
}());
/* harmony default export */ __webpack_exports__["a"] = (Connection);


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "js/761b2fdd050e912cbbe1.networker.js");
};

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "js/92260d5af65c28b65094.heartbeatworker.js");
};

/***/ }),
/* 407 */,
/* 408 */,
/* 409 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return KeyBoardManager; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var KeyBoardManager = /** @class */ (function (_super) {
    __extends(KeyBoardManager, _super);
    function KeyBoardManager(worldService, keyEvents) {
        var _this = _super.call(this) || this;
        _this.worldService = worldService;
        // 是否初始化获取到了需要监听的key值列表
        _this.mInitilized = true;
        // 所有需要监听key的监听事件
        _this.mKeyboardListeners = [];
        // this.mCodeList = [37, 38, 39, 40, 65, 87, 68, 83];
        _this.mKeyList = [];
        _this.mKeyDownList = [];
        _this.mKeyEvents = keyEvents;
        _this.mTmpUpKeysStr = "";
        _this.mTmpDownKeyStr = "";
        _this.mKeyEventMap = new Map();
        _this.mConnect = _this.worldService.connection;
        return _this;
    }
    /**
     * world中当scene发生变化时，传入当前激活的scene
     * room由world去休眠/激活
     */
    KeyBoardManager.prototype.onRoomChanged = function (currentRoom, previousRoom) {
        var _this = this;
        this.mRoom = currentRoom;
        this.mScene = currentRoom.scene;
        if (!this.mScene)
            return;
        if (this.mKeyEvents) {
            var len = this.mKeyEvents.length;
            var keyEvent = void 0;
            var codes = void 0;
            var eventName = void 0;
            for (var i = 0; i < len; i++) {
                keyEvent = this.mKeyEvents[i];
                codes = keyEvent.keyCodes;
                eventName = keyEvent.tqEvent;
                if (!this.mKeyEventMap.get(eventName)) {
                    this.mKeyEventMap.set(eventName, keyEvent);
                }
            }
            this.mKeyEvents.length = 0;
            this.mKeyEvents = null;
        }
        // 暂时屏蔽
        // this.removeKeyEvents();
        this.mKeyEventMap.forEach(function (keyCodeEvent) {
            if (keyCodeEvent) {
                var keyCodes = keyCodeEvent.keyCodes;
                var codesLen = keyCodes.length;
                var keyCode = void 0;
                for (var i = 0; i < codesLen; i++) {
                    keyCode = keyCodes[i];
                    var key = _this.mScene.input.keyboard.addKey(keyCode, false);
                    _this.addKeyEvent(key, keyCodeEvent.tqEvent);
                }
            }
        });
    };
    KeyBoardManager.prototype.getKeyCodes = function (eventName) {
        if (!this.mKeyEventMap.has(eventName))
            return undefined;
        return this.mKeyEventMap.get(eventName).keyCodes;
    };
    KeyBoardManager.prototype.resize = function (width, height) {
    };
    KeyBoardManager.prototype.addListener = function (l) {
        this.mKeyboardListeners.push(l);
    };
    KeyBoardManager.prototype.removeListener = function (l) {
        var idx = this.mKeyboardListeners.indexOf(l);
        if (idx >= 0) {
            this.mKeyboardListeners.splice(idx, 1);
        }
    };
    Object.defineProperty(KeyBoardManager.prototype, "enable", {
        get: function () {
            return this.mScene !== undefined ? this.mScene.input.keyboard.enabled : false;
        },
        /**
         * 设置键盘开关
         */
        set: function (value) {
            if (!this.mScene)
                return;
            this.mScene.input.keyboard.enabled = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KeyBoardManager.prototype, "keyList", {
        get: function () {
            return this.mKeyList;
        },
        enumerable: false,
        configurable: true
    });
    KeyBoardManager.prototype.getKeyDowns = function () {
        // let keyCodes: number[] = [];
        if (!this.mInitilized) {
            return [];
        }
        if (!this.mKeyList) {
            return [];
        }
        this.mKeyDownList = this.mKeyList.filter(function (keyDown) { return keyDown.isDown; });
        return this.mKeyDownList.map(function (key) { return key.keyCode; });
    };
    KeyBoardManager.prototype.getKeyUps = function () {
        // 在keyDown列表里面查找是否有键抬起，其余没按的键不必监听
        var keyCodes = [];
        if (!this.mInitilized) {
            return keyCodes;
        }
        if (!this.mKeyDownList) {
            return [];
        }
        var key;
        for (var i = 0; i < this.mKeyDownList.length; i++) {
            key = this.mKeyDownList[i];
            if (key && key.isUp) {
                this.mKeyDownList.splice(i, 1);
                keyCodes.push(key.keyCode);
                i--;
            }
        }
        // this.mKeyDownList = this.mKeyDownList.filter((keyDown) => keyDown.isDown);
        return keyCodes;
    };
    KeyBoardManager.prototype.destroy = function () {
        this.removeKeyEvents();
        if (this.mKeyDownList) {
            this.mKeyDownList.length = 0;
            this.mKeyDownList = null;
        }
        // if (this.mCodeList) {
        //     this.mCodeList.length = 0;
        //     this.mCodeList = null;
        // }
        this.mTmpDownKeyStr = null;
        this.mTmpUpKeysStr = null;
        this.mScene = null;
        this.mConnect = null;
        this.mInitilized = false;
    };
    KeyBoardManager.prototype.concatArr = function (arr1, arr2) {
        var i;
        var len = arr1.length > arr2.length ? arr2.length : arr1.length;
        var parentList = arr1.length > arr2.length ? arr1 : arr2;
        var sonList = arr1.length > arr2.length ? arr2 : arr1;
        for (i = 0; i < len; i++) {
            parentList.push(sonList[i]);
        }
        return parentList;
    };
    KeyBoardManager.prototype.checkMoveKeyDown = function (l) {
        var key;
        var keyList = this.mKeyList;
        var len = keyList.length;
        var keyCodeList = [];
        var keyCode;
        var outPut = 0;
        var keyLeftArr = this.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].TQ_EVENT.TQ_MOVE_LEFT);
        var keyDownArr = this.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].TQ_EVENT.TQ_MOVE_DOWN);
        var keyRightArr = this.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].TQ_EVENT.TQ_MOVE_RIGHT);
        var keyUpArr = this.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_def"].TQ_EVENT.TQ_MOVE_UP);
        for (var i = 0; i < len; i++) {
            key = keyList[i];
            keyCode = key.keyCode;
            if (key && key.isDown) {
                keyCodeList.push(key.keyCode);
                if (keyLeftArr) {
                    var left = keyLeftArr.indexOf(keyCode);
                    if (left > -1) {
                        outPut += -1;
                        continue;
                    }
                }
                if (keyRightArr) {
                    var right = keyRightArr.indexOf(keyCode);
                    if (right > -1) {
                        outPut += 1;
                        continue;
                    }
                }
                if (keyDownArr) {
                    var down = keyDownArr.indexOf(keyCode);
                    if (down > -1) {
                        outPut += 3;
                        continue;
                    }
                }
                if (keyUpArr) {
                    var up = keyUpArr.indexOf(keyCode);
                    if (up > -1) {
                        outPut += -3;
                        continue;
                    }
                }
            }
        }
        if (outPut === 0) {
            return false;
        }
        var curDir = l.getDirection();
        var newDir;
        switch (outPut) {
            case -1:
                newDir = curDir <= 1 ? 1 : 3;
                break;
            case -2:
                newDir = 7;
                break;
            case -3:
                newDir = curDir <= 3 ? 1 : 7;
                break;
            case -4:
                newDir = 1;
                break;
            case 1:
                newDir = curDir <= 5 ? 5 : 7;
                break;
            case 2:
                newDir = 3;
                break;
            case 3:
                newDir = curDir <= 3 ? 3 : 5;
                break;
            case 4:
                newDir = 5;
                break;
        }
        if (this.enable) {
            l.setDirection(newDir);
            l.downHandler(newDir, keyCodeList);
            if (this.mRoom && this.mRoom.playerManager.actor)
                this.mRoom.playerManager.actor.setDirection(newDir);
        }
        return true;
    };
    KeyBoardManager.prototype.checkMoveKeyAllUp = function () {
        var key;
        var keyList = this.mKeyList;
        var len = keyList.length;
        for (var i = 0; i < len; i++) {
            key = keyList[i];
            if (key && key.isDown) {
                return false;
            }
        }
        return true;
    };
    KeyBoardManager.prototype.addKeyEvent = function (key, eventName) {
        key.on("down", this.keyDownHandle, this);
        key.on("up", this.keyUpHandle, this);
        this.mKeyList.push(key);
    };
    KeyBoardManager.prototype.keyDownHandle = function (e) {
        var _this = this;
        if (!this.enable) {
            return;
        }
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_GATEWAY_KEYBOARD_DOWN);
        var content = pkt.content;
        var keyArr = this.getKeyDowns();
        if (this.mTmpDownKeyStr === keyArr.toString())
            return;
        this.mTmpUpKeysStr = "";
        this.mTmpDownKeyStr = keyArr.toString();
        content.keyCodes = keyArr;
        this.mConnect.send(pkt);
        // then trigger listener
        this.mKeyboardListeners.forEach(function (l) {
            _this.checkMoveKeyDown(l);
        });
    };
    KeyBoardManager.prototype.keyUpHandle = function (e) {
        var _this = this;
        if (!this.enable) {
            return;
        }
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_GATEWAY_KEYBOARD_UP);
        var content = pkt.content;
        var keyArr = this.getKeyUps();
        if (this.mTmpUpKeysStr === keyArr.toString() || keyArr.length < 1)
            return;
        this.mTmpDownKeyStr = "";
        this.mTmpUpKeysStr = keyArr.toString();
        content.keyCodes = keyArr;
        this.mConnect.send(pkt);
        // then trigger listener
        this.mKeyboardListeners.forEach(function (l) {
            if (_this.checkMoveKeyAllUp()) {
                l.upHandler();
                return;
            }
            _this.checkMoveKeyDown(l);
        });
    };
    KeyBoardManager.prototype.removeKeyEvents = function () {
        if (!this.mScene)
            return;
        var key;
        var len = this.mKeyList.length;
        for (var i = 0; i < len; i++) {
            key = this.mKeyList[i];
            if (!key) {
                continue;
            }
            key.off("down", this.keyDownHandle);
            key.off("up", this.keyUpHandle);
            this.mScene.input.keyboard.removeKey(key.keyCode);
        }
        this.mKeyList.length = 0;
        // this.mKeyList = null;
    };
    return KeyBoardManager;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 410 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export MouseEvent */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MouseManager; });
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _const_MessageType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(109);
/* harmony import */ var _rooms_display_frames_display__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(160);
/* harmony import */ var _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(117);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var MouseEvent;
(function (MouseEvent) {
    MouseEvent[MouseEvent["RightMouseDown"] = 1] = "RightMouseDown";
    MouseEvent[MouseEvent["RightMouseUp"] = 2] = "RightMouseUp";
    MouseEvent[MouseEvent["LeftMouseDown"] = 3] = "LeftMouseDown";
    MouseEvent[MouseEvent["LeftMouseUp"] = 4] = "LeftMouseUp";
    MouseEvent[MouseEvent["WheelDown"] = 5] = "WheelDown";
    MouseEvent[MouseEvent["WheelUp"] = 6] = "WheelUp";
    MouseEvent[MouseEvent["RightMouseHolding"] = 7] = "RightMouseHolding";
    MouseEvent[MouseEvent["LeftMouseHolding"] = 8] = "LeftMouseHolding";
    MouseEvent[MouseEvent["Tap"] = 9] = "Tap";
})(MouseEvent || (MouseEvent = {}));
var MouseManager = /** @class */ (function (_super) {
    __extends(MouseManager, _super);
    function MouseManager(worldService) {
        var _this = _super.call(this) || this;
        _this.worldService = worldService;
        _this.running = false;
        _this.mDownDelay = 2000;
        _this.mGame = worldService.game;
        _this.zoom = _this.worldService.scaleRatio || 1;
        _this.mConnect = _this.worldService.connection;
        return _this;
    }
    MouseManager.prototype.changeRoom = function (room) {
        this.pause();
        this.mScene = room.scene;
        this.mRoom = room;
        if (!this.mScene)
            return;
        try {
            room.addMouseListen();
        }
        catch (e) {
        }
        room.scene.input.on("gameobjectdown", this.groundDown, this);
        // room.scene.input.on("gameobjectup", this.groundUp, this);
        room.scene.input.on("pointerdown", this.pointerDownHandler, this);
        room.scene.input.on("pointerup", this.onPointerUpHandler, this);
        this.resume();
    };
    MouseManager.prototype.resize = function (width, height) {
    };
    MouseManager.prototype.pause = function () {
        this.running = false;
    };
    MouseManager.prototype.resume = function () {
        this.running = true;
    };
    MouseManager.prototype.onUpdate = function (pointer, gameobject) {
        if (this.running === false || pointer === undefined) {
            return;
        }
        var events = [];
        if (pointer.leftButtonDown()) {
            events.push(MouseEvent.LeftMouseDown);
        }
        else if (pointer.leftButtonReleased()) {
            events.push(MouseEvent.LeftMouseUp);
        }
        if (pointer.middleButtonDown()) {
            events.push(MouseEvent.WheelDown);
        }
        else if (pointer.middleButtonReleased()) {
            events.push(MouseEvent.WheelUp);
        }
        if (pointer.rightButtonDown()) {
            events.push(MouseEvent.RightMouseDown);
        }
        else if (pointer.rightButtonReleased()) {
            events.push(MouseEvent.RightMouseUp);
        }
        var id = 0;
        var com = null;
        if (gameobject && gameobject.parentContainer) {
            id = gameobject.parentContainer.getData("id");
            com = gameobject.parentContainer;
        }
        if (pointer.isDown === false) {
            var diffX = Math.abs(pointer.downX - pointer.upX);
            var diffY = Math.abs(pointer.downY - pointer.upY);
            if (diffX < 10 && diffY < 10) {
                // events.push(MouseEvent.Tap);
                this.worldService.emitter.emit("Tap", pointer, gameobject);
                if (pointer.isDown === false) {
                    if (com instanceof _rooms_display_frames_display__WEBPACK_IMPORTED_MODULE_3__[/* FramesDisplay */ "a"]) {
                        // com.element.scaleTween();
                        var ele = com.element;
                        if (ele instanceof _rooms_element_element__WEBPACK_IMPORTED_MODULE_4__[/* Element */ "b"]) {
                            com.scaleTween();
                        }
                    }
                }
            }
        }
        if (events.length === 0) {
            return;
        }
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_1__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MOUSE_EVENT);
        var content = pkt.content;
        content.id = id;
        content.mouseEvent = events;
        content.point3f = { x: pointer.worldX / this.zoom, y: pointer.worldY / this.zoom };
        this.mConnect.send(pkt);
    };
    Object.defineProperty(MouseManager.prototype, "enable", {
        get: function () {
            if (this.mScene) {
                return this.mScene.input.mouse.enabled;
            }
            return false;
        },
        /**
         * 设置鼠标事件开关
         */
        set: function (value) {
            if (this.mScene) {
                this.mScene.input.mouse.enabled = value;
            }
        },
        enumerable: false,
        configurable: true
    });
    MouseManager.prototype.destroy = function () {
        this.mScene = null;
        this.mConnect = null;
        this.mGroundLayer = null;
        this.running = false;
    };
    MouseManager.prototype.groundDown = function (pointer, gameObject) {
        var _this = this;
        this.mGameObject = gameObject;
        this.mDownTime = setTimeout(function () {
            _this.worldService.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].PRESS_ELEMENT, pointer, gameObject);
        }, this.mDownDelay);
    };
    MouseManager.prototype.groundUp = function (pointer, gameObject) {
        // this.mGameObject = null;
        this.onUpdate(pointer, gameObject);
    };
    MouseManager.prototype.pointerDownHandler = function (pointer, gameobject) {
        if (this.worldService) {
            if (this.worldService.emitter) {
                this.worldService.emitter.emit(_const_MessageType__WEBPACK_IMPORTED_MODULE_2__[/* MessageType */ "a"].SCENE_BACKGROUND_CLICK, pointer);
            }
        }
        this.onUpdate(pointer, this.mGameObject);
    };
    MouseManager.prototype.onPointerUpHandler = function (pointer) {
        clearTimeout(this.mDownTime);
        this.onUpdate(pointer, this.mGameObject);
        this.mGameObject = null;
    };
    return MouseManager;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_0__["PacketHandler"]));



/***/ }),
/* 411 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return JoyStickManager; });
/* unused harmony export JoyStick */
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _rooms_element_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(117);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _rooms_decorate_room__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(388);




var TEMP_CONST = {
    MOUSE_DOWN: 0,
    MOUSE_MOVE: 1,
    MOUSE_UP: 2,
    TOUCH_START: 3,
    TOUCH_MOVE: 4,
    TOUCH_END: 5,
    POINTER_LOCK_CHANGE: 6,
    TOUCH_CANCEL: 7,
    MOUSE_WHEEL: 8
};
var JoyStickManager = /** @class */ (function () {
    function JoyStickManager(worldService, keyEvents) {
        this.worldService = worldService;
        this.mEnabled = false;
        // 用于记录room类型，初始化完成后让joystick处理
        this.mOnListener = false;
        this.mJoyListeners = [];
        this.mScale = worldService.uiScale;
        this.mKeyEvents = keyEvents;
        this.mKeyEventMap = new Map();
        _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().debug("JoyStickManager " + worldService.uiScale);
    }
    JoyStickManager.prototype.onRoomChanged = function (currentRoom, previousRoom) {
        if (!this.mJoyStick) {
            this.mOnListener = currentRoom instanceof _rooms_decorate_room__WEBPACK_IMPORTED_MODULE_3__[/* DecorateRoom */ "a"] ? false : true;
            return;
        }
        if (currentRoom instanceof _rooms_decorate_room__WEBPACK_IMPORTED_MODULE_3__[/* DecorateRoom */ "a"]) {
            this.mJoyStick.offListener();
        }
        else {
            this.mJoyStick.onListener();
        }
    };
    JoyStickManager.prototype.setScene = function (scene) {
        this.mScene = scene;
        if (!this.mScene || !this.mKeyEvents)
            return;
        var len = this.mKeyEvents.length;
        var keyEvent;
        var codes;
        var eventName;
        for (var i = 0; i < len; i++) {
            keyEvent = this.mKeyEvents[i];
            codes = keyEvent.keyCodes;
            eventName = keyEvent.tqEvent;
            if (!this.mKeyEventMap.get(eventName)) {
                this.mKeyEventMap.set(eventName, keyEvent);
            }
        }
        this.mKeyEvents.length = 0;
        this.mKeyEvents = null;
        this.mParentcon = this.mScene.add.container(0, 0); // (150, size.height - 150);
        var scale = !this.mScale ? 1 : this.mScale;
        this.mJoyStick = new JoyStick(this.mScene, this.worldService, this.mParentcon, this.mJoyListeners, scale);
        if (this.mOnListener) {
            this.mJoyStick.onListener();
        }
        else {
            this.mJoyStick.offListener();
        }
    };
    JoyStickManager.prototype.resize = function () {
        if (!this.mParentcon)
            return;
        this.mParentcon.scaleX = this.mParentcon.scaleY = this.worldService.uiScale;
        // const size: Size = this.worldService.getSize();
        // const mainUIMed = this.worldService.uiManager.getMediator(MainUIMediator.NAME) as MainUIMediator;
        // const padHei: number = !mainUIMed ? this.mParentcon.height : (mainUIMed.getView() as MainUIMobile).getBottomView().height;
        // if (this.mParentcon) {
        //     if (this.worldService.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
        //         this.mParentcon.x = this.mParentcon.width * this.worldService.uiScale;
        //         this.mParentcon.y = size.height - this.mParentcon.height * this.worldService.uiScale;
        //     } else {
        //         this.mParentcon.x = this.mParentcon.width * this.worldService.uiScale;
        //         this.mParentcon.y = size.height - (padHei + this.mParentcon.height) * this.worldService.uiScale;
        //     }
        //     this.mParentcon.scaleX = this.mParentcon.scaleY = this.worldService.uiScale;
        // }
    };
    JoyStickManager.prototype.tweenView = function (show) {
        var toAlpha = show === true ? 1 : 0;
        this.mParentcon.visible = show;
        // const size: Size = this.worldService.getSize();
        // let baseX: number;
        // let baseY: number;
        // const mainUIMed = this.worldService.uiManager.getMediator(MainUIMediator.NAME) as MainUIMediator;
        // const padHei: number = !mainUIMed ? this.mParentcon.height : (mainUIMed.getView() as MainUIMobile).getBottomView().height;
        // if (this.worldService.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
        //     baseX = this.mParentcon.width * this.worldService.uiScale;
        //     baseY = size.height - this.mParentcon.height * this.worldService.uiScale;
        // } else {
        //     baseX = this.mParentcon.width * this.worldService.uiScale;
        //     baseY = size.height - (padHei + this.mParentcon.height) * this.worldService.uiScale;
        // }
        // const toX: number = show === true ? baseX : baseX - this.mParentcon.width;
        // const toY: number = baseY;
        // this.mScene.tweens.add({
        //     targets: this.mParentcon,
        //     duration: 200,
        //     ease: "Linear",
        //     props: {
        //         x: { value: toX },
        //         y: { value: toY },
        //         alpha: { value: toAlpha },
        //     },
        // });
    };
    JoyStickManager.prototype.addListener = function (l) {
        this.mJoyListeners.push(l);
        if (this.mJoyStick) {
            this.mJoyStick.changeListeners(this.mJoyListeners);
        }
    };
    JoyStickManager.prototype.getKeyCodes = function (eventName) {
        if (!this.mKeyEventMap.has(eventName))
            return undefined;
        var len = this.mKeyEventMap.get(eventName).keyCodes.length;
        var keyCodes = [];
        for (var i = 0; i < len; i++) {
            var keyCode = this.mKeyEventMap.get(eventName).keyCodes[i];
            keyCodes.push(keyCode);
        }
        return keyCodes;
    };
    JoyStickManager.prototype.removeListener = function (l) {
        // this.mJoyStick.removeListener(l);
        var idx = this.mJoyListeners.indexOf(l);
        if (idx >= 0) {
            this.mJoyListeners.splice(idx, 1);
        }
        if (this.mJoyStick) {
            this.mJoyStick.changeListeners(this.mJoyListeners);
        }
    };
    JoyStickManager.prototype.getKeyDowns = function () {
        return [];
    };
    JoyStickManager.prototype.getKeyUps = function () {
        return [];
    };
    JoyStickManager.prototype.downHandler = function () {
    };
    JoyStickManager.prototype.upHandler = function () {
    };
    Object.defineProperty(JoyStickManager.prototype, "enable", {
        get: function () {
            return this.mEnabled;
        },
        set: function (val) {
            this.mEnabled = val;
        },
        enumerable: false,
        configurable: true
    });
    return JoyStickManager;
}());

var JoyStick = /** @class */ (function () {
    function JoyStick(scene, world, parentCon, joyListeners, scale) {
        this.mDown = false;
        this.mScene = scene;
        this.mWorld = world;
        this.parentCon = parentCon;
        this.mJoyListeners = joyListeners;
        this.mScale = scale;
        this.mKeyCodes = [];
        this.load();
    }
    JoyStick.prototype.load = function () {
        this.mScene.load.atlas("joystick", "./resources/ui/joystick/joystick.png", "./resources/ui/joystick/joystick.json");
        this.mScene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadCompleteHandler, this);
        this.mScene.load.start();
    };
    JoyStick.prototype.onListener = function () {
        this.mScene.input.on("pointerdown", this.downHandler, this);
        this.mScene.input.on("pointerup", this.upHandler, this);
    };
    JoyStick.prototype.offListener = function () {
        this.parentCon.visible = false;
        this.mScene.input.off("pointermove", this.pointerMove, this);
        this.mScene.input.off("pointerdown", this.downHandler, this);
        this.mScene.input.off("pointerup", this.upHandler, this);
    };
    JoyStick.prototype.changeListeners = function (list) {
        this.mJoyListeners = list;
    };
    JoyStick.prototype.onLoadCompleteHandler = function () {
        var size = this.mWorld.getSize();
        this.bg = this.mScene.make.sprite(undefined, false);
        this.bg.setTexture("joystick", "joystick_bg.png");
        this.bgRadius = this.bg.width + 100 >> 1;
        this.btn = this.mScene.make.sprite(undefined, false);
        this.btn.name = "joystick_btn";
        this.btn.setTexture("joystick", "joystick_tab.png");
        this.btn.x = this.bg.x;
        this.btn.y = this.bg.y;
        this.parentCon.alpha = .5;
        this.parentCon.addAt(this.bg, 0);
        this.parentCon.addAt(this.btn, 1);
        this.btn.setInteractive(new Phaser.Geom.Rectangle(0, 0, this.btn.width, this.btn.height), Phaser.Geom.Rectangle.Contains);
        // this.mScene.input.setDraggable(this.btn);
        // this.mScene.input.on("pointerdown", this.downHandler, this);
        // this.mScene.input.on("pointerup", this.upHandler, this);
        this.parentCon.setSize(this.bg.width, this.bg.height);
        this.parentCon.visible = false;
    };
    // private dragStart(pointer) {
    //     Logger.getInstance().log("dragstart");
    //     this.btn.on("drag", this.dragUpdate, this);
    //     this.btn.off("dragstart", this.dragStart, this);
    //     this.btn.on("dragend", this.dragStop, this);
    //     this.btn.on("dragcancel", this.dragStop, this);
    // }
    JoyStick.prototype.downHandler = function (pointer, gameojectList) {
        if (!this.mWorld.inputManager.enable) {
            return;
        }
        if (this.mDown)
            return;
        if (gameojectList) {
            if (gameojectList.length > 1) {
                return;
            }
            else if (gameojectList.length === 1) {
                if (gameojectList[0].name) {
                    if (gameojectList[0].name !== "joystick_btn") {
                        return;
                    }
                }
                else {
                    return;
                }
            }
        }
        this.mDown = true;
        this.mScene.input.on("pointermove", this.pointerMove, this);
        // 由于app环境下，游戏在浏览器中是全屏模式，所以需要在点击事件上除以当前UIscale调整位置
        this.parentCon.x = pointer.worldX;
        this.parentCon.y = pointer.worldY;
        this.parentCon.visible = true;
        // this.mScene.input.off("pointerdown", this.downHandler, this);
        // this.mScene.input.manager.updateInputPlugins(TEMP_CONST.TOUCH_END, [pointer]);
        // this.btn.on("dragstart", this.dragStart, this);
        // this.mScene.input.manager.updateInputPlugins(TEMP_CONST.TOUCH_START, [pointer]);
        // // phaser 的冒泡事件比较奇葩，没有停止冒泡的参数选项，只会把第一个有返回交互事件的scene返回过来，如果是多层scene，后续scene的交互就会return
        // // 实际是为了防止多个事件派发，其实很蠢，应该给参数让用户自己选择是否派发
        // const play: PlayScene = this.mWorld.game.scene.getScene(PlayScene.name) as PlayScene;
        // if (play) (play.input as any).update(TEMP_CONST.MOUSE_DOWN, [pointer]);
    };
    JoyStick.prototype.pointerMove = function (pointer) {
        var _this = this;
        if (!this.mWorld.inputManager.enable) {
            return;
        }
        var dragX = pointer.worldX - this.parentCon.x;
        var dragY = pointer.worldY - this.parentCon.y;
        var d = Math.sqrt(dragX * dragX + dragY * dragY);
        if (d > this.bgRadius) {
            d = this.bgRadius;
        }
        var r = Math.atan2(dragY, dragX);
        this.btn.x = Math.cos(r) * d;
        this.btn.y = Math.sin(r) * d;
        if (!this.mWorld.inputManager.enable) {
            return;
        }
        var radian = Math.acos(dragX / d);
        if (pointer.worldY > this.parentCon.y) {
            radian = -radian;
        }
        this.mJoyListeners.forEach(function (l) {
            _this.checkdragDown(l, radian);
        });
    };
    // private dragUpdate(pointer, dragX, dragY) {
    //     Logger.getInstance().log("draging");
    //     let d = Math.sqrt(dragX * dragX + dragY * dragY);
    //     if (d > this.bgRadius) {
    //         d = this.bgRadius;
    //     }
    //     const r = Math.atan2(dragY, dragX);
    //     this.btn.x = Math.cos(r) * d + this.bg.x;
    //     this.btn.y = Math.sin(r) * d + this.bg.y;
    //     if (!(this.mWorld.inputManager as JoyStickManager).enable) {
    //         return;
    //     }
    //     this.mJoyListeners.forEach((l: InputListener) => {
    //         this.checkdragDown(l, r);
    //     });
    // }
    JoyStick.prototype.upHandler = function (pointer) {
        var _this = this;
        this.btn.x = this.bg.x;
        this.btn.y = this.bg.y;
        this.mDown = false;
        this.parentCon.visible = false;
        this.mScene.input.off("pointermove", this.pointerMove, this);
        if (!this.mWorld.inputManager.enable) {
            return;
        }
        this.mJoyListeners.forEach(function (l) {
            if (_this.checkdragUp()) {
                l.upHandler();
            }
        });
    };
    JoyStick.prototype.checkdragDown = function (l, r) {
        var dir;
        var keyArr = [];
        var radian = Math.PI * 0.125;
        if (r > -radian && r <= radian) {
            dir = _rooms_element_element__WEBPACK_IMPORTED_MODULE_1__[/* Direction */ "a"].east;
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().log("dir:Direction.east");
        }
        else if (r > radian && r <= 3 * radian) {
            dir = _rooms_element_element__WEBPACK_IMPORTED_MODULE_1__[/* Direction */ "a"].east_north;
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().log("dir:Direction.east_north");
        }
        else if (r > 3 * radian && r <= 5 * radian) {
            dir = _rooms_element_element__WEBPACK_IMPORTED_MODULE_1__[/* Direction */ "a"].north;
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().log("dir:Direction.north");
        }
        else if (r > 5 * radian && r <= 7 * radian) {
            dir = _rooms_element_element__WEBPACK_IMPORTED_MODULE_1__[/* Direction */ "a"].north_west;
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().log("dir:Direction.nroth_west");
        }
        else if ((r >= 7 * radian && r <= Math.PI) || (r >= -Math.PI && r < -7 * radian)) {
            dir = _rooms_element_element__WEBPACK_IMPORTED_MODULE_1__[/* Direction */ "a"].west;
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().log("dir:Direction.west");
        }
        else if (r < -5 * radian && r >= -7 * radian) {
            dir = _rooms_element_element__WEBPACK_IMPORTED_MODULE_1__[/* Direction */ "a"].west_south;
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().log("dir:Direction.west_south");
        }
        else if (r > -5 * radian && r <= -3 * radian) {
            dir = _rooms_element_element__WEBPACK_IMPORTED_MODULE_1__[/* Direction */ "a"].south;
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().log("dir:Direction.south");
        }
        else if (r > -3 * radian && r <= -radian) {
            dir = _rooms_element_element__WEBPACK_IMPORTED_MODULE_1__[/* Direction */ "a"].south_east;
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().log("dir:Direction.south_east");
        }
        if (dir === undefined) {
            return;
        }
        keyArr = this.getKeys(dir);
        if (this.mdownStr === keyArr.toString())
            return false;
        this.mdownStr = keyArr.toString();
        l.downHandler(dir, keyArr);
        // if (!(this.mWorld.inputManager as JoyStickManager).enable) {
        //     return false;
        // }
        this.mWorld.roomManager.currentRoom.playerManager.actor.setDirection(dir);
        return true;
    };
    JoyStick.prototype.getKeys = function (dir) {
        var keyArr = this.mKeyCodes[dir];
        if (keyArr) {
            return keyArr;
        }
        switch (dir) {
            case 0:
                keyArr = this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_UP);
                break;
            case 1:
                keyArr = Array.prototype.concat.apply(this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_UP).concat, this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_LEFT));
                break;
            case 2:
                keyArr = this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_LEFT);
                break;
            case 3:
                keyArr = Array.prototype.concat.apply(this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_DOWN), this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_LEFT));
                break;
            case 4:
                keyArr = this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_DOWN);
                break;
            case 5:
                keyArr = Array.prototype.concat.apply(this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_DOWN), this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_RIGHT));
                break;
            case 6:
                keyArr = this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_RIGHT);
                break;
            case 7:
                keyArr = Array.prototype.concat.apply(this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_UP), this.mWorld.inputManager.getKeyCodes(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].TQ_EVENT.TQ_MOVE_RIGHT));
                break;
        }
        this.mKeyCodes[dir] = keyArr;
        return keyArr;
    };
    JoyStick.prototype.checkdragUp = function () {
        this.mdownStr = "";
        return true;
    };
    return JoyStick;
}());



/***/ }),
/* 412 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ElementStorage; });
/* harmony import */ var _rooms_display_frames_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(162);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _rooms_display_animation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(204);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(104);





var ElementStorage = /** @class */ (function () {
    function ElementStorage() {
        this.mModels = new Map();
        this.mElementRef = new Map();
        this.terrainPalette = new Map();
        this.terrainPaletteWithBindId = new Map();
        this.mossPalette = new Map();
        this.event = new Phaser.Events.EventEmitter();
    }
    ElementStorage.prototype.on = function (event, fn, context) {
        this.event.on(event, fn, context);
    };
    ElementStorage.prototype.off = function (event, fn, context) {
        this.event.off(event, fn, context);
    };
    ElementStorage.prototype.setGameConfig = function (config) {
        _utils_log__WEBPACK_IMPORTED_MODULE_1__[/* Logger */ "a"].getInstance().log("TCL: ElementStorage -> config", config);
        if (!config) {
            return;
        }
        var objs = config.objectsList;
        var displayModel = null;
        for (var _i = 0, objs_1 = objs; _i < objs_1.length; _i++) {
            var obj = objs_1[_i];
            if (obj.type === pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].NodeType.ElementNodeType) {
                displayModel = this.mModels.get(obj.id);
                if (!displayModel) {
                    var anis = [];
                    var eleAnis = obj.animations;
                    var objAnis = eleAnis.animationData;
                    for (var _a = 0, objAnis_1 = objAnis; _a < objAnis_1.length; _a++) {
                        var ani = objAnis_1[_a];
                        anis.push(new _rooms_display_animation__WEBPACK_IMPORTED_MODULE_3__[/* Animation */ "a"](ani));
                    }
                    displayModel = new _rooms_display_frames_model__WEBPACK_IMPORTED_MODULE_0__[/* FramesModel */ "a"]({
                        id: obj.id,
                        sn: obj.sn,
                        animations: {
                            defaultAnimationName: eleAnis.defaultAnimationName,
                            display: eleAnis.display,
                            animationData: anis,
                        },
                    });
                    this.mModels.set(obj.id, displayModel);
                }
                var ele = {
                    id: obj.id,
                    displayModel: displayModel,
                };
                this.mElementRef.set(obj.id, ele);
            }
        }
        this.updatePalette(config.root.palette);
        this.updateMoss(config.root.moss);
        this.updateAssets(config.root.assets);
    };
    ElementStorage.prototype.updatePalette = function (palette) {
        for (var _i = 0, _a = Array.from(palette.peersDict.keys()); _i < _a.length; _i++) {
            var key = _a[_i];
            var terrainPalette = palette.peersDict.get(key);
            var terrainModel = this.terrainPalette.get(terrainPalette.id);
            if (!terrainModel) {
                var frameModel = new _rooms_display_frames_model__WEBPACK_IMPORTED_MODULE_0__[/* FramesModel */ "a"]({
                    id: terrainPalette.id,
                    sn: terrainPalette.sn,
                    animations: {
                        defaultAnimationName: terrainPalette.animations.defaultAnimationName,
                        display: terrainPalette.animations.display,
                        animationData: terrainPalette.animations.animationData.map(function (ani) { return new _rooms_display_animation__WEBPACK_IMPORTED_MODULE_3__[/* Animation */ "a"](ani); }),
                    },
                });
                this.terrainPalette.set(key, frameModel);
                this.terrainPaletteWithBindId.set(terrainPalette.id, frameModel);
            }
        }
    };
    ElementStorage.prototype.updateMoss = function (moss) {
        for (var _i = 0, _a = Array.from(moss.peersDict.keys()); _i < _a.length; _i++) {
            var peerKey = _a[_i];
            var elementMoss = moss.peersDict.get(peerKey);
            var elementModel = this.mossPalette.get(elementMoss.id);
            if (!elementModel) {
                var frameModel = new _rooms_display_frames_model__WEBPACK_IMPORTED_MODULE_0__[/* FramesModel */ "a"]({
                    id: elementMoss.id,
                    sn: elementMoss.sn,
                    animations: {
                        defaultAnimationName: elementMoss.animations.defaultAnimationName,
                        display: elementMoss.animations.display,
                        animationData: elementMoss.animations.animationData.map(function (ani) { return new _rooms_display_animation__WEBPACK_IMPORTED_MODULE_3__[/* Animation */ "a"](ani); }),
                    },
                });
                this.mossPalette.set(peerKey, frameModel);
            }
        }
    };
    ElementStorage.prototype.updateAssets = function (assetsNode) {
        var assets = assetsNode.getAssetList();
        this._assets = [];
        for (var _i = 0, assets_1 = assets; _i < assets_1.length; _i++) {
            var asset = assets_1[_i];
            var media = asset.media;
            if (media) {
                var fileType = media.match(/\.([a-zA-Z0-9]+)($|\?)/);
                if (fileType && fileType[1]) {
                    this._assets.push({
                        type: fileType[1],
                        key: asset.key,
                        source: _utils_resUtil__WEBPACK_IMPORTED_MODULE_4__[/* Url */ "h"].getOsdRes(media)
                    });
                }
            }
        }
    };
    ElementStorage.prototype.setSceneConfig = function (config) {
        var objs = config.objectsList;
        var displayModel = null;
        // TODO Lite deserialize可能会有个别Display link失败
        for (var _i = 0, objs_2 = objs; _i < objs_2.length; _i++) {
            var obj = objs_2[_i];
            if (obj.type === pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].NodeType.ElementNodeType) {
                displayModel = this.mModels.get(obj.id);
                if (!displayModel) {
                    var anis = [];
                    var eleAnis = obj.animations;
                    var objAnis = eleAnis.animationData;
                    for (var _a = 0, objAnis_2 = objAnis; _a < objAnis_2.length; _a++) {
                        var ani = objAnis_2[_a];
                        anis.push(new _rooms_display_animation__WEBPACK_IMPORTED_MODULE_3__[/* Animation */ "a"](ani));
                    }
                    displayModel = new _rooms_display_frames_model__WEBPACK_IMPORTED_MODULE_0__[/* FramesModel */ "a"]({
                        id: obj.id,
                        sn: obj.sn,
                        animations: {
                            defaultAnimationName: eleAnis.defaultAnimationName,
                            display: eleAnis.display,
                            animationData: anis,
                        },
                    });
                    this.mModels.set(obj.id, displayModel);
                }
                var ele = {
                    id: obj.id,
                    displayModel: displayModel,
                };
                this.mElementRef.set(obj.id, ele);
            }
        }
        var sceneNode = config.root.children.find(function (node) { return node.type === pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_def"].NodeType.SceneNodeType; });
        this._terrainCollection = sceneNode.terrainCollection;
        this._mossCollection = sceneNode.mossCollection;
        this._scenerys = sceneNode.getScenerys();
        // const scenerys = sceneNode.getScenerys();
        // this._scenerys = [];
        // for (const scenery of scenerys) {
        //     this._scenerys.push(scenery);
        // }
    };
    ElementStorage.prototype.add = function (obj) {
        this.mModels.set(obj.id, obj);
    };
    ElementStorage.prototype.getDisplayModel = function (id) {
        var ele = this.mElementRef.get(id);
        if (ele) {
            return ele.displayModel;
        }
        // Logger.getInstance().error(`can't find element ${id}`);
        return;
    };
    ElementStorage.prototype.getTerrainCollection = function () {
        return this._terrainCollection;
    };
    ElementStorage.prototype.getTerrainPalette = function (key) {
        if (this.terrainPalette.get(key)) {
            return this.terrainPalette.get(key);
        }
    };
    ElementStorage.prototype.getTerrainPaletteByBindId = function (id) {
        if (this.terrainPaletteWithBindId.get(id)) {
            return this.terrainPaletteWithBindId.get(id);
        }
    };
    ElementStorage.prototype.getMossCollection = function () {
        return this._mossCollection;
    };
    ElementStorage.prototype.getMossPalette = function (id) {
        if (this.mossPalette.get(id)) {
            return this.mossPalette.get(id);
        }
    };
    ElementStorage.prototype.getScenerys = function () {
        return this._scenerys;
    };
    ElementStorage.prototype.getAssets = function () {
        return this._assets;
    };
    ElementStorage.prototype.destroy = function () {
        this.mElementRef.clear();
        this.terrainPalette.clear();
        this.mossPalette.clear();
        this._assets = undefined;
    };
    return ElementStorage;
}());



/***/ }),
/* 413 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return load; });
/* unused harmony export checkIsFriend */
function load(path, responseType) {
    return new Promise(function (resolve, reject) {
        var http = new XMLHttpRequest();
        http.onload = function (response) {
            resolve(response.currentTarget);
        };
        http.onerror = function () {
            // Logger.getInstance().warn(`${path} load error`);
            reject(path + " load error");
        };
        http.open("GET", path);
        http.responseType = responseType || "";
        http.send();
    });
}
function checkIsFriend(uids) {
    var data = {
        body: JSON.stringify({ uids: uids }),
        method: "POST",
        headers: {
            "X-Pixelpai-TK": ""
        }
    };
    return fetch("https://api-dev.tooqing.com/" + "/user/check_followed", data);
}
function get(input, init) {
    return fetch(input, init);
}


/***/ }),
/* 414 */
/***/ (function(module, exports) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2018 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

const DEG_TO_RAD = Math.PI / 180;

/**
 * Convert the given angle from degrees, to the equivalent angle in radians.
 *
 * @function Phaser.Math.DegToRad
 * @since 3.0.0
 *
 * @param {integer} degrees - The angle (in degrees) to convert to radians.
 *
 * @return {number} The given angle converted to radians.
 */
var DegToRad = function (degrees)
{
    return degrees * DEG_TO_RAD;
};

module.exports = DegToRad;


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://opensource.org/licenses/MIT|MIT License}
 */

//  Earcut 2.1.4 (December 4th 2018)

/*
 * ISC License
 * 
 * Copyright (c) 2016, Mapbox
 * 
 * Permission to use, copy, modify, and/or distribute this software for any purpose
 * with or without fee is hereby granted, provided that the above copyright notice
 * and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
 * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 * THIS SOFTWARE.
 */



module.exports = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];

    if (!outerNode || outerNode.next === outerNode.prev) return triangles;

    var minX, minY, maxX, maxY, x, y, invSize;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 1 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;

    var p = start,
        again;
    do {
        again = false;

        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;

        } else {
            p = p.next;
        }
    } while (again || p !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);

            removeNode(ear);

            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(ear, triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear
    var p = ear.next.next;

    while (p !== ear.prev) {
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }

    return true;
}

function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // triangle bbox; min & max are calculated like this for speed
    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

    // z-order range for the current triangle bbox;
    var minZ = zOrder(minTX, minTY, minX, minY, invSize),
        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);

    var p = ear.prevZ,
        n = ear.nextZ;

    // look for points inside the triangle in both directions
    while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;

        if (n !== ear.prev && n !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    // look for remaining points in decreasing z-order
    while (p && p.z >= minZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }

    // look for remaining points in increasing z-order
    while (n && n.z <= maxZ) {
        if (n !== ear.prev && n !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;

        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);

            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);

            p = start = b;
        }
        p = p.next;
    } while (p !== start);

    return p;
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);

                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize);
                earcutLinked(c, triangles, dim, minX, minY, invSize);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }

    queue.sort(compareX);

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
    }

    return outerNode;
}

function compareX(a, b) {
    return a.x - b.x;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
        var b = splitPolygon(outerNode, hole);
        filterPoints(b, b.next);
    }
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    } while (p !== outerNode);

    if (!m) return null;

    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;

    p = m.next;

    while (p !== stop) {
        if (hx >= p.x && p.x >= mx && hx !== p.x &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                m = p;
                tanMin = tan;
            }
        }

        p = p.next;
    }

    return m;
}

// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;

    sortLinked(p);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;

    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x) leftmost = p;
        p = p.next;
    } while (p !== start);

    return leftmost;
}

// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
}

// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}

// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}

// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    if ((equals(p1, q1) && equals(p2, q2)) ||
        (equals(p1, q2) && equals(p2, q1))) return true;
    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
        p.prev = p;
        p.next = p;

    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}

function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;

    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;

    // vertex coordinates
    this.x = x;
    this.y = y;

    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = null;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }

    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};

function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}

// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

var FillPathWebGL = __webpack_require__(417);
var StrokePathWebGL = __webpack_require__(418);

/**
 * Renders this Game Object with the WebGL Renderer to the given Camera.
 * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.
 * This method should not be called directly. It is a utility function of the Render module.
 *
 * @method Phaser.GameObjects.Polygon#renderWebGL
 * @since 3.13.0
 * @private
 *
 * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.
 * @param {Phaser.GameObjects.Polygon} src - The Game Object being rendered in this call.
 * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.
 * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested
 */
var PolygonWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)
{
    var pipeline = this.pipeline;

    var camMatrix = pipeline._tempMatrix1;
    var shapeMatrix = pipeline._tempMatrix2;
    var calcMatrix = pipeline._tempMatrix3;

    renderer.setPipeline(pipeline);

    shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);

    camMatrix.copyFrom(camera.matrix);

    if (parentMatrix)
    {
        //  Multiply the camera by the parent matrix
        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);

        //  Undo the camera scroll
        shapeMatrix.e = src.x;
        shapeMatrix.f = src.y;
    }
    else
    {
        shapeMatrix.e -= camera.scrollX * src.scrollFactorX;
        shapeMatrix.f -= camera.scrollY * src.scrollFactorY;
    }

    camMatrix.multiply(shapeMatrix, calcMatrix);

    var dx = src._displayOriginX;
    var dy = src._displayOriginY;

    var alpha = camera.alpha * src.alpha;

    if (src.isFilled)
    {
        FillPathWebGL(pipeline, calcMatrix, src, alpha, dx, dy);
    }

    if (src.isStroked)
    {
        StrokePathWebGL(pipeline, src, alpha, dx, dy);
    }
};

module.exports = PolygonWebGLRenderer;


/***/ }),
/* 417 */
/***/ (function(module, exports) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

var Utils = Phaser.Renderer.WebGL.Utils;

/**
 * Renders a filled path for the given Shape.
 *
 * @method Phaser.GameObjects.Shape#FillPathWebGL
 * @since 3.13.0
 * @private
 *
 * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipeline - The WebGL Pipeline used to render this Shape.
 * @param {Phaser.GameObjects.Components.TransformMatrix} calcMatrix - The transform matrix used to get the position values.
 * @param {Phaser.GameObjects.Shape} src - The Game Object shape being rendered in this call.
 * @param {number} alpha - The base alpha value.
 * @param {number} dx - The source displayOriginX.
 * @param {number} dy - The source displayOriginY.
 */
var FillPathWebGL = function (pipeline, calcMatrix, src, alpha, dx, dy)
{
    var fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);

    var path = src.pathData;
    var pathIndexes = src.pathIndexes;

    for (var i = 0; i < pathIndexes.length; i += 3)
    {
        var p0 = pathIndexes[i] * 2;
        var p1 = pathIndexes[i + 1] * 2;
        var p2 = pathIndexes[i + 2] * 2;

        var x0 = path[p0 + 0] - dx;
        var y0 = path[p0 + 1] - dy;
        var x1 = path[p1 + 0] - dx;
        var y1 = path[p1 + 1] - dy;
        var x2 = path[p2 + 0] - dx;
        var y2 = path[p2 + 1] - dy;

        var tx0 = calcMatrix.getX(x0, y0);
        var ty0 = calcMatrix.getY(x0, y0);

        var tx1 = calcMatrix.getX(x1, y1);
        var ty1 = calcMatrix.getY(x1, y1);

        var tx2 = calcMatrix.getX(x2, y2);
        var ty2 = calcMatrix.getY(x2, y2);
    
        pipeline.setTexture2D();

        pipeline.batchTri(tx0, ty0, tx1, ty1, tx2, ty2, 0, 0, 1, 1, fillTintColor, fillTintColor, fillTintColor, pipeline.tintEffect);
    }
};

module.exports = FillPathWebGL;


/***/ }),
/* 418 */
/***/ (function(module, exports) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

var Utils = Phaser.Renderer.WebGL.Utils;

/**
 * Renders a stroke outline around the given Shape.
 *
 * @method Phaser.GameObjects.Shape#StrokePathWebGL
 * @since 3.13.0
 * @private
 *
 * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipeline - The WebGL Pipeline used to render this Shape.
 * @param {Phaser.GameObjects.Shape} src - The Game Object shape being rendered in this call.
 * @param {number} alpha - The base alpha value.
 * @param {number} dx - The source displayOriginX.
 * @param {number} dy - The source displayOriginY.
 */
var StrokePathWebGL = function (pipeline, src, alpha, dx, dy)
{
    var strokeTint = pipeline.strokeTint;
    var strokeTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.strokeColor, src.strokeAlpha * alpha);

    strokeTint.TL = strokeTintColor;
    strokeTint.TR = strokeTintColor;
    strokeTint.BL = strokeTintColor;
    strokeTint.BR = strokeTintColor;

    var path = src.pathData;
    var pathLength = path.length - 1;
    var lineWidth = src.lineWidth;
    var halfLineWidth = lineWidth / 2;

    var px1 = path[0] - dx;
    var py1 = path[1] - dy;

    if (!src.closePath)
    {
        pathLength -= 2;
    }

    for (var i = 2; i < pathLength; i += 2)
    {
        var px2 = path[i] - dx;
        var py2 = path[i + 1] - dy;

        pipeline.setTexture2D();

        pipeline.batchLine(
            px1,
            py1,
            px2,
            py2,
            halfLineWidth,
            halfLineWidth,
            lineWidth,
            i - 2,
            (src.closePath) ? (i === pathLength - 1) : false
        );

        px1 = px2;
        py1 = py2;
    }
};

module.exports = StrokePathWebGL;


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

var FillStyleCanvas = __webpack_require__(420);
var LineStyleCanvas = __webpack_require__(421);
var SetTransform = Phaser.Renderer.Canvas.SetTransform;

/**
 * Renders this Game Object with the Canvas Renderer to the given Camera.
 * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.
 * This method should not be called directly. It is a utility function of the Render module.
 *
 * @method Phaser.GameObjects.Polygon#renderCanvas
 * @since 3.13.0
 * @private
 *
 * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.
 * @param {Phaser.GameObjects.Polygon} src - The Game Object being rendered in this call.
 * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.
 * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested
 */
var PolygonCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {
    var ctx = renderer.currentContext;

    if (SetTransform(renderer, ctx, src, camera, parentMatrix)) {
        var dx = src._displayOriginX;
        var dy = src._displayOriginY;

        var path = src.pathData;
        var pathLength = path.length - 1;

        var px1 = path[0] - dx;
        var py1 = path[1] - dy;

        ctx.beginPath();

        ctx.moveTo(px1, py1);

        if (!src.closePath) {
            pathLength -= 2;
        }

        for (var i = 2; i < pathLength; i += 2) {
            var px2 = path[i] - dx;
            var py2 = path[i + 1] - dy;

            ctx.lineTo(px2, py2);
        }

        ctx.closePath();

        if (src.isFilled) {
            FillStyleCanvas(ctx, src);

            ctx.fill();
        }

        if (src.isStroked) {
            LineStyleCanvas(ctx, src);

            ctx.stroke();
        }

        //  Restore the context saved in SetTransform
        ctx.restore();
    }
};

module.exports = PolygonCanvasRenderer;


/***/ }),
/* 420 */
/***/ (function(module, exports) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://opensource.org/licenses/MIT|MIT License}
 */

/**
 * Sets the fillStyle on the target context based on the given Shape.
 *
 * @method Phaser.GameObjects.Shape#FillStyleCanvas
 * @since 3.13.0
 * @private
 *
 * @param {CanvasRenderingContext2D} ctx - The context to set the fill style on.
 * @param {Phaser.GameObjects.Shape} src - The Game Object to set the fill style from.
 * @param {number} [altColor] - An alternative color to render with.
 * @param {number} [altAlpha] - An alternative alpha to render with.
 */
var FillStyleCanvas = function (ctx, src, altColor, altAlpha)
{
    var fillColor = (altColor) ? altColor : src.fillColor;
    var fillAlpha = (altAlpha) ? altAlpha : src.fillAlpha;

    var red = ((fillColor & 0xFF0000) >>> 16);
    var green = ((fillColor & 0xFF00) >>> 8);
    var blue = (fillColor & 0xFF);

    ctx.fillStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + fillAlpha + ')';
};

module.exports = FillStyleCanvas;


/***/ }),
/* 421 */
/***/ (function(module, exports) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://opensource.org/licenses/MIT|MIT License}
 */

/**
 * Sets the strokeStyle and lineWidth on the target context based on the given Shape.
 *
 * @method Phaser.GameObjects.Shape#LineStyleCanvas
 * @since 3.13.0
 * @private
 *
 * @param {CanvasRenderingContext2D} ctx - The context to set the stroke style on.
 * @param {Phaser.GameObjects.Shape} src - The Game Object to set the stroke style from.
 * @param {number} [altColor] - An alternative color to render with.
 * @param {number} [altAlpha] - An alternative alpha to render with.
 */
var LineStyleCanvas = function (ctx, src, altColor, altAlpha)
{
    var strokeColor = (altColor) ? altColor : src.strokeColor;
    var strokeAlpha = (altAlpha) ? altAlpha : src.strokeAlpha;

    var red = ((strokeColor & 0xFF0000) >>> 16);
    var green = ((strokeColor & 0xFF00) >>> 8);
    var blue = (strokeColor & 0xFF);

    ctx.strokeStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + strokeAlpha + ')';
    ctx.lineWidth = src.lineWidth;
};

module.exports = LineStyleCanvas;


/***/ }),
/* 422 */
/***/ (function(module, exports) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

var Utils = Phaser.Renderer.WebGL.Utils;

/**
 * Renders this Game Object with the WebGL Renderer to the given Camera.
 * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.
 * This method should not be called directly. It is a utility function of the Render module.
 *
 * @method Phaser.GameObjects.Text#renderWebGL
 * @since 3.0.0
 * @private
 *
 * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.
 * @param {Phaser.GameObjects.Text} src - The Game Object being rendered in this call.
 * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.
 * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested
 */
var TextWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {
    if ((src.width === 0) || (src.height === 0)) {
        return;
    }

    var frame = src.frame;
    var width = frame.width;
    var height = frame.height;
    var getTint = Utils.getTintAppendFloatAlpha;

    this.pipeline.batchTexture(
        src,
        frame.glTexture,
        width, height,
        src.x, src.y,
        width / src.style.resolution, height / src.style.resolution,
        src.scaleX, src.scaleY,
        src.rotation,
        src.flipX, src.flipY,
        src.scrollFactorX, src.scrollFactorY,
        src.displayOriginX, src.displayOriginY,
        0, 0, width, height,
        getTint(src._tintTL, camera.alpha * src._alphaTL),
        getTint(src._tintTR, camera.alpha * src._alphaTR),
        getTint(src._tintBL, camera.alpha * src._alphaBL),
        getTint(src._tintBR, camera.alpha * src._alphaBR),
        (src._isTinted && src.tintFill),
        0, 0,
        camera,
        parentMatrix
    );
};

module.exports = TextWebGLRenderer;


/***/ }),
/* 423 */
/***/ (function(module, exports) {

/**
 * @author       Richard Davey <rich@photonstorm.com>
 * @copyright    2019 Photon Storm Ltd.
 * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
 */

/**
 * Renders this Game Object with the Canvas Renderer to the given Camera.
 * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.
 * This method should not be called directly. It is a utility function of the Render module.
 *
 * @method Phaser.GameObjects.Text#renderCanvas
 * @since 3.0.0
 * @private
 *
 * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.
 * @param {Phaser.GameObjects.Text} src - The Game Object being rendered in this call.
 * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.
 * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.
 * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested
 */
var TextCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {
    if ((src.width === 0) || (src.height === 0)) {
        return;
    }

    renderer.batchSprite(src, src.frame, camera, parentMatrix);
};

module.exports = TextCanvasRenderer;


/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./Activity/ActivityMediator": 246,
	"./Activity/ActivityMediator.ts": 246,
	"./Activity/ActivityPanel": 247,
	"./Activity/ActivityPanel.ts": 247,
	"./Bubble/interactionbubble": 323,
	"./Bubble/interactionbubble.container": 258,
	"./Bubble/interactionbubble.container.ts": 258,
	"./Bubble/interactionbubble.ts": 323,
	"./Bubble/interactivebubble.manager": 257,
	"./Bubble/interactivebubble.manager.ts": 257,
	"./CharacterInfo/CharacterEditorPanel": 262,
	"./CharacterInfo/CharacterEditorPanel.ts": 262,
	"./CharacterInfo/CharacterInfo": 266,
	"./CharacterInfo/CharacterInfo.ts": 266,
	"./CharacterInfo/CharacterInfoMediator": 351,
	"./CharacterInfo/CharacterInfoMediator.ts": 351,
	"./CharacterInfo/CharacterInfoPanel": 327,
	"./CharacterInfo/CharacterInfoPanel.ts": 327,
	"./CharacterInfo/GraphicsProgressBar": 355,
	"./CharacterInfo/GraphicsProgressBar.ts": 355,
	"./CharacterInfo/GridLayoutGroup": 273,
	"./CharacterInfo/GridLayoutGroup.ts": 273,
	"./CharacterInfo/ScrollRect": 356,
	"./CharacterInfo/ScrollRect.ts": 356,
	"./ComponentRank/ComponentRankMediator": 274,
	"./ComponentRank/ComponentRankMediator.ts": 274,
	"./ComponentRank/ComponentRankPanel": 275,
	"./ComponentRank/ComponentRankPanel.ts": 275,
	"./Compose/Compose": 276,
	"./Compose/Compose.ts": 276,
	"./Compose/ComposeMediator": 357,
	"./Compose/ComposeMediator.ts": 357,
	"./Compose/ComposePanel": 277,
	"./Compose/ComposePanel.ts": 277,
	"./ControlF/ControlFMediator": 205,
	"./ControlF/ControlFMediator.ts": 205,
	"./ControlF/ControlFPanel": 206,
	"./ControlF/ControlFPanel.ts": 206,
	"./CutIn/CutInMediator": 358,
	"./CutIn/CutInMediator.ts": 358,
	"./CutIn/CutInPanel": 279,
	"./CutIn/CutInPanel.ts": 279,
	"./CutInMenu/CutInMenu": 280,
	"./CutInMenu/CutInMenu.ts": 280,
	"./CutInMenu/CutInMenuMediator": 359,
	"./CutInMenu/CutInMenuMediator.ts": 359,
	"./CutInMenu/CutInMenuPanel": 281,
	"./CutInMenu/CutInMenuPanel.ts": 281,
	"./DebugLogger/DebugLoggerMediator": 184,
	"./DebugLogger/DebugLoggerMediator.ts": 184,
	"./DebugLogger/DebugLoggerPanel": 282,
	"./DebugLogger/DebugLoggerPanel.ts": 282,
	"./DecorateControl/DecorateControlMediator": 241,
	"./DecorateControl/DecorateControlMediator.ts": 241,
	"./DecorateControl/DecorateControlPanel": 242,
	"./DecorateControl/DecorateControlPanel.ts": 242,
	"./ElementStorage/DragManager": 360,
	"./ElementStorage/DragManager.ts": 360,
	"./ElementStorage/ElementStorageMediator": 176,
	"./ElementStorage/ElementStorageMediator.ts": 176,
	"./ElementStorage/ElementStoragePanel": 231,
	"./ElementStorage/ElementStoragePanel.ts": 231,
	"./ElementStorage/ElementStorate": 233,
	"./ElementStorage/ElementStorate.ts": 233,
	"./ElementStorage/item/Item": 232,
	"./ElementStorage/item/Item.ts": 232,
	"./EquipUpgrade/EquipUpgrade": 283,
	"./EquipUpgrade/EquipUpgrade.ts": 283,
	"./EquipUpgrade/EquipUpgradeItem": 284,
	"./EquipUpgrade/EquipUpgradeItem.ts": 284,
	"./EquipUpgrade/EquipUpgradeMediator": 361,
	"./EquipUpgrade/EquipUpgradeMediator.ts": 361,
	"./EquipUpgrade/EquipUpgradePanel": 285,
	"./EquipUpgrade/EquipUpgradePanel.ts": 285,
	"./FurniBag/FurniBag": 286,
	"./FurniBag/FurniBag.ts": 286,
	"./FurniBag/FurniBagMediator": 362,
	"./FurniBag/FurniBagMediator.ts": 362,
	"./FurniBag/FurniBagPanel": 287,
	"./FurniBag/FurniBagPanel.ts": 287,
	"./InfoPanel/InfoPanel": 288,
	"./InfoPanel/InfoPanel.ts": 288,
	"./InfoPanel/InfoPanelMediator": 289,
	"./InfoPanel/InfoPanelMediator.ts": 289,
	"./InteractivePanel/InteractivePanel": 290,
	"./InteractivePanel/InteractivePanel.ts": 290,
	"./InteractivePanel/InteractivePanelMediator": 291,
	"./InteractivePanel/InteractivePanelMediator.ts": 291,
	"./ItemDetail/ItemDetail": 292,
	"./ItemDetail/ItemDetail.ts": 292,
	"./ItemDetail/ItemDetailMediator": 363,
	"./ItemDetail/ItemDetailMediator.ts": 363,
	"./ItemPopCard/ItemPopCardMediator": 364,
	"./ItemPopCard/ItemPopCardMediator.ts": 364,
	"./ItemPopCard/ItemPopCardPanel": 293,
	"./ItemPopCard/ItemPopCardPanel.ts": 293,
	"./Market/DetailDisplay": 145,
	"./Market/DetailDisplay.ts": 145,
	"./Market/ElementDetail": 294,
	"./Market/ElementDetail.ts": 294,
	"./Market/Market": 297,
	"./Market/Market.ts": 297,
	"./Market/MarketMediator": 365,
	"./Market/MarketMediator.ts": 365,
	"./Market/MarketPanel": 329,
	"./Market/MarketPanel.ts": 329,
	"./Market/NumberCounter": 295,
	"./Market/NumberCounter.ts": 295,
	"./Market/TextButton": 185,
	"./Market/TextButton.ts": 185,
	"./Market/item": 298,
	"./Market/item.ts": 298,
	"./MessageBox/MessageBoxMediator": 366,
	"./MessageBox/MessageBoxMediator.ts": 366,
	"./MessageBox/MessageBoxView": 299,
	"./MessageBox/MessageBoxView.ts": 299,
	"./MineCar/MineCar": 256,
	"./MineCar/MineCar.ts": 256,
	"./MineCar/MineCarMediator": 251,
	"./MineCar/MineCarMediator.ts": 251,
	"./MineCar/MineCarPanel": 252,
	"./MineCar/MineCarPanel.ts": 252,
	"./MineSettle/MineSettle": 300,
	"./MineSettle/MineSettle.ts": 300,
	"./MineSettle/MineSettleMediator": 367,
	"./MineSettle/MineSettleMediator.ts": 367,
	"./MineSettle/MineSettlePanel": 301,
	"./MineSettle/MineSettlePanel.ts": 301,
	"./Notice/Notice": 225,
	"./Notice/Notice.ts": 225,
	"./Notice/NoticeMediator": 223,
	"./Notice/NoticeMediator.ts": 223,
	"./Notice/NoticePanel": 224,
	"./Notice/NoticePanel.ts": 224,
	"./NpcDialogue/NpcDialogue": 302,
	"./NpcDialogue/NpcDialogue.ts": 302,
	"./NpcDialogue/NpcDialogueMediator": 368,
	"./NpcDialogue/NpcDialogueMediator.ts": 368,
	"./NpcDialogue/NpcDialoguePanel": 303,
	"./NpcDialogue/NpcDialoguePanel.ts": 303,
	"./PiCaMainUI/PicaMainUI": 245,
	"./PiCaMainUI/PicaMainUI.ts": 245,
	"./PiCaMainUI/PicaMainUIMediator": 243,
	"./PiCaMainUI/PicaMainUIMediator.ts": 243,
	"./PiCaMainUI/PicaMainUIPanel": 244,
	"./PiCaMainUI/PicaMainUIPanel.ts": 244,
	"./PicaChat/PicaChat": 250,
	"./PicaChat/PicaChat.ts": 250,
	"./PicaChat/PicaChatMediator": 179,
	"./PicaChat/PicaChatMediator.ts": 179,
	"./PicaChat/PicaChatPanel": 248,
	"./PicaChat/PicaChatPanel.ts": 248,
	"./PicaMessageBox/PicaMessageBoxMediator": 369,
	"./PicaMessageBox/PicaMessageBoxMediator.ts": 369,
	"./PicaMessageBox/PicaMessageBoxPanel": 304,
	"./PicaMessageBox/PicaMessageBoxPanel.ts": 304,
	"./PicaNavigate/PicaNavigateMediator": 181,
	"./PicaNavigate/PicaNavigateMediator.ts": 181,
	"./PicaNavigate/PicaNavigatePanel": 249,
	"./PicaNavigate/PicaNavigatePanel.ts": 249,
	"./PicaNotice/PicaNoticeMediator": 370,
	"./PicaNotice/PicaNoticeMediator.ts": 370,
	"./PicaNotice/PicaNoticePanel": 305,
	"./PicaNotice/PicaNoticePanel.ts": 305,
	"./PicaRoomList/PicaRoomListMediator": 371,
	"./PicaRoomList/PicaRoomListMediator.ts": 371,
	"./PicaRoomList/PicaRoomListPanel": 330,
	"./PicaRoomList/PicaRoomListPanel.ts": 330,
	"./PicaRoomList/RoomList": 306,
	"./PicaRoomList/RoomList.ts": 306,
	"./Rank/BasicRankPanel": 173,
	"./Rank/BasicRankPanel.ts": 173,
	"./Rank/RankMediator": 156,
	"./Rank/RankMediator.ts": 156,
	"./Rank/RankPanel": 228,
	"./Rank/RankPanel.ts": 228,
	"./ReAwardTips/ReAwardTip": 260,
	"./ReAwardTips/ReAwardTip.ts": 260,
	"./ReAwardTips/ReAwardTipsMediator": 259,
	"./ReAwardTips/ReAwardTipsMediator.ts": 259,
	"./ReAwardTips/ReAwardTipsPanel": 261,
	"./ReAwardTips/ReAwardTipsPanel.ts": 261,
	"./Shop/ShopMediator": 307,
	"./Shop/ShopMediator.ts": 307,
	"./Shop/ShopPanel": 308,
	"./Shop/ShopPanel.ts": 308,
	"./Shop/shop.itemSlot": 331,
	"./Shop/shop.itemSlot.ts": 331,
	"./UserInfo/UserInfoMediator": 309,
	"./UserInfo/UserInfoMediator.ts": 309,
	"./UserInfo/UserInfoPanel": 310,
	"./UserInfo/UserInfoPanel.ts": 310,
	"./UserMenu/MenuItem": 311,
	"./UserMenu/MenuItem.ts": 311,
	"./UserMenu/UserMenuMediator": 372,
	"./UserMenu/UserMenuMediator.ts": 372,
	"./UserMenu/UserMenuPanel": 312,
	"./UserMenu/UserMenuPanel.ts": 312,
	"./alert/PopUpTextUI": 313,
	"./alert/PopUpTextUI.ts": 313,
	"./bag/IListItemRender": 373,
	"./bag/IListItemRender.ts": 373,
	"./bag/bagView/bagMediator": 131,
	"./bag/bagView/bagMediator.ts": 131,
	"./bag/bagView/bagPanel": 226,
	"./bag/bagView/bagPanel.ts": 226,
	"./bag/basebag": 374,
	"./bag/basebag.ts": 374,
	"./bag/baseitem": 375,
	"./bag/baseitem.ts": 375,
	"./bag/dragDropIcon": 154,
	"./bag/dragDropIcon.ts": 154,
	"./bag/idragable": 376,
	"./bag/idragable.ts": 376,
	"./bag/idropable": 377,
	"./bag/idropable.ts": 377,
	"./bag/item.slot": 132,
	"./bag/item.slot.ts": 132,
	"./bag/storage/storageMediator": 314,
	"./bag/storage/storageMediator.ts": 314,
	"./bag/storage/storagePanel": 315,
	"./bag/storage/storagePanel.ts": 315,
	"./baseView/bagGroup/bag.group": 238,
	"./baseView/bagGroup/bag.group.mediator": 237,
	"./baseView/bagGroup/bag.group.mediator.ts": 237,
	"./baseView/bagGroup/bag.group.ts": 238,
	"./baseView/baseFace.mediator": 133,
	"./baseView/baseFace.mediator.ts": 133,
	"./baseView/bottomGroup/bottom.btn.group": 230,
	"./baseView/bottomGroup/bottom.btn.group.ts": 230,
	"./baseView/bottomGroup/bottom.mediator": 175,
	"./baseView/bottomGroup/bottom.mediator.ts": 175,
	"./baseView/icon.btn": 121,
	"./baseView/icon.btn.ts": 121,
	"./baseView/icon.select.btn": 236,
	"./baseView/icon.select.btn.ts": 236,
	"./baseView/leftGroup/left.btn.group": 235,
	"./baseView/leftGroup/left.btn.group.ts": 235,
	"./baseView/leftGroup/left.mediator": 234,
	"./baseView/leftGroup/left.mediator.ts": 234,
	"./baseView/rightGroup/right.btn.group": 229,
	"./baseView/rightGroup/right.btn.group.ts": 229,
	"./baseView/rightGroup/right.mediator": 174,
	"./baseView/rightGroup/right.mediator.ts": 174,
	"./baseView/top.menu/top.menu.container": 240,
	"./baseView/top.menu/top.menu.container.ts": 240,
	"./baseView/top.menu/top.menu.mediator": 239,
	"./baseView/top.menu/top.menu.mediator.ts": 239,
	"./baseView/topGroup/top.btn.group": 316,
	"./baseView/topGroup/top.btn.group.ts": 316,
	"./baseView/topGroup/top.mediator": 378,
	"./baseView/topGroup/top.mediator.ts": 378,
	"./chat/Chat": 221,
	"./chat/Chat.ts": 221,
	"./chat/base.chat.panel": 170,
	"./chat/base.chat.panel.ts": 170,
	"./chat/chat.mediator": 149,
	"./chat/chat.mediator.ts": 149,
	"./chat/chatPanel.pc": 212,
	"./chat/chatPanel.pc.ts": 212,
	"./chat/message": 379,
	"./chat/message.ts": 379,
	"./chat/mobile/chatPanel.mobile": 220,
	"./chat/mobile/chatPanel.mobile.ts": 220,
	"./components/BasePanel": 105,
	"./components/BasePanel.ts": 105,
	"./components/alert.view": 253,
	"./components/alert.view.ts": 253,
	"./components/check.button": 169,
	"./components/check.button.ts": 169,
	"./components/checkbox.group": 157,
	"./components/checkbox.group.ts": 157,
	"./components/dynamic.image": 113,
	"./components/dynamic.image.ts": 113,
	"./components/dynamic.ninepatch": 201,
	"./components/dynamic.ninepatch.ts": 201,
	"./components/dynamic.sprite": 199,
	"./components/dynamic.sprite.ts": 199,
	"./components/input.panel": 180,
	"./components/input.panel.ts": 180,
	"./components/inputPanel": 380,
	"./components/inputPanel.ts": 380,
	"./components/inputTextFactory": 178,
	"./components/inputTextFactory.ts": 178,
	"./components/label.input": 296,
	"./components/label.input.ts": 296,
	"./components/message.box": 381,
	"./components/message.box.ts": 381,
	"./components/nine.patch": 110,
	"./components/nine.patch.ts": 110,
	"./components/ninepatch.button": 114,
	"./components/ninepatch.button.ts": 114,
	"./components/patches.config": 217,
	"./components/patches.config.ts": 217,
	"./components/radio": 177,
	"./components/radio.ts": 177,
	"./components/tab.button": 382,
	"./components/tab.button.ts": 382,
	"./decorate/decorate.manager": 209,
	"./decorate/decorate.manager.ts": 209,
	"./decorate/decorate.panel": 210,
	"./decorate/decorate.panel.ts": 210,
	"./friend/friend.mediator": 172,
	"./friend/friend.mediator.ts": 172,
	"./friend/friend.panel": 227,
	"./friend/friend.panel.ts": 227,
	"./layer.manager": 222,
	"./layer.manager.ts": 222,
	"./loadview": 383,
	"./loadview.ts": 383,
	"./tips/itoolTip": 384,
	"./tips/itoolTip.ts": 384,
	"./tips/toolTip": 171,
	"./tips/toolTip.ts": 171,
	"./ui.atals.name": 278,
	"./ui.atals.name.ts": 278,
	"./ui.manager": 211,
	"./ui.manager.ts": 211,
	"./ui.mediatorType": 122,
	"./ui.mediatorType.ts": 122
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 424;

/***/ }),
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _gameobjects_text_bbcodetext_Factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(352);
/* harmony import */ var _gameobjects_text_bbcodetext_Creator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(353);
/* harmony import */ var _gameobjects_text_bbcodetext_BBCodeText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(116);
/* harmony import */ var _utils_object_SetValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(108);





class BBCodeTextPlugin extends Phaser.Plugins.BasePlugin {

    constructor(pluginManager) {
        super(pluginManager);

        //  Register our new Game Object type
        pluginManager.registerGameObject('rexBBCodeText', _gameobjects_text_bbcodetext_Factory__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"], _gameobjects_text_bbcodetext_Creator__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);
    }

    start() {
        var eventEmitter = this.game.events;
        eventEmitter.on('destroy', this.destroy, this);
    }
}

Object(_utils_object_SetValue__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"])(window, 'RexPlugins.GameObjects.BBCodeText', _gameobjects_text_bbcodetext_BBCodeText__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);

/* harmony default export */ __webpack_exports__["a"] = (BBCodeTextPlugin);

/***/ }),
/* 429 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Account; });
var Account = /** @class */ (function () {
    function Account() {
        // TODO
        // 1. 登陆注册的逻辑在这里做
        // 2. 缓存用户登陆后的帐号咨讯
    }
    Account.prototype.setAccount = function (val) {
        this.mCurAccountData = {
            token: "",
            expire: 0,
            fingerprint: "",
        };
        Object.assign(this.mCurAccountData, val);
    };
    Object.defineProperty(Account.prototype, "accountData", {
        get: function () {
            return this.mCurAccountData;
        },
        enumerable: false,
        configurable: true
    });
    return Account;
}());



/***/ }),
/* 430 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return HttpService; });
var HttpService = /** @class */ (function () {
    function HttpService(mWorld) {
        this.mWorld = mWorld;
    }
    /**
     * 用户关注其他用户
     * @param uids
     */
    HttpService.prototype.follow = function (fuid) {
        return this.post("user/follow", { fuid: fuid });
    };
    /**
     * 用户取消关注其他用户
     * @param fuid
     */
    HttpService.prototype.unfollow = function (fuid) {
        return this.post("user/unfollow", { fuid: fuid });
    };
    /**
     * 检查用户列表是否有关注的用户
     * @param uids
     */
    HttpService.prototype.checkFollowed = function (uids) {
        return this.post("user/check_followed", { "uids": uids });
    };
    /**
     * 登录
     * @param name
     * @param password
     */
    HttpService.prototype.login = function (account, password) {
        return fetch("" + "https://api-dev.tooqing.com/" + "account/signin", {
            body: JSON.stringify({ account: account, password: password }),
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            }
        }).then(function (response) { return response.json(); });
    };
    /**
     * 请求手机验证码
     * @param name
     */
    HttpService.prototype.requestPhoneCode = function (phone) {
        return fetch("" + "https://api-dev.tooqing.com/" + "account/sms_code", {
            body: JSON.stringify({ phone: phone }),
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            }
        }).then(function (response) { return response.json(); });
    };
    HttpService.prototype.loginByPhoneCode = function (phone, code) {
        return fetch("" + "https://api-dev.tooqing.com/" + "account/phone_signin", {
            body: JSON.stringify({ phone: phone, code: code }),
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            }
        }).then(function (response) { return response.json(); });
    };
    HttpService.prototype.quickLogin = function () {
        return fetch("" + "https://api-dev.tooqing.com/" + "account/quick_signin", {
            method: "POST",
        }).then(function (response) { return response.json(); });
    };
    /**
     *
     * 获取用户好友列表
     */
    HttpService.prototype.firend = function () {
        return this.get("user/friends");
    };
    /**
     * 获取用户信息
     * @param uid
     */
    HttpService.prototype.userDetail = function (uid) {
        return this.get("account/" + uid + "/detail");
    };
    /**
     * 用户徽章
     * @param uid
     */
    HttpService.prototype.badgecards = function (uid) {
        return this.get("userpackage/" + uid + "/badgecards");
    };
    HttpService.prototype.post = function (uri, body) {
        var account = this.mWorld.account;
        if (!account) {
            return Promise.reject("account does not exist");
        }
        if (!account.accountData) {
            return Promise.reject("token does not exist");
        }
        var data = {
            body: JSON.stringify(body),
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-Pixelpai-TK": account.accountData.token
            }
        };
        return fetch("" + "https://api-dev.tooqing.com/" + uri, data).then(function (response) { return response.json(); });
    };
    HttpService.prototype.get = function (uri) {
        var account = this.mWorld.account;
        if (!account) {
            return Promise.reject("account does not exist");
        }
        if (!account.accountData) {
            return Promise.reject("token does not exist");
        }
        var data = {
            method: "GET",
            headers: {
                "X-Pixelpai-TK": account.accountData.token
            }
        };
        return fetch("" + "https://api-dev.tooqing.com/" + uri, data).then(function (response) { return response.json(); });
    };
    return HttpService;
}());



/***/ }),
/* 431 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GamePauseScene; });
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(104);
/* harmony import */ var _utils_size__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(198);
/* harmony import */ var _basic_scene__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(128);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var GamePauseScene = /** @class */ (function (_super) {
    __extends(GamePauseScene, _super);
    function GamePauseScene() {
        return _super.call(this, { key: GamePauseScene.name }) || this;
    }
    GamePauseScene.prototype.preload = function () {
        this.load.image("gamepause.png", _utils_resUtil__WEBPACK_IMPORTED_MODULE_0__[/* Url */ "h"].getRes("gamepause.png"));
    };
    GamePauseScene.prototype.init = function (data) {
        this.mWorld = data.world;
    };
    GamePauseScene.prototype.create = function () {
        var width = this.scale.gameSize.width;
        var height = this.scale.gameSize.height;
        this.bg = this.add.graphics();
        this.bg.fillStyle(0, .8);
        this.bg.fillRect(0, 0, width, height);
        this.pauseImg = this.add.image(width >> 1, height >> 1, "gamepause.png");
        this.tipTF = this.add.text(width - 240 >> 1, height - 50, "点击任意位置开始游戏", { font: "30px Tahoma" });
        this.scale.on("resize", this.checkSize, this);
        this.checkSize(new _utils_size__WEBPACK_IMPORTED_MODULE_1__[/* Size */ "a"](width, height));
        this.input.on("pointerdown", this.downHandler, this);
    };
    GamePauseScene.prototype.awake = function () {
        this.scale.on("resize", this.checkSize, this);
        this.input.on("pointerdown", this.downHandler, this);
        this.scene.wake();
    };
    GamePauseScene.prototype.sleep = function () {
        this.scale.off("resize", this.checkSize, this);
        this.input.off("pointerdown", this.downHandler, this);
        this.scene.sleep();
    };
    GamePauseScene.prototype.getKey = function () {
        return this.sys.config.key;
    };
    GamePauseScene.prototype.downHandler = function () {
        this.mWorld.onFocus();
    };
    GamePauseScene.prototype.checkSize = function (size) {
        var width = size.width;
        var height = size.height;
        this.bg.clear();
        this.bg.fillStyle(0, .8);
        this.bg.fillRect(0, 0, width, height);
        this.pauseImg.scaleX = this.pauseImg.scaleY = this.mWorld.uiScale * .7;
        this.pauseImg.x = width >> 1;
        this.pauseImg.y = height >> 1;
        this.tipTF.scaleX = this.tipTF.scaleY = this.mWorld.uiScale;
        this.tipTF.x = width - 280 * this.mWorld.uiScale >> 1;
        this.tipTF.y = height - 50 * this.mWorld.uiScale;
    };
    return GamePauseScene;
}(_basic_scene__WEBPACK_IMPORTED_MODULE_2__[/* BasicScene */ "a"]));



/***/ }),
/* 432 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export SoundField */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SoundManager; });
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var SoundField;
(function (SoundField) {
    SoundField[SoundField["Background"] = 0] = "Background";
    SoundField[SoundField["Element"] = 1] = "Element";
    SoundField[SoundField["Effect"] = 2] = "Effect";
})(SoundField || (SoundField = {}));
var SoundManager = /** @class */ (function (_super) {
    __extends(SoundManager, _super);
    function SoundManager(world) {
        var _this = _super.call(this) || this;
        var connection = world.connection;
        if (connection) {
            connection.addPacketListener(_this);
            _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_2__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_SOUND_CTL, _this.onPlaySoundHandler);
        }
        return _this;
    }
    SoundManager.prototype.changeRoom = function (room) {
        if (this.mSoundMap) {
            this.mSoundMap.clear();
        }
        this.mSoundMap = new Map();
        this.mScene = room.scene;
    };
    SoundManager.prototype.play = function (config) {
        if (!this.mScene) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().fatal(SoundManager.name + " scene does not exist. play " + config.key + " fatal");
            return;
        }
        var key = config.key;
        if (!key) {
            if (Array.isArray(config.urls)) {
                key = config.urls.join("");
            }
            else {
                key = config.urls;
            }
        }
        var field = config.field || SoundField.Background;
        var sound = this.mSoundMap.get(field);
        if (!sound) {
            sound = new Sound(this.mScene);
            this.mSoundMap.set(field, sound);
        }
        // sound.play(key);
        sound.play(key, config.urls, config.soundConfig);
    };
    SoundManager.prototype.stop = function (field) {
        if (!this.mScene) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().fatal(SoundManager.name + " scene does not exist,can't stop");
            return;
        }
        var sound = this.mSoundMap.get(field);
        if (!sound) {
            return;
        }
        sound.stop();
    };
    SoundManager.prototype.pause = function (field) {
        if (!this.mScene) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().fatal(SoundManager.name + " scene does not exist,can't pause");
            return;
        }
        var sound = this.mSoundMap.get(field);
        if (!sound) {
            return;
        }
        sound.pause();
    };
    SoundManager.prototype.resumes = function (field) {
        if (!this.mScene) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().fatal(SoundManager.name + " scene does not exist,can't resume");
            return;
        }
        var sound = this.mSoundMap.get(field);
        if (!sound) {
            return;
        }
        sound.resume();
    };
    SoundManager.prototype.stopAll = function () {
        if (!this.mScene) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().fatal(SoundManager.name + " scene does not exist,can't stopAll");
            return;
        }
        this.mSoundMap.forEach(function (sound) { if (sound)
            sound.stop(); });
    };
    SoundManager.prototype.pauseAll = function () {
        if (!this.mScene) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().fatal(SoundManager.name + " scene does not exist,can't pauseAll");
            return;
        }
        this.mSoundMap.forEach(function (sound) { if (sound)
            sound.pause(); });
    };
    SoundManager.prototype.resume = function () {
        if (!this.mScene) {
            _utils_log__WEBPACK_IMPORTED_MODULE_0__[/* Logger */ "a"].getInstance().fatal(SoundManager.name + " scene does not exist,can't resumeAll");
            return;
        }
        this.mSoundMap.forEach(function (sound) { if (sound)
            sound.resume(); });
    };
    SoundManager.prototype.destroy = function () {
        if (this.mSoundMap) {
            this.mSoundMap.forEach(function (sound) { if (sound)
                sound.destroy(); });
            this.mSoundMap.clear();
            this.mSoundMap = undefined;
        }
    };
    SoundManager.prototype.onPlaySoundHandler = function (packet) {
        var content = packet.content;
        if (content.loop === undefined) {
            content.loop = true;
        }
        // TODO
        this.play({
            key: content.soundKey,
            urls: _utils_resUtil__WEBPACK_IMPORTED_MODULE_3__[/* Url */ "h"].getOsdRes(content.soundKey),
            field: content.scope,
            soundConfig: { loop: content.loop }
        });
    };
    return SoundManager;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_1__["PacketHandler"]));

var Sound = /** @class */ (function () {
    function Sound(scene) {
        this.scene = scene;
    }
    Sound.prototype.sound = function () {
        return this.mSound;
    };
    Sound.prototype.play = function (key, urls, soundConfig) {
        if (!this.scene) {
            return;
        }
        if (this.mSound && this.mSound.key === key) {
            if (this.mSound.isPlaying)
                return;
            this.mSound.play();
            return;
        }
        this.mKey = key;
        if (this.scene.cache.audio.exists(key)) {
            this.startPlay();
        }
        else {
            if (!urls) {
                return;
            }
            this.scene.load.once("filecomplete-audio-" + key, this.onSoundCompleteHandler, this);
            this.scene.load.audio(key, urls);
            this.scene.load.start();
        }
    };
    Sound.prototype.pause = function () {
        if (!this.scene) {
            return;
        }
        if (this.mSound) {
            if (this.mSound.isPaused)
                return;
            this.mSound.pause();
            return;
        }
    };
    Sound.prototype.stop = function () {
        if (!this.scene) {
            return;
        }
        if (this.mSound) {
            if (!this.mSound.isPlaying)
                return;
            this.mSound.stop();
            return;
        }
    };
    Sound.prototype.resume = function () {
        if (!this.scene) {
            return;
        }
        if (this.mSound) {
            if (!this.mSound.isPaused)
                return;
            this.mSound.resume();
            return;
        }
    };
    Sound.prototype.destroy = function () {
        if (this.mSound) {
            this.mSound.stop();
            this.mSound.destroy();
            this.mSound = undefined;
        }
    };
    Sound.prototype.onSoundCompleteHandler = function () {
        this.startPlay();
    };
    Sound.prototype.startPlay = function () {
        if (this.mSound) {
            this.mSound.stop();
            this.mSound.destroy();
        }
        this.mSound = this.scene.sound.add(this.mKey);
        this.mSound.play();
    };
    return Sound;
}());


/***/ }),
/* 433 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoadingManager; });
/* harmony import */ var _scenes_loading__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(147);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var LoadingManager = /** @class */ (function () {
    function LoadingManager(world) {
        this.world = world;
        this.mResources = [];
    }
    LoadingManager.prototype.start = function (callBack) {
        return __awaiter(this, void 0, void 0, function () {
            var sceneManager;
            var _this = this;
            return __generator(this, function (_a) {
                sceneManager = this.game.scene;
                if (!sceneManager) {
                    return [2 /*return*/, Promise.reject("start faild. SceneManager does not exist")];
                }
                if (!sceneManager.getScene(_scenes_loading__WEBPACK_IMPORTED_MODULE_0__[/* LoadingScene */ "a"].name)) {
                    sceneManager.add(_scenes_loading__WEBPACK_IMPORTED_MODULE_0__[/* LoadingScene */ "a"].name, _scenes_loading__WEBPACK_IMPORTED_MODULE_0__[/* LoadingScene */ "a"]);
                }
                if (sceneManager.isActive(_scenes_loading__WEBPACK_IMPORTED_MODULE_0__[/* LoadingScene */ "a"].name)) {
                    return [2 /*return*/, Promise.resolve()];
                }
                else {
                    sceneManager.start(_scenes_loading__WEBPACK_IMPORTED_MODULE_0__[/* LoadingScene */ "a"].name, {
                        world: this.world,
                        callBack: function (scene) {
                            _this.scene = scene;
                            if (_this.mResources.length > 0) {
                                return _this.addAssets(_this.mResources);
                            }
                            return Promise.resolve();
                        }
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    LoadingManager.prototype.addAssets = function (assets) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, assets_1, asset;
            return __generator(this, function (_a) {
                if (!this.scene) {
                    return [2 /*return*/, Promise.reject()];
                }
                for (_i = 0, assets_1 = assets; _i < assets_1.length; _i++) {
                    asset = assets_1[_i];
                    this.loadAsset(asset);
                }
                return [2 /*return*/, this.startup(this.scene)];
            });
        });
    };
    LoadingManager.prototype.startup = function (scene) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, asset;
            var _this = this;
            return __generator(this, function (_b) {
                this.scene = scene;
                this.scene.load.once(Phaser.Loader.Events.COMPLETE, function () {
                    _this.mLoading = false;
                    _this.mResources = [];
                    // this.game.scene.remove(LoadingScene.name);
                    return Promise.resolve();
                });
                for (_i = 0, _a = this.mResources; _i < _a.length; _i++) {
                    asset = _a[_i];
                    this.loadAsset(asset);
                }
                this.scene.load.start();
                this.mLoading = true;
                return [2 /*return*/];
            });
        });
    };
    LoadingManager.prototype.destroy = function () {
        if (this.mResources) {
            this.mResources = [];
        }
        this.scene = undefined;
    };
    LoadingManager.prototype.loadAsset = function (asset) {
        var type = this.getLoadType(asset.type);
        if (this.scene.load[type]) {
            this.scene.load[type](asset.key, asset.source);
        }
    };
    Object.defineProperty(LoadingManager.prototype, "game", {
        get: function () {
            if (!this.world) {
                return;
            }
            return this.world.game;
        },
        enumerable: false,
        configurable: true
    });
    LoadingManager.prototype.getLoadType = function (fileType) {
        if (fileType === "mp3" || fileType === "wmv" || fileType === "ogg") {
            return "audio";
        }
        return fileType;
    };
    return LoadingManager;
}());



/***/ }),
/* 434 */,
/* 435 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./lib/rexui/lib/ui/ObjectFactory.js
class ObjectFactory {
    constructor(scene) {
        this.scene = scene;
    }

    static register(type, callback) {
        ObjectFactory.prototype[type] = callback;
    }
};
/* harmony default export */ var ui_ObjectFactory = (ObjectFactory);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/roundrectangle/RoundRectangle.js
var RoundRectangle = __webpack_require__(267);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/SetValue.js
var SetValue = __webpack_require__(108);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/roundrectangle/Factory.js




ui_ObjectFactory.register('roundRectangle', function (x, y, width, height, radiusConfig, fillColor, fillAlpha) {
    var gameObject = new RoundRectangle["a" /* default */](this.scene, x, y, width, height, radiusConfig, fillColor, fillAlpha);
    this.scene.add.existing(gameObject);
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.RoundRectangle', RoundRectangle["a" /* default */]);

/* harmony default export */ var Factory = (RoundRectangle["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/bbcodetext/BBCodeText.js
var BBCodeText = __webpack_require__(268);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/bbcodetext/Factory.js




ui_ObjectFactory.register('BBCodeText', function (x, y, text, style) {
    var gameObject = new BBCodeText["a" /* default */](this.scene, x, y, text, style);
    this.scene.add.existing(gameObject);
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.BBCodeText', BBCodeText["a" /* default */]);

/* harmony default export */ var bbcodetext_Factory = (BBCodeText["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/tagtext/TagText.js + 2 modules
var TagText = __webpack_require__(324);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/tagtext/Factory.js




ui_ObjectFactory.register('tagText', function (x, y, text, style) {
    var gameObject = new TagText["a" /* default */](this.scene, x, y, text, style);
    this.scene.add.existing(gameObject);
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.TagText', TagText["a" /* default */]);

/* harmony default export */ var tagtext_Factory = (TagText["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/container/Container.js
var Container = __webpack_require__(164);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/container/Factory.js




ui_ObjectFactory.register('container', function (x, y, width, height, children) {
    var gameObject = new Container["a" /* default */](this.scene, x, y, width, height, children);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Container', Container["a" /* default */]);

/* harmony default export */ var container_Factory = (Container["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/canvas/Canvas.js
var Canvas = __webpack_require__(269);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/canvas/Factory.js




ui_ObjectFactory.register('canvas', function (x, y, width, height) {
    var gameObject = new Canvas["a" /* default */](this.scene, x, y, width, height);
    this.scene.add.existing(gameObject);
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Canvas', Canvas["a" /* default */]);

/* harmony default export */ var canvas_Factory = (Canvas["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/canvas/Canvas.js + 5 modules
var canvas_Canvas = __webpack_require__(387);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/circlemaskimage/ApplyCircleMask.js
var CircleMask = function (canvas, maskType) {
    if (canvas.width === canvas.height) {
        maskType = 0;
    }

    var x = Math.floor(canvas.width / 2);
    var y = Math.floor(canvas.height / 2);

    var ctx = canvas.getContext('2d');
    ctx.save();
    ctx.globalCompositeOperation = 'destination-in';
    ctx.beginPath();
    if (maskType === 0) {
        ctx.arc(x, y, Math.min(x, y), 0, 2 * Math.PI);
    } else {
        ctx.ellipse(x, y, x, y, 0, 0, 2 * Math.PI);
    }
    ctx.fill();
    ctx.restore();
}

/* harmony default export */ var ApplyCircleMask = (CircleMask);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/circlemaskimage/CircleMaskImage.js



const GetValue = Phaser.Utils.Objects.GetValue;

class CircleMaskImage_CircleMaskImage extends canvas_Canvas["a" /* default */] {
    constructor(scene, x, y, key, frame, config) {
        super(scene, x, y);

        this.type = 'rexCircleMaskImage';
        var maskType = GetValue(config, 'maskType', 0);
        this.setTexture(key, frame, maskType);
    }

    setTexture(key, frame, maskType) {
        if (maskType === undefined) {
            maskType = 0;
        } else if (typeof (maskType) === 'string') {
            maskType = MASKTYPE[maskType];
        }

        this._textureKey = key;
        this._frameName = frame;
        this.loadTexture(key, frame);

        if (maskType !== null) {
            ApplyCircleMask(this.canvas, maskType);
        }
        this.dirty = true;
        return this;
    }
}

const MASKTYPE = {
    circle: 0,
    ellipse: 1,
}

/* harmony default export */ var circlemaskimage_CircleMaskImage = (CircleMaskImage_CircleMaskImage);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/circlemaskimage/CircleMaskImage.js

/* harmony default export */ var ui_circlemaskimage_CircleMaskImage = (circlemaskimage_CircleMaskImage);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/circlemaskimage/Factory.js




ui_ObjectFactory.register('circleMaskImage', function (x, y, key, frame, config) {
    var gameObject = new ui_circlemaskimage_CircleMaskImage(this.scene, x, y, key, frame, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.CircleMaskImage', ui_circlemaskimage_CircleMaskImage);

/* harmony default export */ var circlemaskimage_Factory = (ui_circlemaskimage_CircleMaskImage);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/NinePatch.js + 8 modules
var NinePatch = __webpack_require__(136);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/ninepatch/NinePatch.js

/* harmony default export */ var ninepatch_NinePatch = (NinePatch["a" /* default */]);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/ninepatch/Factory.js




ui_ObjectFactory.register('ninePatch', function (x, y, width, height, key, columns, rows, config) {
    var gameObject = new ninepatch_NinePatch(this.scene, x, y, width, height, key, columns, rows, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.NinePatch', ninepatch_NinePatch);

/* harmony default export */ var ninepatch_Factory = (ninepatch_NinePatch);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/sizer/Sizer.js + 11 modules
var Sizer = __webpack_require__(126);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/sizer/Factory.js




ui_ObjectFactory.register('sizer', function (x, y, minWidth, minHeight, orientation, config) {
    var gameObject = new Sizer["a" /* default */](this.scene, x, y, minWidth, minHeight, orientation, config);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Sizer', Sizer["a" /* default */]);

/* harmony default export */ var sizer_Factory = (Sizer["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/gridsizer/GridSizer.js + 8 modules
var GridSizer = __webpack_require__(317);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridsizer/Factory.js




ui_ObjectFactory.register('gridSizer', function (x, y, minWidth, minHeight, columnCount, rowCount, columnProportions, rowProportion) {
    var gameObject = new GridSizer["a" /* default */](this.scene, x, y, minWidth, minHeight, columnCount, rowCount, columnProportions, rowProportion);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.GridSizer', GridSizer["a" /* default */]);

/* harmony default export */ var gridsizer_Factory = (GridSizer["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/label/Label.js + 1 modules
var Label = __webpack_require__(328);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/label/Factory.js




ui_ObjectFactory.register('label', function (config) {
    var gameObject = new Label["a" /* default */](this.scene, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Label', Label["a" /* default */]);

/* harmony default export */ var label_Factory = (Label["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/buttons/Buttons.js + 6 modules
var Buttons = __webpack_require__(190);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/buttons/Factory.js




ui_ObjectFactory.register('buttons', function (config) {
    var gameObject = new Buttons["a" /* default */](this.scene, config);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Buttons', Buttons["a" /* default */]);

/* harmony default export */ var buttons_Factory = (Buttons["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/slider/Slider.js + 9 modules
var Slider = __webpack_require__(189);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/slider/Factory.js




ui_ObjectFactory.register('slider', function (config) {
    var gameObject = new Slider["a" /* default */](this.scene, config);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Slider', Slider["a" /* default */]);

/* harmony default export */ var slider_Factory = (Slider["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/gridtable/GridTable.js + 31 modules
var GridTable = __webpack_require__(186);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/gridtable/Factory.js




ui_ObjectFactory.register('gridTable', function (config) {
    var gameObject = new GridTable["a" /* default */](this.scene, config);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.GridTable', GridTable["a" /* default */]);

/* harmony default export */ var gridtable_Factory = (GridTable["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/menu/Menu.js + 8 modules
var Menu = __webpack_require__(318);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/menu/Factory.js




ui_ObjectFactory.register('menu', function (config) {
    var gameObject = new Menu["a" /* default */](this.scene, config);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Menu', Menu["a" /* default */]);

/* harmony default export */ var menu_Factory = (Menu["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/textblock/TextBlock.js + 11 modules
var TextBlock = __webpack_require__(188);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/textblock/Factory.js




ui_ObjectFactory.register('textBlock', function (x, y, minWidth, minHeight, textGameObject, config) {
    var gameObject = new TextBlock["a" /* default */](this.scene, x, y, minWidth, minHeight, textGameObject, config);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.TextBlock', TextBlock["a" /* default */]);

/* harmony default export */ var textblock_Factory = (TextBlock["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/textarea/TextArea.js + 3 modules
var TextArea = __webpack_require__(127);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/textarea/Factory.js



ui_ObjectFactory.register('textArea', function (config) {
    var gameObject = new TextArea["a" /* default */](this.scene, config);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.TextArea', TextArea["a" /* default */]);

/* harmony default export */ var textarea_Factory = (TextArea["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/scrollableblock/ScrollableBlock.js + 6 modules
var ScrollableBlock = __webpack_require__(191);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/scrollableblock/Factory.js




ui_ObjectFactory.register('scrollableBlock', function (config) {
    var gameObject = new ScrollableBlock["a" /* default */](this.scene, config);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.ScrollableBlock', ScrollableBlock["a" /* default */]);

/* harmony default export */ var scrollableblock_Factory = (ScrollableBlock["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/scrollablepanel/ScrollablePanel.js
var ScrollablePanel = __webpack_require__(270);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/scrollablepanel/Factory.js




ui_ObjectFactory.register('scrollablePanel', function (config) {
    var gameObject = new ScrollablePanel["a" /* default */](this.scene, config);
    this.scene.add.existing(gameObject); // It won't be added to display list, neither update list
    return gameObject;
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.ScrollablePanel', ScrollablePanel["a" /* default */]);

/* harmony default export */ var scrollablepanel_Factory = (ScrollablePanel["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/tap/Tap.js + 1 modules
var Tap = __webpack_require__(193);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/system/IsGameObject.js
var IsGameObject = __webpack_require__(151);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/tap/Factory.js





ui_ObjectFactory.register('tap', function (gameObject, config) {
    if (!Object(IsGameObject["a" /* default */])(gameObject)) {
        config = gameObject;
        gameObject = this.scene;
    }
    return new Tap["a" /* default */](gameObject, config);
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Tap', Tap["a" /* default */]);

/* harmony default export */ var tap_Factory = (Tap["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/press/Press.js + 1 modules
var Press = __webpack_require__(194);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/press/Factory.js





ui_ObjectFactory.register('press', function (gameObject, config) {
    if (!Object(IsGameObject["a" /* default */])(gameObject)) {
        config = gameObject;
        gameObject = this.scene;
    }
    return new Press["a" /* default */](gameObject, config);
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Press', Press["a" /* default */]);

/* harmony default export */ var press_Factory = (Press["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/swipe/Swipe.js + 4 modules
var Swipe = __webpack_require__(389);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/swipe/Factory.js





ui_ObjectFactory.register('swipe', function (gameObject, config) {
    if (!Object(IsGameObject["a" /* default */])(gameObject)) {
        config = gameObject;
        gameObject = this.scene;
    }
    return new Swipe["a" /* default */](gameObject, config);
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Swipe', Swipe["a" /* default */]);

/* harmony default export */ var swipe_Factory = (Swipe["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/gestures/onepointertracer/OnePointerTracer.js + 1 modules
var OnePointerTracer = __webpack_require__(195);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/fsm.js + 1 modules
var fsm = __webpack_require__(137);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/gestures/pan/Pan.js



const Pan_GetValue = Phaser.Utils.Objects.GetValue;

class Pan_Pan extends OnePointerTracer["a" /* default */] {
    constructor(gameObject, config) {
        super(gameObject, config);

        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                },
                BEGIN: {
                    enter: function () {
                        var pointer = self.pointer;
                        self.startX = pointer.x;
                        self.startY = pointer.y;
                        self.startWorldX = pointer.worldX;
                        self.startWorldY = pointer.worldY;
                    }
                },
                RECOGNIZED: {
                    enter: function () {
                        self.emit('panstart', self, self.gameObject, self.lastPointer);
                    },
                    exit: function () {
                        var pointer = self.lastPointer;
                        self.endX = pointer.x;
                        self.endY = pointer.y;
                        self.endWorldX = pointer.worldX;
                        self.endWorldY = pointer.worldY;
                        self.emit('panend', self, self.gameObject, self.lastPointer);
                    }
                }
            },
            init: function () {
                this.state = IDLE;
            },
            eventEmitter: false,
        }
        this.setRecongizedStateObject(new fsm["a" /* default */](stateConfig));
    }

    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(Pan_GetValue(o, 'threshold', 10));
        return this;
    }

    onDragStart() {
        this.state = (this.dragThreshold === 0) ? RECOGNIZED : BEGIN;
    }

    onDragEnd() {
        this.state = IDLE;
    }

    onDrag() {
        switch (this.state) {
            case BEGIN:
                if (this.pointer.getDistance() >= this.dragThreshold) {
                    this.state = RECOGNIZED;
                }
                break;

            case RECOGNIZED:
                var p1 = this.pointer.position;
                var p0 = this.pointer.prevPosition;
                this.dx = p1.x - p0.x;
                this.dy = p1.y - p0.y;
                var pointer = this.pointer;
                self.x = pointer.x;
                self.y = pointer.y;
                self.worldX = pointer.worldX;
                self.worldY = pointer.worldY;
                this.emit('pan', this);
                break;
        }
    }

    get isPan() {
        return (this.state === RECOGNIZED);
    }

    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
}

const IDLE = 'IDLE';
const BEGIN = 'BEGIN';
const RECOGNIZED = 'RECOGNIZED';

/* harmony default export */ var pan_Pan = (Pan_Pan);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/pan/Pan.js

/* harmony default export */ var ui_pan_Pan = (pan_Pan);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/pan/Factory.js





ui_ObjectFactory.register('pan', function (gameObject, config) {
    if (!Object(IsGameObject["a" /* default */])(gameObject)) {
        config = gameObject;
        gameObject = this.scene;
    }
    return new ui_pan_Pan(gameObject, config);
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Pan', ui_pan_Pan);

/* harmony default export */ var pan_Factory = (ui_pan_Pan);
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/gestures/twopointerstracer/TwoPointersTracer.js
var TwoPointersTracer = __webpack_require__(354);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/input/gestures/pinch/Pinch.js



const Pinch_GetValue = Phaser.Utils.Objects.GetValue;

class Pinch_Pinch extends TwoPointersTracer["a" /* default */] {
    constructor(scene, config) {
        super(scene, config);

        var self = this;
        var stateConfig = {
            states: {
                IDLE: {
                    enter: function () {
                        self.prevDistance = undefined;
                        self.scaleFactor = 1;
                    },
                },
                BEGIN: {
                },
                RECOGNIZED: {
                    enter: function () {
                        self.emit('pinchstart', self);
                    },
                    exit: function () {
                        self.emit('pinchend', self);
                    }
                }
            },
            init: function () {
                this.state = Pinch_IDLE;
            },
            eventEmitter: false,
        }
        this.setRecongizedStateObject(new fsm["a" /* default */](stateConfig));
    }

    resetFromJSON(o) {
        super.resetFromJSON(o);
        this.setDragThreshold(Pinch_GetValue(o, 'threshold', 0));
        return this;
    }

    onDrag2Start() {
        this.scaleFactor = 1;
        this.prevDistance = this.distanceBetween;
        this.state = (this.dragThreshold === 0) ? Pinch_RECOGNIZED : Pinch_BEGIN;
    }

    onDrag2End() {
        this.state = Pinch_IDLE;
    }

    onDrag2() {
        switch (this.state) {
            case Pinch_BEGIN:
                if ((this.pointers[0].getDistance() >= this.dragThreshold) &&
                    (this.pointers[1].getDistance() >= this.dragThreshold)) {
                    var curDistance = this.distanceBetween;
                    this.scaleFactor = curDistance / this.prevDistance;
                    this.prevDistance = curDistance;
                    this.state = Pinch_RECOGNIZED;
                }
                break;
            case Pinch_RECOGNIZED:
                var curDistance = this.distanceBetween;
                this.scaleFactor = curDistance / this.prevDistance;
                this.emit('pinch', this);
                this.prevDistance = curDistance;
                break;
        }
    }

    get isPinch() {
        return (this.state === Pinch_RECOGNIZED);
    }

    setDragThreshold(distance) {
        this.dragThreshold = distance;
        return this;
    }
}

const Pinch_IDLE = 'IDLE';
const Pinch_BEGIN = 'BEGIN';
const Pinch_RECOGNIZED = 'RECOGNIZED';

/* harmony default export */ var pinch_Pinch = (Pinch_Pinch);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/pinch/Pinch.js

/* harmony default export */ var ui_pinch_Pinch = (pinch_Pinch);
// CONCATENATED MODULE: ./lib/rexui/lib/ui/pinch/Factory.js




ui_ObjectFactory.register('pinch', function (config) {
    return new ui_pinch_Pinch(this.scene, config);
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Pinch', ui_pinch_Pinch);

/* harmony default export */ var pinch_Factory = (ui_pinch_Pinch);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/rotate/Rotate.js + 3 modules
var Rotate = __webpack_require__(321);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/rotate/Factory.js




ui_ObjectFactory.register('rotate', function (config) {
    return new Rotate["a" /* default */](this.scene, config);
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Rotate', Rotate["a" /* default */]);

/* harmony default export */ var rotate_Factory = (Rotate["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/flip/Flip.js + 3 modules
var Flip = __webpack_require__(322);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/flip/Factory.js




ui_ObjectFactory.register('flip', function (gameObject, config) {
    return new Flip["a" /* default */](gameObject, config);
});

Object(SetValue["a" /* default */])(window, 'RexPlugins.UI.Flip', Flip["a" /* default */]);

/* harmony default export */ var flip_Factory = (Flip["a" /* default */]);
// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetParentSizer.js
var GetParentSizer = __webpack_require__(153);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/GetTopmostSizer.js
var GetTopmostSizer = __webpack_require__(166);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/input/IsPointerInBounds.js
var IsPointerInBounds = __webpack_require__(165);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/Hide.js
var Hide = __webpack_require__(144);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/behaviors/textedit/Edit.js
var Edit = __webpack_require__(271);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/utils/WaitEvent.js
var WaitEvent = __webpack_require__(183);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/ui-plugin.js








// import ChartFactory from './chart/Factory.js';

// import YoutubePlayerFactory from './youtubeplayer/Factory.js';



//import FixWidthSizerFactory from './fixwidthsizer/Factory.js';
//import OverlapSizerFactory from './overlapsizer/Factory.js';



// import DialogFactory from './dialog/Factory.js';
//import TabsFactory from './tabs/Factory.js';



// import TextBoxFactory from './textbox/Factory.js';
// import NumberBarFactory from './numberbar/Factory.js';
// import PagesFactory from './pages/Factory.js';




// import ToastFactory from './toast/Factory.js';
// import SidesFactory from './sides/Factory.js';
















class ui_plugin_UIPlugin extends Phaser.Plugins.ScenePlugin {
    constructor(scene, pluginManager) {
        super(scene, pluginManager);

        this.add = new ui_ObjectFactory(scene);
    }
}

var methods = {
    getParentSizer: GetParentSizer["a" /* default */],
    getTopmostSizer: GetTopmostSizer["a" /* default */],
    hide: Hide["a" /* Hide */],
    show: Hide["c" /* Show */],
    isShown: Hide["b" /* IsShown */],
    edit: Edit["a" /* default */],
    isInTouching: IsPointerInBounds["a" /* default */],
    waitEvent: WaitEvent["b" /* WaitEvent */],
    waitComplete: WaitEvent["a" /* WaitComplete */]
}

Object.assign(
    ui_plugin_UIPlugin.prototype,
    methods
);


/* harmony default export */ var ui_plugin = __webpack_exports__["a"] = (ui_plugin_UIPlugin);

/***/ }),
/* 436 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ room_manager_RoomManager; });

// EXTERNAL MODULE: ./src/rooms/element/element.manager.ts
var element_manager = __webpack_require__(159);

// EXTERNAL MODULE: ./node_modules/net-socket-packet/dist/index.js
var dist = __webpack_require__(103);

// EXTERNAL MODULE: ./node_modules/pixelpai_proto/protocols.js
var protocols = __webpack_require__(2);

// EXTERNAL MODULE: ./src/utils/log.ts
var log = __webpack_require__(0);

// EXTERNAL MODULE: ./src/utils/pos.ts
var utils_pos = __webpack_require__(111);

// EXTERNAL MODULE: ./src/rooms/element/sprite.ts
var element_sprite = __webpack_require__(123);

// EXTERNAL MODULE: ./src/const/MessageType.ts
var MessageType = __webpack_require__(109);

// EXTERNAL MODULE: ./src/rooms/element/element.ts + 7 modules
var element_element = __webpack_require__(117);

// CONCATENATED MODULE: ./src/rooms/player/player.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var player_Player = /** @class */ (function (_super) {
    __extends(Player, _super);
    function Player(sprite, mElementManager) {
        var _this = _super.call(this, sprite, mElementManager) || this;
        _this.mElementManager = mElementManager;
        _this.nodeType = protocols["op_def"].NodeType.CharacterNodeType;
        _this.mOffsetY = undefined;
        if (_this.mDisplay) {
            if (sprite.displayBadgeCards && sprite.displayBadgeCards.length > 0)
                _this.mDisplay.setDisplayBadges(sprite.displayBadgeCards);
        }
        return _this;
    }
    Player.prototype.setModel = function (val) {
        _super.prototype.setModel.call(this, val);
        this.showNickName();
    };
    Player.prototype.move = function (moveData) {
        if (this.getDirection() !== moveData.direction) {
            if (this.roomService.world.moveStyle === protocols["op_def"].MoveStyle.DIRECTION_MOVE_STYLE) {
                if (this.mId !== this.roomService.playerManager.actor.id) {
                    this.setDirection(moveData.direction);
                }
            }
            else {
                this.setDirection(moveData.direction);
            }
        }
        moveData.destinationPoint3f.y += this.offsetY;
        _super.prototype.move.call(this, moveData);
    };
    Player.prototype.movePath = function (movePath) {
        var _this = this;
        if (!this.mDisplay) {
            return;
        }
        var tmpPath = movePath.path;
        if (!tmpPath) {
            return;
        }
        var lastPos = new utils_pos["a" /* Pos */](this.mDisplay.x, this.mDisplay.y - this.offsetY);
        var paths = [];
        this.mMoveData.arrivalTime = movePath.timestemp;
        var angle = null;
        var point = null;
        var now = this.mElementManager.roomService.now();
        var duration = 0;
        var index = 0;
        for (var _i = 0, tmpPath_1 = tmpPath; _i < tmpPath_1.length; _i++) {
            var path = tmpPath_1[_i];
            point = path.point3f;
            if (!(point.y === lastPos.y && point.x === lastPos.x)) {
                angle = Math.atan2(point.y - lastPos.y, point.x - lastPos.x) * (180 / Math.PI);
            }
            now += duration;
            duration = path.timestemp - now;
            paths.push({
                x: point.x,
                y: point.y + this.offsetY,
                duration: duration,
                onStartParams: angle,
                onStart: function (tween, target, params) {
                    _this.onCheckDirection(params);
                },
                onCompleteParams: { duration: duration, index: index },
                onComplete: function (tween, targets, params) {
                    _this.onMovePathPointComplete(params);
                }
            });
            lastPos = new utils_pos["a" /* Pos */](point.x, point.y);
            index++;
        }
        this.mMoveData.posPath = paths;
        this.mMoveData.onCompleteParams = point;
        this.mMoveData.onComplete = this.mMovePathPointFinished;
        this._doMove();
    };
    Player.prototype.setDirection = function (dir) {
        if (dir !== this.mDisplayInfo.avatarDir) {
            this.mDisplayInfo.avatarDir = dir;
            this.mModel.direction = dir;
            // if (this.mDisplay) this.mDisplay.play({ animationName: this.mCurState, flip: false });
            if (this.mDisplay) {
                this.mDisplay.play(this.mModel.currentAnimation);
            }
        }
    };
    Player.prototype.changeState = function (val) {
        if (!this.mDisplay) {
            return;
        }
        if (this.mCurState === val)
            return;
        // if (!val) val = PlayerState.IDLE;
        if (!val) {
            val = element_element["d" /* PlayerState */].IDLE;
        }
        if (this.mCheckStateHandle(val)) {
            this.mCurState = val;
            this.mModel.currentAnimationName = this.mCurState;
            this.mDisplay.play(this.mModel.currentAnimation);
        }
    };
    Player.prototype.setPosition = function (pos) {
        pos.y += this.offsetY;
        _super.prototype.setPosition.call(this, pos);
    };
    Player.prototype.getPosition = function () {
        var pos = _super.prototype.getPosition.call(this);
        pos.y -= this.offsetY;
        return pos;
    };
    Player.prototype.onCheckDirection = function (params) {
        if (typeof params !== "number") {
            return;
        }
        // 重叠
        if (params > 90) {
            this.setDirection(3);
        }
        else if (params >= 0) {
            this.setDirection(5);
        }
        else if (params >= -90) {
            this.setDirection(7);
        }
        else {
            this.setDirection(1);
        }
    };
    Player.prototype.onMoveStart = function () {
        this.changeState(element_element["d" /* PlayerState */].WALK);
        if (this.mMoveData) {
            this.mMoveData.step = 0;
        }
        _super.prototype.onMoveStart.call(this);
    };
    Player.prototype.onMoveComplete = function () {
        this.preMoveComplete();
        _super.prototype.onMoveComplete.call(this);
        this.changeState(element_element["d" /* PlayerState */].IDLE);
    };
    Player.prototype.preMoveComplete = function () {
        if (this.mMoveData && this.mMoveData.posPath) {
            var complete = this.mMoveData.onComplete;
            if (complete) {
                complete.call(this, this.mMoveData.onCompleteParams);
                delete this.mMoveData.onComplete;
                delete this.mMoveData.onCompleteParams;
            }
        }
    };
    Player.prototype.onMovePathPointComplete = function (params) {
        if (!this.mMoveData) {
            return;
        }
        this.mMoveData.step += 1;
        // if (!this.mMoveData.posPath) {
        //     return;
        // }
        // const posPath = this.mMoveData.posPath;
        // posPath.shift();
    };
    Player.prototype.mMovePathPointFinished = function (path) {
        if (!path || !this.mRoomService) {
            return;
        }
        var pkt = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MOVE_PATH_POINT_FINISHED);
        var content = pkt.content;
        var currentPoint = protocols["op_def"].PBPoint3f.create();
        var pos = this.getPosition();
        currentPoint.x = pos.x;
        currentPoint.y = pos.y;
        currentPoint.z = pos.z;
        var targetPoint = protocols["op_def"].PBPoint3f.create();
        targetPoint.x = path.x;
        targetPoint.y = path.y;
        content.currentPoint = currentPoint;
        content.lastTargetPoint = targetPoint;
        content.timestemp = this.mRoomService.world.clock.unixTime;
        this.mRoomService.connection.send(pkt);
    };
    Object.defineProperty(Player.prototype, "offsetY", {
        get: function () {
            if (this.mOffsetY === undefined) {
                if (!this.mElementManager || !this.mElementManager.roomService || !this.mElementManager.roomService.roomSize) {
                    return 0;
                }
                // this.mOffsetY = 0;
                this.mOffsetY = this.mElementManager.roomService.roomSize.tileHeight >> 2;
            }
            return this.mOffsetY;
        },
        enumerable: false,
        configurable: true
    });
    Player.prototype.mCheckStateHandle = function (val) {
        // if (this.mCurState === val) return false;
        return true;
    };
    return Player;
}(element_element["b" /* Element */]));


// CONCATENATED MODULE: ./src/rooms/player/bag/bag.ts
var bag_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var bag_Bag = /** @class */ (function (_super) {
    bag_extends(Bag, _super);
    function Bag(mWorld) {
        var _this = _super.call(this) || this;
        _this.mWorld = mWorld;
        _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_ADD_ITEM, _this.handleAddItem);
        _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_REMOVE_ITEM, _this.handleRemoveItem);
        _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EXCHANGE_ITEM_POS, _this.handleExchangeItem);
        _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_QUERY_PACKAGE, _this.handleQueryPackage);
        return _this;
    }
    Bag.prototype.initialize = function () {
        return this.mInitialize;
    };
    Bag.prototype.register = function () {
        this.mWorld.connection.addPacketListener(this);
    };
    Bag.prototype.unRegister = function () {
        this.mWorld.connection.removePacketListener(this);
    };
    Bag.prototype.destroy = function () {
        this.mInitialize = false;
        this.mWorld.connection.removePacketListener(this);
    };
    Bag.prototype.requestVirtualWorldQueryPackage = function (bagId, page, perPage) {
        var pkt = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_QUERY_PACKAGE);
        var content = pkt.content;
        content.id = bagId;
        content.page = page;
        content.perPage = perPage;
        this.mWorld.connection.send(pkt);
    };
    Bag.prototype.handleQueryPackage = function (packet) {
        var notice = packet.content;
        this.mInitialize = true;
        this.mWorld.emitter.emit(MessageType["a" /* MessageType */].QUERY_PACKAGE, notice);
    };
    Bag.prototype.handleAddItem = function (packet) {
        var content = packet.content;
        if (content.nodetype === protocols["op_def"].NodeType.ElementNodeType) {
            this.mWorld.roomManager.currentRoom.map.addPackItems(content.id, content.item);
        }
        else if (content.nodetype === protocols["op_def"].NodeType.CharacterNodeType) {
            this.mWorld.roomManager.currentRoom.playerManager.addPackItems(content.id, content.item);
        }
        this.mWorld.emitter.emit(MessageType["a" /* MessageType */].PACKAGE_ITEM_ADD, content);
    };
    Bag.prototype.handleRemoveItem = function (packet) {
        var content = packet.content;
        var len = content.itemId.length;
        for (var i = 0; i < len; i++) {
            this.mWorld.roomManager.currentRoom.playerManager.removePackItems(content.id, content.itemId[i]);
        }
        this.mWorld.emitter.emit(MessageType["a" /* MessageType */].UPDATED_CHARACTER_PACKAGE);
        this.mWorld.emitter.emit(MessageType["a" /* MessageType */].PACKAGE_ITEM_REMOVE, content);
    };
    Bag.prototype.handleExchangeItem = function (packet) {
        var content = packet.content;
        this.mWorld.emitter.emit(MessageType["a" /* MessageType */].PACKAGE_EXCHANGE_ITEM_POS, content);
    };
    return Bag;
}(dist["PacketHandler"]));


// CONCATENATED MODULE: ./src/rooms/player/interactive/interactive.ts
var interactive_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var interactive_Interactive = /** @class */ (function (_super) {
    interactive_extends(Interactive, _super);
    function Interactive(mWorld) {
        var _this = _super.call(this) || this;
        _this.mWorld = mWorld;
        return _this;
    }
    Interactive.prototype.initialize = function () {
        return this.mInitialize;
    };
    Interactive.prototype.register = function () {
        this.mWorld.connection.addPacketListener(this);
    };
    Interactive.prototype.unRegister = function () {
        this.mWorld.connection.removePacketListener(this);
    };
    Interactive.prototype.destroy = function () {
        this.mInitialize = false;
        this.mWorld.connection.removePacketListener(this);
    };
    Interactive.prototype.requestTargetUI = function (uiId, id) {
        var pkt = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_TARGET_UI);
        var content = pkt.content;
        content.uiId = uiId;
        content.componentId = id;
        this.mWorld.connection.send(pkt);
    };
    return Interactive;
}(dist["PacketHandler"]));


// CONCATENATED MODULE: ./src/rooms/player/friend/friend.ts
var Friend = /** @class */ (function () {
    function Friend(world) {
        this.world = world;
        this.mFriendList = [];
    }
    Friend.prototype.requestFriend = function (callBack) {
        var func = callBack;
        this.world.httpService.firend().then(function (response) {
            if (response.code === 200) {
                if (func)
                    func(response.data);
            }
        });
    };
    Friend.prototype.friendList = function () {
        return this.mFriendList || [];
    };
    return Friend;
}());


// EXTERNAL MODULE: ./src/ui/ControlF/ControlFMediator.ts
var ControlFMediator = __webpack_require__(205);

// CONCATENATED MODULE: ./src/rooms/player/Actor.ts
var Actor_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








var Actor_Actor = /** @class */ (function (_super) {
    Actor_extends(Actor, _super);
    function Actor(sprite, mElementManager) {
        var _this = _super.call(this, sprite, mElementManager) || this;
        _this.mElementManager = mElementManager;
        _this.mBlockable = false;
        // this.mRenderable = true; // Actor is always renderable!!!
        // this.addDisplay();
        _this.mRoom = _this.mElementManager.roomService;
        if (_this.mRoom.world.inputManager)
            _this.mRoom.world.inputManager.addListener(_this);
        // if (this.mElementManager) {
        //     const roomService = this.mElementManager.roomService;
        //     if (roomService && roomService.cameraService) {
        //         roomService.cameraService.startFollow(this.getDisplay());
        //         roomService.cameraService.syncCameraScroll();
        //     }
        // }
        if (_this.mElementManager) {
            var roomService = _this.mElementManager.roomService;
            if (roomService && roomService.cameraService) {
                var pos = sprite.pos;
                var size = _this.mElementManager.scene.scale;
                roomService.cameraService.setScroll(pos.x * roomService.world.scaleRatio - size.width / 2, pos.y * roomService.world.scaleRatio - size.height / 2);
                roomService.cameraService.syncCameraScroll();
            }
        }
        _this.mFriend = new Friend(_this.mRoom.world);
        _this.mRoom.playerManager.set(_this.id, _this);
        _this.mInteractive = new interactive_Interactive(mElementManager.roomService.world);
        _this.mInteractive.register();
        return _this;
    }
    Actor.prototype.getBag = function () {
        return this.mBag;
    };
    Actor.prototype.getFriend = function () {
        return this.mFriend;
    };
    Actor.prototype.getInteractive = function () {
        return this.mInteractive;
    };
    // override super's method.
    Actor.prototype.setRenderable = function (isRenderable) {
        // do nothing!
        // Actor is always renderable!!!
    };
    Actor.prototype.destroy = function () {
        if (this.mBag) {
            this.mBag.destroy();
            this.mBag = null;
        }
        if (this.mRoom.world.inputManager)
            this.mRoom.world.inputManager.removeListener(this);
        _super.prototype.destroy.call(this);
    };
    Actor.prototype.downHandler = function (d, keyList) {
        if (!this.mDisplay) {
            return;
        }
        this.mRoom.playerManager.requestActorMove(d, keyList); // startActorMove();
    };
    Actor.prototype.upHandler = function () {
        // this.mRoom.playerManager.stopActorMove();
        if (!this.mDisplay) {
            return;
        }
        this.stopMove();
    };
    Actor.prototype.startMove = function () {
        _super.prototype.startMove.call(this);
        var med = this.mRoom.world.uiManager.getMediator(ControlFMediator["ControlFMediator"].NAME);
        if (med)
            med.hide();
    };
    Actor.prototype.stopMove = function () {
        _super.prototype.stopMove.call(this);
        if (this.mRoom && this.mRoom.world.moveStyle === protocols["op_def"].MoveStyle.DIRECTION_MOVE_STYLE) {
            var pkt = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_STOP_SPRITE);
            var ct = pkt.content;
            ct.nodeType = this.nodeType;
            var pos = this.getPosition();
            ct.spritePositions = {
                id: this.id,
                point3f: {
                    x: pos.x,
                    y: pos.y,
                    z: pos.z,
                },
                direction: this.dir
            };
            // Logger.getInstance().debug("nowPox:" + pos.x + "," + pos.y);
            this.mElementManager.connection.send(pkt);
        }
    };
    Actor.prototype.move = function (moveData) {
        // TODO 不能仅判断walk, 移动状态可能还有run
        if (this.mRoom.world.moveStyle === protocols["op_def"].MoveStyle.DIRECTION_MOVE_STYLE) {
            if (this.mCurState !== element_element["d" /* PlayerState */].WALK) {
                return;
            }
        }
        else {
            this.startMove();
        }
        _super.prototype.move.call(this, moveData);
    };
    Actor.prototype.movePath = function (movePath) {
        if (this.mRoom.world.moveStyle === protocols["op_def"].MoveStyle.DIRECTION_MOVE_STYLE) {
            if (this.mCurState !== element_element["d" /* PlayerState */].WALK) {
                return;
            }
        }
        // movePath.path = [{ x: 885.000000, y: 637.50000}, { x: 915.000000, y: 637.50000}, { x: 945.000000, y: 637.50000}, { x: 975.000000, y: 637.50000}, { x: 1005.00000, y: 637.50000}, { x: 1035.00000, y: 637.50000}, { x: 1065.00000, y: 637.50000}, { x: 1080.00000, y: 645.00000}, { x: 1095.00000, y: 652.50000}, { x: 1110.00000, y: 660.00000}, { x: 1125.00000, y: 667.50000}, { x: 1140.00000, y: 675.00000}, { x: 1155.00000, y: 682.50000}, { x: 1170.00000, y: 690.00000}];
        // movePath.path = [{x: 1140.00000, y: 495.000000}, {x: 1125.00000, y: 502.500000}, {x: 1110.00000, y: 510.000000}, {x: 1095.00000, y: 517.500000}, {x: 1080.00000, y: 525.000000}, {x: 1065.00000, y: 532.500000}, {x: 1050.00000, y: 540.000000}, {x: 1035.00000, y: 547.500000}];
        // movePath.timestemp = 3965;
        var path = movePath.path;
        var now = this.mElementManager.roomService.now();
        var duration = 0;
        var pathAry = path.map(function (value) {
            now += duration;
            duration = value.timestemp - now;
            return {
                x: value.point3f.x, y: value.point3f.y,
                duration: duration,
                timestemp: value.timestemp
            };
        });
        // this.drawPath(movePath.path);
        _super.prototype.movePath.call(this, movePath);
    };
    Actor.prototype.onMoveComplete = function () {
        this.preMoveComplete();
        if (this.mCurState !== element_element["d" /* PlayerState */].WALK) {
            this.mMoveData.tweenAnim.stop();
            return;
        }
        if (this.mRoom.world.moveStyle !== protocols["op_def"].MoveStyle.DIRECTION_MOVE_STYLE) {
            this.changeState(element_element["d" /* PlayerState */].IDLE);
            this.stopMove();
        }
        this._doMove();
    };
    Actor.prototype.onMoving = function () {
        if (this.mCurState !== element_element["d" /* PlayerState */].WALK) {
            this.mMoveData.tweenLineAnim.stop();
            return;
        }
        _super.prototype.onMoving.call(this);
    };
    Actor.prototype.addToBlock = function () {
        this.addDisplay();
    };
    Actor.prototype.drawPath = function (pos) {
        // if (!pos && pos.length > 0) {
        //     return;
        // }
        // if (!this.mMovePath) {
        //     this.mMovePath = this.mElementManager.scene.make.graphics(undefined, false);
        // }
        // this.mMovePath.clear();
        // this.mMovePath.lineStyle(2, 0xFFFF00);
        // this.mMovePath.moveTo(pos[0].point3f.x, pos[0].point3f.y);
        // let point3f = null;
        // for (const point of pos) {
        //     point3f = point.point3f;
        //     if (point3f) this.mMovePath.lineTo(point3f.x, point3f.y);
        // }
        // this.mMovePath.strokePath();
        // this.mRoom.addToSurface(<any> this.mMovePath);
    };
    Object.defineProperty(Actor.prototype, "model", {
        get: function () {
            return this.mModel;
        },
        set: function (val) {
            this.mModel = val;
            if (!val) {
                return;
            }
            if (val.package) {
                this.mPackage = val.package;
                this.mBag = new bag_Bag(this.mElementManager.roomService.world);
                this.mBag.register();
            }
            this.load(this.mModel.displayInfo);
            if (this.mModel.pos)
                this.setPosition(this.mModel.pos);
            this.mDisplay.changeAlpha(this.mModel.alpha);
            if (this.mModel.nickname)
                this.mDisplay.showNickname(this.mModel.nickname);
            this.setDirection(this.mModel.direction);
            // if (this.mElementManager) {
            //     const roomService = this.mElementManager.roomService;
            //     if (roomService && roomService.cameraService) {
            //         roomService.cameraService.startFollow(this.mDisplay);
            //     }
            // }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Actor.prototype, "package", {
        get: function () {
            return this.mPackage;
        },
        set: function (value) {
            this.mPackage = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Actor.prototype, "moveTime", {
        set: function (val) {
            this.mMoveTime = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Actor.prototype, "moveData", {
        get: function () {
            return this.mMoveData;
        },
        enumerable: false,
        configurable: true
    });
    return Actor;
}(player_Player));


// CONCATENATED MODULE: ./src/rooms/player/player.model.ts
var player_model_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var player_model_PlayerModel = /** @class */ (function (_super) {
    player_model_extends(PlayerModel, _super);
    function PlayerModel(data) {
        var _this = _super.call(this, data) || this;
        _this.mPos = new utils_pos["a" /* Pos */](data.x, data.y, data.z);
        _this.mAlpha = 1;
        _this.mPackage = data.package;
        _this.mSceneId = data.sceneId;
        _this.mUuid = data.uuid;
        _this.mPlatformId = data.platformId;
        return _this;
    }
    return PlayerModel;
}(element_sprite["a" /* Sprite */]));


// CONCATENATED MODULE: ./src/rooms/player/player.manager.ts
var player_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








var NodeType = protocols["op_def"].NodeType;

var player_manager_PlayerManager = /** @class */ (function (_super) {
    player_manager_extends(PlayerManager, _super);
    function PlayerManager(mRoom) {
        var _this = _super.call(this) || this;
        _this.mRoom = mRoom;
        _this.hasAddComplete = false;
        _this.mPlayerMap = new Map();
        if (_this.connection) {
            _this.connection.addPacketListener(_this);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ADD_SPRITE, _this.onAdd);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ADD_SPRITE_END, _this.addComplete);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_DELETE_SPRITE, _this.onRemove);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ADJUST_POSITION, _this.onAdjust);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE, _this.onMove);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_SHOW_EFFECT, _this.onShowEffect);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_ONLY_BUBBLE, _this.onOnlyBubbleHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_CHAT, _this.onShowBubble);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_ONLY_BUBBLE_CLEAN, _this.onClearBubbleHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_SYNC_SPRITE, _this.onSync);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_CHANGE_SPRITE_ANIMATION, _this.onChangeAnimation);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_SET_SPRITE_POSITION, _this.onSetPosition);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_SET_CAMERA_FOLLOW, _this.onCameraFollow);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE_BY_PATH, _this.onMovePath);
        }
        return _this;
    }
    // public createActor(playModel: PlayerModel) {
    //     this.mActor = new Actor(playModel, this);
    //     if (sprite.attrs) {
    //         for (const attr of sprite.attrs) {
    //             this._addSimulate(sprite.id, attr);
    //         }
    //     }
    // }
    PlayerManager.prototype.createActor = function (actor) {
        var playModel = new player_model_PlayerModel(actor);
        this.mActor = new Actor_Actor(playModel, this);
    };
    Object.defineProperty(PlayerManager.prototype, "actor", {
        get: function () {
            return this.mActor;
        },
        enumerable: false,
        configurable: true
    });
    PlayerManager.prototype.destroy = function () {
        var _this = this;
        if (this.connection) {
            this.connection.removePacketListener(this);
        }
        if (!this.mPlayerMap)
            return;
        this.mPlayerMap.forEach(function (player) { return _this.removeFromMap(player.id); });
        this.mPlayerMap.clear();
    };
    PlayerManager.prototype.removeFromMap = function (id) {
        var player = this.mPlayerMap.get(id);
        if (player) {
            // MineCarSimulateData.destroyMineCar(this.roomService.elementManager, player.model);
            this.mPlayerMap.delete(id);
            player.destroy();
        }
    };
    PlayerManager.prototype.requestActorMove = function (dir, keyArr) {
        this.startActorMove();
        if (!this.roomService.world.game.device.os.desktop) {
            // 按下键盘的时候已经发了一次了，如果再发一次后端会有问题
            var pkt = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_GATEWAY_KEYBOARD_DOWN);
            var content = pkt.content;
            content.keyCodes = keyArr;
            this.connection.send(pkt);
        }
    };
    PlayerManager.prototype.startActorMove = function () {
        if (!this.mActor) {
            log["a" /* Logger */].getInstance().error("MainHero miss");
            return;
        }
        this.mActor.startMove();
    };
    PlayerManager.prototype.stopActorMove = function () {
        if (!this.mActor) {
            log["a" /* Logger */].getInstance().error("MainHero miss");
            return;
        }
        this.mActor.stopMove();
    };
    PlayerManager.prototype.get = function (id) {
        if (!this.mPlayerMap) {
            return;
        }
        var player = this.mPlayerMap.get(id);
        if (!player) {
            var actor = this.mActor;
            if (actor && actor.id === id) {
                player = actor;
            }
        }
        return player;
    };
    PlayerManager.prototype.add = function (sprite) {
    };
    PlayerManager.prototype.remove = function (id) {
        var element = this.mPlayerMap.get(id);
        if (element) {
            this.mPlayerMap.delete(id);
            element.destroy();
        }
        if (this.mActor) {
            this.mActor.destroy();
            this.mActor = null;
        }
        return element;
    };
    PlayerManager.prototype.getElements = function () {
        return Array.from(this.mPlayerMap.values());
    };
    PlayerManager.prototype.set = function (id, player) {
        if (!this.mPlayerMap) {
            this.mPlayerMap = new Map();
        }
        this.mPlayerMap.set(id, player);
    };
    Object.defineProperty(PlayerManager.prototype, "camera", {
        get: function () {
            return this.mRoom.cameraService.camera;
        },
        enumerable: false,
        configurable: true
    });
    // public addPlayer(obj: op_client.IActor): void {
    //     const playerInfo: PlayerInfo = new PlayerInfo();
    //     playerInfo.setInfo(obj);
    //     if (obj.walkOriginPoint) {
    //         playerInfo.setOriginWalkPoint(obj.walkOriginPoint);
    //     }
    //     if (obj.originPoint) {
    //         playerInfo.setOriginCollisionPoint(obj.originPoint);
    //     }
    //     this.mPlayerInfoList.push(playerInfo);
    //     this.mModelDispatch.emit(MessageType.SCENE_ADD_PLAYER, playerInfo);
    // }
    PlayerManager.prototype.addPackItems = function (elementId, items) {
        var character = this.mPlayerMap.get(elementId);
        if (character && character.id === this.mActor.id) {
            if (!character.package) {
                character.package = protocols["op_gameconfig"].Package.create();
            }
            character.package.items = character.package.items.concat(items);
            this.mRoom.world.emitter.emit(MessageType["a" /* MessageType */].UPDATED_CHARACTER_PACKAGE);
        }
    };
    PlayerManager.prototype.removePackItems = function (elementId, itemId) {
        var character = this.mPlayerMap.get(elementId);
        if (character && this.mActor.id) {
            var itemList = character.package.items;
            var len = itemList.length;
            for (var i = 0; i < len; i++) {
                if (itemId === itemList[i].id) {
                    itemList.splice(i, 1);
                    return true;
                }
            }
        }
        return false;
    };
    PlayerManager.prototype.onSync = function (packet) {
        var content = packet.content;
        if (content.nodeType !== protocols["op_def"].NodeType.CharacterNodeType) {
            return;
        }
        var player = null;
        var sprites = content.sprites;
        var command = content.command;
        for (var _i = 0, sprites_1 = sprites; _i < sprites_1.length; _i++) {
            var sprite = sprites_1[_i];
            player = this.get(sprite.id);
            if (player) {
                //  MineCarSimulateData.addSimulate(this.roomService, sprite, player.model);
                if (command === protocols["op_def"].OpCommand.OP_COMMAND_UPDATE) {
                    player.model = new element_sprite["a" /* Sprite */](sprite);
                }
                else if (command === protocols["op_def"].OpCommand.OP_COMMAND_PATCH) {
                    player.updateModel(sprite);
                }
            }
        }
    };
    PlayerManager.prototype.onAdjust = function (packet) {
        var content = packet.content;
        var positions = content.spritePositions;
        var type = content.nodeType;
        if (type !== protocols["op_def"].NodeType.CharacterNodeType) {
            return;
        }
        if (this.mActor) {
            var player = void 0;
            var point = void 0;
            for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
                var position = positions_1[_i];
                player = this.mPlayerMap.get(position.id);
                // if (!player) {
                //     if (position.id === this.mActor.id) {
                //         player = this.mActor;
                //     } else {
                //         continue;
                //     }
                // }
                if (player) {
                    point = position.point3f;
                    player.setPosition(new utils_pos["a" /* Pos */](point.x || 0, point.y || 0, point.z || 0));
                }
                // Logger.getInstance().debug(`adjust,x:${point.x},y:${point.y}`);
            }
        }
    };
    PlayerManager.prototype.onAdd = function (packet) {
        if (!this.mPlayerMap) {
            this.mPlayerMap = new Map();
        }
        var content = packet.content;
        var sprites = content.sprites;
        var type = content.nodeType;
        if (type !== protocols["op_def"].NodeType.CharacterNodeType) {
            return;
        }
        for (var _i = 0, sprites_2 = sprites; _i < sprites_2.length; _i++) {
            var sprite = sprites_2[_i];
            this._add(new element_sprite["a" /* Sprite */](sprite));
            // MineCarSimulateData.addSimulate(this.roomService, sprite);
        }
    };
    PlayerManager.prototype._add = function (sprite) {
        if (!this.mPlayerMap)
            this.mPlayerMap = new Map();
        if (!this.mPlayerMap.has(sprite.id)) {
            var player = new player_Player(sprite, this);
            this.mPlayerMap.set(player.id || 0, player);
        }
    };
    PlayerManager.prototype.addComplete = function (packet) {
        this.hasAddComplete = true;
    };
    PlayerManager.prototype.onRemove = function (packet) {
        var content = packet.content;
        var type = content.nodeType;
        var ids = content.ids;
        if (type !== protocols["op_def"].NodeType.CharacterNodeType) {
            return;
        }
        for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
            var id = ids_1[_i];
            this.removeFromMap(id);
        }
    };
    PlayerManager.prototype.onMove = function (packet) {
        var content = packet.content;
        if (content.moveData) {
            var moveDataList = content.moveData;
            var len = moveDataList.length;
            var type = content.nodeType || null;
            var moveData = void 0;
            var playID = void 0;
            var player = void 0;
            for (var i = 0; i < len; i++) {
                moveData = moveDataList[i];
                playID = moveData.moveObjectId;
                player = this.get(playID);
                if (player) {
                    player.move(moveData);
                }
            }
        }
    };
    PlayerManager.prototype.onSetPosition = function (packet) {
        var content = packet.content;
        var type = content.nodeType;
        var id = content.id;
        if (type !== NodeType.CharacterNodeType) {
            return;
        }
        var role = this.get(id);
        if (role) {
            role.setPosition(new utils_pos["a" /* Pos */](content.position.x, content.position.y, content.position.z));
        }
    };
    PlayerManager.prototype.onShowBubble = function (packet) {
        var content = packet.content;
        var player = this.get(content.chatSenderid);
        if (player) {
            player.showBubble(content.chatContext, content.chatSetting);
        }
    };
    PlayerManager.prototype.onOnlyBubbleHandler = function (packet) {
        var content = packet.content;
        var player = this.get(content.receiverid);
        if (player) {
            player.showBubble(content.context, content.chatsetting);
        }
    };
    PlayerManager.prototype.onClearBubbleHandler = function (packet) {
        var content = packet.content;
        var player = this.get(content.receiverid);
        if (player) {
            player.clearBubble();
        }
    };
    PlayerManager.prototype.onShowEffect = function (packet) {
        var content = packet.content;
        var ids = content.id;
        var player;
        for (var _i = 0, ids_2 = ids; _i < ids_2.length; _i++) {
            var id = ids_2[_i];
            player = this.get(id);
            if (player) {
                player.showEffected();
            }
        }
    };
    PlayerManager.prototype.onChangeAnimation = function (packet) {
        var content = packet.content;
        if (content.nodeType !== NodeType.CharacterNodeType) {
            return;
        }
        var player = null;
        var ids = content.ids;
        for (var _i = 0, ids_3 = ids; _i < ids_3.length; _i++) {
            var id = ids_3[_i];
            player = this.get(id);
            if (player) {
                player.setQueue(content.changeAnimation);
            }
        }
    };
    PlayerManager.prototype.onCameraFollow = function (packet) {
        var content = packet.content;
        var player = this.get(content.id);
        var camera = this.roomService.cameraService;
        if (!camera) {
            return;
        }
        if (player) {
            camera.startFollow(player.getDisplay());
        }
        else {
            camera.stopFollow();
        }
    };
    PlayerManager.prototype.onMovePath = function (packet) {
        var content = packet.content;
        if (content.nodeType !== NodeType.CharacterNodeType) {
            return;
        }
        var play = this.get(content.id);
        if (play) {
            play.movePath(content);
        }
    };
    Object.defineProperty(PlayerManager.prototype, "roomService", {
        get: function () {
            return this.mRoom;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PlayerManager.prototype, "scene", {
        get: function () {
            if (this.mRoom) {
                return this.mRoom.scene;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PlayerManager.prototype, "connection", {
        get: function () {
            if (this.mRoom) {
                return this.mRoom.connection;
            }
            log["a" /* Logger */].getInstance().error("room is undefined");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PlayerManager.prototype, "map", {
        get: function () {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    return PlayerManager;
}(dist["PacketHandler"]));


// EXTERNAL MODULE: ./src/rooms/layer/layer.manager.ts + 1 modules
var layer_manager = __webpack_require__(325);

// EXTERNAL MODULE: ./src/rooms/terrain/terrain.manager.ts
var terrain_manager = __webpack_require__(207);

// EXTERNAL MODULE: ./src/utils/position45.ts
var position45 = __webpack_require__(139);

// EXTERNAL MODULE: ./src/rooms/cameras/cameras.manager.ts + 1 modules
var cameras_manager = __webpack_require__(326);

// EXTERNAL MODULE: ./src/scenes/play.ts
var play = __webpack_require__(163);

// EXTERNAL MODULE: ./src/rooms/cameras/viewblock.manager.ts + 1 modules
var viewblock_manager = __webpack_require__(393);

// EXTERNAL MODULE: ./src/scenes/loading.ts
var loading = __webpack_require__(147);

// EXTERNAL MODULE: ./src/rooms/display/frames.model.ts
var frames_model = __webpack_require__(162);

// CONCATENATED MODULE: ./src/rooms/map/map.model.ts


var map_model_MapModel = /** @class */ (function () {
    function MapModel() {
        this.mapId = 1;
        this.zStart = 0; // TODO:
        this.zEnd = 0; // TODO:
        this._mapTotalWidth = 0;
        this._bgSound = 1;
        this._voiceChatRoomId = 0;
        this._mapTotalHeight = 0;
    }
    Object.defineProperty(MapModel.prototype, "bgSound", {
        get: function () {
            return this._bgSound;
        },
        set: function (value) {
            this._bgSound = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapModel.prototype, "mapTotalWidth", {
        get: function () {
            return this._mapTotalWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapModel.prototype, "mapTotalHeight", {
        get: function () {
            return this._mapTotalHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapModel.prototype, "tileWidth", {
        /**
         * 获取格子宽（单位：像素）
         */
        get: function () {
            return this._tileWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapModel.prototype, "tileHeight", {
        /**
         * 获取格子高（单位：像素）
         */
        get: function () {
            return this._tileHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapModel.prototype, "terrainConfig", {
        get: function () {
            return this._terrainConfig;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapModel.prototype, "elementConfig", {
        get: function () {
            return this._elementConfig;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapModel.prototype, "cols", {
        get: function () {
            return this._cols;
        },
        set: function (value) {
            this._cols = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapModel.prototype, "rows", {
        get: function () {
            return this._rows;
        },
        set: function (value) {
            this._rows = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MapModel.prototype, "voiceChatRoomId", {
        get: function () {
            return this._voiceChatRoomId;
        },
        set: function (value) {
            this._voiceChatRoomId = value;
        },
        enumerable: false,
        configurable: true
    });
    MapModel.prototype.setConfig = function (cols, rows, zStart, zEnd, tileWidth, tileHeight) {
        this._cols = cols; // 水平方向格子数量
        this._rows = rows; // 垂直方向格子数量
        this.zStart = zStart;
        this.zEnd = zEnd;
        this._tileWidth = tileWidth;
        this._tileHeight = tileHeight;
        this._mapTotalWidth = (this._rows + this._cols) * (this._tileWidth / 2);
        this._mapTotalHeight = (this._rows + this._cols) * (this._tileHeight / 2);
    };
    MapModel.prototype.setTerrainInfo = function (value) {
        this._terrainConfig = [];
        var len = value.length;
        var terrain;
        for (var i = 0; i < len; i++) {
            terrain = new frames_model["a" /* FramesModel */](value[i]);
            this._terrainConfig.push(terrain);
        }
    };
    MapModel.prototype.addTerrainInfo = function (value) {
        var len = value.length;
        var terrain;
        for (var i = 0; i < len; i++) {
            terrain = new frames_model["a" /* FramesModel */](value[i]);
            this._terrainConfig.push(terrain);
        }
    };
    MapModel.prototype.setElementInfo = function (value) {
        this._elementConfig = [];
        var len = value.length;
        var element;
        for (var i = 0; i < len; i++) {
            element = new frames_model["a" /* FramesModel */](value[i]);
            this._elementConfig.push(element);
        }
    };
    MapModel.prototype.addElementInfo = function (value) {
        var len = value.length;
        var element;
        for (var i = 0; i < len; i++) {
            element = new frames_model["a" /* FramesModel */](value[i]);
            this._elementConfig.push(element);
        }
    };
    MapModel.prototype.addPackItems = function (elementId, items) {
        var element = this.getElementInfo(elementId);
        if (element) {
            if (!element.package) {
                element.package = protocols["op_gameconfig"].Package.create();
            }
            element.package.items = element.package.items.concat(items);
        }
    };
    MapModel.prototype.removePackItems = function (elementId, itemId) {
        var element = this.getElementInfo(elementId);
        if (element) {
            var len = element.package.items.length;
            for (var i = 0; i < len; i++) {
                if (itemId === element.package.items[i].id) {
                    element.package.items.splice(i, 1);
                    return true;
                }
            }
        }
        return false;
    };
    MapModel.prototype.getElementInfo = function (value) {
        var len = this._elementConfig.length;
        for (var i = 0; i < len; i++) {
            if (this._elementConfig[i].id === value) {
                return this._elementConfig[i];
            }
        }
        return null;
    };
    return MapModel;
}());


// CONCATENATED MODULE: ./src/rooms/map/map.ts
var map_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var map_Map = /** @class */ (function (_super) {
    map_extends(Map, _super);
    function Map(mWorld) {
        var _this = _super.call(this) || this;
        _this.mWorld = mWorld;
        _this.emitter = _this.mWorld.emitter;
        _this.mMapModel = new map_model_MapModel();
        return _this;
    }
    Map.prototype.initialize = function () {
        return this.mInitialize;
    };
    Map.prototype.getMapModel = function () {
        return this.mMapModel;
    };
    Map.prototype.register = function () {
    };
    Map.prototype.unRegister = function () {
    };
    Map.prototype.destroy = function () {
        this.mInitialize = false;
        this.mMapModel = null;
        this.emitter = null;
    };
    Map.prototype.setMapInfo = function (value) {
        this.mMapModel.mapId = value.id;
        this.mMapModel.voiceChatRoomId = value.voiceChatRoomId;
        this.mMapModel.setConfig(value.cols, value.rows, value.zStart, value.zEnd, value.tileWidth, value.tileHeight);
        this.mMapModel.setTerrainInfo(value.terrains);
        this.mMapModel.setElementInfo(value.elements);
        if (this.mInitialize === false) {
            this.mInitialize = true;
            this.emitter.emit(MessageType["a" /* MessageType */].SCENE_DATA_INITIALIZE);
        }
    };
    Map.prototype.addPackItems = function (elementId, items) {
        this.mMapModel.addPackItems(elementId, items);
    };
    Map.prototype.removePackItems = function (elementId, itemId) {
        this.mMapModel.removePackItems(elementId, itemId);
    };
    Map.NAME = "Map";
    return Map;
}(dist["PacketHandler"]));


// EXTERNAL MODULE: ./src/rooms/display/display.object.ts
var display_object = __webpack_require__(148);

// EXTERNAL MODULE: ./src/rooms/editor/reference.area.ts
var reference_area = __webpack_require__(338);

// EXTERNAL MODULE: ./src/utils/resUtil.ts + 1 modules
var resUtil = __webpack_require__(104);

// CONCATENATED MODULE: ./src/rooms/fall.effect/fall.effect.ts
var fall_effect_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var fall_effect_FallEffect = /** @class */ (function (_super) {
    fall_effect_extends(FallEffect, _super);
    function FallEffect(scene, scaleRatio) {
        var _this = _super.call(this, scene) || this;
        _this.scale = scaleRatio;
        return _this;
    }
    FallEffect.prototype.show = function (status) {
        this.mStatus = status;
        this.load();
    };
    FallEffect.prototype.load = function () {
        if (this.scene.textures.exists("fall_effect")) {
            this.onCompleteHandler();
        }
        else {
            this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onCompleteHandler, this);
            this.scene.load.atlas("fall_effect", resUtil["h" /* Url */].getRes("ui/fall_effect/falleffect.png"), resUtil["h" /* Url */].getRes("ui/fall_effect/falleffect.json"));
            this.scene.load.start();
        }
    };
    FallEffect.prototype.showEnable = function () {
        // const config = {
        //     key: "fill_effect_enable",
        //     frames: this.scene.anims.generateFrameNames("fall_effect", { prefix: "enable", end: 6, zeroPad: 2 }),
        //     frameRate: 8,
        //     repeat: 0
        // };
        // this.mDisplay.setPosition(25, -25);
        // this.scene.anims.create(config);
        // this.mDisplay.play("fill_effect_enable");
        this.mDisplay = new EnableDisplay(this.scene, "fall_effect");
        this.add(this.mDisplay);
    };
    FallEffect.prototype.showDisable = function () {
        // this.mDisplay = this.scene.make.sprite({
        //     key: "fall_effect",
        //     frame: "forbid"
        // }, false).setScale(0.5);
        this.mDisplay = new DisableDisplay(this.scene, "fall_effect");
        this.add(this.mDisplay);
    };
    FallEffect.prototype.onCompleteHandler = function () {
        // this.mDisplay = this.scene.make.sprite({
        //     key: "fall_effect",
        // }, false);
        // this.add(this.mDisplay);
        var _this = this;
        if (this.mStatus === protocols["op_def"].PathReachableStatus.PATH_REACHABLE_AREA || this.mStatus === protocols["op_def"].PathReachableStatus.PATH_REACHABLE_WITH_INTERACTION_SPRITE) {
            this.showEnable();
        }
        else {
            this.showDisable();
        }
        // if (this.mType === FallType.Enable) {
        //     this.createEnable();
        // } else {
        //     this.createDisable();
        // }
        this.scene.tweens.add({
            targets: this,
            duration: 1000,
            ease: "Expo",
            delay: 1000,
            props: { alpha: 0 },
            onComplete: function () {
                _this.destroy();
                _this.emit("remove", _this);
            }
        });
    };
    return FallEffect;
}(Phaser.GameObjects.Container));

var EnableDisplay = /** @class */ (function (_super) {
    fall_effect_extends(EnableDisplay, _super);
    function EnableDisplay(scene, key) {
        var _this = _super.call(this, scene) || this;
        _this.mImage = scene.make.sprite({
            key: key,
            x: 9,
            y: -20
        }, false).setScale(0.5);
        _this.add(_this.mImage);
        // const tween = this.scene.tweens.add({
        //     targets: this.mImage,
        //     duration: 1000,
        //     delay: 600,
        //     props: {
        //         alpha: 0.6
        //     },
        //     onComplete: () => {
        //         tween.destroy();
        //         this.mImage.destroy();
        //         this.mImage = undefined;
        //     }
        // })
        // this.mEllipse = scene.make.graphics(undefined, false);
        // this.mEllipse.fillStyle(0, 0.6);
        // this.mEllipse.fillEllipse(0, 0, 30, 15)
        _this.mEllipse = scene.make.sprite(undefined, false);
        _this.addAt(_this.mEllipse, 0);
        var config = {
            key: "fill_effect_enable",
            frames: _this.scene.anims.generateFrameNames("fall_effect", { prefix: "enable", end: 6, zeroPad: 2 }),
            frameRate: 16,
            repeat: 0
        };
        _this.scene.anims.create(config);
        _this.mImage.play("fill_effect_enable");
        var ellipseConfig = {
            key: "fill_effect_ellipse",
            frames: _this.scene.anims.generateFrameNames("fall_effect", { prefix: "ellipse", end: 7, zeroPad: 2 }),
            frameRate: 10,
            repeat: 0
        };
        _this.scene.anims.create(ellipseConfig);
        _this.mEllipse.play("fill_effect_ellipse");
        return _this;
    }
    return EnableDisplay;
}(Phaser.GameObjects.Container));
var DisableDisplay = /** @class */ (function (_super) {
    fall_effect_extends(DisableDisplay, _super);
    function DisableDisplay(scene, key) {
        var _this = _super.call(this, scene) || this;
        _this.mImage = scene.make.image({
            key: key,
            y: -6,
            frame: "disable",
        }, false).setScale(0.5);
        _this.add(_this.mImage);
        _this.mEllipse = scene.make.image({
            key: key,
            frame: "forbid"
        }, false).setScale(0.5);
        _this.add([_this.mImage, _this.mEllipse]);
        return _this;
    }
    return DisableDisplay;
}(Phaser.GameObjects.Container));

// CONCATENATED MODULE: ./src/rooms/fall.effect/fall.effect.container.ts

var fall_effect_container_FallEffectContainer = /** @class */ (function () {
    function FallEffectContainer(scene, room) {
        this.scene = scene;
        this.room = room;
        this.mFalls = [];
    }
    FallEffectContainer.prototype.addFall = function (pos, enable) {
        if (!pos) {
            return;
        }
        var fall = new fall_effect_FallEffect(this.scene, this.room.world.scaleRatio);
        fall.once("remove", this.onRemoveHandler, this);
        fall.setPosition(pos.x, pos.y);
        this.room.addToSceneUI(fall);
    };
    FallEffectContainer.prototype.onRemoveHandler = function (fall) {
        if (!fall) {
            return;
        }
    };
    return FallEffectContainer;
}());


// EXTERNAL MODULE: ./src/rooms/cameras/block.object.ts
var block_object = __webpack_require__(200);

// CONCATENATED MODULE: ./src/rooms/display/wall.display.ts
var wall_display_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var wall_display_WallDisplay = /** @class */ (function (_super) {
    wall_display_extends(WallDisplay, _super);
    function WallDisplay(scene, roomService) {
        var _this = _super.call(this, scene, 0, 0, undefined) || this;
        _this.roomService = roomService;
        return _this;
    }
    WallDisplay.prototype.loadDisplay = function (texture, data) {
        // const key = texture + data;
        var key = "wall";
        if (this.scene.textures.exists(key)) {
            this.onLoadCompleteHandler();
        }
        else {
            this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadCompleteHandler, this);
            this.scene.load.atlas(key, texture, data);
            this.scene.load.start();
        }
    };
    WallDisplay.prototype.setDir = function (dir) {
        if (!this.mImage) {
            return;
        }
        this.mImage.setTexture("wall", "wall_" + dir + ".png");
        if (dir === Direction.LEFT) {
            this.mImage.x = -this.mImage.width / 2;
        }
        else if (dir === Direction.RIGHT) {
            this.mImage.x = this.mImage.width / 2;
        }
        this.mImage.y = -this.mImage.height / 2 + 30;
    };
    WallDisplay.prototype.load = function (data) {
    };
    WallDisplay.prototype.changeAlpha = function (val) {
    };
    WallDisplay.prototype.play = function (animationName) { };
    WallDisplay.prototype.removeFromParent = function () {
        if (this.parentContainer) {
            this.parentContainer.remove(this);
        }
    };
    WallDisplay.prototype.fadeIn = function (callback) { };
    WallDisplay.prototype.fadeOut = function (callback) { };
    WallDisplay.prototype.showNickname = function (val) { };
    WallDisplay.prototype.setDisplayBadges = function (cards) { };
    WallDisplay.prototype.showRefernceArea = function () { };
    WallDisplay.prototype.hideRefernceArea = function () { };
    WallDisplay.prototype.showEffect = function () { };
    WallDisplay.prototype.onLoadCompleteHandler = function () {
        this.mImage = this.scene.make.image({
            key: "wall",
            frame: "wall_up.png"
        }, false);
        this.add(this.mImage);
        this.mImage.y = -this.mImage.height / 2 + 10;
        this.emit("initialized", this);
    };
    Object.defineProperty(WallDisplay.prototype, "sortX", {
        get: function () {
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WallDisplay.prototype, "sortY", {
        get: function () {
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WallDisplay.prototype, "sortZ", {
        get: function () {
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WallDisplay.prototype, "baseLoc", {
        get: function () {
            return;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WallDisplay.prototype, "element", {
        get: function () {
            return;
        },
        enumerable: false,
        configurable: true
    });
    return WallDisplay;
}(Phaser.GameObjects.Container));


// CONCATENATED MODULE: ./src/rooms/wall/wall.ts
var wall_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var Direction;
(function (Direction) {
    Direction["UP"] = "up";
    Direction["LEFT"] = "left";
    Direction["RIGHT"] = "right";
    Direction["DOWN"] = "down";
})(Direction || (Direction = {}));
var wall_Wall = /** @class */ (function (_super) {
    wall_extends(Wall, _super);
    function Wall(room, id, pos, dir) {
        var _this = _super.call(this, room) || this;
        _this.room = room;
        // this.mBlockable = false;
        _this.mID = id;
        _this.mDirection = dir;
        _this.mPosition = pos;
        _this.createDisplay();
        return _this;
    }
    Wall.prototype.setPosition = function (pos) {
        this.mPosition = pos;
        if (this.mDisplay) {
            this.mDisplay.x = pos.x;
            this.mDisplay.y = pos.y;
        }
    };
    Wall.prototype.createDisplay = function () {
        // if (!this.mDisplayInfo) {
        //     // Logger.getInstance().error("displayinfo does not exist, Create display failed");
        //     return;
        // }
        if (this.mDisplay) {
            return this.mDisplay;
        }
        var scene = this.room.scene;
        if (scene) {
            this.mDisplay = new wall_display_WallDisplay(scene, this.room);
            // this.setPosition(this.mPosition.x, this.mPosition.y);
            this.setPosition(this.mPosition);
            this.mDisplay.once("initialized", this.onInitializedHandler, this);
            this.mDisplay.loadDisplay(resUtil["h" /* Url */].getRes("wall/wall.png"), resUtil["h" /* Url */].getRes("wall/wall.json"));
            this.addToBlock();
            // this.mDisplay.load(this.mDisplayInfo);
        }
        return this.mDisplay;
    };
    Wall.prototype.onInitializedHandler = function () {
        this.mDisplay.setDir(this.mDirection);
    };
    Wall.prototype.addDisplay = function () {
        this.createDisplay();
        if (!this.mDisplay) {
            // Logger.getInstance().error("display does not exist");
            return;
        }
        this.mRoomService.addToGround(this.mDisplay, 0);
        this.setDepth();
    };
    Wall.prototype.setDepth = function () {
        if (this.mDisplay) {
            this.mDisplay.setDepth(this.mDisplay.y);
            if (!this.mRoomService) {
                throw new Error("roomService is undefined");
            }
            var layerManager = this.mRoomService.layerManager;
            if (!layerManager) {
                throw new Error("layerManager is undefined");
            }
            layerManager.depthGroundDirty = true;
        }
    };
    Object.defineProperty(Wall.prototype, "id", {
        get: function () {
            return this.mID;
        },
        enumerable: false,
        configurable: true
    });
    return Wall;
}(block_object["a" /* BlockObject */]));


// CONCATENATED MODULE: ./src/rooms/wall/wall.manager.ts
var wall_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var wall_manager_WallManager = /** @class */ (function (_super) {
    wall_manager_extends(WallManager, _super);
    function WallManager(mRoom) {
        var _this = _super.call(this) || this;
        _this.mRoom = mRoom;
        _this.mWalls = new Map();
        if (_this.mRoom.connection) {
            _this.mRoom.connection.addPacketListener(_this);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ADD_SPRITE_END, _this.onDawWallHandler);
        }
        return _this;
    }
    WallManager.prototype.destroy = function () {
        if (this.mRoom.connection) {
            this.mRoom.connection.removePacketListener(this);
        }
        this.mWalls.forEach(function (wall) { return wall.destroy(); });
        this.mWalls.clear();
    };
    WallManager.prototype._add = function (x, y, dir) {
        var pos = this.mRoom.transformTo90(new utils_pos["a" /* Pos */](x, y));
        var wall = new wall_Wall(this.mRoom, x * 1000000 + y * 1000, pos, dir);
        // wall.setPosition(pos);
    };
    WallManager.prototype.onDawWallHandler = function (packet) {
        var terrains = this.mRoom.world.elementStorage.getTerrainCollection();
        if (!terrains) {
            return;
        }
        var tmp = this.mRoom.world.getConfig().game_id.split(".");
        if (tmp.length < 2) {
            return;
        }
        if (tmp[1] !== "5e410ba50681ad5557b4d6e9") {
            return;
        }
        var map = terrains.data;
        for (var i = 0; i < map.length; i++) {
            for (var j = 0; j < map[0].length; j++) {
                if (map[i][j] === 0) {
                    continue;
                }
                if (this.isUp(i, j, map)) {
                    this._add(i, j, Direction.UP);
                }
                else if (this.isLeft(i, j, map)) {
                    this._add(i, j, Direction.RIGHT);
                }
                else if (this.isRight(i, j, map)) {
                    // if (lastW < j) {
                    //   i++;
                    //   break;
                    // }
                    this._add(i, j, Direction.LEFT);
                }
                else if (this.isDown(i, j, map)) {
                    this._add(i, j, Direction.DOWN);
                }
                // lastW = j;
                // break;
            }
        }
    };
    WallManager.prototype.isUp = function (rows, cols, map) {
        if (rows === 0) {
            if (cols === 0) {
                return true;
            }
            else if (map[rows][cols - 1] === 0) {
                return true;
            }
            return false;
        }
        else if (cols === 0) {
            if (rows === 0) {
                return true;
            }
            else if (map[rows - 1][cols] === 0) {
                return true;
            }
            return false;
        }
        if (map[rows - 1][cols] === 0 && map[rows][cols - 1] === 0) {
            return true;
        }
        return false;
    };
    WallManager.prototype.isLeft = function (rows, cols, map) {
        if (cols === 0) {
            if (rows > 0) {
                return true;
            }
        }
        else if (rows > 0) {
            if (cols > 0 && map[rows][cols - 1] === 0) {
                return true;
            }
        }
    };
    WallManager.prototype.isRight = function (rows, cols, map) {
        if (rows === 0) {
            if (cols > 0) {
                return true;
            }
        }
        else if (cols > 0) {
            if (rows > 0 && map[rows - 1][cols] === 0) {
                return true;
            }
        }
    };
    WallManager.prototype.isDown = function (rows, cols, map) {
        if (rows > 0 && cols > 0) {
            if (map[rows - 1][cols - 1] === 0 && map[rows - 1][cols] !== 0 && map[rows][cols - 1] !== 0) {
                return true;
            }
        }
    };
    return WallManager;
}(dist["PacketHandler"]));


// EXTERNAL MODULE: ./src/ui/components/dynamic.image.ts
var dynamic_image = __webpack_require__(113);

// EXTERNAL MODULE: ./src/scenes/basic.scene.ts
var basic_scene = __webpack_require__(128);

// EXTERNAL MODULE: ./src/rooms/cameras/play.camera.ts
var play_camera = __webpack_require__(342);

// CONCATENATED MODULE: ./src/scenes/sky.box.ts
var sky_box_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var sky_box_SkyBoxScene = /** @class */ (function (_super) {
    sky_box_extends(SkyBoxScene, _super);
    function SkyBoxScene() {
        return _super.call(this, {}) || this;
    }
    SkyBoxScene.prototype.init = function (data) {
        if (data) {
            this.skyBoxManager = data;
        }
    };
    SkyBoxScene.prototype.create = function () {
        var oldCamera = this.cameras.main;
        this.cameras.addExisting(new play_camera["a" /* PlayCamera */](0, 0, this.sys.scale.width, this.sys.scale.height, this.skyBoxManager.world.scaleRatio), true);
        this.cameras.remove(oldCamera);
        this.scene.sendToBack();
        this.skyBoxManager.startPlay(this);
    };
    SkyBoxScene.prototype.update = function (time, delta) {
        this.skyBoxManager.check(time, delta);
    };
    return SkyBoxScene;
}(basic_scene["a" /* BasicScene */]));


// CONCATENATED MODULE: ./src/rooms/sky.box/block.manager.ts
var block_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var block_manager_BlockManager = /** @class */ (function () {
    function BlockManager(scenery, room) {
        this.mRows = 1;
        this.mCols = 1;
        this.mSceneName = "";
        this.mGrids = [];
        this.mScenery = scenery;
        this.mUris = scenery.uris;
        this.mRoom = room;
        this.mWorld = room.world;
        this.mCameras = room.cameraService;
        this.mMainCamera = this.mCameras.camera;
        this.mScaleRatio = this.mWorld.scaleRatio;
        this.setSize(scenery.width, scenery.height);
        var playScene = room.scene;
        if (!playScene) {
            log["a" /* Logger */].getInstance().fatal(BlockManager.name + " scene does not exist");
            return;
        }
        this.mSceneName = sky_box_SkyBoxScene.name + ("_" + scenery.id);
        this.mWorld.game.scene.add(this.mSceneName, sky_box_SkyBoxScene, false);
        playScene.scene.launch(this.mSceneName, this);
    }
    BlockManager.prototype.startPlay = function (scene) {
        this.scene = scene;
        this.initBlock();
    };
    BlockManager.prototype.check = function (time, delta) {
        var worldView = this.mMainCamera.worldView;
        var viewPort = new Phaser.Geom.Rectangle(worldView.x - worldView.width / 2, worldView.y - worldView.height / 2, worldView.width * 2, worldView.height * 2);
        for (var _i = 0, _a = this.mGrids; _i < _a.length; _i++) {
            var block = _a[_i];
            block.checkCamera(Phaser.Geom.Intersects.RectangleToRectangle(viewPort, block.rectangle));
        }
    };
    BlockManager.prototype.update = function (scenery) {
        this.mScenery = scenery;
        this.mUris = scenery.uris;
        this.setSize(scenery.width, scenery.height);
        this.initBlock();
    };
    BlockManager.prototype.setSize = function (imageW, imageH, gridW, gridH) {
        if (gridW === undefined)
            gridW = imageW;
        if (gridH === undefined)
            gridH = imageH;
        this.mRows = Math.ceil(imageW / gridW);
        this.mCols = Math.ceil(imageH / gridH);
        this.mGridWidth = gridW;
        this.mGridHeight = gridH;
    };
    BlockManager.prototype.updatePosition = function () {
        var camera = this.scene.cameras.main;
        var size = this.mRoom.roomSize;
        var _a = this.mScenery, width = _a.width, height = _a.height, offset = _a.offset;
        camera.setPosition(((size.sceneWidth - width >> 1) + offset.x) * this.mWorld.scaleRatio, ((size.sceneHeight - height >> 1) + offset.y) * this.mWorld.scaleRatio);
    };
    BlockManager.prototype.destroy = function () {
        if (this.mWorld && this.mWorld.game) {
            this.mWorld.game.scene.remove(this.mSceneName);
        }
        this.mGrids.length = 0;
    };
    BlockManager.prototype.initBlock = function () {
        this.clear();
        this.mContainer = this.scene.add.container(0, 0);
        this.mContainer.setScale(this.mWorld.scaleRatio);
        var len = this.mUris.length;
        for (var i = 0; i < len; i++) {
            var l = this.mUris[i].length;
            for (var j = 0; j < l; j++) {
                var block = new block_manager_Block(this.scene, this.mUris[i][j]);
                block.setRectangle(i % this.mRows * this.mGridWidth, Math.floor(i / this.mRows) * this.mGridHeight, this.mGridWidth, this.mGridHeight, this.mScaleRatio);
                this.mGrids.push(block);
            }
        }
        this.mContainer.add(this.mGrids);
        this.initCamera();
    };
    BlockManager.prototype.initCamera = function () {
        var camera = this.scene.cameras.main;
        if (this.mCameras) {
            var main = this.mCameras.camera;
            var bound = main.getBounds();
            camera.setBounds(bound.x, bound.y, bound.width, bound.height);
            this.updatePosition();
            camera.setScroll(main.scrollX, main.scrollY);
            this.mCameras.addCamera(camera);
        }
    };
    BlockManager.prototype.clear = function () {
        for (var _i = 0, _a = this.mGrids; _i < _a.length; _i++) {
            var grid = _a[_i];
            grid.destroy();
        }
        this.mGrids.length = 0;
        if (this.mContainer) {
            this.mContainer.destroy(true);
        }
    };
    Object.defineProperty(BlockManager.prototype, "world", {
        get: function () {
            return this.mWorld;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlockManager.prototype, "scenery", {
        get: function () {
            return this.mScenery;
        },
        enumerable: false,
        configurable: true
    });
    return BlockManager;
}());

var block_manager_Block = /** @class */ (function (_super) {
    block_manager_extends(Block, _super);
    function Block(scene, key) {
        var _this = _super.call(this, scene, 0, 0) || this;
        _this.mLoaded = false;
        _this.mInCamera = false;
        _this.mKey = key;
        _this.setOrigin(0);
        return _this;
        // this.mRectangle = new Phaser.Geom.Rectangle(this.x, this.y, 1, 1);
    }
    Block.prototype.checkCamera = function (val) {
        if (this.mInCamera !== val) {
            this.mInCamera = val;
            if (this.mLoaded) {
                // TODO
                // this.setActive(val);
            }
            else {
                this.load(resUtil["h" /* Url */].getOsdRes(this.mKey));
            }
        }
    };
    Block.prototype.setRectangle = function (x, y, width, height, scale) {
        if (scale === void 0) { scale = 1; }
        this.x = x;
        this.y = y;
        this.mRectangle = new Phaser.Geom.Rectangle(x * scale, y * scale, width * scale, height * scale);
    };
    Object.defineProperty(Block.prototype, "rectangle", {
        get: function () {
            return this.mRectangle;
        },
        enumerable: false,
        configurable: true
    });
    Block.prototype.onLoadComplete = function (file) {
        _super.prototype.onLoadComplete.call(this, file);
        if (this.texture) {
            this.mLoaded = true;
            this.texture.setFilter(Phaser.Textures.FilterMode.NEAREST);
            this.mRectangle.setSize(this.width, this.height);
        }
    };
    return Block;
}(dynamic_image["DynamicImage"]));

// CONCATENATED MODULE: ./src/rooms/sky.box/sky.box.manager.ts
var sky_box_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var sky_box_manager_SkyBoxManager = /** @class */ (function (_super) {
    sky_box_manager_extends(SkyBoxManager, _super);
    function SkyBoxManager(room) {
        var _this = _super.call(this) || this;
        _this.mRoom = room;
        _this.mScenetys = new Map();
        return _this;
    }
    SkyBoxManager.prototype.add = function (scenery) {
        this.mScenetys.set(scenery.id, new block_manager_BlockManager(scenery, this.mRoom));
    };
    SkyBoxManager.prototype.update = function (scenery) {
        var block = this.mScenetys.get(scenery.id);
        if (block) {
            block.update(scenery);
        }
    };
    SkyBoxManager.prototype.remove = function (id) {
        var block = this.mScenetys.get(id);
        if (block) {
            block.destroy();
        }
    };
    SkyBoxManager.prototype.destroy = function () {
        if (this.mRoom) {
            var connection = this.mRoom.connection;
            if (connection) {
                connection.removePacketListener(this);
            }
        }
        this.mScenetys.forEach(function (scenery) { return scenery.destroy(); });
    };
    return SkyBoxManager;
}(dist["PacketHandler"]));


// EXTERNAL MODULE: ./src/Handler/Handler.ts
var Handler = __webpack_require__(140);

// CONCATENATED MODULE: ./src/Handler/HandlerDispatcher.ts
var HandlerDispatcher_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var HandlerDispatcher = /** @class */ (function () {
    function HandlerDispatcher() {
    }
    HandlerDispatcher.prototype.hasListener = function (type) {
        var listener = this._events && this._events[type];
        return !!listener;
    };
    HandlerDispatcher.prototype.emitter = function (type, data) {
        if (data === void 0) { data = null; }
        if (!this._events || !this._events[type])
            return false;
        var listeners = this._events[type];
        if (listeners.run) {
            if (listeners.once)
                delete this._events[type];
            data != null ? listeners.runWith(data) : listeners.run();
        }
        else {
            for (var i = 0, n = listeners.length; i < n; i++) {
                var listener = listeners[i];
                if (listener) {
                    (data != null) ? listener.runWith(data) : listener.run();
                }
                if (!listener || listener.once) {
                    listeners.splice(i, 1);
                    i--;
                    n--;
                }
            }
            if (listeners.length === 0 && this._events)
                delete this._events[type];
        }
        return true;
    };
    HandlerDispatcher.prototype.on = function (type, caller, listener, args) {
        if (args === void 0) { args = null; }
        return this._createListener(type, caller, listener, args, false);
    };
    HandlerDispatcher.prototype.once = function (type, caller, listener, args) {
        if (args === void 0) { args = null; }
        return this._createListener(type, caller, listener, args, true);
    };
    HandlerDispatcher.prototype.off = function (type, caller, listener, onceOnly) {
        if (onceOnly === void 0) { onceOnly = false; }
        if (!this._events || !this._events[type])
            return this;
        var listeners = this._events[type];
        if (listener != null) {
            if (listeners.run) {
                if ((!caller || listeners.caller === caller) && listeners.method === listener && (!onceOnly || listeners.once)) {
                    delete this._events[type];
                    listeners.recover();
                }
            }
            else {
                var count = 0;
                var len = listeners.length;
                for (var i = 0, n = listeners.length; i < n; i++) {
                    var item = listeners[i];
                    if (item && (!caller || item.caller === caller) && item.method === listener && (!onceOnly || item.once)) {
                        count++;
                        listeners[i] = null;
                        item.recover();
                    }
                }
                if (count === len)
                    delete this._events[type];
            }
        }
        return this;
    };
    HandlerDispatcher.prototype.offAll = function (type) {
        if (type === void 0) { type = null; }
        var events = this._events;
        if (!events)
            return this;
        if (type) {
            this._recoverHandlers(events[type]);
            delete events[type];
        }
        else {
            for (var name_1 in events) {
                this._recoverHandlers(events[name_1]);
            }
            this._events = null;
        }
        return this;
    };
    HandlerDispatcher.prototype.destroy = function () {
        this.offAll();
    };
    HandlerDispatcher.prototype._createListener = function (type, caller, listener, args, once, offBefore) {
        if (offBefore === void 0) { offBefore = true; }
        if (offBefore)
            this.off(type, caller, listener, once);
        var handler = EventHandler.create(caller || this, listener, args, once);
        if (!this._events)
            this._events = {};
        var events = this._events;
        if (!events[type])
            events[type] = handler;
        else {
            if (!events[type].run)
                events[type].push(handler);
            else
                events[type] = [events[type], handler];
        }
        return this;
    };
    HandlerDispatcher.prototype._recoverHandlers = function (arr) {
        if (!arr)
            return;
        if (arr.run) {
            arr.recover();
        }
        else {
            for (var i = arr.length - 1; i > -1; i--) {
                if (arr[i]) {
                    arr[i].recover();
                    arr[i] = null;
                }
            }
        }
    };
    return HandlerDispatcher;
}());

var EventHandler = /** @class */ (function (_super) {
    HandlerDispatcher_extends(EventHandler, _super);
    function EventHandler(caller, method, args, once) {
        return _super.call(this, caller, method, args, once) || this;
    }
    EventHandler.create = function (caller, method, args, once) {
        if (args === void 0) { args = null; }
        if (once === void 0) { once = true; }
        if (EventHandler._mpool.length)
            return EventHandler._mpool.pop().setTo(caller, method, args, once);
        return new EventHandler(caller, method, args, once);
    };
    EventHandler.prototype.recover = function () {
        if (this._id > 0) {
            this._id = 0;
            EventHandler._mpool.push(this.clear());
        }
    };
    EventHandler._mpool = [];
    return EventHandler;
}(Handler["a" /* Handler */]));

// CONCATENATED MODULE: ./src/rooms/group/FollowGroup.ts


var FollowGroup_FollowGroup = /** @class */ (function () {
    function FollowGroup() {
        this.groupType = GroupType.Follow;
        this.eventDisp = new HandlerDispatcher();
        this.childs = [];
    }
    FollowGroup.prototype.addChild = function (child) {
        this.removeChild(child);
        this.childs.push(child);
    };
    FollowGroup.prototype.removeChild = function (child) {
        var index = this.childs.indexOf(child);
        if (index !== -1) {
            this.childs.splice(index, 1);
        }
    };
    FollowGroup.prototype.replaceOwner = function (owner) {
        this.owner = owner;
        this.eventDisp.emitter(GroupEventType.REPLACE_TYPE, owner);
    };
    FollowGroup.prototype.emitter = function (type, data) {
        if (!type)
            type = GroupEventType.DEFAULT_TYPE;
        this.eventDisp.emitter(type, data);
    };
    FollowGroup.prototype.on = function (type, caller, method, args) {
        this.eventDisp.on(type, caller, method, args);
    };
    FollowGroup.prototype.off = function (type, caller, method) {
        this.eventDisp.off(type, caller, method);
    };
    FollowGroup.prototype.destroy = function () {
        this.eventDisp.destroy();
        this.childs.length = 0;
        this.owner = null;
        this.data = null;
    };
    return FollowGroup;
}());


// CONCATENATED MODULE: ./src/rooms/group/GroupManager.ts

var GroupManager_GroupManager = /** @class */ (function () {
    function GroupManager(room) {
        this.room = room;
        this.map = new Map();
    }
    GroupManager.prototype.createGroup = function (owner, groupType) {
        if (!this.hasGroup(owner, groupType)) {
            var groups = this.map.get(owner);
            var group = void 0;
            if (!groups) {
                groups = [];
                this.map.set(owner, groups);
            }
            if (groupType === GroupType.Follow) {
                var item = new FollowGroup_FollowGroup();
                item.owner = owner;
                groups.push(item);
                group = item;
            }
            return group;
        }
    };
    GroupManager.prototype.getGroup = function (owner, groupType) {
        var group;
        if (this.map.has(owner)) {
            var groups = this.map.get(owner);
            for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
                var item = groups_1[_i];
                if (item.groupType === groupType) {
                    group = item;
                    return group;
                }
            }
        }
        return group;
    };
    GroupManager.prototype.hasGroup = function (owner, groupType) {
        var group = this.getGroup(owner, groupType);
        if (group)
            return true;
        return false;
    };
    GroupManager.prototype.destroy = function () {
        this.map.forEach(function (value, key) {
            for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                var item = value_1[_i];
                item.destroy();
            }
            value.length = 0;
        });
        this.map.clear();
    };
    return GroupManager;
}());

var GroupType;
(function (GroupType) {
    GroupType[GroupType["Follow"] = 1] = "Follow";
})(GroupType || (GroupType = {}));
var GroupEventType;
(function (GroupEventType) {
    GroupEventType["DEFAULT_TYPE"] = "DEFAULT_TYPE";
    GroupEventType["REPLACE_TYPE"] = "REPLACE_TYPE";
})(GroupEventType || (GroupEventType = {}));

// CONCATENATED MODULE: ./src/rooms/element/frame.manager.ts

var frame_manager_FrameManager = /** @class */ (function () {
    function FrameManager() {
        this.handlers = [];
    }
    FrameManager.prototype.add = function (caller, method, args) {
        this.remove(caller, method);
        var handler = new Handler["a" /* Handler */](caller, method, args);
        this.handlers.push(handler);
    };
    FrameManager.prototype.remove = function (caller, method) {
        var removeid = -1;
        for (var i = 0; i < this.handlers.length; i++) {
            var item = this.handlers[i];
            if (item.caller === caller && item.method === method) {
                removeid = i;
                break;
            }
        }
        if (removeid !== -1) {
            var hander = this.handlers.splice(removeid, 1)[0];
            hander.clear();
        }
    };
    FrameManager.prototype.update = function (time, delta) {
        for (var _i = 0, _a = this.handlers; _i < _a.length; _i++) {
            var item = _a[_i];
            item.runWith([time, delta]);
        }
    };
    FrameManager.prototype.destroy = function () {
        for (var _i = 0, _a = this.handlers; _i < _a.length; _i++) {
            var item = _a[_i];
            item.clear();
        }
        this.handlers.length = 0;
    };
    FrameManager.prototype.hasRegistered = function (caller, method) {
        var removeid = -1;
        for (var i = 0; i < this.handlers.length; i++) {
            var item = this.handlers[i];
            if (item.caller === caller && item.method === method) {
                removeid = i;
                break;
            }
        }
        return (removeid !== -1);
    };
    return FrameManager;
}());


// CONCATENATED MODULE: ./src/rooms/room.ts
var room_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
























// 这一层管理数据和Phaser之间的逻辑衔接
// 消息处理让上层[RoomManager]处理
var room_Room = /** @class */ (function (_super) {
    room_extends(Room, _super);
    function Room(manager) {
        var _this = _super.call(this) || this;
        _this.manager = manager;
        _this.mEnableEdit = false;
        _this.mWorld = _this.manager.world;
        _this.moveStyle = _this.mWorld.moveStyle;
        _this.mScaleRatio = _this.mWorld.scaleRatio;
        if (_this.mWorld) {
            if (_this.connection) {
                _this.connection.addPacketListener(_this);
                _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_ENABLE_EDIT_MODE, _this.onEnableEditModeHandler);
                _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_UNWALKABLE_BIT_MAP, _this.onShowMapTitle);
                _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_MOVE_SPRITE_BY_PATH, _this.onMovePathHandler);
            }
        }
        return _this;
    }
    Room.prototype.enter = function (data) {
        var _this = this;
        var size = this.mWorld.getSize();
        if (!data) {
            // Logger.getInstance().error("wrong room");
            return;
        }
        this.mID = data.id;
        this.mSize = {
            cols: data.cols,
            rows: data.rows,
            tileHeight: data.tileHeight,
            tileWidth: data.tileWidth,
            sceneWidth: (data.rows + data.cols) * (data.tileWidth / 2),
            sceneHeight: (data.rows + data.cols) * (data.tileHeight / 2),
        };
        this.mMiniSize = {
            cols: data.cols * 2,
            rows: data.rows * 2,
            tileWidth: data.tileWidth / 2,
            tileHeight: data.tileHeight / 2,
        };
        this.mMap = new map_Map(this.mWorld);
        this.mMap.setMapInfo(data);
        // if (!this.mWorld.game.scene.getScene(LoadingScene.name))
        //     this.mWorld.game.scene.add(LoadingScene.name, LoadingScene);
        // this.mWorld.game.scene.start(LoadingScene.name, {
        //     world: this.world,
        //     room: this,
        // });
        this.world.showLoading().then(function () {
            _this.completeLoad();
        });
        this.mCameraService = new cameras_manager["a" /* CamerasManager */](this);
    };
    Room.prototype.onFullPacketReceived = function (sprite_t) {
        if (sprite_t !== protocols["op_def"].NodeType.TerrainNodeType) {
            return;
        }
    };
    Room.prototype.onClockReady = function () {
        // TODO: Unload loading-scene
    };
    Room.prototype.startLoad = function () { };
    Room.prototype.completeLoad = function () {
        this.mWorld.game.scene.add(play["a" /* PlayScene */].name, play["a" /* PlayScene */], true, {
            room: this,
        });
    };
    Room.prototype.startPlay = function () {
        var _this = this;
        if (this.mLayManager) {
            this.layerManager.destroy();
        }
        this.mScene = this.world.game.scene.getScene(play["a" /* PlayScene */].name);
        this.mTerrainManager = new terrain_manager["a" /* TerrainManager */](this, this);
        this.mElementManager = new element_manager["a" /* ElementManager */](this);
        this.mPlayerManager = new player_manager_PlayerManager(this);
        this.mWallManager = new wall_manager_WallManager(this);
        this.mBlocks = new viewblock_manager["a" /* ViewblockManager */](this.mCameraService);
        this.mLayManager = new layer_manager["a" /* LayerManager */](this);
        this.mGroupManager = new GroupManager_GroupManager(this);
        this.mFrameManager = new frame_manager_FrameManager();
        this.mSkyboxManager = new sky_box_manager_SkyBoxManager(this);
        if (this.scene) {
            var camera = this.scene.cameras.main;
            this.mCameraService.camera = camera;
            this.mCameraService.setBounds(-camera.width >> 1, -camera.height >> 1, this.mSize.sceneWidth * this.mScaleRatio + camera.width, this.mSize.sceneHeight * this.mScaleRatio + camera.height);
            // init block
            this.mBlocks.int(this.mSize);
            if (this.mWorld.moveStyle !== protocols["op_def"].MoveStyle.DIRECTION_MOVE_STYLE) {
                this.mFallEffectContainer = new fall_effect_container_FallEffectContainer(this.mScene, this);
            }
        }
        // this.mPlayerManager.createActor(new PlayerModel(this.mActorData));
        this.mPlayerManager.createActor(this.mActorData);
        var loadingScene = this.mWorld.game.scene.getScene(loading["a" /* LoadingScene */].name);
        this.world.emitter.on(MessageType["a" /* MessageType */].PRESS_ELEMENT, this.onPressElementHandler, this);
        if (loadingScene)
            loadingScene.sleep();
        this.world.changeRoom(this);
        if (this.world.uiManager)
            this.world.uiManager.showMainUI();
        if (this.connection) {
            this.cameraService.syncCamera();
            this.connection.send(new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_SCENE_CREATED));
        }
        this.scene.input.on("pointerdown", this.onPointerDownHandler, this);
        this.scene.input.on("pointerup", this.onPointerUpHandler, this);
        this.world.emitter.on("Tap", this.onTapHandler, this);
        // if (this.mWorld.getConfig().game_id === "5e719a0a68196e416ecf7aad") {
        //     this.mBackgrounds = [];
        //     this.mBackgrounds.push(new BackgroundManager(this, "close", this.mCameraService));
        //     // const close = new BackgroundManager(this, "close", this.mCameraService);
        // }
        // this.addSkyBox();
        // const list = ["forestBgm1.mp3", "mineBgm1.mp3", "fisheryBgm1.mp3", "generalBgm1.mp3"];
        // this.world.playSound({
        //     urls: "https://osd.tooqing.com/b4368e3b7aea51d106044127f9cae95e",
        //     field: SoundField.Element,
        //     soundConfig: { loop: true },
        // });
        var scenerys = this.world.elementStorage.getScenerys();
        if (scenerys) {
            for (var _i = 0, scenerys_1 = scenerys; _i < scenerys_1.length; _i++) {
                var scenery = scenerys_1[_i];
                this.addSkyBox(scenery);
            }
        }
        __webpack_require__.e(/* import() */ 3).then(__webpack_require__.t.bind(null, 445, 7)).then(function (_a) {
            var Template = _a.Template;
            var tmp = new Template();
            tmp.init(_this.world);
            //   Logger.getInstance().log("module: ", Template);
        });
    };
    Room.prototype.pause = function () {
        if (this.mScene)
            this.mScene.scene.pause();
        if (this.mWorld && this.mWorld.inputManager)
            this.mWorld.inputManager.enable = false;
    };
    Room.prototype.resume = function (name) {
        if (this.mScene)
            this.mScene.scene.resume(name);
        if (this.mWorld && this.mWorld.inputManager)
            this.mWorld.inputManager.enable = true;
        // this.mClock.sync(-1);
    };
    Room.prototype.addActor = function (data) {
        this.mActorData = data;
    };
    Room.prototype.addBlockObject = function (object) {
        if (this.blocks) {
            this.blocks.add(object);
        }
    };
    Room.prototype.removeBlockObject = function (object) {
        if (this.blocks) {
            this.blocks.remove(object);
        }
    };
    Room.prototype.updateBlockObject = function (object) {
        if (this.blocks) {
            this.blocks.check(object);
        }
    };
    Room.prototype.addToGround = function (element, index) {
        this.layerManager.addToGround(element, index);
    };
    Room.prototype.addToSurface = function (element) {
        this.layerManager.addToSurface(element);
    };
    Room.prototype.addToSceneUI = function (element) {
        this.layerManager.addToSceneToUI(element);
    };
    Room.prototype.addToUI = function (element) {
        this.layerManager.addToUI(element);
    };
    Room.prototype.resize = function (width, height) {
        if (this.layerManager)
            this.layerManager.resize(width, height);
        if (this.mCameraService)
            this.mCameraService.resize(width, height);
    };
    Room.prototype.transformTo90 = function (p) {
        if (!this.mSize) {
            // Logger.getInstance().error("position object is undefined");
            return;
        }
        return position45["a" /* Position45 */].transformTo90(p, this.mSize);
    };
    Room.prototype.transformTo45 = function (p) {
        if (!this.mSize) {
            // Logger.getInstance().error("position object is undefined");
            return;
        }
        return position45["a" /* Position45 */].transformTo45(p, this.mSize);
    };
    Room.prototype.transformToMini90 = function (p) {
        if (!this.mMiniSize) {
            return;
        }
        return position45["a" /* Position45 */].transformTo90(p, this.miniSize);
    };
    Room.prototype.transformToMini45 = function (p) {
        if (!this.mMiniSize) {
            return;
        }
        return position45["a" /* Position45 */].transformTo45(p, this.mMiniSize);
    };
    Room.prototype.addMouseListen = function () {
        this.layerManager.addMouseListen();
    };
    Room.prototype.moveable = function (pos) {
        var pos45 = this.transformToMini45(pos);
        var map = this.mElementManager.map;
        if (pos45.x < 0 || pos45.x > map.length || pos45.y < 0 || pos45.y > map[0].length) {
            return false;
        }
        if (map[pos45.y][pos45.x] === 0) {
            return false;
        }
        return true;
    };
    Room.prototype.update = function (time, delta) {
        // 角色管理器和地块，物件管理器中在登陆时，add_sprite完成后，把交互管理器的交互开放
        // if (this.mPlayerManager.hasAddComplete && this.mTerainManager.hasAddComplete && this.mElementManager.hasAddComplete) {
        //   if (this.mWorld.inputManager.enable === false && this.world.game.loop.actualFps >= 20) {
        //     this.mWorld.inputManager.enable = true;
        //   }
        // }
        this.updateClock(time, delta);
        this.mBlocks.update(time, delta);
        // this.startCheckBlock();
        if (this.layerManager)
            this.layerManager.update(time, delta);
        if (this.elementManager)
            this.elementManager.update(time, delta);
        if (this.mFrameManager)
            this.frameManager.update(time, delta);
    };
    Room.prototype.updateClock = function (time, delta) {
        // 客户端自己通过delta来更新游戏时间戳
        if (this.mWorld.clock)
            this.mWorld.clock.update(time, delta);
    };
    Room.prototype.now = function () {
        return this.mWorld.clock.unixTime;
    };
    Room.prototype.clear = function () {
        if (this.mLayManager)
            this.mLayManager.destroy();
        if (this.mTerrainManager)
            this.mTerrainManager.destroy();
        if (this.mElementManager)
            this.mElementManager.destroy();
        if (this.mPlayerManager)
            this.mPlayerManager.destroy();
        if (this.mBlocks)
            this.mBlocks.destroy();
        if (this.mSkyboxManager)
            this.mSkyboxManager.destroy();
        if (this.mWallManager)
            this.mWallManager.destroy();
        if (this.mActorData) {
            this.mActorData = null;
        }
    };
    Room.prototype.destroy = function () {
        this.clear();
        this.world.emitter.off("Tap", this.onTapHandler, this);
        if (this.connection)
            this.connection.removePacketListener(this);
        this.mWorld.game.scene.remove(play["a" /* PlayScene */].name);
        this.world.emitter.off(MessageType["a" /* MessageType */].PRESS_ELEMENT, this.onPressElementHandler, this);
        // if (this.mScene) {
        //   this.mScene = null;
        // }
    };
    Room.prototype.addSkyBox = function (scenery) {
        this.mSkyboxManager.add(scenery);
    };
    Room.prototype.onPointerDownHandler = function (pointer) {
        this.addPointerMoveHandler();
    };
    Room.prototype.onPointerUpHandler = function (pointer) {
        this.removePointerMoveHandler();
    };
    Room.prototype.addPointerMoveHandler = function () {
        this.mScene.input.on("pointermove", this.onPointerMoveHandler, this);
        this.mScene.input.on("gameout", this.onGameOutHandler, this);
    };
    Room.prototype.removePointerMoveHandler = function () {
        this.mScene.input.off("pointermove", this.onPointerMoveHandler, this);
        this.mScene.input.off("gameout", this.onGameOutHandler, this);
        if (this.cameraService.moving) {
            this.cameraService.syncCameraScroll();
            this.cameraService.moving = false;
        }
    };
    Room.prototype.onPointerMoveHandler = function (pointer) {
        if (!this.mCameraService.targetFollow) {
            this.cameraService.offsetScroll(pointer.prevPosition.x - pointer.position.x, pointer.prevPosition.y - pointer.position.y);
        }
    };
    Room.prototype.onGameOutHandler = function () {
        this.removePointerMoveHandler();
    };
    Object.defineProperty(Room.prototype, "scene", {
        get: function () {
            return this.mScene || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "terrainManager", {
        get: function () {
            return this.mTerrainManager || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "elementManager", {
        get: function () {
            return this.mElementManager || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "playerManager", {
        get: function () {
            return this.mPlayerManager || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "map", {
        get: function () {
            return this.mMap;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "layerManager", {
        get: function () {
            return this.mLayManager || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "groupManager", {
        get: function () {
            return this.mGroupManager || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "frameManager", {
        get: function () {
            return this.mFrameManager || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "cameraService", {
        get: function () {
            return this.mCameraService || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "id", {
        get: function () {
            return this.mID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "roomSize", {
        get: function () {
            return this.mSize || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "miniSize", {
        get: function () {
            return this.mMiniSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "blocks", {
        get: function () {
            return this.mBlocks;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "world", {
        get: function () {
            return this.mWorld;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "enableEdit", {
        get: function () {
            return this.mEnableEdit;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "connection", {
        get: function () {
            if (this.manager) {
                return this.manager.connection;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "sceneType", {
        get: function () {
            return protocols["op_def"].SceneTypeEnum.NORMAL_SCENE_TYPE;
        },
        enumerable: false,
        configurable: true
    });
    Room.prototype.onPressElementHandler = function (pointer, gameObject) {
        if (!gameObject || !gameObject.parentContainer) {
            return;
        }
        var com = gameObject.parentContainer;
        if (!(com instanceof display_object["a" /* DisplayObject */])) {
            return;
        }
        var ele = com.element;
        if (!(ele instanceof element_element["b" /* Element */])) {
            return;
        }
        if (this.mEnableEdit) {
            var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_EDIT_MODE_ENTER);
            this.connection.send(packet);
        }
    };
    Room.prototype.onEnableEditModeHandler = function (packet) {
        this.mEnableEdit = true;
        // if (this.world) {
        //     this.world.emitter.emit(MessageType.ADD_ICON_TO_TOP, {
        //         key: "Turn_Btn_Top",
        //         name: "EnterDecorate",
        //         bgResKey: "baseView",
        //         bgTextures: ["btnGroup_yellow_normal.png", "btnGroup_yellow_light.png", "btnGroup_yellow_select.png"],
        //         iconResKey: "",
        //         iconTexture: "btnGroup_top_expand.png",
        //         pngUrl: "ui/baseView/mainui_mobile.png", jsonUrl: "ui/baseView/mainui_mobile.json",
        //         scale: 1
        //     });
        // }
    };
    Room.prototype.onShowMapTitle = function (packet) {
        if (!this.scene) {
            return;
        }
        var content = packet.content;
        var area = new reference_area["a" /* ReferenceArea */](this.scene, this);
        var num = [];
        var intArray = content.intArray;
        for (var i = 0; i < intArray.length; i++) {
            num[i] = [];
            for (var j = 0; j < intArray[i].value.length; j++) {
                num[i][j] = intArray[i].value[j];
            }
            // num[i] = intArray[i];
        }
        area.draw(num, new Phaser.Geom.Point(0, 0));
        area.setAlpha(0.1);
        if (area.size) {
            area.setPosition(area.size.sceneWidth / 2, 0);
            this.mLayManager.addToMiddle(area);
        }
    };
    Room.prototype.addFillEffect = function (pos, status) {
        if (!this.scene) {
            log["a" /* Logger */].getInstance().log("Room scene  does not exist");
            return;
        }
        var fall = new fall_effect_FallEffect(this.scene, this.mScaleRatio);
        fall.show(status);
        fall.setPosition(pos.x * this.mScaleRatio, pos.y * this.mScaleRatio);
        this.addToSceneUI(fall);
        // test
        // const content = new op_client.OP_VIRTUAL_WORLD_REQ_CLIENT_SHOW_INTERACTIVE_BUBBLE();
        // content.duration = 2000;
        // this.playerManager.actor.showInteractionBubble(content);
    };
    Room.prototype.onMovePathHandler = function (packet) {
        var content = packet.content;
        var status = content.pathStatus;
        if (!status) {
            return;
        }
        var pos = content.targetPos;
        this.addFillEffect({ x: pos.x, y: pos.y }, status);
    };
    Room.prototype.move = function (x, y, gameObject) {
        if (this.moveStyle !== protocols["op_def"].MoveStyle.PATH_MOVE_STYLE) {
            return;
        }
        if (!this.mPlayerManager) {
            return;
        }
        var actor = this.mPlayerManager.actor;
        if (!actor) {
            return;
        }
        var pos45 = actor.getPosition45();
        var click45 = this.transformTo45(new utils_pos["a" /* Pos */](x, y));
        if (Math.abs(pos45.x - click45.x) > 20 || Math.abs(pos45.y - click45.y) > 20) {
            this.addFillEffect({ x: x, y: y }, protocols["op_def"].PathReachableStatus.PATH_UNREACHABLE_AREA);
            return;
        }
        var pkt = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MOVE_TO_TARGET_BY_PATH);
        var content = pkt.content;
        // const pkt: PBpacket = new PBpacket(op_virtual_world.OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_MOUSE_EVENT);
        // const content: op_virtual_world.IOP_CLIENT_REQ_VIRTUAL_WORLD_MOUSE_EVENT = pkt.content;
        if (gameObject) {
            var displsy = gameObject.parentContainer;
            if (displsy && displsy instanceof display_object["a" /* DisplayObject */]) {
                var ele = displsy.element;
                if (ele && ele.model) {
                    content.id = ele.model.id;
                    content.nodeType = ele.model.nodeType;
                }
            }
        }
        // content.mouseEvent = [9];
        content.point3f = { x: x, y: y };
        this.connection.send(pkt);
        this.tryMove();
    };
    Room.prototype.tryMove = function () {
        var player = this.mPlayerManager.actor;
        if (!player) {
            return;
        }
        var moveData = player.moveData;
        var pos = moveData.posPath;
        if (!pos || pos.length < 0) {
            return;
        }
        var step = moveData.step;
        if (step >= pos.length) {
            return;
        }
        var playerPosition = player.getPosition();
        var position = protocols["op_def"].PBPoint3f.create();
        position.x = playerPosition.x;
        position.y = playerPosition.y;
        var nextPosition = protocols["op_def"].PBPoint3f.create();
        nextPosition.x = pos[step].x;
        nextPosition.y = pos[step].y;
        var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_CHECK_MOVE_PATH_NEXT_POINT);
        var conten = packet.content;
        conten.timestemp = this.now();
        conten.position = position;
        conten.nextPoint = nextPosition;
        this.connection.send(packet);
    };
    // Move through the location returned by the server
    Room.prototype.onTapHandler = function (pointer, gameObject) {
        this.move(pointer.worldX / this.mScaleRatio, pointer.worldY / this.mScaleRatio, gameObject);
    };
    Room.prototype.enterRoom = function () {
        this.mWorld.game.scene.run(play["a" /* PlayScene */].name, {
            room: this,
        });
    };
    return Room;
}(dist["PacketHandler"]));


// CONCATENATED MODULE: ./src/const/brush.ts
var BrushEnum;
(function (BrushEnum) {
    BrushEnum["MOVE"] = "move";
    BrushEnum["BRUSH"] = "brush";
    BrushEnum["SELECT"] = "select";
    BrushEnum["ERASER"] = "eraser";
    BrushEnum["FILL"] = "FILL";
})(BrushEnum || (BrushEnum = {}));
var Brush = /** @class */ (function () {
    function Brush(mEditorRoom) {
        this.mEditorRoom = mEditorRoom;
        this.mMode = BrushEnum.SELECT;
    }
    Object.defineProperty(Brush.prototype, "mode", {
        get: function () {
            return this.mMode;
        },
        set: function (mode) {
            this.mMode = mode;
        },
        enumerable: false,
        configurable: true
    });
    return Brush;
}());


// EXTERNAL MODULE: ./src/scenes/edit.ts
var edit = __webpack_require__(343);

// EXTERNAL MODULE: ./src/rooms/display/frames.display.ts
var frames_display = __webpack_require__(160);

// CONCATENATED MODULE: ./src/rooms/editor/mouse.follow.ts
var mouse_follow_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var mouse_follow_NodeType = protocols["op_def"].NodeType;



var mouse_follow_MouseFollow = /** @class */ (function () {
    function MouseFollow(mScene, mRoomService) {
        this.mScene = mScene;
        this.mRoomService = mRoomService;
        this.mScaleRatio = 1;
        /**
         * 笔触大小
         */
        this.mSize = 1;
        this.mLayerManager = this.mRoomService.layerManager;
        this.mScaleRatio = this.mRoomService.world.scaleRatio;
    }
    MouseFollow.prototype.setDisplay = function (content) {
        if (!this.mScene)
            return;
        if (this.mDisplay) {
            this.mDisplay.destroy();
            this.mDisplay = null;
        }
        this.mNodeType = content.nodeType;
        this.isMoss = content.isMoss;
        this.key = content.key;
        this.mSprite = new element_sprite["a" /* Sprite */](content.sprite, content.nodeType);
        this.mDisplay = new mouse_follow_MouseDisplayContainer(this.mScene, this.mRoomService);
        var size = this.mNodeType === mouse_follow_NodeType.TerrainNodeType ? this.mSize : 1;
        this.mDisplay.setDisplay(this.mSprite, size);
        this.mDisplay.scale = this.mScaleRatio;
        this.mLayerManager.addToSceneToUI(this.mDisplay);
        if (this.mNodeType === mouse_follow_NodeType.TerrainNodeType) {
            this.mElementManager = this.mRoomService.terrainManager;
        }
        else if (this.mNodeType === mouse_follow_NodeType.ElementNodeType || this.mNodeType === mouse_follow_NodeType.SpawnPointType) {
            this.mElementManager = this.mRoomService.elementManager;
        }
        this.mScene.input.on("pointermove", this.onPointerMoveHandler, this);
        this.mScene.input.on("wheel", this.onWheelHandler, this);
    };
    MouseFollow.prototype.showEraserArea = function () {
        if (!this.mScene)
            return;
        if (this.mDisplay) {
            this.mDisplay.destroy();
        }
        this.mDisplay = new mouse_follow_EraserArea(this.mScene, this.mRoomService);
        this.mDisplay.setDisplay(null, this.mSize);
        this.mNodeType = mouse_follow_NodeType.TerrainNodeType;
        this.mLayerManager.addToSceneToUI(this.mDisplay);
        this.mScene.input.on("pointermove", this.onPointerMoveHandler, this);
        this.mScene.input.on("wheel", this.onWheelHandler, this);
    };
    MouseFollow.prototype.createTerrainsOrMossesData = function () {
        var _this = this;
        var locs = this.mDisplay.displays.map(function (display) { return _this.getPosition(display.x, display.y); });
        return { locs: locs, key: this.key };
    };
    MouseFollow.prototype.createSprites = function () {
        if (!this.mSprite) {
            return;
        }
        var result = [];
        var sprite = null;
        var displays = this.mDisplay.displays;
        for (var _i = 0, displays_1 = displays; _i < displays_1.length; _i++) {
            var display = displays_1[_i];
            // deep clone
            sprite = Object.assign(Object.create(Object.getPrototypeOf(this.mSprite)), this.mSprite);
            sprite.newID();
            sprite.pos = this.getPosition(display.x, display.y);
            sprite.bindID = this.mSprite.id;
            sprite.sn = this.mSprite.sn;
            // sprite.nodeType = this.mSprite.node
            result.push(sprite);
        }
        return result;
    };
    MouseFollow.prototype.getEaserPosition = function () {
        var result = [];
        if (!this.display) {
            return;
        }
        var pos = null;
        for (var i = 0; i < this.mSize; i++) {
            for (var j = 0; j < this.mSize; j++) {
                pos = this.display.transformTo90(i, j);
                result.push(this.getPosition(pos.x, pos.y));
                // result.push(this.mRoomService.transformTo45(new Pos(i, j)));
            }
        }
        // result.push(this.getPosition());
        return result;
    };
    MouseFollow.prototype.transitionGrid = function (x, y) {
        var source = new utils_pos["a" /* Pos */](x, y);
        var pos = this.mNodeType === protocols["op_def"].NodeType.TerrainNodeType
            ? this.mRoomService.transformTo45(source)
            : this.mRoomService.transformToMini45(source);
        if (this.mAlignGrid === false) {
            return this.checkBound(pos, source);
        }
        return this.checkBound(pos);
    };
    /**
     * 边界检查
     * @param pos 45度坐标，
     * @param source 没有超出边界并不贴边就返回原始坐标
     */
    MouseFollow.prototype.checkBound = function (pos, source) {
        var bound = new utils_pos["a" /* Pos */](pos.x, pos.y);
        var size = this.mNodeType === protocols["op_def"].NodeType.TerrainNodeType
            ? this.mRoomService.roomSize
            : this.mRoomService.miniSize;
        if (pos.x < 0) {
            bound.x = 0;
        }
        else if (pos.x > size.cols) {
            bound.x = size.cols;
        }
        if (pos.y < 0) {
            bound.y = 0;
        }
        else if (pos.y > size.rows) {
            bound.y = size.rows;
        }
        if (bound.equal(pos) && source) {
            return source;
        }
        if (this.mNodeType === protocols["op_def"].NodeType.TerrainNodeType) {
            return this.mRoomService.transformTo90(bound);
        }
        return this.mRoomService.transformToMini90(bound);
    };
    MouseFollow.prototype.destroy = function () {
        if (this.mScene) {
            this.mScene.input.off("pointermove", this.onPointerMoveHandler, this);
            this.mScene.input.off("wheel", this.onWheelHandler, this);
        }
        if (this.mDisplay) {
            this.mDisplay.destroy();
            this.mDisplay = null;
        }
        this.mNodeType = mouse_follow_NodeType.UnknownNodeType;
    };
    MouseFollow.prototype.onPointerMoveHandler = function (pointer) {
        this.updatePos(pointer.worldX / this.mScaleRatio, pointer.worldY / this.mScaleRatio);
    };
    MouseFollow.prototype.getPosition = function (rows, cols) {
        if (rows === void 0) { rows = 0; }
        if (cols === void 0) { cols = 0; }
        if (this.mNodeType === protocols["op_def"].NodeType.TerrainNodeType) {
            var pos45 = this.mRoomService.transformTo45(new utils_pos["a" /* Pos */](this.mDisplay.x / this.mScaleRatio + rows, this.mDisplay.y / this.mScaleRatio + cols));
            return pos45;
        }
        // TODO 多个物件仅支持地块
        var pos = new utils_pos["a" /* Pos */](this.mDisplay.x / this.mScaleRatio + rows, this.mDisplay.y / this.mScaleRatio + cols, this.mDisplay.z);
        return pos;
    };
    MouseFollow.prototype.onWheelHandler = function (pointer) {
        if (this.mNodeType !== mouse_follow_NodeType.TerrainNodeType) {
            return;
        }
        if (pointer.deltaY < 0) {
            this.size--;
        }
        else {
            this.size++;
        }
        this.updatePos(pointer.worldX / this.mScaleRatio, pointer.worldY / this.mScaleRatio);
    };
    MouseFollow.prototype.updatePos = function (worldX, worldY) {
        if (!this.mDisplay) {
            return;
        }
        var pos = this.transitionGrid(worldX, worldY);
        if (!pos) {
            return;
        }
        this.mDisplay.setLocation(pos.x * this.mScaleRatio, pos.y * this.mScaleRatio);
    };
    Object.defineProperty(MouseFollow.prototype, "alignGrid", {
        set: function (val) {
            this.mAlignGrid = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MouseFollow.prototype, "display", {
        get: function () {
            return this.mDisplay;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MouseFollow.prototype, "sprite", {
        get: function () {
            return this.mSprite;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MouseFollow.prototype, "nodeType", {
        get: function () {
            return this.mNodeType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MouseFollow.prototype, "elementManager", {
        get: function () {
            return this.mElementManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MouseFollow.prototype, "size", {
        get: function () {
            return this.mSize;
        },
        set: function (val) {
            if (val < 1) {
                val = 1;
            }
            if (val > 20) {
                val = 20;
            }
            this.mSize = val;
            this.mDisplay.setDisplay(this.mSprite, this.mSize);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MouseFollow.prototype, "isMoss", {
        get: function () {
            return this._isMoss;
        },
        set: function (val) {
            this._isMoss = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MouseFollow.prototype, "key", {
        get: function () {
            return this._key;
        },
        set: function (val) {
            this._key = val;
        },
        enumerable: false,
        configurable: true
    });
    return MouseFollow;
}());

var mouse_follow_MouseDisplayContainer = /** @class */ (function (_super) {
    mouse_follow_extends(MouseDisplayContainer, _super);
    function MouseDisplayContainer(scene, mRoomService) {
        var _this = _super.call(this, scene) || this;
        _this.mRoomService = mRoomService;
        _this.mScaleRatio = 1;
        _this.mScaleRatio = _this.mRoomService.world.scaleRatio;
        _this.mOffset = new Phaser.Geom.Point();
        return _this;
    }
    MouseDisplayContainer.prototype.setDisplay = function (sprite, size) {
        this.clear();
        this.mDisplay = [];
        if (!sprite) {
            return;
        }
        var frame = sprite.displayInfo;
        this.mNodeType = sprite.nodeType;
        var frameDisplay;
        var _a = this.mRoomService.roomSize, tileWidth = _a.tileWidth, tileHeight = _a.tileHeight;
        this.mTileSize = {
            tileWidth: tileWidth,
            tileHeight: tileHeight,
            rows: size,
            cols: size,
            sceneWidth: (size + size) * (tileWidth / 2),
            sceneHeight: (size + size) * (tileHeight / 2),
        };
        this.mOffset.x = -((this.mTileSize.sceneWidth / 2) * this.mScaleRatio);
        this.mOffset.y = -((this.mTileSize.sceneHeight / this.mScaleRatio - (size % 2 === 0 ? 0 : tileHeight)) / 2);
        for (var i = 0; i < size; i++) {
            for (var j = 0; j < size; j++) {
                frameDisplay = new frames_display["a" /* FramesDisplay */](this.scene, this.mRoomService);
                frameDisplay.setAlpha(0.8);
                frameDisplay.once("initialized", this.onInitializedHandler, this);
                frameDisplay.load(frame);
                var pos = position45["a" /* Position45 */].transformTo90(new utils_pos["a" /* Pos */](i, j), this.mTileSize);
                frameDisplay.x = pos.x;
                frameDisplay.y = pos.y;
                this.add(frameDisplay);
                this.mDisplay.push(frameDisplay);
            }
        }
    };
    MouseDisplayContainer.prototype.transformTo90 = function (row, col) {
        return position45["a" /* Position45 */].transformTo90(new utils_pos["a" /* Pos */](row, col), this.mTileSize);
    };
    MouseDisplayContainer.prototype.transformTo45 = function (x, y) {
        return position45["a" /* Position45 */].transformTo45(new utils_pos["a" /* Pos */](x, y), this.mTileSize);
    };
    MouseDisplayContainer.prototype.setLocation = function (x, y) {
        this.x = x + this.mOffset.x;
        this.y = y + this.mOffset.y;
        return this;
    };
    MouseDisplayContainer.prototype.clear = function () {
        this.removeAll(true);
        this.mDisplay = undefined;
    };
    MouseDisplayContainer.prototype.destroy = function (fromScene) {
        this.clear();
        _super.prototype.destroy.call(this, fromScene);
    };
    Object.defineProperty(MouseDisplayContainer.prototype, "displays", {
        get: function () {
            return this.mDisplay;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MouseDisplayContainer.prototype, "tileWidth", {
        get: function () {
            var tmp = this.mTileSize.tileHeight;
            if (this.mTileSize.rows % 2 === 0) {
                tmp = 0;
            }
            return this.mTileSize.sceneWidth - tmp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MouseDisplayContainer.prototype, "tileHeight", {
        get: function () {
            return this.mTileSize.sceneHeight;
        },
        enumerable: false,
        configurable: true
    });
    MouseDisplayContainer.prototype.onInitializedHandler = function (obj) {
        if (obj) {
            if (this.mNodeType !== protocols["op_def"].NodeType.TerrainNodeType) {
                obj.showRefernceArea();
            }
        }
    };
    return MouseDisplayContainer;
}(Phaser.GameObjects.Container));
var mouse_follow_EraserArea = /** @class */ (function (_super) {
    mouse_follow_extends(EraserArea, _super);
    function EraserArea(scene, roomService) {
        return _super.call(this, scene, roomService) || this;
    }
    EraserArea.prototype.setDisplay = function (frame, size) {
        if (this.area) {
            this.area.clear();
        }
        var _a = this.mRoomService.roomSize, tileWidth = _a.tileWidth, tileHeight = _a.tileHeight;
        this.mTileSize = {
            tileWidth: tileWidth,
            tileHeight: tileHeight,
            rows: size,
            cols: size,
            sceneWidth: (size + size) * (tileWidth / 2),
            sceneHeight: (size + size) * (tileHeight / 2),
        };
        this.mOffset.x = -(this.mTileSize.sceneWidth / 2);
        this.mOffset.y = -((this.mTileSize.sceneHeight - (size % 2 === 0 ? 0 : tileHeight)) / 2);
        var p1;
        var p2;
        var p3;
        var p4;
        this.area = this.scene.make.graphics(undefined, false);
        for (var y = 0; y < size; y++) {
            for (var x = 0; x < size; x++) {
                this.area.lineStyle(2, 0);
                p1 = position45["a" /* Position45 */].transformTo90(new utils_pos["a" /* Pos */](x, y), this.mTileSize);
                p2 = position45["a" /* Position45 */].transformTo90(new utils_pos["a" /* Pos */](x + 1, y), this.mTileSize);
                p3 = position45["a" /* Position45 */].transformTo90(new utils_pos["a" /* Pos */](x + 1, y + 1), this.mTileSize);
                p4 = position45["a" /* Position45 */].transformTo90(new utils_pos["a" /* Pos */](x, y + 1), this.mTileSize);
                this.area.beginPath();
                this.area.fillStyle(0, 0.5);
                this.area.strokePoints([p1.toPoint(), p2.toPoint(), p3.toPoint(), p4.toPoint()], true, true);
                this.area.fillPath();
            }
        }
        this.add(this.area);
    };
    return EraserArea;
}(mouse_follow_MouseDisplayContainer));

// EXTERNAL MODULE: ./src/rooms/display/terrain.display.ts
var terrain_display = __webpack_require__(208);

// CONCATENATED MODULE: ./src/rooms/editor/selected.element.ts


var selected_element_SelectedElement = /** @class */ (function () {
    function SelectedElement(mScene, mLayerManager) {
        this.mScene = mScene;
        this.mLayerManager = mLayerManager;
        this.mEffecte = new dynamic_image["DynamicImage"](this.mScene, 0, 0);
        this.mEffecte.load(resUtil["h" /* Url */].getRes("ui/editor/selectFlag.png"));
    }
    SelectedElement.prototype.setElement = function (display) {
        if (this.mDisplay) {
            this.mDisplay.hideRefernceArea();
            this.mDisplay.showNickname("");
            this.mSprite = undefined;
        }
        this.mDisplay = display;
        display.showRefernceArea();
        var ele = display.element;
        if (ele) {
            ele.showNickname();
            this.mSprite = ele.model;
        }
        this.mLayerManager.addToSceneToUI(this.mEffecte);
        this.mSelecting = true;
        this.update();
    };
    SelectedElement.prototype.remove = function () {
        this.mSelecting = false;
        if (!this.mEffecte) {
            return;
        }
        if (this.mEffecte.parentContainer) {
            this.mEffecte.parentContainer.remove(this.mEffecte);
        }
        if (!this.mDisplay) {
            return;
        }
        if (this.mDisplay.parentContainer) {
            this.mDisplay.hideRefernceArea();
            this.mDisplay.showNickname("");
        }
        this.mDisplay = null;
        this.mSprite = undefined;
    };
    SelectedElement.prototype.update = function () {
        if (!this.mDisplay) {
            return;
        }
        var baseLoc = this.mDisplay.baseLoc;
        this.mEffecte.x = this.mDisplay.x + baseLoc.x + (this.mDisplay.spriteWidth >> 1);
        this.mEffecte.y = this.mDisplay.y + baseLoc.y;
    };
    SelectedElement.prototype.setDisplayPos = function (x, y) {
        if (!this.mDisplay) {
            return;
        }
        this.mDisplay.x = x;
        this.mDisplay.y = y;
        if (this.mSprite) {
            var pos = this.mSprite.pos;
            if (pos) {
                pos.x = x;
                pos.y = y;
            }
        }
    };
    SelectedElement.prototype.destroy = function () {
        if (!this.mEffecte) {
            return;
        }
        this.remove();
        this.mEffecte.destroy();
        this.mEffecte = null;
    };
    Object.defineProperty(SelectedElement.prototype, "display", {
        get: function () {
            return this.mDisplay;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectedElement.prototype, "selecting", {
        /**
         * 鼠标按下选中物件, 松开取消选择
         */
        get: function () {
            return this.mSelecting;
        },
        set: function (val) {
            this.mSelecting = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectedElement.prototype, "sprite", {
        get: function () {
            return this.mSprite;
        },
        enumerable: false,
        configurable: true
    });
    return SelectedElement;
}());


// CONCATENATED MODULE: ./src/rooms/element/editor.element.manager.ts
var editor_element_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var editor_element_manager_NodeType = protocols["op_def"].NodeType;
var editor_element_manager_EditorElementManager = /** @class */ (function (_super) {
    editor_element_manager_extends(EditorElementManager, _super);
    function EditorElementManager(mRoom) {
        var _this = _super.call(this, mRoom) || this;
        _this.mRoom = mRoom;
        _this.taskQueue = new Map();
        if (_this.connection) {
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_CREATE_SPRITE, _this.handleCreateElements);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_DELETE_SPRITE, _this.handleDeleteElements);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_SYNC_SPRITE, _this.handleSyncElements);
        }
        return _this;
    }
    EditorElementManager.prototype.update = function () {
        this.batchActionSprites();
    };
    EditorElementManager.prototype.addElements = function (sprites) {
        for (var _i = 0, sprites_1 = sprites; _i < sprites_1.length; _i++) {
            var sprite = sprites_1[_i];
            this.taskQueue.set(sprite.id, {
                action: "ADD",
                sprite: sprite,
            });
        }
        this.callEditorCreateElementData(sprites);
    };
    EditorElementManager.prototype.callEditorCreateElementData = function (sprites) {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_CREATE_SPRITE);
        var content = pkt.content;
        content.nodeType = sprites[0].nodeType;
        content.sprites = sprites.map(function (sprite) { return sprite.toSprite(); });
        this.connection.send(pkt);
        log["a" /* Logger */].getInstance().log("add sprites: ", content);
    };
    EditorElementManager.prototype.updateElements = function (sprites) {
        this.callEditorUpdateElementData(sprites);
    };
    EditorElementManager.prototype.callEditorUpdateElementData = function (sprites) {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_SYNC_SPRITE);
        var content = pkt.content;
        content.sprites = sprites;
        this.connection.send(pkt);
    };
    // removeEditor(id: number) {
    //     const ele = this.tryRemove(id);
    //     if (ele) {
    //         const pkt = new PBpacket(op_editor.OPCODE._OP_CLIENT_REQ_EDITOR_DELETE_SPRITE);
    //         const content: op_editor.IOP_CLIENT_REQ_EDITOR_DELETE_SPRITE = pkt.content;
    //         content.ids = [id];
    //         this.connection.send(pkt);
    //     }
    //     return ele;
    // }
    EditorElementManager.prototype.deleteElements = function (ids) {
        for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
            var id = ids_1[_i];
            this.taskQueue.set(id, {
                action: "DELETE",
                sprite: { id: id },
            });
        }
        this.callEditorDeleteElementData(ids);
    };
    EditorElementManager.prototype.callEditorDeleteElementData = function (ids) {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_DELETE_SPRITE);
        var content = pkt.content;
        content.ids = ids;
        content.nodeType = protocols["op_def"].NodeType.ElementNodeType;
        this.connection.send(pkt);
    };
    EditorElementManager.prototype.handleCreateElements = function (packet) {
        if (!this.mRoom.layerManager) {
            log["a" /* Logger */].getInstance().error("layer manager does not exist");
            return;
        }
        var content = packet.content;
        var sprites = content.sprites, nodeType = content.nodeType;
        for (var _i = 0, sprites_2 = sprites; _i < sprites_2.length; _i++) {
            var sprite = sprites_2[_i];
            this.taskQueue.set(sprite.id, {
                action: "ADD",
                sprite: new element_sprite["a" /* Sprite */](sprite),
            });
        }
        // if (!sprites) return;
        // if (nodeType !== NodeType.ElementNodeType && nodeType !== NodeType.SpawnPointType) {
        //     return;
        // }
        // let point: op_def.IPBPoint3f;
        // const displays = [];
        // let ele: Element = null;
        // for (const sprite of sprites) {
        //     point = sprite.point3f;
        //     if (point) {
        //         ele = this._add(new Sprite(sprite, nodeType));
        //         if (ele.getDisplay()) displays.push(ele.getDisplay());
        //     }
        // }
        // this.mRoom.addToSurface(displays);
    };
    EditorElementManager.prototype.handleDeleteElements = function (packet) {
        var content = packet.content;
        var ids = content.ids, nodeType = content.nodeType;
        if (nodeType !== editor_element_manager_NodeType.ElementNodeType && nodeType !== editor_element_manager_NodeType.SpawnPointType) {
            return;
        }
        // for (const id of ids) {
        //     this.tryRemove(id);
        // }
        // this.roomService.removeSelected();
        for (var _i = 0, ids_2 = ids; _i < ids_2.length; _i++) {
            var id = ids_2[_i];
            this.taskQueue.set(id, {
                action: "DELETE",
                sprite: { id: id },
            });
        }
        this.roomService.removeSelected();
    };
    EditorElementManager.prototype.handleSyncElements = function (packet) {
        var content = packet.content;
        var sprites = content.sprites;
        if (content.nodeType !== protocols["op_def"].NodeType.ElementNodeType) {
            return;
        }
        for (var _i = 0, sprites_3 = sprites; _i < sprites_3.length; _i++) {
            var sprite = sprites_3[_i];
            // this.trySync(sprite);
            this.taskQueue.set(sprite.id, {
                action: "UPDATE",
                sprite: new element_sprite["a" /* Sprite */](sprite),
            });
        }
    };
    // protected _add(sprite: ISprite): Element {
    //     let ele = this.mElements.get(sprite.id);
    //     if (!ele) ele = new Element(sprite, this);
    //     ele.setBlockable(false);
    //     ele.setRenderable(true);
    //     ele.setInputEnable(InputEnable.Enable);
    //     this.mElements.set(ele.id, ele);
    //     return ele;
    // }
    // protected tryRemove(id) {
    //     const element = this.mElements.get(id);
    //     if (element) {
    //         this.mElements.delete(id);
    //         element.destroy();
    //         if (this.roomService) {
    //             this.roomService.blocks.remove(element);
    //         }
    //         return element;
    //     }
    // }
    // protected trySync(sprite: op_client.ISprite) {
    //     const element = this.mElements.get(sprite.id);
    //     if (!element) {
    //         Logger.getInstance().log("can't find element", sprite);
    //         return;
    //     }
    //     const point = sprite.point3f;
    //     if (point) {
    //         element.setPosition(new Pos(point.x, point.y, point.z));
    //     }
    //     if (sprite.direction) {
    //         element.setDirection(sprite.direction);
    //     }
    // }
    EditorElementManager.prototype.batchActionSprites = function () {
        if (!Array.from(this.taskQueue.keys()).length) {
            return;
        }
        var batchTasksKeys = Array.from(this.taskQueue.keys()).splice(0, 200);
        for (var _i = 0, batchTasksKeys_1 = batchTasksKeys; _i < batchTasksKeys_1.length; _i++) {
            var key = batchTasksKeys_1[_i];
            var _a = this.taskQueue.get(key), action = _a.action, sprite = _a.sprite;
            this.taskQueue.delete(key);
            if (action === "ADD") {
                this.mRoom.displayObjectPool.push("elements", sprite.id.toString(), sprite, this);
            }
            else if (action === "DELETE") {
                this.mRoom.displayObjectPool.remove("elements", sprite.id.toString());
            }
            else if (action === "UPDATE") {
                this.mRoom.displayObjectPool.update("elements", sprite.id.toString(), sprite);
            }
        }
    };
    Object.defineProperty(EditorElementManager.prototype, "roomService", {
        get: function () {
            return this.mRoom;
        },
        enumerable: false,
        configurable: true
    });
    return EditorElementManager;
}(element_manager["a" /* ElementManager */]));


// CONCATENATED MODULE: ./src/rooms/terrain/editor.terrain.manager.ts
var editor_terrain_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};




var editor_terrain_manager_EditorTerrainManager = /** @class */ (function (_super) {
    editor_terrain_manager_extends(EditorTerrainManager, _super);
    function EditorTerrainManager(mRoom, listener) {
        var _this = _super.call(this, mRoom, listener) || this;
        _this.mRoom = mRoom;
        _this.taskQueue = new Map();
        _this.mEditorTerrains = new Map();
        if (_this.connection) {
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_ADD_SPRITES_WITH_LOCS, _this.handleAddTerrains);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_DELETE_SPRITES_WITH_LOCS, _this.handleDeleteTerrains);
        }
        return _this;
    }
    EditorTerrainManager.prototype.addTerrains = function (terrainCoorData) {
        var _this = this;
        var locs = terrainCoorData.locs, key = terrainCoorData.key;
        var drawLocs = locs.filter(function (loc) { return _this.canPut(loc, key); });
        for (var _i = 0, drawLocs_1 = drawLocs; _i < drawLocs_1.length; _i++) {
            var loc = drawLocs_1[_i];
            var locId = this.genLocId(loc.x, loc.y);
            var oldKey = this.mEditorTerrains.get(locId);
            if (oldKey && oldKey !== key) {
                this.taskQueue.set(locId, {
                    action: "UPDATE",
                    loc: __assign(__assign({}, loc), { key: key }),
                });
            }
            else {
                this.taskQueue.set(locId, {
                    action: "ADD",
                    loc: __assign(__assign({}, loc), { key: key }),
                });
            }
        }
        this.reqEditorAddTerrainsData(drawLocs, key);
    };
    EditorTerrainManager.prototype.reqEditorAddTerrainsData = function (locs, key) {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_ADD_TERRAINS);
        var content = pkt.content;
        content.locs = locs;
        content.key = key;
        this.connection.send(pkt);
    };
    EditorTerrainManager.prototype.removeTerrains = function (locations) {
        for (var _i = 0, locations_1 = locations; _i < locations_1.length; _i++) {
            var pos = locations_1[_i];
            var locId = this.genLocId(pos.x, pos.y);
            this.taskQueue.set(locId, {
                action: "DELETE",
                loc: {
                    x: pos.x,
                    y: pos.y,
                },
            });
        }
        this.reqEditorDeleteTerrainsData(locations);
    };
    EditorTerrainManager.prototype.reqEditorDeleteTerrainsData = function (loc) {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_DELETE_TERRAINS);
        var content = pkt.content;
        content.locs = loc.map(function (item) { return ({ x: item.x, y: item.y, z: item.z }); });
        this.connection.send(pkt);
    };
    EditorTerrainManager.prototype.update = function () {
        this.batchActionSprites();
    };
    EditorTerrainManager.prototype.handleAddTerrains = function (packet) {
        if (!this.mRoom.layerManager) {
            log["a" /* Logger */].getInstance().error("layer manager does not exist");
            return;
        }
        var content = packet.content;
        var locs = content.locs;
        var nodeType = content.nodeType;
        if (nodeType !== protocols["op_def"].NodeType.TerrainNodeType) {
            return;
        }
        for (var _i = 0, locs_1 = locs; _i < locs_1.length; _i++) {
            var loc = locs_1[_i];
            var locId = this.genLocId(loc.x, loc.y);
            var oldKey = this.mEditorTerrains.get(locId);
            if (oldKey && oldKey === loc.key)
                continue;
            this.taskQueue.set(locId, {
                action: "ADD",
                loc: loc,
            });
        }
    };
    EditorTerrainManager.prototype.handleDeleteTerrains = function (packet) {
        if (!this.mRoom.layerManager) {
            log["a" /* Logger */].getInstance().error("layer manager does not exist");
            return;
        }
        var content = packet.content;
        var locs = content.locs;
        var nodeType = content.nodeType;
        if (nodeType !== protocols["op_def"].NodeType.TerrainNodeType) {
            return;
        }
        for (var _i = 0, locs_2 = locs; _i < locs_2.length; _i++) {
            var loc = locs_2[_i];
            var locId = this.genLocId(loc.x, loc.y);
            this.taskQueue.set(locId, {
                action: "DELETE",
                loc: loc,
            });
        }
    };
    EditorTerrainManager.prototype.canPut = function (pos, key) {
        var locId = this.genLocId(pos.x, pos.y);
        var roomSize = this.roomService.roomSize;
        if (!roomSize)
            return false;
        if (pos.x < 0 || pos.y < 0 || pos.x >= roomSize.cols || pos.y >= roomSize.rows) {
            return false;
        }
        if (this.mEditorTerrains.get(locId) === key) {
            return false;
        }
        return true;
    };
    EditorTerrainManager.prototype.batchActionSprites = function () {
        if (!Array.from(this.taskQueue.keys()).length) {
            return;
        }
        var batchTasksKeys = Array.from(this.taskQueue.keys()).splice(0, 200);
        for (var _i = 0, batchTasksKeys_1 = batchTasksKeys; _i < batchTasksKeys_1.length; _i++) {
            var key = batchTasksKeys_1[_i];
            var _a = this.taskQueue.get(key), action = _a.action, loc = _a.loc;
            var locId = this.genLocId(loc.x, loc.y);
            this.taskQueue.delete(key);
            if (action === "ADD") {
                var palette = this.mRoom.world.elementStorage.getTerrainPalette(loc.key);
                if (!palette)
                    continue;
                var sprite = palette.createSprite({
                    nodeType: protocols["op_def"].NodeType.TerrainNodeType,
                    x: loc.x,
                    y: loc.y,
                });
                this.mEditorTerrains.set(locId, loc.key);
                this.mRoom.displayObjectPool.push("terrains", locId, sprite, this);
            }
            else if (action === "DELETE") {
                this.mEditorTerrains.delete(locId);
                this.mRoom.displayObjectPool.remove("terrains", locId);
            }
            else if (action === "UPDATE") {
                var palette = this.mRoom.world.elementStorage.getTerrainPalette(loc.key);
                if (!palette)
                    continue;
                var sprite = palette.createSprite({
                    nodeType: protocols["op_def"].NodeType.TerrainNodeType,
                    x: loc.x,
                    y: loc.y,
                });
                this.mEditorTerrains.set(locId, loc.key);
                this.mRoom.displayObjectPool.update("terrains", locId, sprite);
            }
        }
    };
    EditorTerrainManager.prototype.genLocId = function (x, y) {
        return x + "_" + y;
    };
    return EditorTerrainManager;
}(terrain_manager["a" /* TerrainManager */]));


// CONCATENATED MODULE: ./src/rooms/cameras/editor.cameras.manager.ts
var editor_cameras_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var editor_cameras_manager_EditorCamerasManager = /** @class */ (function (_super) {
    editor_cameras_manager_extends(EditorCamerasManager, _super);
    function EditorCamerasManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EditorCamerasManager.prototype.centerCameas = function () {
        if (!this.mMain || !this.mRoomService) {
            return;
        }
        var roomSize = this.mRoomService.roomSize;
        this.mMain.setScroll((roomSize.sceneWidth - this.mMain.width) >> 1, (roomSize.sceneHeight - this.mMain.height) >> 1);
        var cameraView = this.mMain.worldView;
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_RESET_CAMERA);
        var content = pkt.content;
        content.x = this.mMain.scrollX;
        content.y = this.mMain.scrollY;
        content.width = this.mMain.width;
        content.height = this.mMain.height;
        this.connection.send(pkt);
    };
    EditorCamerasManager.prototype.offsetScroll = function (x, y) {
        if (!this.mMain) {
            return;
        }
        for (var _i = 0, _a = this.mCameras; _i < _a.length; _i++) {
            var camera = _a[_i];
            camera.scrollX += x / this.zoom;
            camera.scrollY += y / this.zoom;
        }
        // this.mMain.scrollX += x / this.zoom;
        // this.mMain.scrollY += y / this.zoom;
        // this.mCamera.setScroll(x, y);
        // const pkt = new PBpacket(op_editor.OPCODE._OP_CLIENT_REQ_EDITOR_RESET_CAMERA);
        // const content: op_editor.IOP_CLIENT_REQ_EDITOR_RESET_CAMERA = pkt.content;
        // content.x = this.mMain.scrollX / this.zoom;
        // content.y = this.mMain.scrollY / this.zoom;
        // content.width = 0;
        // content.height = 0;
        // this.connection.send(pkt);
    };
    EditorCamerasManager.prototype.syncCameraScroll = function () {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_RESET_CAMERA);
        var content = pkt.content;
        content.x = this.mMain.scrollX / this.zoom;
        content.y = this.mMain.scrollY / this.zoom;
        content.width = 0;
        content.height = 0;
        this.connection.send(pkt);
    };
    return EditorCamerasManager;
}(cameras_manager["a" /* CamerasManager */]));


// EXTERNAL MODULE: ./src/utils/helpers.ts
var helpers = __webpack_require__(203);

// CONCATENATED MODULE: ./src/rooms/element/editor.moss.manager.ts
var editor_moss_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var editor_moss_manager_assign = (undefined && undefined.__assign) || function () {
    editor_moss_manager_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return editor_moss_manager_assign.apply(this, arguments);
};




var editor_moss_manager_EditorMossManager = /** @class */ (function (_super) {
    editor_moss_manager_extends(EditorMossManager, _super);
    function EditorMossManager(mRoom) {
        var _this = _super.call(this, mRoom) || this;
        _this.mRoom = mRoom;
        _this.taskQueue = new Map();
        _this.editorMosses = new Map();
        if (_this.connection) {
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_ADD_MOSSES, _this.handleAddMosses);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_DELETE_MOSSES, _this.handleDeleteMosses);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_SYNC_MOSSES, _this.handleUpdateMosses);
        }
        return _this;
    }
    EditorMossManager.prototype.update = function () {
        this.batchActionSprites();
    };
    EditorMossManager.prototype.addMosses = function (coorData) {
        var placeLocs = [];
        var locs = coorData.locs, key = coorData.key;
        for (var _i = 0, locs_1 = locs; _i < locs_1.length; _i++) {
            var loc = locs_1[_i];
            var id = helpers["a" /* default */].genId();
            var placeLoc = {
                x: loc.x,
                y: loc.y,
                z: loc.z,
                key: key,
                id: id,
            };
            this.taskQueue.set(id, {
                action: "ADD",
                loc: placeLoc,
            });
            placeLocs.push(placeLoc);
        }
        this.reqEditorCreateMossData(placeLocs);
    };
    EditorMossManager.prototype.reqEditorCreateMossData = function (locs) {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_CREATE_MOSSES);
        var content = pkt.content;
        content.locs = locs;
        this.connection.send(pkt);
    };
    EditorMossManager.prototype.updateMosses = function (elements) {
        var updateLocs = [];
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var element = elements_1[_i];
            var sprite = element.display.element.model.toSprite();
            var originLoc = this.editorMosses.get(sprite.id);
            var loc = {
                x: sprite.point3f.x,
                y: sprite.point3f.y,
                z: sprite.point3f.z,
                id: sprite.id,
                dir: sprite.direction,
                key: originLoc.key,
            };
            this.taskQueue.set(sprite.id, {
                action: "UPDATE",
                loc: loc,
            });
            updateLocs.push(loc);
        }
        this.reqEditorUpdateMossData(updateLocs);
    };
    EditorMossManager.prototype.reqEditorUpdateMossData = function (locs) {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_SYNC_MOSSES);
        var content = pkt.content;
        content.locs = locs;
        this.connection.send(pkt);
    };
    EditorMossManager.prototype.deleteMosses = function (ids) {
        var deleteLocs = [];
        for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
            var id = ids_1[_i];
            var loc = this.editorMosses.get(id);
            deleteLocs.push(loc);
            this.taskQueue.set(id, {
                action: "DELETE",
                loc: loc,
            });
        }
        this.reqEditorDeleteMossData(deleteLocs);
    };
    EditorMossManager.prototype.reqEditorDeleteMossData = function (locs) {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_DELETE_MOSSES);
        var content = pkt.content;
        content.locs = locs;
        this.connection.send(pkt);
    };
    EditorMossManager.prototype.handleAddMosses = function (packet) {
        var content = packet.content;
        var locs = content.locs;
        for (var _i = 0, locs_2 = locs; _i < locs_2.length; _i++) {
            var loc = locs_2[_i];
            this.taskQueue.set(loc.id, {
                action: "ADD",
                loc: loc,
            });
        }
    };
    EditorMossManager.prototype.handleDeleteMosses = function (packet) {
        var content = packet.content;
        var ids = content.ids;
        for (var _i = 0, ids_2 = ids; _i < ids_2.length; _i++) {
            var id = ids_2[_i];
            this.taskQueue.set(id, {
                action: "DELETE",
                loc: this.editorMosses.get(id),
            });
        }
        this.roomService.removeSelected();
    };
    EditorMossManager.prototype.handleUpdateMosses = function (packet) {
        var content = packet.content;
        var locs = content.locs;
        for (var _i = 0, locs_3 = locs; _i < locs_3.length; _i++) {
            var loc = locs_3[_i];
            this.taskQueue.set(loc.id, {
                action: "UPDATE",
                loc: loc,
            });
        }
    };
    EditorMossManager.prototype.batchActionSprites = function () {
        if (!Array.from(this.taskQueue.keys()).length) {
            return;
        }
        var batchTasksKeys = Array.from(this.taskQueue.keys()).splice(0, 200);
        for (var _i = 0, batchTasksKeys_1 = batchTasksKeys; _i < batchTasksKeys_1.length; _i++) {
            var key = batchTasksKeys_1[_i];
            var _a = this.taskQueue.get(key), action = _a.action, loc = _a.loc;
            this.taskQueue.delete(key);
            if (action === "ADD") {
                var moss = this.mRoom.world.elementStorage.getMossPalette(loc.key);
                if (!moss)
                    continue;
                var sprite = moss.createSprite(editor_moss_manager_assign(editor_moss_manager_assign({}, loc), { nodeType: protocols["op_def"].NodeType.ElementNodeType, isMoss: true }));
                this.editorMosses.set(loc.id, loc);
                this.mRoom.displayObjectPool.push("mosses", loc.id.toString(), sprite, this);
            }
            else if (action === "DELETE") {
                if (loc) {
                    this.editorMosses.delete(loc.id);
                    this.mRoom.displayObjectPool.remove("mosses", loc.id.toString());
                }
            }
            else if (action === "UPDATE") {
                var moss = this.mRoom.world.elementStorage.getMossPalette(loc.key);
                if (!moss)
                    continue;
                var sprite = moss.createSprite(editor_moss_manager_assign(editor_moss_manager_assign({}, loc), { nodeType: protocols["op_def"].NodeType.ElementNodeType, isMoss: true }));
                this.editorMosses.set(loc.id, loc);
                this.mRoom.displayObjectPool.update("mosses", loc.id.toString(), sprite);
            }
        }
    };
    Object.defineProperty(EditorMossManager.prototype, "roomService", {
        get: function () {
            return this.mRoom;
        },
        enumerable: false,
        configurable: true
    });
    return EditorMossManager;
}(element_manager["a" /* ElementManager */]));


// EXTERNAL MODULE: ./src/rooms/terrain/terrain.ts
var terrain_terrain = __webpack_require__(340);

// CONCATENATED MODULE: ./src/rooms/display-object.pool.ts


var display_object_pool_DisplayObjectPool = /** @class */ (function () {
    function DisplayObjectPool() {
        this.terrains = new Map();
        this.mosses = new Map();
        this.elements = new Map();
        this.POOLOBJECTCONFIG = {
            terrains: terrain_terrain["a" /* Terrain */],
            mosses: element_element["b" /* Element */],
            elements: element_element["b" /* Element */],
        };
    }
    DisplayObjectPool.prototype.getPool = function (poolName) {
        return this[poolName];
    };
    DisplayObjectPool.prototype.push = function (poolName, id, sprite, manager) {
        var pool = this[poolName];
        var obj = new this.POOLOBJECTCONFIG[poolName](sprite, manager);
        obj.setBlockable(false);
        obj.setRenderable(true);
        if (obj instanceof element_element["b" /* Element */]) {
            obj.setInputEnable(element_element["c" /* InputEnable */].Enable);
        }
        pool.set(id, obj);
    };
    DisplayObjectPool.prototype.remove = function (poolName, id) {
        var obj = this[poolName].get(id);
        if (obj) {
            obj.isUsed = false;
            obj.destroy();
        }
        this[poolName].delete(id);
    };
    DisplayObjectPool.prototype.update = function (poolName, id, newSprite) {
        var pool = this[poolName];
        var obj = pool.get(id);
        if (obj) {
            obj.isUsed = true;
            obj.setModel(newSprite);
        }
    };
    DisplayObjectPool.prototype.destroy = function () {
        for (var _i = 0, _a = Object.keys(this.POOLOBJECTCONFIG); _i < _a.length; _i++) {
            var key = _a[_i];
            this[key].clear();
        }
    };
    return DisplayObjectPool;
}());


// CONCATENATED MODULE: ./src/rooms/sky.box/scenery.ts

var scenery_Scenery = /** @class */ (function () {
    function Scenery(scenery) {
        this.mID = scenery.id;
        this.mDepth = scenery.depth;
        this.mUris = [];
        var uris = null;
        if (Array.isArray(scenery.uris)) {
            uris = scenery.uris;
        }
        else {
            uris = scenery.uris.value;
        }
        if (uris.length < 1) {
            log["a" /* Logger */].getInstance().error(Scenery.name + ": scenery uris is empty");
        }
        for (var i = 0; i < uris.length; i++) {
            var val = uris[i].value || uris;
            this.mUris[i] = new Array(val.length);
            for (var j = 0; j < val.length; j++) {
                this.mUris[i][j] = val[j];
            }
        }
        this.mSpeed = scenery.speed || 1;
        if (!scenery.width) {
            log["a" /* Logger */].getInstance().error(Scenery.name + ": scenery width is " + scenery.width);
        }
        if (!scenery.height) {
            log["a" /* Logger */].getInstance().error(Scenery.name + ": scenery height is " + scenery.height);
        }
        this.mWidth = scenery.width;
        this.mHeight = scenery.height;
        this.mFit = scenery.fit;
        this.mOffset = scenery.offset || { x: 0, y: 0 };
    }
    Object.defineProperty(Scenery.prototype, "width", {
        get: function () {
            return this.mWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Scenery.prototype, "height", {
        get: function () {
            return this.mHeight;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Scenery.prototype, "id", {
        get: function () {
            return this.mID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Scenery.prototype, "depth", {
        get: function () {
            return this.mDepth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Scenery.prototype, "offset", {
        get: function () {
            return this.mOffset;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Scenery.prototype, "speed", {
        get: function () {
            return this.mSpeed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Scenery.prototype, "uris", {
        get: function () {
            return this.mUris;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Scenery.prototype, "fit", {
        get: function () {
            return this.mFit;
        },
        enumerable: false,
        configurable: true
    });
    return Scenery;
}());

var Fit;
(function (Fit) {
    Fit[Fit["Center"] = 1] = "Center";
    Fit[Fit["Fill"] = 2] = "Fill";
})(Fit || (Fit = {}));

// CONCATENATED MODULE: ./src/rooms/sky.box/editor.sky.box.manager.ts
var editor_sky_box_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var editor_sky_box_manager_EditorSkyBoxManager = /** @class */ (function (_super) {
    editor_sky_box_manager_extends(EditorSkyBoxManager, _super);
    function EditorSkyBoxManager(room) {
        var _this = _super.call(this, room) || this;
        var connection = room.connection;
        if (connection) {
            connection.addPacketListener(_this);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_ADD_SCENERY, _this.onAddSceneryHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_UPDATE_SCENERY, _this.onUpdateSceneryHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_DELETE_SCENERY, _this.onDeleteSceneryHandler);
        }
        return _this;
    }
    EditorSkyBoxManager.prototype.fetch = function (id) {
        if (!this.mScenetys) {
            return;
        }
        this.mSelected = this.mScenetys.get(id);
    };
    EditorSkyBoxManager.prototype.move = function (pointer) {
        if (!this.selected) {
            return;
        }
        var scenery = this.mSelected.scenery;
        if (!scenery) {
            return;
        }
        var offset = scenery.offset;
        offset.x += (pointer.x - pointer.prevPosition.x) / this.mRoom.world.scaleRatio;
        offset.y += (pointer.y - pointer.prevPosition.y) / this.mRoom.world.scaleRatio;
        this.mSelected.updatePosition();
        this.onSyncSceneryOffset();
    };
    EditorSkyBoxManager.prototype.keyboardMove = function (keyCode) {
        if (!this.mSelected) {
            return;
        }
        var scenery = this.mSelected.scenery;
        if (!scenery) {
            return;
        }
        var offset = scenery.offset;
        switch (keyCode) {
            case 37:
            case 65:
                offset.x--;
                break;
            case 38:
            case 87:
                offset.y--;
                break;
            case 39:
            case 68:
                offset.x++;
                break;
            case 40:
            case 83:
                offset.y++;
                break;
        }
        this.mSelected.updatePosition();
        this.onSyncSceneryOffset();
    };
    EditorSkyBoxManager.prototype.removeSelect = function () {
        if (this.mSelected) {
            this.mSelected = undefined;
        }
    };
    EditorSkyBoxManager.prototype.onAddSceneryHandler = function (packet) {
        var content = packet.content;
        this.add(new scenery_Scenery(content));
    };
    EditorSkyBoxManager.prototype.onUpdateSceneryHandler = function (packet) {
        var content = packet.content;
        this.update(new scenery_Scenery(content));
    };
    EditorSkyBoxManager.prototype.onDeleteSceneryHandler = function (packet) {
        var content = packet.content;
        var ids = content.ids;
        for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
            var id = ids_1[_i];
            this.remove(id);
        }
    };
    EditorSkyBoxManager.prototype.onSyncSceneryOffset = function () {
        var scenery = this.mSelected.scenery;
        var packet = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_UPDATE_SCENERY);
        var content = packet.content;
        content.id = scenery.id;
        var offset = protocols["op_def"].PBPoint2f.create();
        Object.assign(offset, scenery.offset);
        content.offset = offset;
        this.mRoom.connection.send(packet);
    };
    Object.defineProperty(EditorSkyBoxManager.prototype, "selected", {
        get: function () {
            return this.mSelected;
        },
        enumerable: false,
        configurable: true
    });
    return EditorSkyBoxManager;
}(sky_box_manager_SkyBoxManager));


// CONCATENATED MODULE: ./src/rooms/editor.room.ts
var editor_room_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



















var editor_room_EditorRoom = /** @class */ (function (_super) {
    editor_room_extends(EditorRoom, _super);
    function EditorRoom(manager) {
        var _this = _super.call(this, manager) || this;
        _this.mBrush = new Brush(_this);
        if (_this.connection) {
            _this.connection.addPacketListener(_this);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_SET_EDITOR_MODE, _this.onSetEditorModeHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_ALIGN_GRID, _this.onAlignGridHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_VISIBLE_GRID, _this.onVisibleGridHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_MOUSE_FOLLOW, _this.onMouseFollowHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_MOUSE_SELECTED_SPRITE, _this.onMouseFollowHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_FETCH_SPRITE, _this.onFetchSpriteHandler);
            _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_FETCH_SCENERY, _this.onFetchSceneryHandler);
        }
        return _this;
    }
    EditorRoom.prototype.enter = function (data) {
        if (!data) {
            log["a" /* Logger */].getInstance().error("wrong room");
            return;
        }
        this.mID = data.id;
        var rows = data.rows, cols = data.cols, tileWidth = data.tileWidth, tileHeight = data.tileHeight;
        this.mSize = {
            cols: cols,
            rows: rows,
            tileHeight: tileHeight,
            tileWidth: tileWidth,
            sceneWidth: (rows + cols) * (tileWidth / 2),
            sceneHeight: (rows + cols) * (tileHeight / 2),
        };
        rows *= 2;
        cols *= 2;
        tileWidth /= 2;
        tileHeight /= 2;
        this.mNimiSize = {
            cols: cols,
            rows: rows,
            tileHeight: tileHeight,
            tileWidth: tileWidth,
            sceneWidth: (rows + cols) * (tileWidth / 2),
            sceneHeight: (rows + cols) * (tileHeight / 2),
        };
        this.editorTerrainManager = new editor_terrain_manager_EditorTerrainManager(this);
        this.editorElementManager = new editor_element_manager_EditorElementManager(this);
        this.editorMossManager = new editor_moss_manager_EditorMossManager(this);
        this.editorSkyboxManager = new editor_sky_box_manager_EditorSkyBoxManager(this);
        this.mCameraService = new editor_cameras_manager_EditorCamerasManager(this);
        this.displayObjectPool = new display_object_pool_DisplayObjectPool();
        this.mWorld.game.scene.start(edit["a" /* EditScene */].name, { room: this });
    };
    EditorRoom.prototype.startPlay = function () {
        this.mScene = this.mWorld.game.scene.getScene(edit["a" /* EditScene */].name);
        this.mLayManager = new layer_manager["a" /* LayerManager */](this);
        this.mLayManager.drawGrid(this);
        var camera = this.scene.cameras.main;
        this.mCameraService.camera = camera;
        var zoom = this.world.scaleRatio;
        // mainCameras.setBounds(-200, -200, this.mSize.sceneWidth + 400, this.mSize.sceneHeight + 400);
        this.mCameraService.setBounds(-camera.width >> 1, -camera.height >> 1, this.mSize.sceneWidth * zoom + camera.width, this.mSize.sceneHeight * zoom + camera.height);
        this.connection.send(new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_SCENE_CREATED));
        this.mCameraService.centerCameas();
        this.mScene.input.on("pointerdown", this.onPointerDownHandler, this);
        this.mScene.input.on("pointerup", this.onPointerUpHandler, this);
        this.mScene.input.on("gameobjectdown", this.onGameobjectDownHandler, this);
        this.mScene.input.on("gameout", this.onGameOutHandler, this);
        this.mScene.input.keyboard.on("keydown", this.onKeyDownHandler, this);
        // this.addSkyBox();
    };
    EditorRoom.prototype.destroy = function () {
        if (this.mWorld && this.mWorld.connection) {
            this.mWorld.connection.removePacketListener(this);
        }
        if (this.editorTerrainManager) {
            this.editorTerrainManager.destroy();
        }
        if (this.editorMossManager) {
            this.editorMossManager.destroy();
        }
        if (this.editorElementManager) {
            this.editorElementManager.destroy();
        }
        if (this.displayObjectPool) {
            this.displayObjectPool.destroy();
        }
        if (this.editorSkyboxManager) {
            this.editorSkyboxManager.destroy();
        }
        _super.prototype.destroy.call(this);
    };
    EditorRoom.prototype.update = function (time, delta) {
        if (this.layerManager)
            this.layerManager.update(time, delta);
        if (this.mSelectedElementEffect) {
            this.mSelectedElementEffect.update();
        }
        if (this.editorTerrainManager) {
            this.editorTerrainManager.update();
        }
        if (this.editorMossManager) {
            this.editorMossManager.update();
        }
        if (this.editorElementManager) {
            this.editorElementManager.update();
        }
    };
    EditorRoom.prototype.transformToMini90 = function (p) {
        if (!this.mNimiSize) {
            log["a" /* Logger */].getInstance().error("position object is undefined");
            return;
        }
        return position45["a" /* Position45 */].transformTo90(p, this.mNimiSize);
    };
    EditorRoom.prototype.transformToMini45 = function (p) {
        if (!this.mNimiSize) {
            log["a" /* Logger */].getInstance().error("position object is undefined");
            return;
        }
        return position45["a" /* Position45 */].transformTo45(p, this.mNimiSize);
    };
    EditorRoom.prototype.removeSelected = function () {
        if (this.mSelectedElementEffect) {
            this.mSelectedElementEffect.remove();
        }
    };
    EditorRoom.prototype.addPointerMoveHandler = function () {
        this.mScene.input.on("pointermove", this.onPointerMoveHandler, this);
    };
    EditorRoom.prototype.removePointerMoveHandler = function () {
        this.mScene.input.off("pointermove", this.onPointerMoveHandler, this);
    };
    EditorRoom.prototype.addPointerDownHandler = function () {
        this.mScene.input.on("pointerdown", this.onPointerDownHandler, this);
    };
    EditorRoom.prototype.removePointerDownHandler = function () {
        this.mScene.input.off("pointerdown", this.onPointerDownHandler, this);
    };
    EditorRoom.prototype.addPointerUpHandler = function () {
        this.mScene.input.on("pointerup", this.onPointerUpHandler, this);
    };
    EditorRoom.prototype.removePointerUpHandler = function () {
        this.mScene.input.off("pointerup", this.onPointerUpHandler, this);
    };
    EditorRoom.prototype.addGameObjectDownHandler = function () {
        this.mScene.input.on("gameobjectdown", this.onGameobjectDownHandler, this);
    };
    EditorRoom.prototype.removeGameObjectDownHandler = function () {
        this.mScene.input.off("gameobjectdown", this.onGameobjectDownHandler, this);
    };
    EditorRoom.prototype.addKeydownHandler = function () {
        this.mScene.input.keyboard.on("keydown", this.onKeyDownHandler, this);
    };
    EditorRoom.prototype.removeKeydownHandler = function () {
        this.mScene.input.keyboard.off("keydown", this.onKeyDownHandler, this);
    };
    EditorRoom.prototype.onPointerDownHandler = function () {
        var nodeType = this.mouseFollow.nodeType;
        if (this.mouseFollow.key) {
            if (nodeType === protocols["op_def"].NodeType.TerrainNodeType) {
                if (!this.world.elementStorage.getTerrainPalette(this.mouseFollow.key)) {
                    this.reqEditorSyncPaletteOrMoss(this.mouseFollow.key, this.mouseFollow.nodeType);
                }
            }
            else if (nodeType === protocols["op_def"].NodeType.ElementNodeType) {
                if (!this.world.elementStorage.getMossPalette(this.mouseFollow.key)) {
                    this.reqEditorSyncPaletteOrMoss(this.mouseFollow.key, this.mouseFollow.nodeType);
                }
            }
        }
        this.addPointerMoveHandler();
    };
    EditorRoom.prototype.onPointerUpHandler = function (pointer) {
        this.removePointerMoveHandler();
        switch (this.brush.mode) {
            case BrushEnum.BRUSH:
                this.createElements();
                break;
            case BrushEnum.SELECT:
                if (this.mSelectedElementEffect && this.mSelectedElementEffect.selecting) {
                    if (pointer.downX !== pointer.upX && pointer.downY !== pointer.upY) {
                        if (this.mSelectedElementEffect.sprite.isMoss) {
                            this.editorMossManager.updateMosses([this.mSelectedElementEffect]);
                        }
                        else {
                            var sprite = this.mSelectedElementEffect
                                .display.element.model.toSprite();
                            this.editorElementManager.updateElements([sprite]);
                        }
                    }
                    this.mSelectedElementEffect.selecting = false;
                }
                break;
            case BrushEnum.ERASER:
                this.eraserTerrains();
                break;
            case BrushEnum.MOVE:
                this.mCameraService.syncCameraScroll();
                break;
        }
    };
    EditorRoom.prototype.onPointerMoveHandler = function (pointer) {
        if (!this.mScene.cameras) {
            return;
        }
        switch (this.mBrush.mode) {
            case BrushEnum.BRUSH:
                if (this.mMouseFollow.nodeType === protocols["op_def"].NodeType.TerrainNodeType) {
                    this.createElements();
                }
                break;
            case BrushEnum.MOVE:
                this.moveCameras(pointer);
                break;
            case BrushEnum.SELECT:
                if (this.editorSkyboxManager) {
                    this.editorSkyboxManager.move(pointer);
                }
                this.moveElement(pointer);
                break;
            case BrushEnum.ERASER:
                this.eraserTerrains();
                break;
        }
    };
    EditorRoom.prototype.moveCameras = function (pointer) {
        this.cameraService.offsetScroll(pointer.prevPosition.x - pointer.position.x, pointer.prevPosition.y - pointer.position.y);
    };
    EditorRoom.prototype.reqEditorSyncPaletteOrMoss = function (key, nodeType) {
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_SYNC_PALETTE_MOSS);
        var content = pkt.content;
        content.key = key;
        content.type = nodeType;
        this.connection.send(pkt);
    };
    EditorRoom.prototype.createElements = function () {
        if (!this.mMouseFollow.sprite) {
            return;
        }
        if (this.mMouseFollow.nodeType === protocols["op_def"].NodeType.TerrainNodeType) {
            var terrainCoorData = this.mMouseFollow.createTerrainsOrMossesData();
            if (this.editorTerrainManager) {
                this.editorTerrainManager.addTerrains(terrainCoorData);
            }
        }
        else if (this.mMouseFollow.nodeType === protocols["op_def"].NodeType.ElementNodeType) {
            var sprites = this.mMouseFollow.createSprites();
            if (!sprites) {
                return;
            }
            if (!this.editorElementManager) {
                return;
            }
            if (this.mMouseFollow.isMoss) {
                var mossesCoorData = this.mMouseFollow.createTerrainsOrMossesData();
                this.editorMossManager.addMosses(mossesCoorData);
            }
            else {
                this.editorElementManager.addElements(sprites);
            }
        }
        else if (this.mMouseFollow.nodeType === protocols["op_def"].NodeType.SpawnPointType) {
            var sprites = this.mMouseFollow.createSprites();
            this.editorElementManager.addElements(sprites);
        }
    };
    EditorRoom.prototype.eraserTerrains = function () {
        var positions = this.mMouseFollow.getEaserPosition();
        this.editorTerrainManager.removeTerrains(positions);
    };
    EditorRoom.prototype.onSetEditorModeHandler = function (packet) {
        var mode = packet.content;
        this.mBrush.mode = mode.mode;
        if (this.mMouseFollow)
            this.mMouseFollow.destroy();
        if (this.mBrush.mode !== BrushEnum.SELECT) {
            if (this.mSelectedElementEffect) {
                this.mSelectedElementEffect.destroy();
                this.mSelectedElementEffect = null;
            }
        }
        if (this.mBrush.mode === BrushEnum.SELECT) {
            this.removeGameObjectDownHandler();
            this.addGameObjectDownHandler();
        }
        else {
            this.removeGameObjectDownHandler();
        }
        if (this.mBrush.mode === BrushEnum.ERASER) {
            if (!this.mMouseFollow) {
                this.mMouseFollow = new mouse_follow_MouseFollow(this.mScene, this);
            }
            this.mMouseFollow.showEraserArea();
        }
        if (this.editorSkyboxManager) {
            this.editorSkyboxManager.removeSelect();
        }
        this.layerManager.setSurfaceInteractive(this.mBrush.mode !== BrushEnum.ERASER);
    };
    EditorRoom.prototype.onAlignGridHandler = function (packet) {
        var content = packet.content;
        this.mouseFollow.alignGrid = content.align;
    };
    EditorRoom.prototype.onVisibleGridHandler = function (packet) {
        var content = packet.content;
        this.layerManager.setGridVisible(content.visible);
    };
    EditorRoom.prototype.onMouseFollowHandler = function (packet) {
        var content = packet.content;
        if (this.mScene) {
            this.mouseFollow.setDisplay(content);
        }
    };
    EditorRoom.prototype.onFetchSpriteHandler = function (packet) {
        var _a;
        var content = packet.content;
        var ids = content.ids, nodeType = content.nodeType;
        var map = (_a = {},
            _a[protocols["op_def"].NodeType.SpawnPointType] = "elements",
            _a[protocols["op_def"].NodeType.ElementNodeType] = "elements",
            _a[protocols["op_def"].NodeType.MossCollectionType] = "mosses",
            _a);
        for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
            var id = ids_1[_i];
            var poolName = map[nodeType];
            var pool = this.displayObjectPool.getPool(poolName);
            var displayObj = pool.get(id.toString());
            if (displayObj) {
                this.selectedElement(displayObj.getDisplay());
            }
        }
    };
    EditorRoom.prototype.sendFetch = function (ids, nodetype, isMoss) {
        if (!this.mSelectedElementEffect || !this.mSelectedElementEffect.display) {
            return;
        }
        var pkt = new dist["PBpacket"](protocols["op_editor"].OPCODE._OP_CLIENT_REQ_EDITOR_FETCH_SPRITE);
        var content = pkt.content;
        content.ids = ids;
        content.isMoss = isMoss;
        content.nodeType = nodetype;
        this.connection.send(pkt);
        log["a" /* Logger */].getInstance().log("fetch sprite", content);
    };
    EditorRoom.prototype.onFetchSceneryHandler = function (packet) {
        if (this.mSelectedElementEffect) {
            this.mSelectedElementEffect.destroy();
            this.mSelectedElementEffect = null;
        }
        if (!this.editorSkyboxManager) {
            return;
        }
        var content = packet.content;
        this.editorSkyboxManager.fetch(content.id);
    };
    EditorRoom.prototype.onGameobjectDownHandler = function (pointer, gameobject) {
        var com = gameobject.parentContainer;
        if (!com) {
            return;
        }
        var selected = this.selectedElement(com);
        if (selected) {
            this.sendFetch([selected.element.id], protocols["op_def"].NodeType.ElementNodeType, selected.element.model.isMoss);
        }
    };
    EditorRoom.prototype.selectedElement = function (com) {
        if (!(com instanceof display_object["a" /* DisplayObject */])) {
            return;
        }
        if (com instanceof terrain_display["a" /* TerrainDisplay */]) {
            return;
        }
        if (!this.mSelectedElementEffect) {
            this.mSelectedElementEffect = new selected_element_SelectedElement(this.mScene, this.layerManager);
        }
        this.mSelectedElementEffect.setElement(com);
        if (this.editorSkyboxManager) {
            this.editorSkyboxManager.removeSelect();
        }
        return com;
    };
    EditorRoom.prototype.onKeyDownHandler = function (event) {
        if (this.editorSkyboxManager) {
            this.editorSkyboxManager.keyboardMove(event.keyCode);
        }
        if (!this.mSelectedElementEffect) {
            return;
        }
        switch (event.keyCode) {
            case 37:
            case 38:
            case 39:
            case 40:
            case 65:
            case 87:
            case 83:
            case 68:
                this.keyboardMoveElement(event.keyCode);
                break;
            // case 8:
            // case 46:
            //     this.removeDisplay(this.mSelectedElementEffect);
            //     break;
        }
    };
    EditorRoom.prototype.keyboardMoveElement = function (keyCode) {
        var display = this.mSelectedElementEffect.display;
        if (!display) {
            return;
        }
        var pos = new utils_pos["a" /* Pos */](display.x, display.y, display.z);
        switch (keyCode) {
            case 37:
                pos.x--;
                break;
            case 38:
                pos.y--;
                break;
            case 39:
                pos.x++;
                break;
            case 40:
                pos.y++;
                break;
        }
        display.setPosition(pos.x, pos.y, pos.z);
        // TOOD 通过统一接口设置depth
        this.layerManager.depthSurfaceDirty = true;
    };
    EditorRoom.prototype.moveElement = function (pointer) {
        if (!this.mSelectedElementEffect) {
            return;
        }
        if (!this.mSelectedElementEffect.selecting) {
            return;
        }
        if (!this.mouseFollow) {
            return;
        }
        var pos = this.mMouseFollow.transitionGrid(pointer.worldX / this.mScaleRatio, pointer.worldY / this.mScaleRatio);
        if (pos) {
            this.mSelectedElementEffect.setDisplayPos(pos.x, pos.y);
            this.mLayManager.depthSurfaceDirty = true;
        }
    };
    Object.defineProperty(EditorRoom.prototype, "brush", {
        get: function () {
            return this.mBrush;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorRoom.prototype, "miniSize", {
        get: function () {
            return this.mNimiSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorRoom.prototype, "mouseFollow", {
        get: function () {
            if (!this.mMouseFollow) {
                this.mMouseFollow = new mouse_follow_MouseFollow(this.mScene, this);
            }
            return this.mMouseFollow;
        },
        enumerable: false,
        configurable: true
    });
    EditorRoom.prototype.removeDisplay = function (element) {
        if (element.sprite.isMoss) {
            this.editorMossManager.deleteMosses([element.sprite.id]);
        }
        else {
            this.editorElementManager.deleteElements([element.sprite.id]);
        }
        this.removeSelected();
    };
    return EditorRoom;
}(room_Room));


// EXTERNAL MODULE: ./src/rooms/decorate.room.ts + 4 modules
var decorate_room = __webpack_require__(388);

// CONCATENATED MODULE: ./src/rooms/room.manager.ts
var room_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var room_manager_RoomManager = /** @class */ (function (_super) {
    room_manager_extends(RoomManager, _super);
    function RoomManager(world) {
        var _this = _super.call(this) || this;
        _this.mRooms = [];
        _this.mWorld = world;
        _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_ENTER_SCENE, _this.onEnterSceneHandler);
        _this.addHandlerFun(protocols["op_client"].OPCODE._OP_EDITOR_REQ_CLIENT_CHANGE_TO_EDITOR_MODE, _this.onEnterEditor);
        return _this;
        // this.addHandlerFun(op_client.OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_EDIT_MODE_READY, this.onEnterDecorate);
    }
    RoomManager.prototype.addPackListener = function () {
        if (this.connection) {
            this.connection.addPacketListener(this);
        }
    };
    RoomManager.prototype.removePackListener = function () {
        if (this.connection) {
            this.connection.removePacketListener(this);
        }
    };
    RoomManager.prototype.getRoom = function (id) {
        // const idx = this.mRooms.findIndex((room: Room, index: number) => id === room.id);
        // if (idx >= 0) {
        //     return this.mRooms[idx];
        // }
        return this.mRooms.find(function (room) {
            return room.id === id;
        });
    };
    RoomManager.prototype.onFocus = function () {
        this.mRooms.forEach(function (room) {
            if (room && room.scene)
                room.resume(room.scene.scene.key);
        });
    };
    RoomManager.prototype.onBlur = function () {
        this.mRooms.forEach(function (room) {
            if (room && room.scene)
                room.pause();
        });
    };
    RoomManager.prototype.pasuseRoom = function (id) {
        var idx = this.mRooms.findIndex(function (room, index) { return id === room.id; });
        if (idx >= 0) {
            var room = this.mRooms[idx];
            room.pause();
        }
    };
    RoomManager.prototype.resumeRoom = function (id) {
        var idx = this.mRooms.findIndex(function (room, index) { return id === room.id; });
        if (idx >= 0) {
            var room = this.mRooms[idx];
            if (room && room.scene)
                room.resume(room.scene.scene.key);
        }
    };
    RoomManager.prototype.stop = function () {
        this.mRooms.forEach(function (room) {
            if (room && room.scene)
                room.destroy();
        });
    };
    RoomManager.prototype.resize = function (width, height) {
        this.mRooms.forEach(function (room) {
            if (room)
                room.resize(width, height);
        });
    };
    RoomManager.prototype.destroy = function () {
        this.removePackListener();
        for (var _i = 0, _a = this.mRooms; _i < _a.length; _i++) {
            var room = _a[_i];
            room.destroy();
            room = null;
        }
        this.mRooms.length = 0;
    };
    RoomManager.prototype.hasRoom = function (id) {
        var idx = this.mRooms.findIndex(function (room, index) { return id === room.id; });
        return idx >= 0;
    };
    RoomManager.prototype.onEnterScene = function (scene) {
        var _this = this;
        // this.destroy();
        var vw = scene;
        var room;
        if (this.hasRoom(vw.scene.id)) {
            room = this.getRoom(vw.scene.id);
            room.addActor(vw.actor);
            room.enter(vw.scene);
            this.mCurRoom = room;
        }
        else {
            if (this.mCurRoom) {
                this.leaveScene(this.mCurRoom);
            }
            // load this scene config in gameConfig
            this.world.loadSceneConfig(vw.scene.id.toString()).then(function (config) {
                _this.world.elementStorage.setSceneConfig(config);
                room = new room_Room(_this);
                _this.mRooms.push(room);
                room.addActor(vw.actor);
                room.enter(vw.scene);
                _this.mCurRoom = room;
            });
        }
    };
    RoomManager.prototype.onEnterDecorate = function (scene) {
        if (this.mCurRoom) {
            this.leaveScene(this.mCurRoom);
        }
        var room = new decorate_room["a" /* DecorateRoom */](this);
        room.enter(scene.scene);
        var actor = scene.actor;
        if (actor)
            room.setEnterPos(actor.x, actor.y);
        this.mRooms.push(room);
        this.mCurRoom = room;
    };
    RoomManager.prototype.onEditRoom = function (packet) {
        var content = packet.content;
        log["a" /* Logger */].getInstance().log("edit: ", content);
    };
    RoomManager.prototype.onEnterEditor = function (packet) {
        var content = packet.content;
        var room = new editor_room_EditorRoom(this);
        room.enter(content.scene);
        this.mCurRoom = room;
        this.mRooms.push(room);
    };
    RoomManager.prototype.leaveScene = function (room) {
        if (!room)
            return;
        this.mRooms = this.mRooms.filter(function (r) { return r.id !== room.id; });
        room.destroy();
    };
    RoomManager.prototype.onEnterSceneHandler = function (packet) {
        var content = packet.content;
        var scene = content.scene;
        switch (scene.sceneType) {
            case protocols["op_def"].SceneTypeEnum.NORMAL_SCENE_TYPE:
                this.onEnterScene(content);
                break;
            case protocols["op_def"].SceneTypeEnum.EDIT_SCENE_TYPE:
                this.onEnterDecorate(content);
                break;
        }
    };
    Object.defineProperty(RoomManager.prototype, "world", {
        get: function () {
            return this.mWorld;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RoomManager.prototype, "currentRoom", {
        get: function () {
            return this.mCurRoom;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RoomManager.prototype, "connection", {
        get: function () {
            if (this.mWorld) {
                return this.mWorld.connection;
            }
            log["a" /* Logger */].getInstance().error("world manager is undefined");
        },
        enumerable: false,
        configurable: true
    });
    return RoomManager;
}(dist["PacketHandler"]));



/***/ }),
/* 437 */,
/* 438 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ role_manager_RoleManager; });

// EXTERNAL MODULE: ./node_modules/net-socket-packet/dist/index.js
var dist = __webpack_require__(103);

// EXTERNAL MODULE: ./src/scenes/loading.ts
var loading = __webpack_require__(147);

// EXTERNAL MODULE: ./src/scenes/basic.scene.ts
var basic_scene = __webpack_require__(128);

// CONCATENATED MODULE: ./src/scenes/create.character.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var create_character_CreateRoleScene = /** @class */ (function (_super) {
    __extends(CreateRoleScene, _super);
    function CreateRoleScene() {
        return _super.call(this, { key: CreateRoleScene.name }) || this;
    }
    CreateRoleScene.prototype.init = function (data) {
        if (data.role) {
            this.role = data.role;
        }
    };
    CreateRoleScene.prototype.create = function () {
        if (this.role) {
            this.game.scene.stop(loading["a" /* LoadingScene */].name);
            this.role.start(this);
        }
    };
    return CreateRoleScene;
}(basic_scene["a" /* BasicScene */]));


// EXTERNAL MODULE: ./src/ui/components/BasePanel.ts + 2 modules
var BasePanel = __webpack_require__(105);

// EXTERNAL MODULE: ./src/ui/components/ninepatch.button.ts
var ninepatch_button = __webpack_require__(114);

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/inputtext/InputText.js + 1 modules
var InputText = __webpack_require__(118);

// EXTERNAL MODULE: ./src/ui/components/nine.patch.ts
var nine_patch = __webpack_require__(110);

// EXTERNAL MODULE: ./src/rooms/display/dragonbones.display.ts + 1 modules
var dragonbones_display = __webpack_require__(192);

// EXTERNAL MODULE: ./src/rooms/display/dragonbones.model.ts
var dragonbones_model = __webpack_require__(161);

// EXTERNAL MODULE: ./src/utils/font.ts
var font = __webpack_require__(107);

// CONCATENATED MODULE: ./src/role/create.role.panel.ts
var create_role_panel_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







// import InputText from "../../../../lib/rexui/plugins/gameobjects/inputtext/InputText";
var create_role_panel_CreateRolePanel = /** @class */ (function (_super) {
    create_role_panel_extends(CreateRolePanel, _super);
    function CreateRolePanel(scene, world) {
        var _this = _super.call(this, scene, world) || this;
        _this.key = "createCharacter";
        _this.mCurPageNum = 0;
        _this.setTween(false);
        var container = _this.scene.add.container(0, 0);
        container.add(_this);
        scene.scale.on("resize", _this.onResize, _this);
        return _this;
        // container.scale = 1 / this.mWorld.uiScale;
    }
    CreateRolePanel.prototype.show = function (param) {
        if (param) {
            this.avatars = param.avatars;
        }
        _super.prototype.show.call(this, param);
    };
    CreateRolePanel.prototype.preload = function () {
        // this.scene.load.atlas(
        //   this.key,
        //   Url.getRes("ui/create_role/create_role.png"),
        //   Url.getRes("ui/create_role/create_role.json")
        // );
        this.addAtlas(this.key, "create_role/create_role.png", "create_role/create_role.json");
        _super.prototype.preload.call(this);
    };
    CreateRolePanel.prototype.resize = function (wid, hei) {
        var size = this.mWorld.getSize();
        this.setSize(size.width, size.height);
        if (!this.mBackground) {
            return;
        }
        // this.scale = 1 / this.mWorld.uiScale;
        // this.mBackground.x = this.width >> 1;
        // this.mBackground.y = 60 + (this.mBackground.height >> 1);
        // const scale = this.scene.cameras.main.height / 1920;
        var scale = this.scale;
        var width = this.scene.cameras.main.width / scale;
        var height = this.scene.cameras.main.height / scale;
        var centerX = this.scene.cameras.main.centerX / scale;
        // this.setScale(scale);
        // this.mBackground.setScale(scale);
        this.mBackground.x = centerX;
        // this.mBackground.y = 700;
        this.mFoot.x = centerX;
        this.mFoot.y = height - (this.mFoot.height >> 1);
        this.mBackgroundColor.clear();
        this.mBackgroundColor.fillGradientStyle(0x6f75ff, 0x6f75ff, 0x04cbff, 0x04cbff);
        this.mBackgroundColor.fillRect(0, 0, width, height);
        this.mSubmit.x = centerX;
        this.inputText.x = centerX;
        this.mInputTextBg.x = centerX;
        this.dragonbones.x = centerX;
        this.mNextPageBtn.x = width - 150;
        this.mRandomBtn.x = this.mInputTextBg.x + this.mInputTextBg.width / 2 - 26 * this.dpr;
    };
    CreateRolePanel.prototype.init = function () {
        var size = this.mWorld.getSize();
        this.mBackground = this.scene.make.image({
            key: this.key,
            frame: "bg.png",
            x: size.width >> 1,
        });
        this.mBackground.y = this.mBackground.height / 2 + 92 * this.dpr;
        this.add(this.mBackground);
        this.mFoot = this.scene.make.image({
            key: this.key,
            frame: "bg_foot.png"
        }, false);
        this.add(this.mFoot);
        this.mBackgroundColor = this.scene.make.graphics(undefined, false);
        this.mBackgroundColor.fillGradientStyle(0x6f75ff, 0x6f75ff, 0x04cbff, 0x04cbff);
        this.mBackgroundColor.fillRect(0, 0, size.width, size.height);
        this.addAt(this.mBackgroundColor, 0);
        this.mInputTextBg = new nine_patch["NinePatch"](this.scene, size.width >> 1, 350 * this.dpr, 255 * this.dpr, 50 * this.dpr, this.key, "input_bg.png", {
            left: 27 * this.dpr,
            top: 24 * this.dpr,
            right: 28 * this.dpr,
            bottom: 24 * this.dpr
        });
        this.add(this.mInputTextBg);
        this.inputText = new InputText["a" /* default */](this.scene, size.width >> 1, 350 * this.dpr, 160 * this.dpr, 80, {
            type: "input",
            fontSize: 18 * this.dpr + "px",
            color: "#717171",
            align: "center",
            placeholder: "请输入昵称"
        }).setOrigin(0.5);
        this.add(this.inputText);
        var text = "提 交";
        if (this.mShowData && this.mShowData.button) {
            text = this.mShowData.button.text;
        }
        var frame = this.scene.textures.getFrame(this.key, "submit_button_normal");
        var w = 42;
        var h = 43;
        if (frame) {
            w = frame.width;
            h = frame.height;
        }
        this.mSubmit = new ninepatch_button["NinePatchButton"](this.scene, size.width >> 1, 445 * this.dpr, 202 * this.dpr, 55 * this.dpr, this.key, "submit_button", text, {
            left: 19 * this.dpr,
            top: 20 * this.dpr,
            right: w - 2 - 19 * this.dpr,
            bottom: h - 2 - 20 * this.dpr
        });
        this.mSubmit.setTextStyle({
            color: "#976400",
            fontSize: 18 * this.dpr,
            fontFamily: font["a" /* Font */].DEFULT_FONT,
        });
        this.mSubmit.setFontStyle("bold");
        this.mSubmit.on("pointerup", this.onSubmitHandler, this);
        this.add(this.mSubmit);
        this.mPrePageBtn = this.scene.make.image({
            x: 60 * this.dpr,
            y: 216 * this.dpr,
            key: this.key,
            frame: "arrow_left.png"
        }).setInteractive();
        this.mPrePageBtn.on("pointerup", this.onPrePageHandler, this);
        this.mNextPageBtn = this.scene.make.image({
            x: size.width - 60 * this.dpr,
            y: this.mPrePageBtn.y,
            key: this.key,
            frame: "arrow.png"
        }).setFlipX(true).setInteractive();
        this.mNextPageBtn.on("pointerup", this.onNextPageHandler, this);
        this.mRandomBtn = this.scene.make.image({
            x: this.mInputTextBg.x,
            y: this.mInputTextBg.y,
            key: this.key,
            frame: "random.png"
        }).setInteractive();
        this.add([this.mPrePageBtn, this.mNextPageBtn, this.mRandomBtn]);
        this.mRandomBtn.on("pointerup", this.onRandomNameHandler, this);
        // const role = this.scene.make.image({
        //   x: size.width >> 1,
        //   y: 560,
        //   key: "role",
        // }, false);
        // this.add(role);
        this.mErrorBg = this.scene.make.image({
            key: this.key,
            frame: "tips_bg.png",
            x: 220 * this.dpr,
            y: 57 * this.dpr
        }).setVisible(false);
        this.mError = this.scene.make.text({
            x: 127 * this.dpr,
            y: 30 * this.dpr,
            style: {
                color: "#26265d",
                font: "bold 34px YaHei",
                wordWrap: {
                    width: 420,
                    useAdvancedWrap: true
                },
            },
        }, false).setVisible(false);
        this.add([this.mErrorBg, this.mError]);
        this.dragonbones = new dragonbones_display["a" /* DragonbonesDisplay */](this.scene, undefined, undefined, true);
        this.dragonbones.scale = this.dpr * 3;
        this.dragonbones.x = size.width >> 1;
        this.dragonbones.y = this.mNextPageBtn.y + 70 * this.dpr;
        // this.dragonbones.y = 286 * this.dpr;
        // this.dragonbones.play("idle");
        this.dragonbones.on("initialized", this.loadDragonbonesComplete, this);
        this.add(this.dragonbones);
        this.setPageNum(0);
        _super.prototype.init.call(this);
        this.resize(0, 0);
    };
    CreateRolePanel.prototype.setAvatars = function (avatars) {
        this.avatars = avatars;
        // this.dragonbones.load(new DragonbonesModel({
        //   id: 0,
        //   avatar: avatars[0]
        // }));
    };
    CreateRolePanel.prototype.showError = function (msg) {
        if (this.mError) {
            this.mError.text = msg;
            this.mError.setVisible(true);
            this.mErrorBg.setVisible(true);
        }
    };
    CreateRolePanel.prototype.setNickName = function (val) {
        if (this.inputText) {
            this.inputText.text = val;
        }
    };
    CreateRolePanel.prototype.destroy = function () {
        if (this.scene)
            this.scene.scale.off("resize", this.onResize, this);
        if (this.dragonbones) {
            this.dragonbones.off("initialized", this.loadDragonbonesComplete, this);
        }
        _super.prototype.destroy.call(this);
    };
    CreateRolePanel.prototype.onRandomNameHandler = function () {
        this.emit("randomName");
        this.inputText.setBlur();
    };
    CreateRolePanel.prototype.onSubmitHandler = function () {
        this.emit("submit", this.inputText.text, this.avatars[this.mCurPageNum]);
        this.inputText.setBlur();
        if (this.mError) {
            this.mError.setVisible(false);
            this.mErrorBg.setVisible(false);
        }
    };
    CreateRolePanel.prototype.onPrePageHandler = function () {
        this.setPageNum(this.mCurPageNum - 1);
        this.inputText.setBlur();
    };
    CreateRolePanel.prototype.onNextPageHandler = function () {
        this.setPageNum(this.mCurPageNum + 1);
        this.inputText.setBlur();
    };
    CreateRolePanel.prototype.setPageNum = function (val) {
        this.mCurPageNum = val;
        if (this.mCurPageNum < 0) {
            this.mCurPageNum = this.avatars.length - 1;
        }
        else if (this.mCurPageNum >= this.avatars.length) {
            this.mCurPageNum = 0;
        }
        this.dragonbones.load(new dragonbones_model["a" /* DragonbonesModel */]({
            id: 0,
            avatar: this.avatars[this.mCurPageNum]
        }));
    };
    CreateRolePanel.prototype.onResize = function (gameSize) {
        this.resize(gameSize.width, gameSize.height);
    };
    CreateRolePanel.prototype.loadDragonbonesComplete = function () {
        this.dragonbones.play({ animationName: "idle", flip: false });
    };
    return CreateRolePanel;
}(BasePanel["BasePanel"]));


// EXTERNAL MODULE: ./node_modules/pixelpai_proto/protocols.js
var protocols = __webpack_require__(2);

// CONCATENATED MODULE: ./src/role/create.role.ts
var create_role_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var create_role_CreateRole = /** @class */ (function (_super) {
    create_role_extends(CreateRole, _super);
    function CreateRole($roleManager) {
        var _this = _super.call(this) || this;
        _this.roleManager = $roleManager;
        _this.world = _this.roleManager.world;
        return _this;
    }
    CreateRole.prototype.enter = function (content) {
        this.mAvatars = content.avatars;
        this.mParam = content;
        if (!this.world.game.scene.getScene(create_character_CreateRoleScene.name))
            this.world.game.scene.add(create_character_CreateRoleScene.name, create_character_CreateRoleScene);
        this.world.game.scene.start(create_character_CreateRoleScene.name, {
            world: this.world,
            role: this
        });
    };
    CreateRole.prototype.start = function (scene) {
        this.createPanel = new create_role_panel_CreateRolePanel(scene, this.world);
        this.createPanel.show(this.mParam);
        this.createPanel.on("randomName", this.onRandomNameHandler, this);
        this.createPanel.on("submit", this.onSubmitHandler, this);
        if (this.world.connection) {
            this.world.connection.addPacketListener(this);
            this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_CREATE_ROLE_ERROR_MESSAGE, this.onCreateErrorHandler);
            this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_CREATE_ROLE_GENERATE_NEW_NAME, this.onGenerateNameHandler);
        }
    };
    CreateRole.prototype.destroy = function () {
        if (this.world.connection) {
            this.world.connection.removePacketListener(this);
        }
        this.world.game.scene.remove(create_character_CreateRoleScene.name);
        // if (this.createPanel) this.createPanel.destroy();
    };
    CreateRole.prototype.onRandomNameHandler = function () {
        var connection = this.world.connection;
        var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_CREATE_ROLE_GENERATE_NEW_NAME);
        connection.send(packet);
    };
    CreateRole.prototype.onSubmitHandler = function (name, avatar) {
        var connection = this.world.connection;
        var packet = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_CREATE_ROLE);
        var content = packet.content;
        content.name = name;
        content.avatar = avatar;
        connection.send(packet);
    };
    CreateRole.prototype.onCreateErrorHandler = function (packet) {
        if (!this.createPanel) {
            return;
        }
        var content = packet.content;
        this.createPanel.showError(content.errorMsg);
    };
    CreateRole.prototype.onGenerateNameHandler = function (packet) {
        if (!this.createPanel) {
            return;
        }
        var content = packet.content;
        this.createPanel.setNickName(content.name);
    };
    return CreateRole;
}(dist["PacketHandler"]));


// CONCATENATED MODULE: ./src/role/role.manager.ts
var role_manager_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * 角色创建，选择管理
 */
var role_manager_RoleManager = /** @class */ (function (_super) {
    role_manager_extends(RoleManager, _super);
    function RoleManager($world) {
        var _this = _super.call(this) || this;
        _this.world = $world;
        return _this;
    }
    RoleManager.prototype.register = function () {
        if (this.world) {
            var connection = this.world.connection;
            if (connection) {
                connection.addPacketListener(this);
                this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_SHOW_CREATE_ROLE_UI, this.onOpenCreateCharacter);
                this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_CLOSE_CREATE_ROLE_UI, this.onCloseCreateCharacterHandler);
            }
        }
    };
    RoleManager.prototype.unregister = function () {
        if (this.world) {
            var connection = this.world.connection;
            if (connection) {
                connection.removePacketListener(this);
            }
        }
    };
    RoleManager.prototype.onOpenCreateCharacter = function (packet) {
        this.mCreateCharacter = new create_role_CreateRole(this);
        this.mCreateCharacter.enter(packet.content);
    };
    RoleManager.prototype.onCloseCreateCharacterHandler = function () {
        if (this.mCreateCharacter) {
            this.mCreateCharacter.destroy();
            this.mCreateCharacter = undefined;
        }
    };
    return RoleManager;
}(dist["PacketHandler"]));



/***/ }),
/* 439 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/NinePatch.js + 8 modules
var NinePatch = __webpack_require__(136);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/Factory.js


/* harmony default export */ var Factory = (function (x, y, width, height, key, baseFrame, columns, rows, config) {
    var gameObject = new NinePatch["a" /* default */](this.scene, x, y, width, height, key, baseFrame, columns, rows, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/ninepatch/Creator.js


const BuildGameObject = Phaser.GameObjects.BuildGameObject;

/* harmony default export */ var Creator = (function (config, addToScene) {
    if (addToScene !== undefined) {
        config.add = addToScene;
    }
    var gameObject = new NinePatch["a" /* default */](this.scene, config);
    BuildGameObject(this.scene, gameObject, config);
    return gameObject;
});;
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/SetValue.js
var SetValue = __webpack_require__(108);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/ninepatch-plugin.js





class ninepatch_plugin_NinePatchPlugin extends Phaser.Plugins.BasePlugin {

    constructor(pluginManager) {
        super(pluginManager);

        //  Register our new Game Object type
        pluginManager.registerGameObject('rexNinePatch', Factory, Creator);
    }

    start() {
        var eventEmitter = this.game.events;
        eventEmitter.on('destroy', this.destroy, this);
    }
}

Object(SetValue["a" /* default */])(window, 'RexPlugins.GameObjects.NinePatch', NinePatch["a" /* default */]);

/* harmony default export */ var ninepatch_plugin = __webpack_exports__["a"] = (ninepatch_plugin_NinePatchPlugin);

/***/ }),
/* 440 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/inputtext/InputText.js + 1 modules
var InputText = __webpack_require__(118);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/inputtext/Factory.js


/* harmony default export */ var Factory = (function (x, y, width, height, config) {
    var gameObject = new InputText["a" /* default */](this.scene, x, y, width, height, config);
    this.scene.add.existing(gameObject);
    return gameObject;
});;
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/gameobjects/inputtext/Creator.js


const GetAdvancedValue = Phaser.Utils.Objects.GetAdvancedValue;
const BuildGameObject = Phaser.GameObjects.BuildGameObject;

/* harmony default export */ var Creator = (function (config, addToScene) {
    var width = GetAdvancedValue(config, 'width', undefined);
    var height = GetAdvancedValue(config, 'height', undefined);
    if (addToScene !== undefined) {
        config.add = addToScene;
    }
    var gameObject = new InputText["a" /* default */](this.scene, 0, 0, width, height, config);
    BuildGameObject(this.scene, gameObject, config);
    return gameObject;
});;
// EXTERNAL MODULE: ./lib/rexui/lib/plugins/utils/object/SetValue.js
var SetValue = __webpack_require__(108);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/inputtext-plugin.js





class inputtext_plugin_InputTextPlugin extends Phaser.Plugins.BasePlugin {

    constructor(pluginManager) {
        super(pluginManager);

        //  Register our new Game Object type
        pluginManager.registerGameObject('rexInputText', Factory, Creator);
    }

    start() {
        var eventEmitter = this.game.events;
        eventEmitter.on('destroy', this.destroy, this);
    }
}

Object(SetValue["a" /* default */])(window, 'RexPlugins.GameObjects.InputText', InputText["a" /* default */]);

/* harmony default export */ var inputtext_plugin = __webpack_exports__["a"] = (inputtext_plugin_InputTextPlugin);

/***/ }),
/* 441 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/input/button/Button.js
var Button = __webpack_require__(255);

// CONCATENATED MODULE: ./lib/rexui/lib/plugins/button.js

/* harmony default export */ var plugins_button = (Button["a" /* default */]);
// CONCATENATED MODULE: ./lib/rexui/lib/plugins/button-plugin.js


class button_plugin_ButtonPlugin extends Phaser.Plugins.BasePlugin {

    constructor(pluginManager) {
        super(pluginManager);
    }

    start() {
        var eventEmitter = this.game.events;
        eventEmitter.on('destroy', this.destroy, this);
    }

    add(gameObject, config) {
        return new plugins_button(gameObject, config);
    }

}

/* harmony default export */ var button_plugin = __webpack_exports__["a"] = (button_plugin_ButtonPlugin);

/***/ }),
/* 442 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ login_LoginScene; });

// EXTERNAL MODULE: ./lib/rexui/lib/plugins/gameobjects/inputtext/InputText.js + 1 modules
var InputText = __webpack_require__(118);

// EXTERNAL MODULE: ./src/ui/alert/PopUpTextUI.ts
var PopUpTextUI = __webpack_require__(313);

// EXTERNAL MODULE: ./src/utils/log.ts
var log = __webpack_require__(0);

// EXTERNAL MODULE: ./src/utils/size.ts
var utils_size = __webpack_require__(198);

// EXTERNAL MODULE: ./src/scenes/basic.scene.ts
var basic_scene = __webpack_require__(128);

// EXTERNAL MODULE: ./lib/rexui/lib/ui/baseUI/BaseUI.ts
var BaseUI = __webpack_require__(125);

// CONCATENATED MODULE: ./lib/rexui/lib/ui/combobox/Combobox.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var SelectCallItem = /** @class */ (function (_super) {
    __extends(SelectCallItem, _super);
    function SelectCallItem(scene, selectCallUI, wid, hei, music) {
        var _this = _super.call(this, scene) || this;
        _this.mSelect = false;
        _this.mSelectCallUI = selectCallUI;
        _this.soundGroup = music;
        _this.mText = _this.scene.make.text({
            x: -wid >> 1, y: -hei >> 1,
            style: { fill: "#F7EDED", fontSize: 18 }
        }, false);
        var COLOR = 0xffcc00;
        _this.mSelectBG = scene.make.graphics(undefined, false);
        _this.mSelectBG.fillStyle(COLOR, .8);
        _this.mSelectBG.fillRect(-wid >> 1, -hei >> 1, wid, hei);
        _this.mSelectBG.visible = false;
        _this.add([_this.mSelectBG, _this.mText]);
        _this.width = wid;
        _this.height = hei;
        _this.setSize(wid, hei);
        _this.setInteractive();
        return _this;
    }
    SelectCallItem.prototype.setInteractive = function () {
        _super.prototype.setInteractive.call(this, new Phaser.Geom.Rectangle(0, 0, this.width, this.height), Phaser.Geom.Rectangle.Contains);
        return this;
    };
    SelectCallItem.prototype.addListen = function () {
        this.on("pointerover", this.overHandler, this);
        this.on("pointerout", this.outHandler, this);
        this.on("pointerdown", this.selectHandler, this);
    };
    SelectCallItem.prototype.removeListen = function () {
        this.off("pointerover", this.overHandler, this);
        this.off("pointerout", this.outHandler, this);
        this.off("pointerdown", this.selectHandler, this);
    };
    Object.defineProperty(SelectCallItem.prototype, "itemData", {
        get: function () {
            return this.mItemData;
        },
        set: function (val) {
            this.mItemData = val;
            this.mText.text = this.mItemData.text;
            this.mText.x = -this.width / 2 + (this.width - this.mText.width >> 1);
            this.mText.y = -this.height / 2 + (this.height - this.mText.height >> 1);
        },
        enumerable: false,
        configurable: true
    });
    SelectCallItem.prototype.destroy = function () {
        if (!this.mInitialized)
            return;
        this.mText.destroy(true);
        this.mSelectBG.destroy(true);
        this.mItemData = null;
        this.mText = null;
        this.mSelectBG = null;
        this.mSelectCallUI = null;
        _super.prototype.destroy.call(this);
    };
    Object.defineProperty(SelectCallItem.prototype, "selected", {
        get: function () {
            return this.mSelect;
        },
        set: function (val) {
            this.mSelectBG.visible = val;
            this.mSelect = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectCallItem.prototype, "interactive", {
        get: function () {
            return this.interactiveBoo;
        },
        enumerable: false,
        configurable: true
    });
    SelectCallItem.prototype.overHandler = function () {
        if (!this.interactiveBoo)
            return;
        this.mSelectBG.visible = true;
    };
    SelectCallItem.prototype.selectHandler = function () {
        if (!this.interactiveBoo) {
            if (this.soundGroup && this.soundGroup.disabled)
                this.mSelectCallUI.playSound(this.soundGroup.disabled);
            return;
        }
        if (this.soundGroup && this.soundGroup.down)
            this.mSelectCallUI.playSound(this.soundGroup.down);
        this.overHandler();
        this.mSelectCallUI.selectCall(this.mItemData);
    };
    SelectCallItem.prototype.outHandler = function () {
        if (!this.interactiveBoo)
            return;
        this.mSelectBG.visible = false;
    };
    return SelectCallItem;
}(BaseUI["a" /* BaseUI */]));

var ComboBox = /** @class */ (function (_super) {
    __extends(ComboBox, _super);
    function ComboBox(scene, config) {
        var _this = _super.call(this, scene) || this;
        _this.mIsopen = false;
        _this.mInitialize = false;
        _this.mConfig = config;
        _this.soundGroup = config.boxMusic;
        _this.init();
        return _this;
    }
    ComboBox.prototype.selectCall = function (itemData) {
        this.mtxt.text = itemData.text;
        this.mtxt.x = this.mConfig.wid - this.mtxt.width >> 1;
        this.mtxt.y = this.mConfig.hei - this.mtxt.height >> 1;
        this.showTween(false);
        if (this.mConfig.clickCallBack) {
            this.mConfig.clickCallBack.call(this, itemData);
        }
    };
    ComboBox.prototype.addListen = function () {
        _super.prototype.addListen.call(this);
        this.on("uiClick", this.openHandler, this);
    };
    ComboBox.prototype.removeListen = function () {
        _super.prototype.removeListen.call(this);
        this.off("uiClick", this.openHandler, this);
    };
    Object.defineProperty(ComboBox.prototype, "text", {
        set: function (value) {
            if (!this.mInitialize) {
                this.mSelectData = this.itemList[0].itemData;
                return;
            }
            if (this.itemList) {
                var itemLen = this.itemList.length;
                for (var i = 0; i < itemLen; i++) {
                    var item = this.itemList[i];
                    if (!item)
                        continue;
                    item.destroy();
                    item = null;
                }
                this.itemList.length = 0;
            }
            this.itemList = [];
            var len = value.length;
            for (var i = 0; i < len; i++) {
                var item = new SelectCallItem(this.scene, this, this.mConfig.wid, this.mConfig.hei, this.mConfig.itemMusic);
                var str = value[i];
                item.itemData = {
                    index: i,
                    text: str,
                    data: {},
                    selected: false,
                    enabled: true,
                };
                this.itemList.push(item);
            }
            // 默認顯示第0個
            this.selectCall(this.itemList[0].itemData);
        },
        enumerable: false,
        configurable: true
    });
    ComboBox.prototype.destroy = function () {
        if (this.itemList) {
            var len = this.itemList.length;
            for (var i = 0; i < len; i++) {
                var item = this.itemList[i];
                if (!item)
                    continue;
                item.destroy();
            }
            this.itemList.length = 0;
            this.itemList = null;
        }
        _super.prototype.destroy.call(this);
    };
    ComboBox.prototype.init = function () {
        var resKey = this.mConfig.resKey;
        var resPng = this.mConfig.resPng;
        var resJson = this.mConfig.resJson;
        this.mInitialize = false;
        if (!this.scene.textures.exists(resKey)) {
            this.scene.load.atlas(resKey, resPng, resJson);
            this.scene.load.once(Phaser.Loader.Events.COMPLETE, this.onLoadCompleteHandler, this);
            this.scene.load.start();
        }
        else {
            this.onLoadCompleteHandler();
        }
    };
    ComboBox.prototype.onLoadCompleteHandler = function () {
        var resKey = this.mConfig.resKey;
        this.mBg = this.scene.make.image(undefined, false);
        this.mBg.setTexture(resKey, this.mConfig.resBg);
        this.mBg.x = this.mConfig.wid / 2;
        this.mBg.y = this.mConfig.hei / 2;
        this.mBg.setSize(this.mConfig.wid, this.mConfig.hei);
        this.mArrow = this.scene.make.image(undefined, false);
        this.mArrow.setTexture(resKey, this.mConfig.resArrow);
        this.mArrow.scaleY = this.mConfig.up ? -1 : 1;
        this.mArrow.x = this.mConfig.wid - this.mArrow.width;
        this.mArrow.y = (this.mConfig.hei - this.mArrow.height >> 1) + 4;
        this.mtxt = this.scene.make.text({
            x: 0, y: 0,
            style: { fill: "#F7EDED", fontSize: 18 }
        }, false);
        this.add([this.mBg, this.mArrow, this.mtxt]);
        this.mInitialize = true;
        if (this.mSelectData) {
            this.selectCall(this.mSelectData);
        }
    };
    ComboBox.prototype.openHandler = function () {
        if (!this.interactiveBoo) {
            if (this.soundGroup && this.soundGroup.disabled)
                this.playSound(this.soundGroup.disabled);
            return;
        }
        if (this.soundGroup && this.soundGroup.expand)
            this.playSound(this.soundGroup.expand);
        if (!this.itemList || this.itemList.length < 1)
            return;
        this.showTween(this.mIsopen);
    };
    ComboBox.prototype.showTween = function (open) {
        if (open) {
            this.mItemBG = this.createTexture();
            this.addAt(this.mItemBG, 0);
        }
        else {
            if (this.mItemBG) {
                if (this.mItemBG.parentContainer) {
                    this.mItemBG.parentContainer.remove(this.mItemBG);
                }
                this.mItemBG.destroy();
            }
        }
        this.mArrow.scaleY = open ? 1 : -1;
        this.showTweenItem(open);
        this.mIsopen = !this.mIsopen;
    };
    ComboBox.prototype.showTweenItem = function (open) {
        var _this = this;
        var len = this.itemList.length;
        var _loop_1 = function (i) {
            var item = this_1.itemList[i];
            if (!item) {
                return "continue";
            }
            item.x = this_1.mConfig.wid >> 1;
            this_1.add(item);
            this_1.scene.tweens.add({
                targets: item,
                duration: 50 * i,
                props: {
                    y: { value: open ? -this_1.mConfig.hei * i - this_1.mConfig.hei / 2 : -this_1.mConfig.hei >> 1 },
                    alpha: { value: open ? 1 : 0 }
                },
                onComplete: function (tween, targets, element) {
                    if (!open) {
                        _this.remove(item);
                    }
                },
                onCompleteParams: [this_1],
            });
        };
        var this_1 = this;
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
    };
    ComboBox.prototype.createTexture = function () {
        var COLOR = 0x3D3838;
        var height = this.mConfig.hei * this.itemList.length;
        var bgGraphics = this.scene.make.graphics(undefined, false);
        bgGraphics.fillStyle(COLOR, .8);
        bgGraphics.fillRect(0, -height, this.mConfig.wid, height);
        return bgGraphics;
    };
    return ComboBox;
}(BaseUI["a" /* BaseUI */]));


// CONCATENATED MODULE: ./src/scenes/login.ts
var login_extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






// 编辑器用 Phaser.Scene
var login_LoginScene = /** @class */ (function (_super) {
    login_extends(LoginScene, _super);
    function LoginScene() {
        var _this = _super.call(this, { key: LoginScene.name }) || this;
        _this.mCurTabIndex = 0;
        _this.mHei = 0;
        return _this;
    }
    LoginScene.prototype.preload = function () {
        this.load.atlas("login", "./resources/ui/login/login.png", "./resources/ui/login/login.json");
    };
    LoginScene.prototype.create = function () {
        var loginRes = "login";
        var width = this.scale.gameSize.width;
        var height = this.scale.gameSize.height;
        this.rect = this.add.graphics();
        this.rect.fillStyle(0);
        this.rect.fillRect(0, 0, width, height);
        var accountData = localStorage.getItem("account");
        var logo = this.make.image(undefined, false);
        logo.setTexture(loginRes, "login_logo");
        this.mHei += logo.height;
        this.mParentCon = this.add.container(width >> 1, (height >> 1) + 100);
        this.mBg = this.make.image(undefined, false);
        this.mHei += this.mBg.height + 10;
        this.mEnterBtn = this.make.image(undefined, false);
        this.mEnterBtn.setTexture(loginRes, "login_loginBtn");
        this.mEnterBtn.x = 123;
        this.mQuickBtn = this.make.image(undefined, false);
        this.mQuickBtn.setTexture(loginRes, "login_quickBtn");
        this.mQuickBtn.x = 123;
        this.mQuickBtn.y = -38;
        this.mSendCodeBtn = this.make.image(undefined, false);
        this.mSendCodeBtn.setTexture(loginRes, "login_sendBtn");
        this.mSendCodeBtn.x = 10;
        this.mSendCodeBtn.y = 67;
        this.mTab0 = this.make.image(undefined, false);
        this.mTab0.setTexture(loginRes, "login_tabSelect");
        this.mTab0.x = -105;
        this.mTab0.y = -38;
        this.mTab1 = this.make.image(undefined, false);
        this.mTab1.setTexture(loginRes, "login_tabUnSelect");
        this.mTab1.x = 7;
        this.mTab1.y = -38;
        this.mInputBg_long0 = this.make.image(undefined, false);
        this.mInputBg_long0.setTexture(loginRes, "login_inputLong");
        this.mInputBg_long0.x = -50;
        this.mInputBg_long0.y = 15;
        this.mInputBg_long1 = this.make.image(undefined, false);
        this.mInputBg_long1.setTexture(loginRes, "login_inputLong");
        this.mInputBg_long1.x = -50;
        this.mInputBg_long1.y = 67;
        this.mInputBg_small = this.make.image(undefined, false);
        this.mInputBg_small.setTexture(loginRes, "login_inputBg");
        this.mInputBg_small.x = -105;
        this.mInputBg_small.y = 67;
        this.mSizeTF = this.add.text(10, 50, "", {
            style: { color: "#000000" },
            wordWrap: { width: 800, useAdvancedWrap: true },
        });
        this.mSizeTF.setFontSize(20);
        this.mTabDic = new Map();
        this.mNameInputTxt = new InputText["a" /* default */](this, 0, 0, 190, 15, {
            type: "input",
            placeholder: "用戶名",
            fontFamily: "YaHei",
            fontSize: "14px",
            color: "#847C7C",
        })
            .resize(200, 20)
            .setOrigin(0, 0);
        this.mPassWordInputTxt = new InputText["a" /* default */](this, 0, 0, 190, 15, {
            type: "password",
            placeholder: "密码",
            fontFamily: "YaHei",
            fontSize: "14px",
            color: "#847C7C",
        })
            .resize(200, 20)
            .setOrigin(0, 0);
        this.mVerificationCodeTxt = new InputText["a" /* default */](this, 0, 0, 100, 15, {
            type: "input",
            placeholder: "验证码",
            fontFamily: "YaHei",
            fontSize: "14px",
            color: "#847C7C",
        })
            .resize(100, 20)
            .setOrigin(0, 0);
        this.mNameInputTxt.x = -140;
        this.mNameInputTxt.y = 4;
        this.mPassWordInputTxt.x = -140;
        this.mPassWordInputTxt.y = 55;
        this.mVerificationCodeTxt.x = -140;
        this.mVerificationCodeTxt.y = 55;
        // this.mtxt0 = this.add.text(-145, -46, "手机号登录", { fontFamily: "YaHei" });
        // this.mtxt1 = this.add.text(-35, -46, "用户号登录", { fontFamily: "YaHei" });
        // this.mtxt2 = this.add.text(90, -46, "快速游戏", { fontFamily: "YaHei" });
        // this.mtxt3 = this.add.text(108, 33, "登录", { fontFamily: "YaHei" });
        // this.mtxt4 = this.add.text(-97, 37, "登录其他账号", { fontFamily: "YaHei" });
        // this.mtxt5 = this.add.text(-6, 57, "发送", { fontFamily: "YaHei" });
        this.mtxt0 = this.make.text(undefined, false);
        this.mtxt1 = this.make.text(undefined, false);
        this.mtxt2 = this.make.text(undefined, false);
        this.mtxt3 = this.make.text(undefined, false);
        this.mtxt4 = this.make.text(undefined, false);
        this.mtxt5 = this.make.text(undefined, false);
        this.mtxt0.x = -145;
        this.mtxt0.y = -46;
        this.mtxt1.x = -35;
        this.mtxt1.y = -46;
        this.mtxt2.x = 90;
        this.mtxt2.y = -46;
        this.mtxt3.x = 108;
        this.mtxt3.y = 33;
        this.mtxt4.x = -97;
        this.mtxt4.y = 37;
        this.mtxt5.x = -6;
        this.mtxt5.y = 57;
        this.mtxt0.setFontFamily("YaHei");
        this.mtxt0.setText("手机号登录");
        this.mtxt1.setFontFamily("YaHei");
        this.mtxt1.setText("用户号登录");
        this.mtxt2.setFontFamily("YaHei");
        this.mtxt2.setText("快速游戏");
        this.mtxt3.setFontFamily("YaHei");
        this.mtxt3.setText("登录");
        this.mtxt4.setFontFamily("YaHei");
        this.mtxt4.setText("登录其他账号");
        this.mtxt5.setFontFamily("YaHei");
        this.mtxt5.setText("发送");
        var config = {
            wid: 220,
            hei: 36,
            resKey: "login",
            resPng: "./resources/ui/login/login.png",
            resJson: "./resources/ui/login/login.json",
            resBg: "login_inputLong",
            resArrow: "login_downArrow",
            fontStyle: { size: 20, color: "#ffcc00", bold: false },
            up: true,
            clickCallBack: this.changeID,
        };
        this.combobox = new ComboBox(this, config);
        this.combobox.x = -158;
        this.combobox.y = -28;
        logo.x = -25;
        logo.y = -logo.height / 2;
        this.changePanelState(accountData);
        this.mParentCon.add(logo);
        this.mParentCon.add(this.mBg);
        this.mParentCon.add(this.mTab0);
        this.mParentCon.add(this.mTab1);
        this.mParentCon.add(this.mQuickBtn);
        this.mParentCon.add(this.mEnterBtn);
        this.mParentCon.add(this.mSendCodeBtn);
        this.mParentCon.add(this.mInputBg_long0);
        this.mParentCon.add(this.mInputBg_long1);
        this.mParentCon.add(this.mInputBg_small);
        this.mParentCon.add(this.mNameInputTxt);
        this.mParentCon.add(this.mPassWordInputTxt);
        this.mParentCon.add(this.mVerificationCodeTxt);
        this.mParentCon.add(this.mtxt0);
        this.mParentCon.add(this.mtxt1);
        this.mParentCon.add(this.mtxt2);
        this.mParentCon.add(this.mtxt3);
        this.mParentCon.add(this.mtxt4);
        this.mParentCon.add(this.mtxt5);
        this.mParentCon.add(this.combobox);
        this.mTab0.setInteractive();
        this.mTab1.setInteractive();
        this.mQuickBtn.setInteractive();
        this.mEnterBtn.setInteractive();
        this.mSendCodeBtn.setInteractive();
        this.mtxt4.setInteractive();
        this.mTab0.tabIndex = 0;
        this.mTab1.tabIndex = 1;
        this.mTabDic.set(this.mTab0.tabIndex, this.mTab0);
        this.mTabDic.set(this.mTab1.tabIndex, this.mTab1);
        this.mCurTabIndex = 0;
        this.mTab0.on("pointerdown", this.tab0Handler, this);
        this.mTab1.on("pointerdown", this.tab1Handler, this);
        this.mQuickBtn.on("pointerdown", this.quickHandler, this);
        this.mEnterBtn.on("pointerdown", this.enterHandler, this);
        this.mSendCodeBtn.on("pointerdown", this.sendCodeHandler, this);
        this.mtxt4.on("pointerdown", this.changeAccount, this);
        this.scale.on("resize", this.checkSize, this);
        this.scale.on("orientationchange", this.onOrientationChange, this);
        this.checkSize(new utils_size["a" /* Size */](width, height));
    };
    LoginScene.prototype.init = function (data) {
        this.mConnect = data.connect;
        this.mCallBack = data.callBack;
        this.mWorld = data.world;
    };
    LoginScene.prototype.update = function () {
        var orientation = this.mWorld.getSize().width > this.mWorld.getSize().height ? "LANDSCAPE" : "PORTRAIT";
        this.mSizeTF.text =
            "width:" +
                this.mWorld.getSize().width +
                "\n" +
                "height:" +
                this.mWorld.getSize().height +
                "\n" +
                "orientation:" +
                orientation +
                "\n" +
                "devicePixelRatio:" +
                window.devicePixelRatio;
    };
    LoginScene.prototype.awake = function () {
        this.mTab0.on("pointerdown", this.tab0Handler, this);
        this.mTab1.on("pointerdown", this.tab1Handler, this);
        this.mQuickBtn.on("pointerdown", this.quickHandler, this);
        this.mEnterBtn.on("pointerdown", this.enterHandler, this);
        this.mSendCodeBtn.on("pointerdown", this.sendCodeHandler, this);
        this.mtxt4.on("pointerdown", this.changeAccount, this);
        this.scale.on("resize", this.checkSize, this);
        this.scale.on("orientationchange", this.onOrientationChange, this);
        this.scene.wake();
    };
    LoginScene.prototype.sleep = function () {
        this.mTab0.off("pointerdown", this.tab0Handler, this);
        this.mTab1.off("pointerdown", this.tab1Handler, this);
        this.mQuickBtn.off("pointerdown", this.quickHandler, this);
        this.mEnterBtn.off("pointerdown", this.enterHandler, this);
        this.mSendCodeBtn.off("pointerdown", this.sendCodeHandler, this);
        this.mtxt4.off("pointerdown", this.changeAccount, this);
        this.scale.off("resize", this.checkSize, this);
        this.scale.off("orientationchange", this.onOrientationChange, this);
        this.scene.sleep();
    };
    LoginScene.prototype.remove = function () {
        this.mTab0.off("pointerdown", this.tab0Handler, this);
        this.mTab1.off("pointerdown", this.tab1Handler, this);
        this.mQuickBtn.off("pointerdown", this.quickHandler, this);
        this.mEnterBtn.off("pointerdown", this.enterHandler, this);
        this.mSendCodeBtn.off("pointerdown", this.sendCodeHandler, this);
        this.mtxt4.off("pointerdown", this.changeAccount, this);
        this.scale.off("resize", this.checkSize, this);
        this.scale.off("orientationchange", this.onOrientationChange, this);
        this.scene.remove();
    };
    LoginScene.prototype.getKey = function () {
        return this.sys.config.key;
    };
    LoginScene.prototype.onOrientationChange = function () {
        if (this.mWorld.getConfig().platform === "app")
            return;
        var width = window.screen.width;
        var height = window.screen.height;
        this.game.scale.resize(width, height);
        this.game.canvas.style.width = window.screen.width + "";
        this.game.canvas.style.height = window.screen.height + "";
        this.mParentCon.x = width >> 1;
        if (!this.mWorld.game.device.os.desktop) {
            if (this.mWorld.game.scale.orientation === Phaser.Scale.Orientation.LANDSCAPE) {
                this.mParentCon.y = (height >> 1) + 50;
            }
            else {
                this.mParentCon.y = (height >> 1) + 50;
            }
        }
    };
    LoginScene.prototype.checkSize = function (size) {
        this.mParentCon.x = size.width >> 1;
        this.mParentCon.y = (size.height >> 1) + 50;
        log["a" /* Logger */].getInstance().log("width:" + size.width);
    };
    LoginScene.prototype.changeID = function (data) {
        // Logger.debug("============combobox 123" + data.text);
    };
    LoginScene.prototype.changeAccount = function () {
        this.changePanelState(undefined);
    };
    LoginScene.prototype.changePanelState = function (accountData) {
        var boo = !accountData;
        this.verificaHandler(boo);
        var bgRes = !accountData ? "login_loginBgBig" : "login_quickLoginBg";
        this.mBg.setTexture("login", bgRes);
        this.mEnterBtn.y = !accountData ? 40 : 15;
        this.mInputBg_long0.visible = !accountData ? true : false;
        // this.mInputBg_long0.y = accountData === undefined ? 15 : -10;
        this.mtxt3.y = !accountData ? 35 : 8;
        this.mNameInputTxt.visible = !accountData ? true : false;
        this.combobox.visible = !accountData ? false : true;
        // this.mNameInputTxt.y = accountData === undefined ? 5 : -20;
        this.mQuickBtn.visible = !accountData ? true : false;
        this.mTab0.visible = !accountData ? true : false;
        this.mTab1.visible = !accountData ? true : false;
        this.mInputBg_long1.visible = !accountData && this.mCurTabIndex !== 0 ? true : false;
        this.mPassWordInputTxt.visible = !accountData && this.mCurTabIndex !== 0 ? true : false;
        this.mtxt0.visible = !accountData ? true : false;
        this.mtxt1.visible = !accountData ? true : false;
        this.mtxt2.visible = !accountData ? true : false;
        this.mtxt4.visible = !accountData ? false : true;
        var accountObj = accountData !== undefined ? JSON.parse(accountData) : undefined;
        this.mNameInputTxt.text = !accountObj ? "" : accountObj.account;
        this.combobox.text = !accountObj ? [""] : [accountObj.account + ""];
        this.mPassWordInputTxt.text = !accountObj ? "" : accountObj.password;
        this.mParentCon.setSize(this.mBg.width, this.mHei);
        this.mParentCon.scale = window.devicePixelRatio;
        // this.mParentCon.scaleX = this.mParentCon.scaleY = this.mWorld.uiScale;
    };
    LoginScene.prototype.verificaHandler = function (show) {
        this.mVerificationCodeTxt.visible = show;
        this.mtxt5.visible = show;
        this.mInputBg_small.visible = show;
        this.mSendCodeBtn.visible = show;
        this.mInputBg_long1.visible = !show;
        this.mPassWordInputTxt.visible = !show;
    };
    LoginScene.prototype.quickHandler = function () {
        this.addTween(this.mQuickBtn);
        this.requestQuickLogin();
    };
    LoginScene.prototype.sendCodeHandler = function () {
        this.addTween(this.mSendCodeBtn);
        this.requestGetPhoneCode();
    };
    LoginScene.prototype.enterHandler = function () {
        this.addTween(this.mEnterBtn);
        if (!this.mSendCodeBtn.visible) {
            this.requestLogin();
        }
        else {
            this.loginByPhoneCode();
        }
    };
    LoginScene.prototype.addTween = function (img) {
        this.tweens.add({
            targets: img,
            duration: 50,
            ease: "Linear",
            props: {
                scaleX: { value: 0.5 },
                scaleY: { value: 0.5 },
            },
            yoyo: true,
            repeat: 0,
        });
        img.scaleX = img.scaleY = 1;
    };
    LoginScene.prototype.tab0Handler = function (pointer) {
        this.mCurTabIndex = 0;
        this.tabHandler();
    };
    LoginScene.prototype.tab1Handler = function (pointer) {
        this.mCurTabIndex = 1;
        this.tabHandler();
    };
    LoginScene.prototype.tabHandler = function () {
        var _this = this;
        this.mTabDic.forEach(function (image) {
            var tabRes = "";
            tabRes = image.tabIndex === _this.mCurTabIndex ? "login_tabSelect" : "login_tabUnSelect";
            image.setTexture("login", tabRes);
        });
        this.verificaHandler(!this.mCurTabIndex);
    };
    LoginScene.prototype.requestLogin = function () {
        var login = this;
        this.mWorld.httpService.login(login.mNameInputTxt.text, login.mPassWordInputTxt.text).then(function (response) {
            if (response.code === 200 || response.code === 201) {
                if (login.mNameInputTxt.text && login.mPassWordInputTxt.text)
                    localStorage.setItem("account", JSON.stringify({ account: login.mNameInputTxt.text, password: login.mPassWordInputTxt.text }));
                login.mWorld.account.setAccount(response.data);
                login.mCallBack(response.data);
            }
            else {
                var alert_1 = new PopUpTextUI["PopUpTextUI"](login.mWorld, login);
                alert_1.show("账号密码错误");
            }
        });
    };
    LoginScene.prototype.requestGetPhoneCode = function () {
        var login = this;
        this.mWorld.httpService.requestPhoneCode(login.mNameInputTxt.text).then(function (response) {
            if (response.code === 200) {
                login.mVerificationCodeTxt.setText(response.data);
            }
            else {
                var alert_2 = new PopUpTextUI["PopUpTextUI"](login.mWorld, login);
                alert_2.show("验证码获取失败");
            }
        });
    };
    LoginScene.prototype.loginByPhoneCode = function () {
        var login = this;
        this.mWorld.httpService
            .loginByPhoneCode(login.mNameInputTxt.text, login.mVerificationCodeTxt.text)
            .then(function (response) {
            if (response.code === 200 || response.code === 201) {
                localStorage.setItem("accountphone", JSON.stringify({ account: login.mNameInputTxt.text }));
                login.mWorld.account.setAccount(response.data);
                login.mCallBack(response.data);
            }
            else {
                var alert_3 = new PopUpTextUI["PopUpTextUI"](login.mWorld, login);
                alert_3.show("登录失败");
            }
        });
    };
    LoginScene.prototype.requestQuickLogin = function () {
        var login = this;
        this.mWorld.httpService.quickLogin().then(function (response) {
            if (response.code === 200 || response.code === 201) {
                localStorage.setItem("accountphone", JSON.stringify({ account: login.mNameInputTxt.text }));
                login.mWorld.account.setAccount(response.data);
                login.mCallBack(response.data);
            }
            else {
                var alert_4 = new PopUpTextUI["PopUpTextUI"](login.mWorld, login);
                alert_4.show("登录失败");
            }
        });
    };
    return LoginScene;
}(basic_scene["a" /* BasicScene */]));



/***/ }),
/* 443 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ clock_Clock; });

// EXTERNAL MODULE: ./node_modules/net-socket-packet/dist/index.js
var dist = __webpack_require__(103);

// EXTERNAL MODULE: ./node_modules/pixelpai_proto/protocols.js
var protocols = __webpack_require__(2);

// CONCATENATED MODULE: ./src/utils/algorithm.ts
var Algorithm = /** @class */ (function () {
    function Algorithm() {
    }
    Algorithm.median = function (arr) {
        var op_arr = arr.sort(function (x, y) {
            return y - x;
        });
        var med = Math.floor(op_arr.length / 2);
        if (op_arr.length % 2 === 0) {
            var h = op_arr[med - 1], l = op_arr[med];
            return (h + l) / 2;
        }
        return op_arr[med];
    };
    return Algorithm;
}());


// CONCATENATED MODULE: ./src/rooms/clock.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var LATENCY_SAMPLES = 7; // Latency Array length
var MIN_READY_SAMPLES = 2;
var CHECK_INTERVAL = 8000; // (ms)
var MAX_DELAY = 500; // (ms)
var clock_Clock = /** @class */ (function (_super) {
    __extends(Clock, _super);
    function Clock(conn, listener) {
        var _this = _super.call(this) || this;
        // clock是否同步完成
        _this.mClockSync = false;
        _this.mAutoSync = false;
        _this.mTimestamp = 0; // The timestamp in JavaScript is expressed in milliseconds.
        _this.mLatency = [];
        _this.mConn = conn;
        _this.mConn.addPacketListener(_this);
        _this.addHandlerFun(protocols["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_SYNC_TIME, _this.proof);
        _this.mListener = listener;
        _this._check();
        return _this;
    }
    Object.defineProperty(Clock.prototype, "sysUnixTime", {
        get: function () {
            return new Date().getTime();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Clock.prototype, "unixTime", {
        get: function () {
            return this.mTimestamp;
        },
        set: function (t) {
            this.mTimestamp = t;
        },
        enumerable: false,
        configurable: true
    });
    Clock.prototype.sync = function (times) {
        if (times === void 0) { times = 1; }
        if (!this.mConn)
            return;
        if (times < 0) {
            times = 1;
        }
        for (var i = 0; i < times; ++i) {
            var pkt = new dist["PBpacket"](protocols["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_SYNC_TIME);
            var ct = pkt.content;
            ct.clientStartTs = this.sysUnixTime;
            this.mConn.send(pkt);
        }
    };
    Clock.prototype.update = function (time, delta) {
        if (!this.mTimestamp)
            this.mTimestamp = time;
        else
            this.mTimestamp += delta;
    };
    Clock.prototype.clearTime = function () {
        this.mClockSync = false;
        if (this.mIntervalId) {
            clearInterval(this.mIntervalId);
        }
        this.mTimestamp = 0;
        this._check();
    };
    Clock.prototype.destroy = function () {
        if (this.mConn) {
            this.mConn.removePacketListener(this);
            this.mConn = undefined;
        }
        if (this.mIntervalId) {
            clearInterval(this.mIntervalId);
        }
        this.mLatency = undefined;
    };
    Object.defineProperty(Clock.prototype, "clockSync", {
        get: function () {
            return this.mClockSync;
        },
        enumerable: false,
        configurable: true
    });
    Clock.prototype._check = function () {
        var self = this;
        this.mIntervalId = setInterval(function () {
            self.sync();
        }, CHECK_INTERVAL);
    };
    Clock.prototype.proof = function (packet) {
        var ct = packet.content;
        var local_receive = this.sysUnixTime, local_send = ct.clientStartTs, remote_receive = ct.serverReceiveTs, remote_send = ct.serverSendTs, server_run = remote_send - remote_receive, total_delay = (local_receive - local_send) - server_run, latency = Math.round(total_delay / 2);
        var timeSychronDelta = 0;
        if (latency < 0)
            return;
        this.mLatency.push(latency);
        if (this.mLatency.length > LATENCY_SAMPLES) {
            this.mLatency.shift();
        }
        var median_latency = Algorithm.median(this.mLatency);
        timeSychronDelta = median_latency + server_run;
        var remote_time = remote_send - timeSychronDelta; // the real remote-time.
        var mistake = Math.abs(remote_time - this.mTimestamp);
        // update timesychron
        if (mistake > MAX_DELAY) {
            this.mTimestamp = remote_time;
            this.mAutoSync = true;
            // Logger.getInstance().debug("正在同步clock");
            // if (this.mAutoSync) {
            this.sync(-1);
            return;
            //  }
        }
        this.mAutoSync = false;
        if (this.mListener && this.mLatency.length >= MIN_READY_SAMPLES && !this.mAutoSync) {
            this.mClockSync = true;
            // Logger.getInstance().debug("clock同步完成");
            this.mListener.onClockReady();
        }
        // Logger.getInstance().debug(`total_delay: ${total_delay} / latency: ${latency} | timeSychronDelta: ${timeSychronDelta} / remote_time: ${remote_time} / mistake: ${mistake}`);
    };
    Object.defineProperty(Clock.prototype, "medianLatency", {
        get: function () {
            return Algorithm.median(this.mLatency);
        },
        enumerable: false,
        configurable: true
    });
    return Clock;
}(dist["PacketHandler"]));



/***/ }),
/* 444 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(__dirname) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "World", function() { return World; });
/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23);
/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var dragonBones__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43);
/* harmony import */ var dragonBones__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dragonBones__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(103);
/* harmony import */ var net_socket_packet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(net_socket_packet__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var pixelpai_proto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _net_connection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(404);
/* harmony import */ var _scenes_loading__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(147);
/* harmony import */ var _utils_log__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _rooms_room_manager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(436);
/* harmony import */ var _keyboard_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(409);
/* harmony import */ var _mouse_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(410);
/* harmony import */ var _scenes_main_ui__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(341);
/* harmony import */ var _joystick_manager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(411);
/* harmony import */ var _element_storage__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(412);
/* harmony import */ var _utils_http__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(413);
/* harmony import */ var _utils_resUtil__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(104);
/* harmony import */ var game_capsule__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(25);
/* harmony import */ var game_capsule__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(game_capsule__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _ui_ui_manager__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(211);
/* harmony import */ var _lib_rexui_lib_plugins_ninepatch_plugin_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(439);
/* harmony import */ var _lib_rexui_lib_plugins_inputtext_plugin_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(440);
/* harmony import */ var _lib_rexui_lib_plugins_bbcodetext_plugin_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(428);
/* harmony import */ var _lib_rexui_lib_plugins_button_plugin_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(441);
/* harmony import */ var _lib_rexui_lib_ui_ui_plugin_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(435);
/* harmony import */ var _scenes_login__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(442);
/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(429);
/* harmony import */ var _net_http_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(430);
/* harmony import */ var _scenes_gamepause__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(431);
/* harmony import */ var _scenes_edit__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(343);
/* harmony import */ var _rooms_clock__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(443);
/* harmony import */ var _role_role_manager__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(438);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(124);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(10);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_30__);
/* harmony import */ var _utils_tool__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(155);
/* harmony import */ var _sound_manager__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(432);
/* harmony import */ var _loading_loading_manager__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(433);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



































// The World act as the global Phaser.World instance;
var World = /** @class */ (function (_super) {
    __extends(World, _super);
    function World(config, callBack) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_WIDTH = 360;
        _this.DEFAULT_HEIGHT = 640;
        _this.mMoveStyle = 1;
        _this.isFullStart = false;
        _this.mOrientation = 0;
        _this.gameConfigUrls = new Map();
        _this.gameConfigUrl = "";
        _this._isIOS = -1;
        // 软键盘弹出的事件处理
        _this.focusoutFunc = function () {
            // isIOS函数在前面
            if (_this.game && _this.game.device.os.iOS) {
                window.scrollTo(0, 0);
            }
        };
        _this.mCallBack = callBack;
        _this.mConfig = config;
        // TODO 检测config内的必要参数如确实抛异常.
        if (!config.game_id) {
            throw new Error("Config.game_id is required.");
        }
        if (!config.devicePixelRatio) {
            config.devicePixelRatio = window.devicePixelRatio || 1;
        }
        if (config.width === undefined) {
            config.width = window.innerWidth;
        }
        if (config.height === undefined) {
            config.height = window.innerHeight;
        }
        _this.mScaleRatio = Math.ceil(config.devicePixelRatio || 1);
        _this.mUIRatio = Math.round(config.devicePixelRatio || 1);
        var scaleW = config.width / _this.DEFAULT_WIDTH * (config.devicePixelRatio / _this.mUIRatio);
        // const scaleH = config.height / this.DEFAULT_HEIGHT;
        _this.mUIScale = scaleW;
        // if (!config.scale_ratio) {
        // config.scale_ratio = Math.round(window.innerWidth / this.DEFAULT_WIDTH * window.devicePixelRatio);
        // }
        // this.mScaleRatio = config.scale_ratio ? config.scale_ratio : window.innerWidth / this.DEFAULT_WIDTH * window.devicePixelRatio;
        _utils_resUtil__WEBPACK_IMPORTED_MODULE_14__[/* Url */ "h"].OSD_PATH = _this.mConfig.osd || "https://osd.tooqing.com/";
        _utils_resUtil__WEBPACK_IMPORTED_MODULE_14__[/* Url */ "h"].RES_PATH = "./resources/";
        _utils_resUtil__WEBPACK_IMPORTED_MODULE_14__[/* Url */ "h"].RESUI_PATH = "./resources/ui/";
        _this._newGame();
        _this.mConnection = config.connection || new _net_connection__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](_this);
        _this.mConnection.addPacketListener(_this);
        _this.mClock = new _rooms_clock__WEBPACK_IMPORTED_MODULE_27__[/* Clock */ "a"](_this.mConnection, _this);
        // add Packet listener.
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_client"].OPCODE._OP_GATEWAY_RES_CLIENT_VIRTUAL_WORLD_INIT, _this.onInitVirtualWorldPlayerInit);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_client"].OPCODE._OP_GATEWAY_RES_CLIENT_ERROR, _this.onClientErrorHandler);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_client"].OPCODE._OP_VIRTUAL_WORLD_RES_CLIENT_SELECT_CHARACTER, _this.onSelectCharacter);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_client"].OPCODE._OP_VIRTUAL_WORLD_REQ_CLIENT_GOTO_ANOTHER_GAME, _this.onGotoAnotherGame);
        _this.addHandlerFun(pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_client"].OPCODE._OP_GATEWAY_RES_CLIENT_PONG, _this.heartBeatCallBack);
        _this.mGameEmitter = new Phaser.Events.EventEmitter();
        _this.mRoomMamager = new _rooms_room_manager__WEBPACK_IMPORTED_MODULE_7__[/* RoomManager */ "a"](_this);
        _this.mUiManager = new _ui_ui_manager__WEBPACK_IMPORTED_MODULE_16__["UiManager"](_this);
        _this.mMouseManager = new _mouse_manager__WEBPACK_IMPORTED_MODULE_9__[/* MouseManager */ "a"](_this);
        _this.mElementStorage = new _element_storage__WEBPACK_IMPORTED_MODULE_12__[/* ElementStorage */ "a"]();
        _this.mHttpService = new _net_http_service__WEBPACK_IMPORTED_MODULE_24__[/* HttpService */ "a"](_this);
        _this.mRoleManager = new _role_role_manager__WEBPACK_IMPORTED_MODULE_28__[/* RoleManager */ "a"](_this);
        _this.mSoundManager = new _sound_manager__WEBPACK_IMPORTED_MODULE_32__[/* SoundManager */ "a"](_this);
        _this.mLoadingManager = new _loading_loading_manager__WEBPACK_IMPORTED_MODULE_33__[/* LoadingManager */ "a"](_this);
        _this.mRoleManager.register();
        // this.mCharacterManager = new CharacterManager(this);
        // this.mCharacterManager.register();
        _this.mRoomMamager.addPackListener();
        _this.mUiManager.addPackListener();
        var gateway = _this.mConfig.server_addr || Object({"host":"gdev.tooqing.com","port":11100,"secure":true});
        if (gateway) {
            // connect to game server.
            _this.mConnection.startConnect(gateway);
        }
        document.body.addEventListener("focusout", _this.focusoutFunc); // 软键盘收起的事件处理
        return _this;
    }
    Object.defineProperty(World.prototype, "moveStyle", {
        get: function () {
            return this.mMoveStyle;
        },
        enumerable: false,
        configurable: true
    });
    World.prototype.getConfig = function () {
        return this.mConfig;
    };
    World.prototype.setGameConfig = function (config) {
        this.elementStorage.setGameConfig(config);
    };
    World.prototype.updatePalette = function (palette) {
        this.elementStorage.updatePalette(palette);
    };
    World.prototype.updateMoss = function (moss) {
        this.elementStorage.updateMoss(moss);
    };
    World.prototype.destroy = function () {
        this.mConnection.closeConnect();
        document.body.removeEventListener("focusout", this.focusoutFunc); // 软键盘收起的事件处理
        this.clearGame();
    };
    World.prototype.onConnected = function (connection) {
        // Logger.getInstance().info(`enterVirtualWorld`);
        this.enterVirtualWorld();
        // this.login();
    };
    World.prototype.onDisConnected = function (connection) { };
    World.prototype.onError = function (reason) { };
    World.prototype.onClientErrorHandler = function (packet) {
        var content = packet.content;
        _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().error("Remote Error[" + content.responseStatus + "]: " + content.msg);
    };
    /**
     * 当scene发生改变时，调用该方法并传入各个需要调整监听的manager中去
     */
    World.prototype.changeRoom = function (room) {
        if (this.mInputManager)
            this.mInputManager.onRoomChanged(room);
        this.mMouseManager.changeRoom(room);
        this.mSoundManager.changeRoom(room);
    };
    World.prototype.getSize = function () {
        if (!this.mGame)
            return;
        return this.mGame.scale.gameSize;
    };
    World.prototype.scaleChange = function (scale) {
        this.emitter.emit(World.SCALE_CHANGE);
    };
    World.prototype.closeGame = function () {
        if (this.mConfig.closeGame) {
            this.destroy();
            this.mConfig.closeGame();
        }
    };
    World.prototype.resize = function (width, height) {
        var w = width * window.devicePixelRatio;
        var h = height * window.devicePixelRatio;
        // if (this.mGame) {
        //     this.mGame.scale.resize(w, h);
        //     const scenes = this.mGame.scene.scenes;
        //     for (const scene of scenes) {
        //         scene.setViewPort(0, 0, w, h);
        //         // scene.cameras.main.setViewport(0, 0, w, h);
        //     }
        // }
        // if (this.mRoomMamager) {
        //     this.mRoomMamager.resize(w, h);
        // }
        // if (this.mUiManager) {
        //     this.mUiManager.resize(w, h);
        // }
        // if (this.mInputManager) {
        //     this.mInputManager.resize(w, h);
        // }
        _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().log("resize" + w + "|" + h);
    };
    World.prototype.onOrientationChange = function (orientation, width, height) {
        if (this.mConfig.platform === "app")
            return;
        this.mOrientation = orientation;
        if (this.mConfig.screenWidth > this.mConfig.screenHeight) {
            // 基础是横屏
            if ((orientation <= 135 && orientation >= 45) || (orientation <= -45 && orientation >= -135)) {
                this.orientationResize(this.mConfig.screenWidth, this.mConfig.screenHeight, width, height);
            }
            else {
                this.orientationResize(this.mConfig.screenHeight, this.mConfig.screenWidth, width, height);
            }
        }
        else {
            // 基础是竖屏
            if ((orientation <= 135 && orientation >= 45) || (orientation <= -45 && orientation >= -135)) {
                this.orientationResize(this.mConfig.screenHeight, this.mConfig.screenWidth, width, height);
            }
            else {
                this.orientationResize(this.mConfig.screenWidth, this.mConfig.screenHeight, width, height);
            }
        }
    };
    World.prototype.startFullscreen = function () {
        if (!this.mGame) {
            return;
        }
        this.isFullStart = true;
        this.mGame.scale.startFullscreen();
    };
    World.prototype.stopFullscreen = function () {
        if (!this.mGame) {
            return;
        }
        this.isFullStart = false;
        this.mGame.scale.stopFullscreen();
    };
    World.prototype.onGotoAnotherGame = function (packet) {
        var content = packet.content;
        this._createAnotherGame(content.gameId, content.virtualWorldId);
    };
    World.prototype.changeScene = function () {
        return __awaiter(this, void 0, void 0, function () {
            var gameID, worldID;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        gameID = this.mConfig.game_id;
                        worldID = this.mConfig.virtual_world_id;
                        return [4 /*yield*/, this.clearGame()];
                    case 1:
                        _a.sent();
                        this.mConfig.game_id = gameID;
                        this.mConfig.virtual_world_id = worldID;
                        this._newGame();
                        this.loginEnterWorld();
                        return [2 /*return*/];
                }
            });
        });
    };
    World.prototype.reconnect = function () {
        var gameID = this.mConfig.game_id;
        var worldID = this.mConfig.virtual_world_id;
        this._createAnotherGame(gameID, worldID);
    };
    World.prototype.startHeartBeat = function () {
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_gateway"].OPCODE._OP_CLIENT_REQ_GATEWAY_PING);
        this.mConnection.send(pkt);
        this.mClock.sync(-1);
    };
    World.prototype.playSound = function (config) {
        this.mSoundManager.play(config);
    };
    Object.defineProperty(World.prototype, "uiScale", {
        get: function () {
            return this.mUIScale;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "uiRatio", {
        get: function () {
            return this.mUIRatio;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "scaleRatio", {
        get: function () {
            return this.mScaleRatio;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "game", {
        get: function () {
            return this.mGame;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "roomManager", {
        get: function () {
            return this.mRoomMamager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "orientation", {
        get: function () {
            return this.mOrientation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "elementStorage", {
        get: function () {
            return this.mElementStorage;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "uiManager", {
        get: function () {
            return this.mUiManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "mouseManager", {
        get: function () {
            return this.mMouseManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "inputManager", {
        get: function () {
            return this.mInputManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "connection", {
        get: function () {
            return this.mConnection;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "clock", {
        get: function () {
            return this.mClock;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "emitter", {
        get: function () {
            return this.mGameEmitter;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "httpService", {
        get: function () {
            return this.mHttpService;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(World.prototype, "account", {
        get: function () {
            return this.mAccount;
        },
        enumerable: false,
        configurable: true
    });
    World.prototype.enableClick = function () {
        if (this.game &&
            this.mRoomMamager &&
            this.mRoomMamager.currentRoom &&
            this.mRoomMamager.currentRoom.scene &&
            this.mRoomMamager.currentRoom.scene.input) {
            this.mRoomMamager.currentRoom.scene.input.enabled = true;
        }
    };
    World.prototype.disableClick = function () {
        if (this.game &&
            this.mRoomMamager &&
            this.mRoomMamager.currentRoom &&
            this.mRoomMamager.currentRoom.scene &&
            this.mRoomMamager.currentRoom.scene.input) {
            this.mRoomMamager.currentRoom.scene.input.enabled = false;
        }
    };
    World.prototype.showLoading = function () {
        return this.mLoadingManager.start();
    };
    World.prototype.getGameConfig = function () {
        return this.gameConfig;
    };
    World.prototype.onClockReady = function () {
        if (this.mInputManager) {
            this.mInputManager.enable = true;
        }
    };
    World.prototype.onFocus = function () {
        if (this.connection) {
            var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_GAME_STATUS);
            var context = pkt.content;
            context.gameStatus = pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_def"].GameStatus.Focus;
            this.connection.send(pkt);
            // 同步心跳
            this.mClock.sync(-1);
        }
        else {
            _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().error("connection is undefined");
        }
        this.resumeScene();
    };
    World.prototype.onBlur = function () {
        if (this.connection) {
            var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_GAME_STATUS);
            var context = pkt.content;
            context.gameStatus = pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_def"].GameStatus.Blur;
            this.connection.send(pkt);
        }
        else {
            _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().error("connection is undefined");
        }
        if (this.game.device.os.desktop) {
            this.pauseScene();
        }
    };
    World.prototype.initgameConfigUrls = function (urls) {
        for (var _i = 0, urls_1 = urls; _i < urls_1.length; _i++) {
            var url = urls_1[_i];
            var sceneId = _utils_tool__WEBPACK_IMPORTED_MODULE_31__[/* Tool */ "a"].baseName(url);
            this.gameConfigUrls.set(sceneId, url);
            if (url.split(sceneId).length === 3) {
                this.gameConfigUrl = url;
            }
        }
    };
    World.prototype.getConfigUrl = function (sceneId) {
        return this.gameConfigUrls.get(sceneId);
    };
    World.prototype.loadSceneConfig = function (sceneId) {
        var url = this.getConfigUrl(sceneId);
        return this.loadGameConfig(url);
    };
    World.prototype.createGame = function (keyEvents) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // start the game. TODO 此方法会多次调用，所以先要卸载已经实例化的游戏再new！
                        this._newGame();
                        // this.mGame.scene.add(PlayScene.name, PlayScene);
                        this.mGame.scene.add(_scenes_main_ui__WEBPACK_IMPORTED_MODULE_10__[/* MainUIScene */ "a"].name, _scenes_main_ui__WEBPACK_IMPORTED_MODULE_10__[/* MainUIScene */ "a"]);
                        this.mGame.scene.add(_scenes_edit__WEBPACK_IMPORTED_MODULE_26__[/* EditScene */ "a"].name, _scenes_edit__WEBPACK_IMPORTED_MODULE_26__[/* EditScene */ "a"]);
                        // this.mGame.events.on(Phaser.Core.Events.FOCUS, this.onFocus, this);
                        this.mGame.events.on(Phaser.Core.Events.BLUR, this.onBlur, this);
                        if (this.moveStyle === pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_def"].MoveStyle.DIRECTION_MOVE_STYLE || this.moveStyle === 1) {
                            if (this.mGame.device.os.desktop) {
                                this.mInputManager = new _keyboard_manager__WEBPACK_IMPORTED_MODULE_8__[/* KeyBoardManager */ "a"](this, keyEvents);
                            }
                            else {
                                this.mInputManager = new _joystick_manager__WEBPACK_IMPORTED_MODULE_11__[/* JoyStickManager */ "a"](this, keyEvents);
                            }
                        }
                        else {
                            if (this.mGame.device.os.desktop) {
                                this.mInputManager = new _keyboard_manager__WEBPACK_IMPORTED_MODULE_8__[/* KeyBoardManager */ "a"](this, keyEvents);
                            }
                        }
                        if (this.mInputManager)
                            this.mInputManager.enable = false;
                        if (window.screen.width > window.screen.height) {
                            if (this.mConfig.width > this.mConfig.height) {
                                this.resize(this.mConfig.width, this.mConfig.height);
                            }
                            else {
                                this.resize(this.mConfig.height, this.mConfig.width);
                            }
                        }
                        else {
                            if (this.mConfig.width < this.mConfig.height) {
                                this.resize(this.mConfig.width, this.mConfig.height);
                            }
                            else {
                                this.resize(this.mConfig.height, this.mConfig.width);
                            }
                        }
                        return [4 /*yield*/, this.mLoadingManager.addAssets(this.mElementStorage.getAssets())];
                    case 1:
                        _a.sent();
                        this.gameCreated();
                        return [2 /*return*/];
                }
            });
        });
    };
    World.prototype._createAnotherGame = function (gameId, worldId) {
        return __awaiter(this, void 0, void 0, function () {
            var gateway, loginScene;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.clearGame()];
                    case 1:
                        _a.sent();
                        if (this.mConnection) {
                            this.mConnection.closeConnect();
                        }
                        if (this.mClock) {
                            this.mClock.destroy();
                            this.mClock = null;
                        }
                        this.mConfig.game_id = gameId;
                        this.mConfig.virtual_world_id = worldId;
                        this.mConnection.addPacketListener(this);
                        gateway = this.mConfig.server_addr || Object({"host":"gdev.tooqing.com","port":11100,"secure":true});
                        if (gateway) {
                            // connect to game server.
                            this.mConnection.startConnect(gateway);
                        }
                        this.mClock = new _rooms_clock__WEBPACK_IMPORTED_MODULE_27__[/* Clock */ "a"](this.mConnection, this);
                        // setTimeout(() => {
                        this._newGame();
                        loginScene = this.mGame.scene.getScene(_scenes_login__WEBPACK_IMPORTED_MODULE_22__[/* LoginScene */ "a"].name);
                        if (loginScene)
                            loginScene.remove();
                        this.mLoadingManager.start();
                        return [2 /*return*/];
                }
            });
        });
    };
    World.prototype.onFullScreenChange = function () {
        this.resize(this.mGame.scale.gameSize.width, this.mGame.scale.gameSize.height);
    };
    World.prototype.onSelectCharacter = function () {
        var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_GATEWAY_CHARACTER_CREATED);
        this.connection.send(pkt);
    };
    World.prototype.clearGame = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.mGame) {
                _this.mGame.events.off(Phaser.Core.Events.BLUR, _this.onBlur, _this);
                _this.mGame.scale.off("enterfullscreen", _this.onFullScreenChange, _this);
                _this.mGame.scale.off("leavefullscreen", _this.onFullScreenChange, _this);
                _this.mGame.scale.off("orientationchange", _this.onOrientationChange, _this);
                _this.mGame.plugins.removeGlobalPlugin("rexButton");
                _this.mGame.plugins.removeGlobalPlugin("rexNinePatchPlugin");
                _this.mGame.plugins.removeGlobalPlugin("rexInputText");
                _this.mGame.plugins.removeGlobalPlugin("rexBBCodeTextPlugin");
                _this.mGame.plugins.removeGlobalPlugin("rexMoveTo");
                _this.mGame.plugins.removeScenePlugin("DragonBones");
                _this.mGame.plugins.removeScenePlugin("rexUI");
                _this.mGameEmitter.destroy();
                _this.roomManager.destroy();
                _this.uiManager.destroy();
                _this.mElementStorage.destroy();
                _this.mLoadingManager.destroy();
                _this.mGame.events.once(Phaser.Core.Events.DESTROY, function () {
                    _this.mGame = undefined;
                    resolve();
                });
                _this.mGame.destroy(true);
            }
            else {
                resolve();
            }
        });
    };
    World.prototype.heartBeatCallBack = function () {
        this.mConnection.clearHeartBeat();
    };
    // private initUiScale() {
    //     const width: number = this.mConfig.width;
    //     const height: number = this.mConfig.height;
    //     const baseWidth: number = this.mConfig.baseWidth;
    //     const baseHeight: number = this.mConfig.baseHeight;
    //     if (!this.mGame.device.os.desktop) {
    //         if (width < height) {
    //             this.mConfig.ui_scale = (width / baseHeight) * 2;
    //             this.mGame.scale.orientation = Phaser.Scale.Orientation.PORTRAIT;
    //         } else if (width > height) {
    //             this.mConfig.ui_scale = (width / baseWidth) * 2;
    //             this.mGame.scale.orientation = Phaser.Scale.Orientation.LANDSCAPE;
    //         }
    //     }
    // }
    World.prototype.login = function () {
        var _this = this;
        if (!this.mGame.scene.getScene(_scenes_login__WEBPACK_IMPORTED_MODULE_22__[/* LoginScene */ "a"].name)) {
            this.mGame.scene.add(_scenes_login__WEBPACK_IMPORTED_MODULE_22__[/* LoginScene */ "a"].name, _scenes_login__WEBPACK_IMPORTED_MODULE_22__[/* LoginScene */ "a"]);
        }
        this.mGame.scene.start(_scenes_login__WEBPACK_IMPORTED_MODULE_22__[/* LoginScene */ "a"].name, {
            connect: this.mConnection,
            world: this,
            callBack: function () {
                _this.loginEnterWorld();
                var loginScene = _this.mGame.scene.getScene(_scenes_login__WEBPACK_IMPORTED_MODULE_22__[/* LoginScene */ "a"].name);
                loginScene.remove();
                _this.mLoadingManager.start();
                // this.mGame.scene.start(LoadingScene.name, { world: this });
            },
        });
    };
    World.prototype.orientationResize = function (screenWidth, screenHeight, width, height) {
        if (this.mGame) {
            if (width < height) {
                // 基础竖版
                // this.mConfig.ui_scale = width / this.mConfig.baseHeight;
                this.mGame.scale.orientation = Phaser.Scale.Orientation.PORTRAIT;
                if (!this.isFullStart) {
                    _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().log("竖版" + this.mGame.scale.orientation);
                }
            }
            else {
                // 基础横版
                // this.mConfig.ui_scale = width / this.mConfig.baseWidth;
                this.mGame.scale.orientation = Phaser.Scale.Orientation.LANDSCAPE;
                if (!this.isFullStart) {
                    _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().log("横版" + this.mGame.scale.orientation);
                }
            }
            this.mGame.scale.resize(screenWidth, screenHeight);
            _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().log("orientation" + this.mGame.scale.orientation);
        }
        if (this.mRoomMamager) {
            this.mRoomMamager.resize(width, height);
        }
        if (this.mUiManager) {
            this.mUiManager.resize(width, height);
        }
        if (this.mInputManager) {
            this.mInputManager.resize(width, height);
        }
    };
    World.prototype.enterVirtualWorld = function () {
        if (!this.mGame) {
            this.reconnect();
            return;
        }
        if (this.mConfig && this.mConnection) {
            this.mAccount = new _account__WEBPACK_IMPORTED_MODULE_23__[/* Account */ "a"]();
            var loadingScene = this.mGame.scene.getScene(_scenes_loading__WEBPACK_IMPORTED_MODULE_5__[/* LoadingScene */ "a"].name);
            if (!loadingScene) {
                this.mGame.scene.add(_scenes_loading__WEBPACK_IMPORTED_MODULE_5__[/* LoadingScene */ "a"].name, _scenes_loading__WEBPACK_IMPORTED_MODULE_5__[/* LoadingScene */ "a"]);
            }
            if (!this.mConfig.auth_token) {
                this.login();
                return;
            }
            else {
                // this.mGame.scene.start(LoadingScene.name, { world: this });
                this.mLoadingManager.start();
                this.mAccount.setAccount({
                    token: this.mConfig.auth_token,
                    expire: this.mConfig.token_expire,
                    fingerprint: this.mConfig.token_fingerprint,
                });
            }
            this.loginEnterWorld();
        }
    };
    World.prototype.loginEnterWorld = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pkt, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Object(_i18n__WEBPACK_IMPORTED_MODULE_29__[/* initLocales */ "b"])(path__WEBPACK_IMPORTED_MODULE_30__["relative"](__dirname, "../resources/locales/{{lng}}.json"))];
                    case 1:
                        _a.sent();
                        pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_gateway"].OPCODE._OP_CLIENT_REQ_VIRTUAL_WORLD_PLAYER_INIT);
                        content = pkt.content;
                        // Logger.getInstance().log(`VW_id: ${this.mConfig.virtual_world_id}`);
                        content.virtualWorldUuid = "" + this.mConfig.virtual_world_id;
                        if (!this.mConfig.game_id ||
                            !this.mAccount ||
                            !this.mAccount.accountData ||
                            !this.mAccount.accountData.token ||
                            !this.mAccount.accountData.expire ||
                            !this.mAccount.accountData.fingerprint) {
                            // Logger.getInstance().debug("缺少必要参数，无法登录游戏");
                            if (this.mGame)
                                this.mGame.destroy(true);
                            return [2 /*return*/];
                        }
                        content.gameId = this.mConfig.game_id;
                        // const accountObj = JSON.parse();
                        content.userToken = this.mConfig.auth_token = this.mAccount.accountData.token; // auth_token;
                        content.expire = this.mConfig.token_expire = this.mAccount.accountData.expire + "";
                        content.fingerprint = this.mConfig.token_fingerprint = this.mAccount.accountData.fingerprint;
                        this.mConnection.send(pkt);
                        return [2 /*return*/];
                }
            });
        });
    };
    World.prototype.onInitVirtualWorldPlayerInit = function (packet) {
        var _this = this;
        // if (this.mClock) this.mClock.sync(); // Manual sync remote time.
        // TODO 进游戏前预加载资源
        var content = packet.content;
        var configUrls = content.configUrls;
        this.mMoveStyle = content.moveStyle;
        this.clock.sync(-1);
        this.initgameConfigUrls(configUrls);
        if (!configUrls || configUrls.length <= 0) {
            _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().error("configUrls error: , " + configUrls + ", gameId: " + this.mConfig.game_id);
            this.createGame(content.keyEvents);
            return;
        }
        _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().log("mMoveStyle:" + content.moveStyle);
        var game_id = this.mConfig.game_id;
        if (game_id.indexOf(".") > -1) {
            game_id = game_id.split(".")[1];
        }
        var mainGameConfigUrl = this.gameConfigUrl;
        this.loadGameConfig(mainGameConfigUrl)
            .then(function (gameConfig) {
            _this.mElementStorage.setGameConfig(gameConfig);
            _this.createGame(content.keyEvents);
            _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().debug("created game suc");
        })
            .catch(function (err) {
            _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().log(err);
        });
    };
    World.prototype._newGame = function () {
        if (this.mGame) {
            return this.mGame;
        }
        this.gameConfig = {
            type: Phaser.AUTO,
            parent: this.mConfig.parent || "game",
            scene: null,
            disableContextMenu: true,
            transparent: false,
            backgroundColor: 0x0,
            resolution: 1,
            fps: {
                target: 30,
            },
            dom: {
                createContainer: true,
            },
            plugins: {
                global: [
                    {
                        key: "rexButton",
                        plugin: _lib_rexui_lib_plugins_button_plugin_js__WEBPACK_IMPORTED_MODULE_20__[/* default */ "a"],
                        start: true,
                    },
                    {
                        key: "rexNinePatchPlugin",
                        plugin: _lib_rexui_lib_plugins_ninepatch_plugin_js__WEBPACK_IMPORTED_MODULE_17__[/* default */ "a"],
                        start: true,
                    },
                    {
                        key: "rexInputText",
                        plugin: _lib_rexui_lib_plugins_inputtext_plugin_js__WEBPACK_IMPORTED_MODULE_18__[/* default */ "a"],
                        start: true,
                    },
                    {
                        key: "rexBBCodeTextPlugin",
                        plugin: _lib_rexui_lib_plugins_bbcodetext_plugin_js__WEBPACK_IMPORTED_MODULE_19__[/* default */ "a"],
                        start: true,
                    },
                ],
                scene: [
                    {
                        key: "DragonBones",
                        plugin: dragonBones.phaser.plugin.DragonBonesScenePlugin,
                        mapping: "dragonbone",
                    },
                    { key: "rexUI", plugin: _lib_rexui_lib_ui_ui_plugin_js__WEBPACK_IMPORTED_MODULE_21__[/* default */ "a"], mapping: "rexUI" },
                ],
            },
            render: {
                pixelArt: false,
                roundPixels: true,
            },
            scale: {
                mode: Phaser.Scale.NONE,
                width: this.mConfig.width * window.devicePixelRatio,
                height: this.mConfig.height * window.devicePixelRatio,
                zoom: 1 / window.devicePixelRatio,
            },
        };
        Object.assign(this.gameConfig, this.mConfig);
        this.mGame = new phaser__WEBPACK_IMPORTED_MODULE_0__["Game"](this.gameConfig);
        this.mGame.input.mouse.capture = true;
        if (this.mGame.device.os.desktop) {
            this.mUIScale = 1;
        }
        if (this.mRoomMamager)
            this.mRoomMamager.addPackListener();
        if (this.mUiManager)
            this.mUiManager.addPackListener();
        if (this.mRoleManager)
            this.mRoleManager.register();
        if (this.mElementStorage) {
            this.mElementStorage.on("SCENE_PI_LOAD_COMPELETE", this.loadSceneConfig);
        }
        // if (this.mCharacterManager) this.mCharacterManager.register();
        return this.mGame;
    };
    World.prototype.gameCreated = function () {
        if (this.connection) {
            var pkt = new net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PBpacket"](pixelpai_proto__WEBPACK_IMPORTED_MODULE_3__["op_virtual_world"].OPCODE._OP_CLIENT_REQ_GATEWAY_GAME_CREATED);
            this.connection.send(pkt);
            if (this.mCallBack) {
                this.mCallBack();
            }
            if (this.mConfig.game_created) {
                this.mConfig.game_created();
            }
        }
        else {
            // Logger.getInstance().error("connection is undefined");
        }
        this.mGame.scale.on("enterfullscreen", this.onFullScreenChange, this);
        this.mGame.scale.on("leavefullscreen", this.onFullScreenChange, this);
        // this.mGame.scale.on("orientationchange", this.onOrientationChange, this);
    };
    World.prototype.loadGameConfig = function (remotePath) {
        var _this = this;
        var configPath = _utils_resUtil__WEBPACK_IMPORTED_MODULE_14__[/* ResUtils */ "f"].getGameConfig(remotePath);
        return Object(_utils_http__WEBPACK_IMPORTED_MODULE_13__[/* load */ "a"])(configPath, "arraybuffer").then(function (req) {
            _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().log("start decodeConfig");
            return _this.decodeConfigs(req);
        });
    };
    World.prototype.decodeConfigs = function (req) {
        return new Promise(function (resolve, reject) {
            var arraybuffer = req.response;
            if (arraybuffer) {
                try {
                    var gameConfig = new game_capsule__WEBPACK_IMPORTED_MODULE_15__["Lite"]();
                    gameConfig.deserialize(new Uint8Array(arraybuffer));
                    _utils_log__WEBPACK_IMPORTED_MODULE_6__[/* Logger */ "a"].getInstance().log("TCL: World -> gameConfig", gameConfig);
                    resolve(gameConfig);
                }
                catch (error) {
                    reject(error);
                }
            }
            else {
                reject("error");
            }
        });
    };
    World.prototype.resumeScene = function () {
        if (this.mConfig.isEditor) {
            return;
        }
        this.mRoomMamager.onFocus();
        if (this.mGame && this.mConfig.platform === "pc") {
            var pauseScene = this.mGame.scene.getScene(_scenes_gamepause__WEBPACK_IMPORTED_MODULE_25__[/* GamePauseScene */ "a"].name);
            if (pauseScene) {
                pauseScene.sleep();
                this.mGame.scene.stop(_scenes_gamepause__WEBPACK_IMPORTED_MODULE_25__[/* GamePauseScene */ "a"].name);
            }
        }
    };
    World.prototype.pauseScene = function () {
        if (this.mConfig.isEditor) {
            return;
        }
        this.mRoomMamager.onBlur();
        if (this.mGame && this.mConfig.platform === "pc") {
            if (!this.mGame.scene.getScene(_scenes_gamepause__WEBPACK_IMPORTED_MODULE_25__[/* GamePauseScene */ "a"].name)) {
                this.mGame.scene.add(_scenes_gamepause__WEBPACK_IMPORTED_MODULE_25__[/* GamePauseScene */ "a"].name, _scenes_gamepause__WEBPACK_IMPORTED_MODULE_25__[/* GamePauseScene */ "a"]);
            }
            this.mGame.scene.start(_scenes_gamepause__WEBPACK_IMPORTED_MODULE_25__[/* GamePauseScene */ "a"].name, { world: this });
        }
    };
    World.SCALE_CHANGE = "scale_change";
    return World;
}(net_socket_packet__WEBPACK_IMPORTED_MODULE_2__["PacketHandler"]));


/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ })
])]);